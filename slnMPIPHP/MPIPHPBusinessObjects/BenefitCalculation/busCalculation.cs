#region Using directives

using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Text;
using System.Data;
using Sagitec.Common;
using Sagitec.DBUtility;
using Sagitec.BusinessObjects;
using MPIPHP.CustomDataObjects;
using MPIPHP.DataObjects;
using System.Linq;
using System.Data.SqlClient;
using Sagitec.DataObjects;
using Sagitec.CustomDataObjects;
using System.Collections.Generic;

#endregion

namespace MPIPHP.BusinessObjects
{
    [Serializable]
    public class busCalculation : busMPIPHPBase
    {

        #region Properties
        //public int iintIAPPayeeAccountID;
        //public int iintL52SplAccPayeeAccountID;
        //public int iintL161SplAccPayeeAccountID;
        //public int iintMPIPayeeAccountID;
        //public int iintL52PayeeAccountID;
        //public int iintL161PayeeAccountID;
        //public int iintL600PayeeAccountID;
        //public int iintL666PayeeAccountID;
        //public int iintL700PayeeAccountID;
        //public int iintEEUVHPPayeeAccountID;
        //public string astrFundName;

        //public bool iblnIAPPayeeAccntCreated { get; set; }
        //public bool iblnL52SpecialAccPayeeAccountCreated { get; set; }
        //public bool iblnL161SpecialAccPayeeAccountCreated { get; set; }
        //public bool iblnEEUVHPPayeeAccountCreated { get; set; }
        //public bool iblnMPIPayeeAccountCreated { get; set; }
        public string lstrRateType { get; set; }
        public decimal ldecHoursAfterWithdrawal { get; set; }

        public decimal ldecAltPayeeFraction { get; set; }
        public decimal ldecAltPayeeMinimum_Guarantee_Amount { get; set; }



        #endregion
        /// <summary>
        /// Get Normal Retirement Age for all plans
        /// </summary>
        /// <param name="aintPlanId"></param>
        /// <returns></returns>
        public decimal GetNormalRetirementAge(int aintPlanId)
        {
            decimal ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_MPIPP;
            switch (aintPlanId)
            {
                case busConstant.MPIPP_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_MPIPP;
                    break;
                case busConstant.IAP_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_IAP;
                    break;
                case busConstant.LOCAL_52_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_LOCAL_52;
                    break;
                case busConstant.LOCAL_600_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_LOCAL_600;
                    break;
                case busConstant.LOCAL_666_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_LOCAL_666;
                    break;
                case busConstant.LOCAL_161_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_LOCAL_161;
                    break;
                case busConstant.LOCAL_700_PLAN_ID:
                    ldecNormalRetirementAge = busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_LOCAL_700;
                    break;
            }

            return ldecNormalRetirementAge;
        }

        #region GetEarliestRTMTDate
        //public DateTime GetEarliestRetirementDate(string astrBenefitType,int aintBeginAge,bool albnQdro)
        //{
        //    for (int i = aintBeginAge; i <= 66; i++)
        //    {
        //        if (this.ibusPerson.icdoPerson.idtDateofBirth.Day == 1)
        //        {
        //            this.ibusBenefitApplication.icdoBenefitApplication.retirement_date = this.ibusPerson.icdoPerson.idtDateofBirth.AddYears(i);
        //        }
        //        else
        //        {
        //            this.ibusBenefitApplication.icdoBenefitApplication.retirement_date = busGlobalFunctions.GetLastDayofMonth(this.ibusPerson.icdoPerson.idtDateofBirth.AddYears(i)).AddDays(1);
        //        }

        //        if (astrBenefitType == busConstant.BENEFIT_TYPE_RETIREMENT && this.ibusBenefitApplication.icdoBenefitApplication.retirement_date <= DateTime.Now)                        
        //              this.ibusBenefitApplication.icdoBenefitApplication.retirement_date = busGlobalFunctions.GetLastDayofMonth(DateTime.Now).AddDays(1);


        //        this.ibusBenefitApplication.idecAge = busGlobalFunctions.CalculatePersonAgeInDec(this.ibusPerson.icdoPerson.idtDateofBirth, this.ibusBenefitApplication.icdoBenefitApplication.retirement_date);

        //        switch(astrBenefitType)
        //        {
        //            case busConstant.BENEFIT_TYPE_RETIREMENT:
        //                 this.ibusBenefitApplication.DetermineBenefitSubTypeandEligibility_Retirement();
        //                 break;


        //            case busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT:
        //                  this.ibusBenefitApplication.SetupPrerequisitesDeath();
        //                  break;
        //        }

        //        //if (!(this.ibusBenefitApplication.NotEligible) && this.ibusBenefitApplication.iclbEligiblePlans.Where(plan => plan == lstrPlanCode).Count() > 0)
        //        //{
        //        //    this.icdoBenefitCalculationHeader.istrRetirementType = this.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == this.icdoBenefitCalculationHeader.iintPlanId).FirstOrDefault().icdoPersonAccount.istrRetirementSubType;
        //        //    break;
        //        //}
        //    }
        //}
        #endregion

        /// <summary>
        /// Get Table A Factor
        /// </summary>
        /// <param name="adecAge"></param>
        /// <param name="aintPlanId"></param>
        /// <param name="aintPlanYear"></param>
        /// <returns></returns>
        public decimal GetTableAFactor(decimal adecAge, int aintPlanId, int aintPlanYear)
        {
            decimal ldecTableAFactor = 1.00m;
            decimal ldecNormalRetirementAge = GetNormalRetirementAge(aintPlanId);

            //PIR-557 CHANGE - ROHAN 08212014 
            // DO NOT PROJECT FACTOR A AFTER AGE 65. Age diff. will remain zero after age 65.
            //decimal ldecAgeDiff = Math.Abs(ldecNormalRetirementAge - adecAge);- //Old Code
            decimal ldecAgeDiff = Math.Abs(ldecNormalRetirementAge - Math.Min(adecAge, ldecNormalRetirementAge));

            double ldblFactor1 = 0.0D, ldblFactor2 = 0.0D, ldblFactor3 = 0.0D, ldblFinalFactor = 0.0D;


            if (ldecAgeDiff > busConstant.ZERO_DECIMAL)
            {
                DataTable ldtbTableAFactors = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetTableAFactorForLateRetirement",
                    new object[] { aintPlanYear < 1988 ? 1988 : aintPlanYear, aintPlanId });

                if (ldtbTableAFactors.Rows.Count > 0)
                {
                    ldblFactor1 = Convert.ToDouble(ldtbTableAFactors.Rows[0][0]);
                    ldblFactor2 = Convert.ToDouble(ldtbTableAFactors.Rows[0][1]);
                    ldblFactor3 = Convert.ToDouble(ldtbTableAFactors.Rows[0][2]);
                }

                //PIR 345: Done rounding with 3rd extra parameter for table A and Table B
                if (aintPlanYear < 2008)
                {
                    if (ldecAgeDiff <= 7)
                    {
                        ldblFinalFactor = Math.Pow(ldblFactor1, Convert.ToDouble(ldecAgeDiff));
                        ldecTableAFactor = Convert.ToDecimal(Math.Round(ldblFinalFactor, 3, MidpointRounding.AwayFromZero));
                    }
                    else if (ldecAgeDiff > 15)
                    {
                        ldblFinalFactor = Math.Pow(ldblFactor1, 7) * Math.Pow(ldblFactor2, 8) * Math.Pow(ldblFactor3, Convert.ToDouble(ldecAgeDiff - 15));
                        ldecTableAFactor = Convert.ToDecimal(Math.Round(ldblFinalFactor, 3, MidpointRounding.AwayFromZero));
                    }
                    else
                    {
                        ldblFinalFactor = Math.Pow(ldblFactor1, 7) * Math.Pow(ldblFactor2, Convert.ToDouble(ldecAgeDiff - 7));
                        ldecTableAFactor = Convert.ToDecimal(Math.Round(ldblFinalFactor, 3, MidpointRounding.AwayFromZero));
                    }
                }
                else
                {
                    if (ldecAgeDiff <= 5)
                    {
                        ldblFinalFactor = Math.Pow(ldblFactor1, Convert.ToDouble(ldecAgeDiff));
                        ldecTableAFactor = Convert.ToDecimal(Math.Round(ldblFinalFactor, 3, MidpointRounding.AwayFromZero));
                    }
                    else if (ldecAgeDiff > 20)
                    {
                        ldblFinalFactor = Math.Pow(ldblFactor1, 5) * Math.Pow(ldblFactor2, 15) * Math.Pow(ldblFactor3, Convert.ToDouble(ldecAgeDiff - 20));
                        ldecTableAFactor = Convert.ToDecimal(Math.Round(ldblFinalFactor, 3, MidpointRounding.AwayFromZero));
                    }
                    else
                    {
                        ldblFinalFactor = Math.Pow(ldblFactor1, 5) * Math.Pow(ldblFactor2, Convert.ToDouble(ldecAgeDiff - 5));
                        ldecTableAFactor = Convert.ToDecimal(Math.Round(ldblFinalFactor, 3, MidpointRounding.AwayFromZero));
                    }
                }
            }

            return ldecTableAFactor;
        }

        /// <summary>
        /// Get Table B Factor
        /// </summary>
        /// <param name="astrBenefitAccountTypeValue"></param>
        /// <param name="astrBenefitAccountSubtypeValue"></param>
        /// <param name="aintBenefitProvisionId"></param>
        /// <param name="adecAge"></param>
        /// <param name="aintPlanYear"></param>
        /// <returns></returns>
        public decimal GetTableBFactor(string astrBenefitAccountTypeValue, string astrBenefitAccountSubtypeValue, int aintBenefitProvisionId, decimal adecAge, int aintPlanYear)
        {
            decimal ldecTableBFactor1 = busConstant.ZERO_DECIMAL, ldecTableBFactor2 = busConstant.ZERO_DECIMAL, ldecTableBFinalFactor = busConstant.ZERO_DECIMAL;
            DataTable ldtbTableBFator1 = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetTableBFactorForLateRetirement",
                new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge) < 65 ? 65 : Math.Floor(adecAge), aintPlanYear + 1 });

            if (ldtbTableBFator1.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator1.Rows[0][0].IsDBNull()))
            {
                ldecTableBFactor1 = Convert.ToDecimal(ldtbTableBFator1.Rows[0][0]);
            }
            else
            {
                ldtbTableBFator1 = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetLatestTableBFactorForLateRetirement",
                    new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge) < 65 ? 65 : Math.Floor(adecAge) });

                if (ldtbTableBFator1.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator1.Rows[0][0].IsDBNull()))
                {
                    ldecTableBFactor1 = Convert.ToDecimal(ldtbTableBFator1.Rows[0][0]);
                }
            }


            DataTable ldtbTableBFator2 = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetTableBFactorForLateRetirement",
                new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge + 1) > 90 ? 90 : Math.Floor(adecAge + 1), aintPlanYear + 1 });

            if (ldtbTableBFator2.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator2.Rows[0][0].IsDBNull()))
            {
                ldecTableBFactor2 = Convert.ToDecimal(ldtbTableBFator2.Rows[0][0]);
            }
            else
            {
                ldtbTableBFator2 = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetLatestTableBFactorForLateRetirement",
                    new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge + 1) > 90 ? 90 : Math.Floor(adecAge + 1) });
                if (ldtbTableBFator2.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator2.Rows[0][0].IsDBNull()))
                {
                    ldecTableBFactor2 = Convert.ToDecimal(ldtbTableBFator2.Rows[0][0]);
                }
            }

            if (ldecTableBFactor1 > busConstant.ZERO_DECIMAL || ldecTableBFactor2 > busConstant.ZERO_DECIMAL)
            {
                //ldecTableBFinalFactor = Math.Round(ldecTableBFactor1 + ((ldecTableBFactor2 - ldecTableBFactor1) / 12 * ((adecAge - Math.Floor(adecAge)) * 12)), 3, MidpointRounding.AwayFromZero);
                //PIR 1035
                ldecTableBFinalFactor = Math.Round(ldecTableBFactor1 + (ldecTableBFactor2 - ldecTableBFactor1) / 12 * ((adecAge - Math.Floor(adecAge)) * 12), 3, MidpointRounding.AwayFromZero);
                //ldecTableBFinalFactor = Math.Round(ldecTableBFactor1 + ((ldecTableBFactor1 - ldecTableBFactor2) * (adecAge - Math.Floor(adecAge))), 3);
            }

            if (ldecTableBFinalFactor == busConstant.ZERO_DECIMAL)
            {
                // Default it to 1.0
                ldecTableBFinalFactor = 1.0m;
            }


            return ldecTableBFinalFactor;
        }

        //PIR-557
        public decimal GetTableBFactorForLateRetr(string astrBenefitAccountTypeValue, string astrBenefitAccountSubtypeValue, int aintBenefitProvisionId, decimal adecAge, int aintPlanYear)
        {
            decimal ldecTableBFactor1 = busConstant.ZERO_DECIMAL;
            DataTable ldtbTableBFator1 = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetTableBFactorForLateRetirement",
                new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge) < 65 ? 65 : Math.Floor(adecAge), (aintPlanYear + 1) < 1988 ? 1988 : (aintPlanYear + 1) });

            if (ldtbTableBFator1.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator1.Rows[0][0].IsDBNull()))
            {
                ldecTableBFactor1 = Convert.ToDecimal(ldtbTableBFator1.Rows[0][0]);
            }
            else
            {
                // Default it to 1.0
                ldecTableBFactor1 = 1.0m;
            }

            return ldecTableBFactor1;
        }

        /// <summary>
        /// Get Total Hours worked
        /// </summary>
        /// <param name="astrPlanCode"></param>
        /// <param name="adtDateOfMarriage"></param>
        /// <param name="adtDateOfDivorce"></param>
        /// <param name="adtDeterminationDate"></param>
        /// <param name="aintTotalHours"></param>
        /// <param name="aintTotalHrsWorkedBetTwoDates"></param>
        public void GetTotalHoursWorked(string astrSSN, string astrPlanCode, DateTime adtDateOfDetermination,
                                           DateTime adtForfeitureDate, decimal adecThru79Hours, ref decimal adecTotalHours)
        {
            DateTime ldtMinDate = new DateTime(1753, 01, 01);

            if (adtForfeitureDate == DateTime.MinValue)
            {
                adtForfeitureDate = ldtMinDate;
            }
            //PIR - 1015
            if (astrPlanCode == busConstant.IAP)
            {
                adtDateOfDetermination = busGlobalFunctions.GetLastDateOfComputationYear(adtDateOfDetermination.Year - 1);
            }

            #region Get Total hours worked
            IDbConnection lconLegacy = DBFunction.GetDBConnection("OPUS");
            Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();

            IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
            lobjParameter.ParameterName = "@SSN";
            lobjParameter.DbType = DbType.String;
            lobjParameter.Value = astrSSN;//this.ibusPerson.icdoPerson.istrSSNNonEncrypted.ToString();
            lcolParameters.Add(lobjParameter);

            IDbDataParameter lobjParameter1 = DBFunction.GetDBParameter();
            lobjParameter1.ParameterName = "@PLAN_CODE";
            lobjParameter1.DbType = DbType.String;
            lobjParameter1.Value = astrPlanCode;
            lcolParameters.Add(lobjParameter1);

            IDbDataParameter lobjParameter2 = DBFunction.GetDBParameter();
            lobjParameter2.ParameterName = "@DATE_OF_DETERMINATION";
            lobjParameter2.DbType = DbType.DateTime;
            lobjParameter2.Value = adtDateOfDetermination;
            lcolParameters.Add(lobjParameter2);

            IDbDataParameter lobjParameter4 = DBFunction.GetDBParameter();
            lobjParameter4.ParameterName = "@FORFEITURE_DATE";
            lobjParameter4.DbType = DbType.DateTime;
            lobjParameter4.Value = adtForfeitureDate;
            lcolParameters.Add(lobjParameter4);

            IDbDataParameter lobjParameter3 = DBFunction.GetDBParameter();
            lobjParameter3.ParameterName = "@DENOMINATOR";
            lobjParameter3.DbType = DbType.Decimal;
            lobjParameter3.Precision = 7;
            lobjParameter3.Scale = 1;
            lobjParameter3.Direction = ParameterDirection.Output;
            lcolParameters.Add(lobjParameter3);

            DBFunction.DBExecuteProcedure("usp_GetQDROHoursBetweenForfeitureAndQDRODate", lcolParameters, lconLegacy, null);

            if (lcolParameters[4].Value.IsDBNull().Equals(busConstant.BOOL_FALSE))
            {
                if (astrPlanCode == busConstant.IAP)
                    adecTotalHours = Math.Round(Convert.ToDecimal(lcolParameters[4].Value) + adecThru79Hours, 1);
                else
                    adecTotalHours = Math.Round(Convert.ToDecimal(lcolParameters[4].Value), 1);
            }
            #endregion
        }

        /// <summary>
        ///Formula :  ((Accrued Benefit *QF1)+ QF3 +(Accrued Benefit * QF2))
        /// </summary>
        /// <param name="adecBenefitAmount"></param>
        /// <param name="adecAltPayeeFraction"></param>
        /// <param name="adecFlatAmount"></param>
        /// <param name="adecFlatPercent"></param>
        /// <returns></returns>
        /// 
        public decimal CalculateBenefitAmtBeforeConversion(decimal adecBenefitAmount, decimal adecAltPayeeFraction, decimal adecFlatAmount, decimal adecFlatPercent)
        {
            decimal ldecBenefitBeforeConversion = Math.Round(((adecBenefitAmount * adecAltPayeeFraction) +
                                                   (adecFlatAmount) + (adecBenefitAmount * adecFlatPercent) / 100), 2);
            return ldecBenefitBeforeConversion;
        }

        /// <summary>
        /// Calculate Life conversion factor
        /// </summary>
        /// <param name="aintParticipantAge"></param>
        /// <param name="aintAltPayeeAge"></param>
        /// <returns></returns>
        public decimal CalculateLifeConversionFactor(int aintParticipantAge, int aintAltPayeeAge, bool ablnIsParticipantDisabled = false)
        {
            decimal ldecLifeConversionFactor = 0;
            decimal ldecParticipantLifeFactor = GetQDROFactor(aintParticipantAge, busConstant.LIFE_ANNUTIY, ablnIsParticipantDisabled);
            decimal ldecAltPayeeLifeFactor = GetQDROFactor(aintAltPayeeAge, busConstant.LIFE_ANNUTIY, false);

            if (ldecParticipantLifeFactor != 0)
                ldecLifeConversionFactor = Math.Round((ldecParticipantLifeFactor / ldecAltPayeeLifeFactor), 3);

            return ldecLifeConversionFactor;
        }

        /// <summary>
        /// Find QDRO factor
        /// </summary>
        /// <param name="adecAge"></param>
        /// <param name="astrBenefitType"></param>
        /// <returns></returns>
        public decimal GetQDROFactor(decimal adecAge, string astrBenefitType, bool ablnIsParticipantDisabled)
        {
            decimal ldecFactor = 1;
            DataTable ldtbList;

            if (ablnIsParticipantDisabled)
            {
                ldtbList = busBase.Select("cdoQdroFactor.LoadQDROFactorforDisablity", new object[2] { astrBenefitType, adecAge });
                if (ldtbList.Rows.Count > 0)
                {
                    ldecFactor = Convert.ToDecimal(ldtbList.Rows[0][enmQdroFactor.early_reduction_factor_disability.ToString()]);
                }
            }
            else
            {
                ldtbList = busBase.Select("cdoQdroFactor.LoadQdroFactorByAgeandBenefitOption", new object[2] { astrBenefitType, adecAge });
                if (ldtbList.Rows.Count > 0)
                {

                    ldecFactor = Convert.ToDecimal(ldtbList.Rows[0][enmQdroFactor.early_reduction_factor.ToString()]);


                }
            }

            return ldecFactor;
        }


        /// <summary>
        /// Get Benefit for year 1988
        /// </summary>
        /// <param name="astrSSN"></param>
        /// <param name="acdoDummyWorkData"></param>
        /// <param name="astrRateType"></param>
        /// <param name="aintPlanYear"></param>
        /// <param name="aclbcdoPlanBenefitRate"></param>
        /// <returns></returns>
        public cdoDummyWorkData GetAccruedBenefitForYear1988(string astrSSN, cdoDummyWorkData acdoDummyWorkData, string astrRateType, int aintPlanYear, Collection<cdoPlanBenefitRate> aclbcdoPlanBenefitRate, int aintMPIQualifiedYears, DataTable adtWorkDataWeekly = null, bool ablnDataExtractionBatch = false)
        {
            DataTable ldtbWorkData2 = new DataTable();
            //decimal ldecRate = busConstant.ZERO_DECIMAL;
            string lstrQualifiedYearLimit = string.Empty;
            //decimal ldecTotalAccruedBenefit = busConstant.ZERO_DECIMAL;

            if (aintMPIQualifiedYears >= Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20))
            {
                lstrQualifiedYearLimit = busConstant.BenefitCalculation.QUALIFIED_YEARS_200;
            }
            else if (aintMPIQualifiedYears > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_10) &&
                     aintMPIQualifiedYears < Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20))
            {
                lstrQualifiedYearLimit = busConstant.BenefitCalculation.QUALIFIED_YEARS_20;
            }
            else
            {
                lstrQualifiedYearLimit = busConstant.BenefitCalculation.QUALIFIED_YEARS_10;
            }

            if (acdoDummyWorkData.bis_years_count > acdoDummyWorkData.vested_years_count)
            {
                // Participant has forfeited the Benefit Amount
                acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                                                            item.break_in_service_year == aintPlanYear && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault().rate;
                acdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
            }
            else
            {
                //// Check the current plan year 
                //if (acdoDummyWorkData.year > busConstant.BenefitCalculation.YEAR_1988)
                //{
                //    // Current PlanYear is greater than 1988, Hence use the rate after 08/01/1988
                //    acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                //                                            item.break_in_service_year == aintPlanYear && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault().rate;
                //    // Calculate the Benefit
                //    acdoDummyWorkData.idecBenefitAmount = acdoDummyWorkData.qualified_hours * acdoDummyWorkData.idecBenefitRate;
                //}
                //else if (acdoDummyWorkData.year < busConstant.BenefitCalculation.YEAR_1988)
                //{
                //    // Current PlanYear is greater than 1988, Hence use the rate after 08/01/1988
                //    acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                //                                            item.break_in_service_year == aintPlanYear && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_01_01_1988)).FirstOrDefault().rate;
                //    // Calculate the Benefit
                //    acdoDummyWorkData.idecBenefitAmount = acdoDummyWorkData.qualified_hours * acdoDummyWorkData.idecBenefitRate;
                //}
                //else if (acdoDummyWorkData.year == busConstant.BenefitCalculation.YEAR_1988)
                if (acdoDummyWorkData.year == busConstant.BenefitCalculation.YEAR_1988)
                {
                    if (acdoDummyWorkData.qualified_years_count < Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20) &&
                        acdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                    {
                        // Not eligible for Accrued benefit Calculation.
                        acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                                                                    item.break_in_service_year == aintPlanYear && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault().rate;
                        acdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                    }
                    else
                    {
                        // Current PlanYear is equal to 1988
                        // Fetch the Weekly Data for the Participant to calculate the YTD Benefit
                        SqlParameter[] lsqlParameterList = new SqlParameter[3];
                        SqlParameter lsqlParam1 = new SqlParameter("@SSN", DbType.String);
                        SqlParameter lsqlParam2 = new SqlParameter("@PLANYEAR", DbType.Int32);
                        SqlParameter lsqlParam3 = new SqlParameter("@PLANID", DbType.Int32);
                        utlConnection utlLegacyDBConnetion = HelperFunction.GetDBConnectionProperties("Legacy");
                        string astrLegacyDBConnetion = utlLegacyDBConnetion.istrConnectionString;

                        lsqlParam1.Value = astrSSN;
                        lsqlParameterList[0] = lsqlParam1;
                        lsqlParam2.Value = busConstant.BenefitCalculation.YEAR_1988;
                        lsqlParameterList[1] = lsqlParam2;
                        lsqlParam3.Value = busConstant.MPIPP_PLAN_ID;
                        lsqlParameterList[2] = lsqlParam3;
                        if (adtWorkDataWeekly.IsNull() && !ablnDataExtractionBatch)
                            ldtbWorkData2 = busGlobalFunctions.ExecuteSPtoGetDataTable("usp_GetWorkDataForPlanYear", astrLegacyDBConnetion, null, lsqlParameterList);
                        else if (adtWorkDataWeekly.IsNotNull() && adtWorkDataWeekly.Rows.Count > 0 && adtWorkDataWeekly.Select("ComputationYear = 1988").Count() > 0)
                            ldtbWorkData2 = adtWorkDataWeekly.FilterTable(utlDataType.Numeric, "ComputationYear", busConstant.BenefitCalculation.YEAR_1988).CopyToDataTable();


                        if (ldtbWorkData2.IsNotNull() && ldtbWorkData2.Rows.Count > 0)
                        {
                            decimal ldecCreditHoursFromJantoJuly = busConstant.ZERO_DECIMAL;
                            decimal ldecCreditHoursFromAugToDec = busConstant.ZERO_DECIMAL;

                            foreach (DataRow ldrWordData in ldtbWorkData2.Rows)
                            {
                                if (!Convert.ToBoolean(ldrWordData["PensionHours"].IsDBNull()))
                                {
                                    if ((Convert.ToDateTime(ldrWordData["FromDate"].ToString()).Year <= busConstant.BenefitCalculation.YEAR_1988) ||
                                        (Convert.ToDateTime(ldrWordData["FromDate"].ToString()).Year == busConstant.BenefitCalculation.YEAR_1988 && Convert.ToDateTime(ldrWordData["FromDate"].ToString()).Month < 8))
                                    {
                                        ldecCreditHoursFromJantoJuly = ldecCreditHoursFromJantoJuly + Convert.ToDecimal(ldrWordData["PensionHours"].ToString());
                                    }
                                    else //if (Convert.ToDateTime(ldrWordData[1].ToString()).Year == busConstant.BenefitCalculation.YEAR_1987 && Convert.ToDateTime(ldrWordData[1].ToString()).Month >= 8)
                                    {
                                        ldecCreditHoursFromAugToDec = ldecCreditHoursFromAugToDec + Convert.ToDecimal(ldrWordData["PensionHours"].ToString());
                                    }
                                }
                            }

                            // Calculate the Accured Benefit
                            acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                                                                item.break_in_service_year == busConstant.BenefitCalculation.YEAR_1987 && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_01_01_1988)).FirstOrDefault().rate;
                            acdoDummyWorkData.idecBenefitAmount = ldecCreditHoursFromJantoJuly * acdoDummyWorkData.idecBenefitRate;

                            acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                                                                item.break_in_service_year == busConstant.BenefitCalculation.YEAR_1987 && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault().rate;
                            acdoDummyWorkData.idecBenefitAmount = acdoDummyWorkData.idecBenefitAmount + (ldecCreditHoursFromAugToDec * acdoDummyWorkData.idecBenefitRate);

                        }
                    }
                }
                else
                {
                    acdoDummyWorkData.idecBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType && item.qualified_year_limit_value == lstrQualifiedYearLimit &&
                                                            item.break_in_service_year == aintPlanYear && item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault().rate;
                }
            }
            return acdoDummyWorkData;
        }

        //Kunal : Prod Pir 196,198 : Rate type needs to be added to get correct plan year for 1979 is only valid type c should not be pulled for type b.
        /// <summary>
        /// Get Plan Year
        /// </summary>
        /// <param name="aintYear"></param>
        /// <param name="aclbcdoPlanBenefitRate"></param>
        /// <returns></returns>
        //10 Percent
        //PIR:1095 
        public int GetPlanYear(int aintYear, Collection<cdoPlanBenefitRate> aclbcdoPlanBenefitRate, DateTime adtRetirementDate, string astrRateType, int aintBreakInServiceYear = 0)//10 Percent
        {
            decimal ldecPlanYear = busConstant.ZERO_DECIMAL;

            if (adtRetirementDate.IsNull() || adtRetirementDate == DateTime.MinValue)
                ldecPlanYear = aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= aintYear && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year;
            else
                ldecPlanYear = aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= aintYear && adtRetirementDate >= item.effective_date && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year;

            if (aintBreakInServiceYear > 0 && aclbcdoPlanBenefitRate.Where(item => item.break_in_service_year == ldecPlanYear
                                              && item.effective_end_year.IsNotNull() && item.effective_end_year > 0 && aintBreakInServiceYear >= item.break_in_service_year && aintBreakInServiceYear <= item.effective_end_year && item.rate_type_value == astrRateType).Count() > 0)
            {
                //Second 10% increase
                if (aintBreakInServiceYear >= 2017 && aintBreakInServiceYear <= 2020)  //adding this logic use 2006 rate for brek years in 2017-2020 active increase
                    ldecPlanYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= 2005 && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);
                //Third 10% increase
                else if (aintBreakInServiceYear >= 2021 && aintBreakInServiceYear <= 2023)  //adding this logic use 2006 rate for brek years in 2021-2023 active increase
                    ldecPlanYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= 2005 && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);
                else
                    ldecPlanYear = aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= ldecPlanYear - 1 && adtRetirementDate >= item.effective_date && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year;
            }

            return Convert.ToInt32(ldecPlanYear);
        }


        public decimal GetBenefitRateForPension(string astrRateType, int aintTotalQualifiedYearCount, int aintYear, Collection<cdoPlanBenefitRate> aclbcdoPlanBenefitRate,
            DateTime adtComputationYearEndDate, int aintBISYearsCount, DateTime adtRetirementDate, string astrBenefitTypeValue,
            DateTime adtReEmployedPtpRetirementDate = default(DateTime), DateTime adtMinimumDistributionDate = default(DateTime), bool ablnIsMD = false)//PIR: 1095
        {
            decimal ldecRate = busConstant.ZERO_DECIMAL;
            aintYear = Math.Max(aintYear, 1954);


            //PIR 10 PERCENT
            if (aclbcdoPlanBenefitRate != null && aclbcdoPlanBenefitRate.Where(item => item.effective_end_year.IsNotNull() && item.effective_end_year == aintYear && item.effective_end_year >= adtComputationYearEndDate.Year
                                        && item.rate_type_value == astrRateType).Count() > 0)
            {
                aintYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => item.effective_end_year.IsNotNull() && item.effective_end_year == aintYear &&
                            item.effective_end_year >= adtComputationYearEndDate.Year && item.rate_type_value == astrRateType).FirstOrDefault().break_in_service_year);
            }

            //PIR 10 PERCENT RMD
            if (aclbcdoPlanBenefitRate.Where(item => item.break_in_service_year == aintYear
                                            && item.effective_end_year.IsNotNull() && item.effective_end_year > 0
                                            && item.rate_type_value == astrRateType
                                            && item.minimum_distribution_effective_date != DateTime.MinValue
                                            && item.minimum_distribution_effective_date.Year > aintYear
                                            && (astrBenefitTypeValue == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION || astrBenefitTypeValue == busConstant.RETIREMENT_TYPE_LATE)
                                            && ((ablnIsMD && adtMinimumDistributionDate.Year < item.minimum_distribution_effective_date.Year) ||
                                                (!ablnIsMD && adtMinimumDistributionDate.Year < item.minimum_distribution_effective_date.Year && adtRetirementDate > adtMinimumDistributionDate && adtRetirementDate.Year >= adtComputationYearEndDate.Year && adtRetirementDate.Year > item.effective_end_year)) //Ticket - 87971 
                                            && item.effective_end_year >= adtComputationYearEndDate.Year).Count() > 0)
            {
                aintYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= aintYear - 1 && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);
            }

            //PIR: 1095
            if (aclbcdoPlanBenefitRate != null && adtReEmployedPtpRetirementDate != DateTime.MinValue &&
                (aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) == aintYear && item.reemployed_accrual_eligible_from_retr_dt != DateTime.MinValue
                && adtReEmployedPtpRetirementDate < item.reemployed_accrual_eligible_from_retr_dt).Count() > 0))
            {
                aintYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= aintYear - 1 && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);
            }


            if (aintBISYearsCount > 2 && aclbcdoPlanBenefitRate.Where(item => item.break_in_service_year == aintYear
                                            && item.effective_end_year.IsNotNull() && item.effective_end_year > 0 && adtComputationYearEndDate.Year >= item.break_in_service_year && adtComputationYearEndDate.Year <= item.effective_end_year
                                            && item.rate_type_value == astrRateType).Count() > 0)
            {
                aintYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= aintYear - 1 && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);
            }

            //RID 114524 Re-employed hours are not eligible for second 10 percent Increase
            if (adtComputationYearEndDate.Year >= 2017 && adtReEmployedPtpRetirementDate != DateTime.MinValue && adtComputationYearEndDate.Year >= adtReEmployedPtpRetirementDate.Year)  //adding this logic use 2006 rate for re-employed years 
                aintYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= 2005 && adtRetirementDate >= item.effective_date && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);

            //Second 10 percent increase (This is code is working if only non qualified years are old rate.
            //if (aintBISYearsCount > 0 && aintYear >= 2014)
            //    aintYear = Convert.ToInt32(aclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.break_in_service_year) <= 2005 && item.rate_type_value == astrRateType).OrderByDescending(item => item.break_in_service_year).ToList().ToCollection().FirstOrDefault().break_in_service_year);

            if (astrRateType == busConstant.BenefitCalculation.PLAN_C && aintYear >= 1990)
            {
                astrRateType = busConstant.BenefitCalculation.PLAN_Ca;
            }
            else if (astrRateType == busConstant.BenefitCalculation.PLAN_Ca && aintYear < 1990)
            {
                astrRateType = busConstant.BenefitCalculation.PLAN_C;
            }

            if (aintYear != 1987)
            {
                if (aintTotalQualifiedYearCount > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20))
                {
                    cdoPlanBenefitRate lcdoPlanBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType &&
                                                            item.qualified_year_limit_value == busConstant.BenefitCalculation.QUALIFIED_YEARS_200 &&
                                                            item.break_in_service_year == aintYear).FirstOrDefault();
                    if (lcdoPlanBenefitRate != null && lcdoPlanBenefitRate.plan_benefit_rate_id > 0)
                    {
                        ldecRate = lcdoPlanBenefitRate.rate;
                    }
                }
                else if (aintTotalQualifiedYearCount > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_10) && aintTotalQualifiedYearCount <= Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20))
                {
                    cdoPlanBenefitRate lcdoPlanBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType &&
                                                            item.qualified_year_limit_value == busConstant.BenefitCalculation.QUALIFIED_YEARS_20 &&
                                                            item.break_in_service_year == aintYear).FirstOrDefault();
                    if (lcdoPlanBenefitRate != null && lcdoPlanBenefitRate.plan_benefit_rate_id > 0)
                    {
                        ldecRate = lcdoPlanBenefitRate.rate;
                    }
                }
                else if (aintTotalQualifiedYearCount <= Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_10))
                {
                    cdoPlanBenefitRate lcdoPlanBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType &&
                                                            item.qualified_year_limit_value == busConstant.BenefitCalculation.QUALIFIED_YEARS_10 &&
                                                            item.break_in_service_year == aintYear).FirstOrDefault();
                    if (lcdoPlanBenefitRate != null && lcdoPlanBenefitRate.plan_benefit_rate_id > 0)
                    {
                        ldecRate = lcdoPlanBenefitRate.rate;
                    }
                }
            }
            else if (aintYear == 1987)
            {
                if (aintTotalQualifiedYearCount > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20))
                {
                    cdoPlanBenefitRate lcdoPlanBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType &&
                                                            item.qualified_year_limit_value == busConstant.BenefitCalculation.QUALIFIED_YEARS_200 && item.break_in_service_year == aintYear &&
                                                            item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault();
                    if (lcdoPlanBenefitRate != null && lcdoPlanBenefitRate.plan_benefit_rate_id > 0)
                    {
                        ldecRate = lcdoPlanBenefitRate.rate;
                    }
                }
                else if (aintTotalQualifiedYearCount > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_10) && aintTotalQualifiedYearCount <= Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20))
                {
                    cdoPlanBenefitRate lcdoPlanBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType &&
                                                            item.qualified_year_limit_value == busConstant.BenefitCalculation.QUALIFIED_YEARS_20 && item.break_in_service_year == aintYear &&
                                                            item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault();
                    if (lcdoPlanBenefitRate != null && lcdoPlanBenefitRate.plan_benefit_rate_id > 0)
                    {
                        ldecRate = lcdoPlanBenefitRate.rate;
                    }
                }
                else if (aintTotalQualifiedYearCount <= Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_10))
                {
                    cdoPlanBenefitRate lcdoPlanBenefitRate = aclbcdoPlanBenefitRate.Where(item => item.rate_type_value == astrRateType &&
                                                            item.qualified_year_limit_value == busConstant.BenefitCalculation.QUALIFIED_YEARS_10 && item.break_in_service_year == aintYear &&
                                                            item.effective_date == Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1988)).FirstOrDefault();
                    if (lcdoPlanBenefitRate != null && lcdoPlanBenefitRate.plan_benefit_rate_id > 0)
                    {
                        ldecRate = lcdoPlanBenefitRate.rate;
                    }
                }
            }

            return ldecRate;
        }

        public decimal GetEarlyReductionFactor(int aintBenefitProvisionId, string astrBenefitProvisionTypeValue, string astrBenefitProvisionSubTypeValue, int aintAge)
        {
            object lobjERF = DBFunction.DBExecuteScalar("cdoBenefitProvisionBenefitTypeFactor.GetEarlyReductionBenefitFactor", new object[4] { aintBenefitProvisionId, astrBenefitProvisionTypeValue, astrBenefitProvisionSubTypeValue, aintAge },
                                                         iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
            if (lobjERF.IsNotNull())
            {
                return (decimal)lobjERF;
            }

            return 1;
        }

        public int GetPlanBenefitId(int aintPlanId, string astrBenefitOption)
        {
            object lintPlanBenefitId;
            lintPlanBenefitId = DBFunction.DBExecuteScalar("cdoPlanBenefitXr.GetPlanBenefitId", new object[2] { aintPlanId, astrBenefitOption }, iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

            if (lintPlanBenefitId.IsNotNull())
                return (int)lintPlanBenefitId;
            else
                return busConstant.ZERO_INT;
        }

        // PIR - 760
        public decimal GetRetirementL600Factor(string astrBenefitOptionValue, DateTime idtDateofBirth, DateTime beneficiary_person_date_of_birth)
        {
            decimal ldecBenefitFactor = new decimal();

            switch (astrBenefitOptionValue)
            {
                case busConstant.JOINT_50_PERCENT_POPUP_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.94M, .005M, idtDateofBirth, beneficiary_person_date_of_birth);
                    break;
                case busConstant.JOINT_75_PERCENT_SURVIVOR_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.85m, .005m, idtDateofBirth, beneficiary_person_date_of_birth);
                    break;

            }
            ldecBenefitFactor = Math.Round(ldecBenefitFactor, 3);
            return ldecBenefitFactor;
        }

        // PIR - 760
        public decimal GetRetirementL666Factor(string astrBenefitOptionValue, DateTime idtDateofBirth, DateTime beneficiary_person_date_of_birth)
        {
            decimal ldecBenefitFactor = new decimal();
            switch (astrBenefitOptionValue)
            {
                case busConstant.JOINT_50_PERCENT_POPUP_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.89m, .004m, idtDateofBirth, beneficiary_person_date_of_birth);
                    break;
                case busConstant.JOINT_75_PERCENT_SURVIVOR_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.81m, .004m, idtDateofBirth, beneficiary_person_date_of_birth);
                    break;

            }
            ldecBenefitFactor = Math.Round(ldecBenefitFactor, 3);
            return ldecBenefitFactor;
        }

        // PIR - 371
        public decimal GetRetirementL52Factor(string astrBenefitOptionValue, DateTime idtDateofBirth, DateTime beneficiary_person_date_of_birth)
        {
            decimal ldecBenefitFactor = new decimal();
            switch (astrBenefitOptionValue)
            {
                case busConstant.JOINT_50_PERCENT_POPUP_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.94m, .005m, idtDateofBirth, beneficiary_person_date_of_birth);
                    break;
                case busConstant.JOINT_75_PERCENT_SURVIVOR_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.895m, .006m, idtDateofBirth, beneficiary_person_date_of_birth);
                    break;
                case busConstant.JOINT_100_PERCENT_POPUP_ANNUITY:
                    ldecBenefitFactor = GetBenefitOptionFactor(.85m, .006m, idtDateofBirth, beneficiary_person_date_of_birth);

                    break;

            }
            ldecBenefitFactor = Math.Round(ldecBenefitFactor, 3);
            return ldecBenefitFactor;
        }
        /// <summary>
        /// Formula Holds True For L600,L666,L52
        /// Method changed on 10th Oct, 2014 for calculate age diff here, because this method is used commonly for L600,L666,L52 
        /// </summary>
        /// <param name="adecMainFactor"></param>
        /// <param name="adecAgeDiffFactor"></param>
        /// <param name="adecAgeDiff"></param>
        /// <returns></returns>
        public decimal GetBenefitOptionFactor(decimal adecMainFactor, decimal adecAgeDiffFactor, DateTime idtDateofBirth, DateTime beneficiary_person_date_of_birth)
        {
            // PIR - 760 & 371
            decimal adecAgeDiff = 0;
            if (beneficiary_person_date_of_birth > idtDateofBirth)
            {
                adecAgeDiff = busGlobalFunctions.CalculatePersonAge(idtDateofBirth, beneficiary_person_date_of_birth);
            }
            else
            {
                adecAgeDiff = busGlobalFunctions.CalculatePersonAge(beneficiary_person_date_of_birth, idtDateofBirth) * -1;
            }

            decimal ldecBenefitOptionFactor = new decimal();
            ldecBenefitOptionFactor = adecMainFactor - (adecAgeDiff * adecAgeDiffFactor);
            ldecBenefitOptionFactor = Math.Min(ldecBenefitOptionFactor, 0.99M);
            return ldecBenefitOptionFactor;

        }

        public decimal GetBenefitOptionFactor(string astrBenefitTypeValue, int aintPlanBenefitId, int aintParticipantAge, int aintBeneficiaryAge, int aintReferenceNumber = 0, bool ablnReEmployedFlag = false)// Optional parameters added as per PIR 275 Requirement -- Need to take factors from different table
        {
            object lobjBenefitOptionFactor = null;
            if (!ablnReEmployedFlag)
            {
                if (aintBeneficiaryAge.IsNotNull() && aintBeneficiaryAge != 0)
                {
                    lobjBenefitOptionFactor = DBFunction.DBExecuteScalar("cdoBenefitProvisionBenefitOptionFactor.GetBenefitOptionFactor", new object[] { astrBenefitTypeValue, aintPlanBenefitId, aintParticipantAge, aintBeneficiaryAge },
                                                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                }
                else
                {
                    lobjBenefitOptionFactor = DBFunction.DBExecuteScalar("cdoBenefitProvisionBenefitOptionFactor.GetBenefitOptionFactorForParticipantOnly", new object[] { astrBenefitTypeValue, aintPlanBenefitId, aintParticipantAge },
                                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                }
                if (lobjBenefitOptionFactor.IsNotNull())
                {
                    return Math.Round((decimal)lobjBenefitOptionFactor, 6);
                }
            }
            #region PROD PIR 275
            //This part is implemented to get factors for Re-employed Participants only as per mentioned table in PIR
            // As per PIR 275 Requirement -- Need to take factors from different table
            else
            {
                if (aintPlanBenefitId == 7)
                {
                    if (aintBeneficiaryAge.IsNotNull() && aintBeneficiaryAge != 0)
                    {
                        lobjBenefitOptionFactor = DBFunction.DBExecuteScalar("cdoBenefitProvisionBenefitOptionFactor.GetBenefitOptionFactorFor10Yr", new object[] { astrBenefitTypeValue, aintPlanBenefitId, aintParticipantAge, aintBeneficiaryAge, aintReferenceNumber },
                                                                                     iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                    }
                    else
                    {
                        lobjBenefitOptionFactor = DBFunction.DBExecuteScalar("cdoBenefitProvisionBenefitOptionFactor.GetBenefitOptionFactorFor10YrParticipantOnly", new object[] { astrBenefitTypeValue, aintPlanBenefitId, aintParticipantAge, aintReferenceNumber },
                                                                     iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                    }
                    if (lobjBenefitOptionFactor.IsNotNull())
                    {
                        return Math.Round((decimal)lobjBenefitOptionFactor, 6);
                    }
                }
            }
            #endregion
            return 1;
        }


        public void GetRateForBenefitCalculation(busPerson abusPerson, string astrSSN, string astrRateType, DateTime adtRetirementDate,
                                     Collection<cdoPlanBenefitRate> aclbcdoPlanBenefitRate, Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI, string astrRetirementType, string lstrBenefitType, bool ablnIsMD, Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPIAfterRetirement = null)
        {
            // Code to determine the rate that will be used for accrued benefit calcualtion
            decimal ldecPrevYearBenefitRate = busConstant.ZERO_DECIMAL;
            int lintPlanYear = busConstant.ZERO_INT;
            int lintMPIQualifiedYearCount = busConstant.ZERO_INT;
            int lintPreviousMPIQualifiedYearCount = 0;
            int lintLatestWithdrawalResetYear = 0;
            decimal ldecPostNRAAge = busConstant.BenefitCalculation.AGE_65;

            //Explain to Kunal - Ask about Disability - this Variable 
            int lintLastestForfeitureYear = 0;
            if (aclbPersonWorkHistory_MPI.Where(u => u.istrForfietureFlag == busConstant.FLAG_YES).Count() > 0)
                lintLastestForfeitureYear = aclbPersonWorkHistory_MPI.Where(u => u.istrForfietureFlag == busConstant.FLAG_YES).First().year;

            if (aclbPersonWorkHistory_MPI.Where(r => r.iblnWithdrawalReset == true).Count() > 0)
                lintLatestWithdrawalResetYear = aclbPersonWorkHistory_MPI.Where(r => r.iblnWithdrawalReset == true).First().year;


            //PIR 1035
            decimal ldecNormalRetirementAge = GetNormalRetirementAge(busConstant.MPIPP_PLAN_ID);
            DateTime ldtNormalRetirementDate = abusPerson.icdoPerson.idtDateofBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge));


            //10 Percent - RMD //RID - 60998
            busPersonAccountEligibility lbusPensionElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
            if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.MPIPP)).Count() > 0)
            {
                lbusPensionElig = lbusPensionElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.MPIPP)).FirstOrDefault().icdoPersonAccount.person_account_id);

                decimal ldecAgeAtVesting =
                    busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.idtDateofBirth,
                    lbusPensionElig.icdoPersonAccountEligibility.vested_date.Day == 1 ? lbusPensionElig.icdoPersonAccountEligibility.vested_date : lbusPensionElig.icdoPersonAccountEligibility.vested_date.GetLastDayofMonth().AddDays(1));

                if (ldecAgeAtVesting > busConstant.BenefitCalculation.AGE_65
                    && lbusPensionElig.icdoPersonAccountEligibility.vested_date.Year > ldtNormalRetirementDate.Year)
                {
                    ldecPostNRAAge = ldecAgeAtVesting;
                }
            }

            //10 Percent - RMD
            //RMD72Project  commented MD date calculation old function call
            //DateTime ldtMinDistributionDate = Convert.ToDateTime(busGlobalFunctions.CalculateMinDistributionDate(abusPerson.icdoPerson.idtDateofBirth, lbusPensionElig.icdoPersonAccountEligibility.vested_date));

            //RMD72Project
            //Added bellow code to determine md date
            decimal ldecMDAge = busConstant.BenefitCalculation.AGE_70_HALF;
            DateTime ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(abusPerson.icdoPerson.person_id, lbusPensionElig.icdoPersonAccountEligibility.vested_date);  //calculate MD Date based on participant MD age option

            // RID# 153935 MD Age selection was not working for Age 73 differed MD. 
            DateTime ldtVestedDate = lbusPensionElig.icdoPersonAccountEligibility.vested_date;
            ldecMDAge = busGlobalFunctions.GetMinDistributionAge(abusPerson.icdoPerson.person_id, ldtVestedDate);
            //DateTime ldt72MinDate = busGlobalFunctions.Get72MinDistributionDate(abusPerson.icdoPerson.idtDateofBirth, lbusPensionElig.icdoPersonAccountEligibility.vested_date); //calculate MD date based on age 70.5
            //if (ldtMinDistributionDate == ldt72MinDate)
            //{
            //    ldecMDAge = busConstant.BenefitCalculation.AGE_72;
            //}
            //If participant had age 72 option but retireed before 72MD date, business asked to use 70.5 instead of if participant age 72 MD date.
            //if (ldtMinDistributionDate == ldt72MinDate && adtRetirementDate < ldtMinDistributionDate)
            //{
            //    ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(abusPerson.icdoPerson.idtDateofBirth, lbusPensionElig.icdoPersonAccountEligibility.vested_date); //calculate MD date based on age 70.5
            //    ldecMDAge = busConstant.BenefitCalculation.AGE_70_HALF;
            //}

            if (ldtNormalRetirementDate.Day != 1)
            {
                ldtNormalRetirementDate = ldtNormalRetirementDate.AddMonths(1).GetFirstDayofMonth();
            }

            #region Calculations With Work History Before Retirement Date
            if (aclbPersonWorkHistory_MPIAfterRetirement.IsNull())
            {
                foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPI)
                {
                    //Second 10% increase
                    if (lcdoDummyWorkData.year == 2016 && lintPlanYear == 2005)
                        lintPlanYear = 2014;
                    //Third 10% increase
                    if (lcdoDummyWorkData.year == 2020 && lintPlanYear == 2005)
                        lintPlanYear = 2016;
                    // “Credited Pension QY in 2023 per MOA 2024” --Ticket#153518
                    if (lcdoDummyWorkData.year == 2023 && adtRetirementDate.Year >= 2023 && (lcdoDummyWorkData.qualified_hours >= 65 && lcdoDummyWorkData.qualified_hours < 400))
                    {
                        lintMPIQualifiedYearCount = lcdoDummyWorkData.qualified_years_count;
                    }
                    // Prod PIR 759 - Corresponding Benefit Rate must be based on number of Qualify Years (NOT Vested Years).
                    else if (lintLastestForfeitureYear == 0)
                        lintMPIQualifiedYearCount = aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year <= lcdoDummyWorkData.year && item.year >= lintLatestWithdrawalResetYear).Count();
                    else
                        lintMPIQualifiedYearCount = (aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year <= lcdoDummyWorkData.year && item.year >= lintLatestWithdrawalResetYear).Count()
                                                     - aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year <= lintLastestForfeitureYear && item.year <= lcdoDummyWorkData.year && item.year >= lintLatestWithdrawalResetYear).Count());

                    //Kunal : Prod Pir 184 Changes Added forfeiture date check for locals
                    #region Very Important Code To Check If Local Has Merged INTO MPI, otherwise take only MPI Qualified Years for Getting Rate - ABHISHEK
                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains("Local")).Count() > 0)
                    {
                        if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).Count() > 0)
                        {
                            busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                            lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).FirstOrDefault().icdoPersonAccount.person_account_id);

                            if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_161).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                            {
                                //Taking Local From Person account elegibility(tusharchandak)
                                if(lbusElig != null)
                                lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                            }
                        }

                        if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).Count() > 0)
                        {
                            busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                            lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).FirstOrDefault().icdoPersonAccount.person_account_id);

                            if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_52).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                            {
                                //Taking Local From Person account elegibility(tusharchandak)
                                if (lbusElig != null)
                                lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                            }
                        }

                        if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).Count() > 0)
                        {
                            busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                            lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).FirstOrDefault().icdoPersonAccount.person_account_id);

                            if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.LOCAL_700).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                            {
                                //Taking Local From Person account elegibility(tusharchandak)
                                if (lbusElig != null)
                                lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                            }
                        }

                        if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).Count() > 0)
                        {
                            busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                            lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).FirstOrDefault().icdoPersonAccount.person_account_id);
                            //Taking Local From Person account elegibility(tusharchandak)
                            if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_666).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                            {
                                if (lbusElig != null)
                                lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                            }
                        }

                        if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).Count() > 0)
                        {
                            busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                            lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).FirstOrDefault().icdoPersonAccount.person_account_id);
                            //Taking Local From Person account elegibility(tusharchandak)
                            if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_600).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                            {
                                if (lbusElig != null)
                                lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                            }
                        }

                    }

                    #endregion

                    //RMD72Project
                    //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                    //PIR 1035
                    if ((astrRetirementType == busConstant.RETIREMENT_TYPE_LATE && lcdoDummyWorkData.age >= ldecPostNRAAge
                        || (astrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && lcdoDummyWorkData.age >= ldecPostNRAAge
                        && lcdoDummyWorkData.age < ldecMDAge))
                                               && Convert.ToInt32(lcdoDummyWorkData.year) <= adtRetirementDate.Year)
                    {
                        if (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0)
                        {
                            lintPlanYear = GetPlanYear(lcdoDummyWorkData.year - 1, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType, lcdoDummyWorkData.year);//10 Percent
                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                        else
                        {
                            if (Convert.ToInt32(lcdoDummyWorkData.year) == adtRetirementDate.Year)
                                lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType);
                            else
                            {
                                if ((lcdoDummyWorkData.year >= 2017 && lcdoDummyWorkData.year < 2023) && (aclbPersonWorkHistory_MPI.Where(t => (t.year >= 2017 && t.year <= 2023) && t.bis_years_count == busConstant.BenefitCalculation.BIS_COUNT_2).Count() > 0))
                                {
                                    lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType,
                                        lcdoDummyWorkData.year + 1);
                                }
                                else if (aclbPersonWorkHistory_MPI.Where(t => t.year == lcdoDummyWorkData.year + 1 && t.bis_years_count != 0 && t.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0).Count() > 0)
                                {
                                    lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType,
                                        lcdoDummyWorkData.year + 1);
                                }
                                else
                                    lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType);
                            }

                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                    }
                    else if ((astrRetirementType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION) && Math.Floor(lcdoDummyWorkData.age) == busConstant.BenefitCalculation.AGE_65 - 1
                                               && Convert.ToInt32(lcdoDummyWorkData.year) <= adtRetirementDate.Year && Convert.ToInt32(lcdoDummyWorkData.year) == ldtNormalRetirementDate.Year)
                    {
                        if (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0)
                        {
                            lintPlanYear = GetPlanYear(lcdoDummyWorkData.year - 1, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType, lcdoDummyWorkData.year);//10 Percent
                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                        else
                        {
                            if (Convert.ToInt32(lcdoDummyWorkData.year) == ldtNormalRetirementDate.Year)
                                lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, ldtNormalRetirementDate, astrRateType);
                            else
                                lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType);

                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                    }
                    //PIR 861
                    //RMD72Project
                    //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                    else if (((astrRetirementType == busConstant.RETIREMENT_TYPE_LATE && lcdoDummyWorkData.age >= ldecPostNRAAge
                                        ) ||
                        ((astrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && lcdoDummyWorkData.age >= ldecPostNRAAge
                        && lcdoDummyWorkData.age < ldecMDAge)))  //PIR 355 
                        && lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0)//PIR 619

                    {
                        lintPlanYear = GetPlanYear(lcdoDummyWorkData.year - 1, aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType, lcdoDummyWorkData.year);//10 Percent
                        lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                    }

                    //PROD PIR 77  07222013, // PROD PIR 268 
                    else if (Convert.ToInt32(lcdoDummyWorkData.year) >= adtRetirementDate.Year || lcdoDummyWorkData.age >= busConstant.BenefitCalculation.AGE_70_HALF
                                    || ldecPrevYearBenefitRate == busConstant.ZERO_DECIMAL ||                                                                                      // if latest plan year, then this is first iteration and we need to get the rate from table
                                    (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0 &&
                                     lcdoDummyWorkData.qualified_hours < busConstant.BenefitCalculation.QUALIFIED_HOURS_200))                                                   // BIS
                    {
                        //PROD PIR 77 07222013
                        //RMD72Project
                        //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                        if ((lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0 && lcdoDummyWorkData.qualified_hours < busConstant.BenefitCalculation.QUALIFIED_HOURS_200) ||     //BIS
                            lcdoDummyWorkData.age >= ldecMDAge)
                        {
                            if (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0 && lcdoDummyWorkData.qualified_hours < busConstant.BenefitCalculation.QUALIFIED_HOURS_200)
                            {
                                lintPlanYear = GetPlanYear(Math.Max(lcdoDummyWorkData.year - 1, 1954), aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType, lcdoDummyWorkData.year);//RMD 10 Percent
                            }
                            else
                            {
                                //Ticket - 69718
                                //RMD72Project
                                //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                                if (lcdoDummyWorkData.age >= ldecMDAge && ldecPostNRAAge >= ldecMDAge && lintPlanYear != 0)
                                {; }
                                else
                                    lintPlanYear = GetPlanYear(Math.Max(lcdoDummyWorkData.year - 1, 1954), aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType);//RMD 10 Percent
                            }

                            if (lintPlanYear == busConstant.BenefitCalculation.YEAR_1987)
                            {
                                cdoDummyWorkData lbusDummyWorkData = new cdoDummyWorkData();
                                lbusDummyWorkData = GetAccruedBenefitForYear1988(astrSSN, lcdoDummyWorkData, astrRateType, lintPlanYear, aclbcdoPlanBenefitRate, lintMPIQualifiedYearCount);
                                lcdoDummyWorkData.idecBenefitRate = lbusDummyWorkData.idecBenefitRate;
                                lcdoDummyWorkData.idecBenefitAmount = lbusDummyWorkData.idecBenefitAmount;

                            }
                            else
                            {
                                lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                            }
                        }
                        else
                        {
                            lintPlanYear = GetPlanYear(Math.Max(Convert.ToInt32(lcdoDummyWorkData.year), 1954), aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType);

                            if (lintPlanYear == busConstant.BenefitCalculation.YEAR_1987)
                            {
                                cdoDummyWorkData lbusDummyWorkData = new cdoDummyWorkData();
                                lbusDummyWorkData = GetAccruedBenefitForYear1988(astrSSN, lcdoDummyWorkData, astrRateType, lintPlanYear, aclbcdoPlanBenefitRate, lintMPIQualifiedYearCount);
                                lcdoDummyWorkData.idecBenefitRate = lbusDummyWorkData.idecBenefitRate;
                                lcdoDummyWorkData.idecBenefitAmount = lbusDummyWorkData.idecBenefitAmount;

                            }
                            else
                            {
                                lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                            }
                        }
                    }
                    else
                    {

                        if (lintPlanYear == busConstant.BenefitCalculation.YEAR_1987)
                        {
                            cdoDummyWorkData lbusDummyWorkData = new cdoDummyWorkData();
                            lbusDummyWorkData = GetAccruedBenefitForYear1988(astrSSN, lcdoDummyWorkData, astrRateType, lintPlanYear, aclbcdoPlanBenefitRate, lintMPIQualifiedYearCount);
                            lcdoDummyWorkData.idecBenefitRate = lbusDummyWorkData.idecBenefitRate;
                            lcdoDummyWorkData.idecBenefitAmount = lbusDummyWorkData.idecBenefitAmount;
                        }
                        else
                        {
                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                    }

                    // Set the Current Year Benefit Rate as the Previous Year Benefit Rate
                    lcdoDummyWorkData.iintPlanYear = lintPlanYear;
                    ldecPrevYearBenefitRate = lcdoDummyWorkData.idecBenefitRate;
                    lintPreviousMPIQualifiedYearCount = lintMPIQualifiedYearCount;

                    //PIR 1035
                    //RMD72Project
                    //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                    if (lcdoDummyWorkData.age >= ldecMDAge && ldtMinDistributionDate.Year == lcdoDummyWorkData.year)
                    {
                        int lintPlYear = 0;
                        if (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0)
                        {
                            lintPlYear = GetPlanYear(lcdoDummyWorkData.year - 1, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType, lcdoDummyWorkData.year);//10 Percent
                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                        else
                        {
                            if (Convert.ToInt32(lcdoDummyWorkData.year) == ldtMinDistributionDate.Year)
                                lintPlYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, ldtMinDistributionDate, astrRateType);
                            else
                                lintPlYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), astrRateType);

                            lcdoDummyWorkData.idecBenefitRateAtMDAge = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtMinimumDistributionDate: ldtMinDistributionDate, ablnIsMD: ablnIsMD);
                        }
                    }
                }
            }

            #endregion

            #region Calculations With Work History After Retirement Date
            else
            {

                lintMPIQualifiedYearCount = aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year >= lintLatestWithdrawalResetYear).Count();
                if (lintLastestForfeitureYear == 0)
                    lintMPIQualifiedYearCount = aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year >= lintLatestWithdrawalResetYear).Count();
                else
                    lintMPIQualifiedYearCount = (aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year >= lintLatestWithdrawalResetYear).Count()
                                                 - aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= 400 && item.year <= lintLastestForfeitureYear && item.year >= lintLatestWithdrawalResetYear).Count());

                cdoDummyWorkData lcdoRetirementWorkYear = new cdoDummyWorkData();
                bool lblnRetDateYearAsQualifiedYear = false;

                //Ticket - 61734 - New Fixes
                if (aclbPersonWorkHistory_MPI.Where(t => t.year == adtRetirementDate.Year).Count() > 0)
                {
                    lcdoRetirementWorkYear = aclbPersonWorkHistory_MPI.Where(t => t.year == adtRetirementDate.Year).FirstOrDefault();
                    if (lcdoRetirementWorkYear.qualified_hours >= 400 || lcdoRetirementWorkYear.L700_Hours >= 400 || lcdoRetirementWorkYear.L600_Hours >= 400 ||
                            lcdoRetirementWorkYear.L666_Hours >= 400 || lcdoRetirementWorkYear.L161_Hours >= 400 || lcdoRetirementWorkYear.L52_Hours >= 400)
                    {
                        lblnRetDateYearAsQualifiedYear = true;
                    }
                }

                //Prod PIR 184
                #region Very Important Code To Check If Local Has Merged INTO MPI, otherwise take only MPI Qualified Years for Getting Rate - ABHISHEK
                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains("Local")).Count() > 0)
                {
                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).Count() > 0)
                    {
                        busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                        //PIR 627
                        lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).FirstOrDefault().icdoPersonAccount.person_account_id);

                        if (lcdoRetirementWorkYear.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_161).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                        {
                            //PIR 627
                            lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;

                        }
                    }

                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).Count() > 0)
                    {
                        busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                        //PIR 627
                        lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).FirstOrDefault().icdoPersonAccount.person_account_id);

                        if (lcdoRetirementWorkYear.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_52).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                        {
                            //PIR 627
                            lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;

                        }
                    }

                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).Count() > 0)
                    {
                        busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                        //PIR 627
                        lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).FirstOrDefault().icdoPersonAccount.person_account_id);

                        if (lcdoRetirementWorkYear.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.LOCAL_700).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                            //PIR 627
                            lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                    }

                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).Count() > 0)
                    {
                        busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                        //PIR 627
                        lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).FirstOrDefault().icdoPersonAccount.person_account_id);
                        //PIR 627
                        lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                    }

                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).Count() > 0)
                    {
                        busPersonAccountEligibility lbusElig = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                        //PIR 627
                        lbusElig = lbusElig.LoadPersonAccEligibilityByPersonAccountId(abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).FirstOrDefault().icdoPersonAccount.person_account_id);
                        //PIR 627
                        lintMPIQualifiedYearCount += lbusElig.icdoPersonAccountEligibility.local_qualified_years;
                    }

                }

                #endregion

                //Ticket - 61734
                foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPIAfterRetirement.OrderBy(item => item.year).ToList().ToCollection())
                {
                    if (lcdoRetirementWorkYear.year != lcdoDummyWorkData.year)
                    {
                        if (lcdoDummyWorkData.qualified_hours >= 400)
                        {
                            lintMPIQualifiedYearCount++;
                            lcdoDummyWorkData.qualified_years_count = lintMPIQualifiedYearCount;
                        }
                        else
                        {
                            lcdoDummyWorkData.qualified_years_count = lintMPIQualifiedYearCount;
                        }
                    }
                    //Ticket - 61734 - New Fixes
                    else
                    {
                        if (lblnRetDateYearAsQualifiedYear)
                            lcdoDummyWorkData.qualified_years_count = lintMPIQualifiedYearCount;
                        else
                        {
                            if (lcdoDummyWorkData.qualified_hours >= 400)
                            {
                                lintMPIQualifiedYearCount++;
                                lcdoDummyWorkData.qualified_years_count = lintMPIQualifiedYearCount;
                            }
                            else
                            {
                                lcdoDummyWorkData.qualified_years_count = lintMPIQualifiedYearCount;
                            }
                        }
                    }
                }

                aclbPersonWorkHistory_MPIAfterRetirement = aclbPersonWorkHistory_MPIAfterRetirement.OrderByDescending(item => item.year).ToList().ToCollection();
                foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPIAfterRetirement)
                {
                    //Ticket - 61734
                    lintMPIQualifiedYearCount = lcdoDummyWorkData.qualified_years_count;

                    //10 Percent
                    //RMD72Project
                    //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                    if ((astrRetirementType == busConstant.RETIREMENT_TYPE_LATE && lcdoDummyWorkData.age >= busConstant.BenefitCalculation.AGE_65
                        && lcdoDummyWorkData.age < ldecMDAge))

                    {
                        if (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0)
                        {
                            lintPlanYear = GetPlanYear(lcdoDummyWorkData.year - 1, aclbcdoPlanBenefitRate, new DateTime(lcdoDummyWorkData.year + 1, 01, 01), astrRateType, lcdoDummyWorkData.year);//10 Percent
                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtRetirementDate); //PIR: 1095
                        }
                        else
                        {
                            lintPlanYear = GetPlanYear(lcdoDummyWorkData.year, aclbcdoPlanBenefitRate, new DateTime(lcdoDummyWorkData.year + 1, 01, 01), astrRateType);

                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtRetirementDate); //PIR: 1095
                        }
                    }

                    //PROD PIR 77  07222013
                    //RMD72Project
                    //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                    else if (Convert.ToInt32(lcdoDummyWorkData.year) >= adtRetirementDate.Year || lcdoDummyWorkData.age >= ldecMDAge ||        // Condition for Minimum Distribution
                                    ldecPrevYearBenefitRate == busConstant.ZERO_DECIMAL ||                                                                                      // if latest plan year, then this is first iteration and we need to get the rate from table
                                    (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0 &&
                                     lcdoDummyWorkData.qualified_hours < busConstant.BenefitCalculation.QUALIFIED_HOURS_200))                                                   // BIS
                    {
                        //PROD PIR 77  07222013
                        //RMD72Project
                        //using calculated variable ldecMDAge instead of fixed constant busConstant.BenefitCalculation.AGE_70_HALF
                        if ((lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0 && lcdoDummyWorkData.qualified_hours < busConstant.BenefitCalculation.QUALIFIED_HOURS_200) ||     //BIS
                            lcdoDummyWorkData.age >= ldecMDAge)
                        {
                            //PIR 627

                            if (lcdoDummyWorkData.bis_years_count != 0 && lcdoDummyWorkData.bis_years_count % busConstant.BenefitCalculation.BIS_COUNT_2 == 0 && lcdoDummyWorkData.qualified_hours < busConstant.BenefitCalculation.QUALIFIED_HOURS_200)
                            {
                                lintPlanYear = GetPlanYear(Math.Max(lcdoDummyWorkData.year - 1, 1954), aclbcdoPlanBenefitRate, new DateTime(lcdoDummyWorkData.year + 1, 01, 01), astrRateType, lcdoDummyWorkData.year);//10 Percent
                            }
                            //10 Percent Increase
                            else
                            {
                                //RID 114524 Re-employed hours are not eligible for second 10 percent Increase
                                if (lcdoDummyWorkData.year >= 2017)
                                    lintPlanYear = GetPlanYear(Math.Max(Convert.ToInt32(lcdoDummyWorkData.year), 1954), aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType);
                                else
                                    lintPlanYear = GetPlanYear(Math.Max(Convert.ToInt32(lcdoDummyWorkData.year), 1954), aclbcdoPlanBenefitRate, new DateTime(lcdoDummyWorkData.year + 1, 01, 01), astrRateType);
                            }

                            if (lintPlanYear == busConstant.BenefitCalculation.YEAR_1987)
                            {
                                cdoDummyWorkData lbusDummyWorkData = new cdoDummyWorkData();
                                lbusDummyWorkData = GetAccruedBenefitForYear1988(astrSSN, lcdoDummyWorkData, astrRateType, lintPlanYear, aclbcdoPlanBenefitRate, lintMPIQualifiedYearCount);
                                lcdoDummyWorkData.idecBenefitRate = lbusDummyWorkData.idecBenefitRate;
                                lcdoDummyWorkData.idecBenefitAmount = lbusDummyWorkData.idecBenefitAmount;

                            }
                            else
                            {
                                lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtRetirementDate); //PIR: 1095
                            }
                        }
                        else
                        {
                            //PIR 627
                            //RID 114524 Re-employed hours are not eligible for second 10 percent Increase
                            if (lcdoDummyWorkData.year >= 2017)
                                lintPlanYear = GetPlanYear(Math.Max(Convert.ToInt32(lcdoDummyWorkData.year), 1954), aclbcdoPlanBenefitRate, adtRetirementDate, astrRateType);
                            else
                                lintPlanYear = GetPlanYear(Math.Max(Convert.ToInt32(lcdoDummyWorkData.year), 1954), aclbcdoPlanBenefitRate, new DateTime(lcdoDummyWorkData.year + 1, 01, 01), astrRateType);

                            if (lintPlanYear == busConstant.BenefitCalculation.YEAR_1987)
                            {
                                cdoDummyWorkData lbusDummyWorkData = new cdoDummyWorkData();
                                lbusDummyWorkData = GetAccruedBenefitForYear1988(astrSSN, lcdoDummyWorkData, astrRateType, lintPlanYear, aclbcdoPlanBenefitRate, lintMPIQualifiedYearCount);
                                lcdoDummyWorkData.idecBenefitRate = lbusDummyWorkData.idecBenefitRate;
                                lcdoDummyWorkData.idecBenefitAmount = lbusDummyWorkData.idecBenefitAmount;

                            }
                            else
                            {
                                lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtRetirementDate);//PIR: 1095
                            }
                        }
                    }
                    else
                    {
                        if (lintPlanYear == busConstant.BenefitCalculation.YEAR_1987)
                        {
                            cdoDummyWorkData lbusDummyWorkData = new cdoDummyWorkData();
                            lbusDummyWorkData = GetAccruedBenefitForYear1988(astrSSN, lcdoDummyWorkData, astrRateType, lintPlanYear, aclbcdoPlanBenefitRate, lintMPIQualifiedYearCount);
                            lcdoDummyWorkData.idecBenefitRate = lbusDummyWorkData.idecBenefitRate;
                            lcdoDummyWorkData.idecBenefitAmount = lbusDummyWorkData.idecBenefitAmount;
                        }
                        else
                        {
                            lcdoDummyWorkData.idecBenefitRate = GetBenefitRateForPension(astrRateType, lintMPIQualifiedYearCount, lintPlanYear, aclbcdoPlanBenefitRate, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year), lcdoDummyWorkData.bis_years_count, adtRetirementDate, astrRetirementType, adtRetirementDate);
                        }
                    }

                    // Set the Current Year Benefit Rate as the Previous Year Benefit Rate                   
                    lcdoDummyWorkData.iintPlanYear = lintPlanYear;
                    ldecPrevYearBenefitRate = lcdoDummyWorkData.idecBenefitRate;
                }
            }

            #endregion
        }


        public string DeterminePlanRate(busPerson abusPerson, Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI, DateTime adtRetirementDate, DataTable adtWorkDataWeekly = null, bool ablnDataExtractionBatch = false)
        {
            string lstrRateType = string.Empty;
            bool lblnBISFlag = false;
            decimal ldecCreditHours = busConstant.ZERO_DECIMAL;
            DataTable ldtbWorkData = new DataTable();

            if (lstrRateType.IsNotNullOrEmpty())
            {
                return lstrRateType;
            }
            else
            {

                // Need to Fetch the Weekly Data for the Participant
                SqlParameter[] lsqlParameterList = new SqlParameter[3];
                SqlParameter lsqlParam1 = new SqlParameter("@SSN", DbType.String);
                SqlParameter lsqlParam2 = new SqlParameter("@PLANYEAR", DbType.Int32);
                SqlParameter lsqlParam3 = new SqlParameter("@PLANID", DbType.Int32);
                utlConnection utlLegacyDBConnetion = HelperFunction.GetDBConnectionProperties("Legacy");
                string astrLegacyDBConnetion = utlLegacyDBConnetion.istrConnectionString;


                // Calculate Person's Age as on August 01 1979
                decimal ldecAgeOn1979 = busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.idtDateofBirth,
                                                                                    Convert.ToDateTime(busConstant.BenefitCalculation.DATE_08_01_1979));

                // Check if the Age on August 01 1979 was greater than 55 years
                if (ldecAgeOn1979 >= busConstant.BenefitCalculation.AGE_55)
                {
                    // Check if Participant was on BIS on 12/22/1979 
                    cdoDummyWorkData lcdoDummyWorkData = aclbPersonWorkHistory_MPI.Where<cdoDummyWorkData>(item => item.year == 1979
                                                         && item.bis_years_count >= busConstant.BenefitCalculation.BIS_COUNT_2).FirstOrDefault();
                    if (lcdoDummyWorkData != null && lcdoDummyWorkData.year == 1979)
                    {
                        // Participant was on BIS in year 1979 
                        // Set the Boolean Flag to TRUE
                        lblnBISFlag = true;


                        if (lstrRateType.IsNullOrEmpty())
                        {
                            // And Rate Table will be PLAN B
                            lstrRateType = busConstant.BenefitCalculation.PLAN_B;
                        }
                    }

                    if (lblnBISFlag == false)
                    {
                        // Participant was not on BIS
                        // Fetch all Credited Hours for Plan Year 1979 after 4/30/1979

                        lsqlParam1.Value = abusPerson.icdoPerson.istrSSNNonEncrypted;
                        lsqlParameterList[0] = lsqlParam1;
                        lsqlParam2.Value = busConstant.BenefitCalculation.YEAR_1979;
                        lsqlParameterList[1] = lsqlParam2;
                        lsqlParam3.Value = busConstant.MPIPP_PLAN_ID;
                        lsqlParameterList[2] = lsqlParam3;

                        if (adtWorkDataWeekly.IsNull() && !ablnDataExtractionBatch)
                            ldtbWorkData = busGlobalFunctions.ExecuteSPtoGetDataTable("usp_GetWorkDataForPlanYear", astrLegacyDBConnetion, null, lsqlParameterList);

                        else if (adtWorkDataWeekly.IsNotNull() && adtWorkDataWeekly.Rows.Count > 0 && adtWorkDataWeekly.Select("ComputationYear = 1979").Count() > 0)
                            ldtbWorkData = adtWorkDataWeekly.FilterTable(utlDataType.Numeric, "ComputationYear", busConstant.BenefitCalculation.YEAR_1979).CopyToDataTable();

                        if (ldtbWorkData.IsNotNull() && ldtbWorkData.Rows.Count > 0)
                        {
                            foreach (DataRow ldrWordData in ldtbWorkData.Rows)
                            {
                                if (Convert.ToDateTime(ldrWordData[1].ToString()).Year == busConstant.BenefitCalculation.YEAR_1979 && Convert.ToDateTime(ldrWordData[1].ToString()).Month > 4)
                                {
                                    ldecCreditHours = ldecCreditHours + Convert.ToDecimal(ldrWordData["PensionHours"].ToString());//PIR 1052
                                }
                            }
                        }

                        if (ldecCreditHours > 0)
                        {
                            lstrRateType = busConstant.BenefitCalculation.PLAN_C;
                        }
                        else
                        {
                            lstrRateType = busConstant.BenefitCalculation.PLAN_B;
                        }
                    }
                }

                else
                {
                    // If Participant's Age < 55 the use PLAN B Rate table
                    lstrRateType = busConstant.BenefitCalculation.PLAN_B;
                }
            }

            return lstrRateType;
        }

        //PIR 355
        public Collection<cdoPlanBenefitRate> BenefitRateScheduleSpecialCase(DateTime adtRetirementDate, Collection<cdoPlanBenefitRate> aclbcdoPlanBenefitRate)
        {
            if (aclbcdoPlanBenefitRate != null && aclbcdoPlanBenefitRate.Count() > 0 && aclbcdoPlanBenefitRate.Where(t => t.plan_year == 1990 && t.rate_type_value == "B").Count() > 0)
            {
                if (adtRetirementDate.Date >= new DateTime(1989, 01, 01).Date && adtRetirementDate.Date <= new DateTime(1990, 10, 01).Date)
                {
                    aclbcdoPlanBenefitRate.Where(t => t.plan_year == 1990 && t.rate_type_value == "B").ForEach(t => t.effective_date = new DateTime(1989, 01, 01));
                    aclbcdoPlanBenefitRate.Where(t => t.plan_year == 1990 && t.rate_type_value == "B").ForEach(t => t.break_in_service_year = 1988);
                    aclbcdoPlanBenefitRate.Where(t => t.plan_year == 1990 && t.rate_type_value == "B").ForEach(t => t.plan_year = 1989);

                }
            }
            return aclbcdoPlanBenefitRate;
        }


        public string GetRateType(string astrUnionCode, string astrEmployerCode, DateTime adtEffectiveDate)
        {
            string lstrRateType = string.Empty;

            DataTable ldtbList = Select("cdoRate.LoadNewRateByEffectiveDate",
                                    new object[3] { astrEmployerCode, astrUnionCode, adtEffectiveDate });

            if (ldtbList.Rows.Count > 0)
            {
                lstrRateType = ldtbList.Rows[0][enmRate.rate_type_value.ToString()].ToString();
                return lstrRateType;
            }

            return lstrRateType;
        }

        public int GetBestAgeforReductionFactor_Local52(busBenefitApplication abusBenefitApplication)
        {
            if (abusBenefitApplication.iclbAllEligibilityRules != null && abusBenefitApplication.iclbAllEligibilityRules.Count > 0)
            {
                //aclbAllEligibilityRules = cdoBenefitProvisionEligibility.GetCollection<cdoBenefitProvisionEligibility>(ldtbEligibility);
                Collection<cdoBenefitProvisionEligibility> iclbApplicableRules = new Collection<cdoBenefitProvisionEligibility>();

                busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                DataTable ldtbPersonAccountEligibility = new DataTable();
                DateTime ldtVestingDate = new DateTime();
                DateTime ldtDateatAge65 = new DateTime();
                DateTime ldtCompareBaseDate = new DateTime();
                DateTime ldtNormalRetirementDate = new DateTime();
                DateTime ldtLateRetirementDate = new DateTime();


                if (!abusBenefitApplication.aclbPersonWorkHistory_MPI.IsNullOrEmpty())
                {
                    for (int i = 60; i <= 65; i++)
                    {
                        ldtVestingDate = DateTime.MinValue; //Re-intialize Everytime we use them
                        ldtDateatAge65 = DateTime.MinValue;
                        ldtNormalRetirementDate = DateTime.MinValue;
                        ldtLateRetirementDate = DateTime.MinValue;

                        iclbApplicableRules = abusBenefitApplication.iclbAllEligibilityRules.Where(rule => rule.istrPlanCode == busConstant.Local_52 && rule.benefit_account_type_value == busConstant.BENEFIT_TYPE_RETIREMENT && rule.eligibility_type_value == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY).ToList().ToCollection();

                        //PIR 635
                        int lintTotalQualifiedYears = 0;
                        int lintTotalQualifiedYears_MPIPP = abusBenefitApplication.aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= busConstant.MIN_HOURS_FOR_VESTED_YEAR).Count();
                        int lintTotalQualifiedYears_Local52 = abusBenefitApplication.aclbPersonWorkHistory_MPI.Where(item => item.L52_Hours >= busConstant.MIN_HOURS_FOR_VESTED_YEAR).Count();
                        lintTotalQualifiedYears = abusBenefitApplication.aclbPersonWorkHistory_MPI.LastOrDefault().qualified_years_count;
                        //PIR 635
                        //if (lintTotalQualifiedYears_MPIPP > lintTotalQualifiedYears_Local52)
                        //    lintTotalQualifiedYears = lintTotalQualifiedYears_MPIPP;
                        //else
                        //    lintTotalQualifiedYears = lintTotalQualifiedYears_Local52;
                        decimal lintTotalCreditedHours = (from item in abusBenefitApplication.aclbPersonWorkHistory_MPI select item.qualified_hours).Sum() + (from item in abusBenefitApplication.aclbPersonWorkHistory_MPI select item.L52_Hours).Sum();


                        foreach (cdoBenefitProvisionEligibility rule in iclbApplicableRules)
                        {
                            if (i >= rule.min_age && i < rule.max_age)
                            {
                                if ((rule.special_years.IsNull() || rule.special_years <= 0) && lintTotalQualifiedYears >= rule.qualified_years && lintTotalCreditedHours >= rule.credited_hours)//PIR 905
                                {
                                    return i;
                                }
                                //lintTotalQualifiedYears_Local52 + PREMERGER PENSION CREDITS FOR PLAN >= rule.special_years
                                //PIR 635
                                else if (rule.special_years > 0 && lintTotalQualifiedYears_MPIPP + abusBenefitApplication.Local52_PensionCredits >= rule.special_years) //TODO - VERY IMP this condition should not be mapped like this it should be total MPI qualified Years + PENSION CREDITS
                                {
                                    return i;
                                }

                            }
                        }
                    }

                    return busConstant.LOCAL_52_RETIREMENT_NORMAL_AGE;

                }
            }
            return busConstant.LOCAL_52_RETIREMENT_NORMAL_AGE;
        }

        public int GetBestAgeforReductionFactor_Local600(busBenefitApplication abusBenefitApplication)
        {
            if (abusBenefitApplication.iclbAllEligibilityRules != null && abusBenefitApplication.iclbAllEligibilityRules.Count > 0)
            {
                Collection<cdoBenefitProvisionEligibility> iclbApplicableRules = new Collection<cdoBenefitProvisionEligibility>();

                busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility { icdoPersonAccountEligibility = new cdoPersonAccountEligibility() };
                DataTable ldtbPersonAccountEligibility = new DataTable();
                DateTime ldtVestingDate = new DateTime();
                DateTime ldtDateatAge65 = new DateTime();
                DateTime ldtNormalRetirementDate = new DateTime();
                DateTime ldtLateRetirementDate = new DateTime();

                if (!abusBenefitApplication.aclbPersonWorkHistory_MPI.IsNullOrEmpty())
                {
                    for (int i = 60; i <= 65; i++)
                    {
                        ldtVestingDate = DateTime.MinValue; //Re-intialize Everytime we use them
                        ldtDateatAge65 = DateTime.MinValue;
                        ldtNormalRetirementDate = DateTime.MinValue;
                        ldtLateRetirementDate = DateTime.MinValue;

                        iclbApplicableRules = abusBenefitApplication.iclbAllEligibilityRules.Where(rule => rule.istrPlanCode == busConstant.Local_600 && rule.benefit_account_type_value == busConstant.BENEFIT_TYPE_RETIREMENT && rule.eligibility_type_value == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY).ToList().ToCollection();
                        int lintTotalQualifiedYears = 0;
                        int lintTotalQualifiedYears_Local600 = abusBenefitApplication.aclbPersonWorkHistory_MPI.Where(item => item.L600_Hours >= busConstant.MIN_HOURS_FOR_VESTED_YEAR).Count();
                        int lintTotalQualifiedYears_MPIPP = abusBenefitApplication.aclbPersonWorkHistory_MPI.Where(item => item.qualified_hours >= busConstant.MIN_HOURS_FOR_VESTED_YEAR).Count();

                        if (lintTotalQualifiedYears_MPIPP > lintTotalQualifiedYears_Local600)
                            lintTotalQualifiedYears = lintTotalQualifiedYears_MPIPP;
                        else
                            lintTotalQualifiedYears = lintTotalQualifiedYears_Local600;

                        decimal lintTotalCreditedHours = (from item in abusBenefitApplication.aclbPersonWorkHistory_MPI select item.L600_Hours).Sum() + (from item in abusBenefitApplication.aclbPersonWorkHistory_MPI select item.qualified_hours).Sum();

                        foreach (cdoBenefitProvisionEligibility rule in iclbApplicableRules)
                        {
                            if (i >= rule.min_age && i < rule.max_age)
                            {
                                if ((rule.special_years.IsNull() || rule.special_years <= 0) && lintTotalQualifiedYears >= rule.qualified_years && lintTotalCreditedHours >= rule.credited_hours)
                                {
                                    return i;
                                }
                                else if (rule.special_years > 0 && abusBenefitApplication.aclbPersonWorkHistory_MPI.Last().qualified_years_count + abusBenefitApplication.Local600_PensionCredits >= rule.special_years) //TODO - VERY IMP this condition should not be mapped like this it should be total MPI qualified Years + PENSION CREDITS
                                {
                                    return i;
                                }

                            }
                        }

                    }
                    return busConstant.LOCAL_600_RETIREMENT_NORMAL_AGE;
                }
            }
            return busConstant.LOCAL_600_RETIREMENT_NORMAL_AGE;
        }

        public decimal GetDisabilityFactorsForReemployedParticipants(busBenefitCalculationHeader abusBenefitCalculationHeader, DateTime adtParticipantDOB, DateTime adtSpouseDOB, string astrBenefitOptionValue, int aintPlanBenefitID)
        {
            decimal ldecBenefitAmount = decimal.Zero;
            if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
            {
                Collection<busBenefitCalculationYearlyDetail> lclbReemployedWorkHistory = new Collection<busBenefitCalculationYearlyDetail>();

                busBenefitCalculationDetail lbusBenefitCalculationDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault();
                if (!lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
                {
                    if (lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() > 0)
                    {
                        lclbReemployedWorkHistory = lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).ToList().ToCollection();
                    }
                }
                int lintParticipantAge = 0;
                int lintSpouseAge = 0;
                decimal ldecFactor = decimal.Zero;
                DateTime adtAgeAtDate = new DateTime();

                foreach (busBenefitCalculationYearlyDetail lbusBenefitCalculationReemployedYear in lclbReemployedWorkHistory)
                {
                    lintParticipantAge = 0;
                    lintSpouseAge = 0;
                    adtAgeAtDate = new DateTime(Convert.ToInt32(lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.plan_year) + 1, 01, 01).AddYears(1);
                    lintParticipantAge = Convert.ToInt32(busGlobalFunctions.CalculatePersonAge(adtParticipantDOB, adtAgeAtDate));
                    lintSpouseAge = Convert.ToInt32(busGlobalFunctions.CalculatePersonAge(adtSpouseDOB, adtAgeAtDate));
                    ldecBenefitAmount += Math.Round(ldecFactor * lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.accrued_benefit_amount, 2);
                    lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.plan_year &&
                        item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationYearlyDetail.benefit_option_factor = ldecFactor;
                    //lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.benefit_option_factor = ldecFactor;

                }
            }

            return ldecBenefitAmount;
        }


        public void GetBenefitAmountToBePaidForAYear(busBenefitCalculationDetail abusBenefitCalculationDetail, busBenefitCalculationOptions abusBenefitCalculationOptions, Collection<busBenefitCalculationYearlyDetail> aclbWorkHistory, DateTime adtRetirementDate)
        {
            if (aclbWorkHistory.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() == 0)
                return;

            #region Check Regular Or Disability Factors
            bool lblnUseDisabiltyFactors = true;
            if (abusBenefitCalculationOptions.icdoBenefitCalculationOptions.participant_amount == abusBenefitCalculationOptions.icdoBenefitCalculationOptions.disability_amount)
            {
                lblnUseDisabiltyFactors = true;
            }
            else
            {
                lblnUseDisabiltyFactors = false;
            }
            #endregion

            #region Fill Yearly Detail
            decimal ldecReducedBenefitAmount = abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount;
            decimal ldecBenefitAmount = decimal.Zero;
            if (lblnUseDisabiltyFactors)
            {
                ldecBenefitAmount = Math.Round(ldecReducedBenefitAmount * abusBenefitCalculationOptions.icdoBenefitCalculationOptions.disability_factor, 2);
            }
            else
            {
                ldecBenefitAmount = Math.Round(ldecReducedBenefitAmount * abusBenefitCalculationOptions.icdoBenefitCalculationOptions.benefit_option_factor, 2);
            }
            aclbWorkHistory.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year <= adtRetirementDate.Year && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).FirstOrDefault().icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount = ldecBenefitAmount;
            foreach (busBenefitCalculationYearlyDetail lbusBenefitCalculationReemployedYear in aclbWorkHistory)
            {
                if (lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)
                {
                    ldecBenefitAmount += Math.Round(lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.accrued_benefit_amount *
                        lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.benefit_option_factor, 2);
                    lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount = ldecBenefitAmount;
                }
            }
            #endregion
        }

        public decimal GetRegularOrDisabiltyFactorsForReemployedParticipants(busBenefitCalculationHeader abusBenefitCalculationHeader, DateTime adtParticipantDOB, DateTime adtSpouseDOB, string astrBenefitOptionValue, decimal adecParticipantAmountAtRetirement, decimal adecBenefitOptionFactorAtRetr, bool ablnUseDisabilityFactors, int aintPlanBenefitID)
        {
            decimal ldecBenefitAmount = adecParticipantAmountAtRetirement;
            if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
            {

                Collection<busBenefitCalculationYearlyDetail> lclbReemployedWorkHistory = new Collection<busBenefitCalculationYearlyDetail>();

                busBenefitCalculationDetail lbusBenefitCalculationDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault();
                if (!lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
                {
                    busBenefitCalculationYearlyDetail lbusbenefitYearofRetirement = lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).FirstOrDefault();
                    lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount = ldecBenefitAmount;
                    lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.benefit_option_factor = adecBenefitOptionFactorAtRetr;
                    if (lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() > 0)
                    {
                        lclbReemployedWorkHistory = lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).OrderBy(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ToList().ToCollection();
                    }
                }
                int lintParticipantAge = 0;
                int lintSpouseAge = 0;
                decimal ldecFactor = decimal.Zero;
                DateTime adtAgeAtDate = new DateTime();

                foreach (busBenefitCalculationYearlyDetail lbusBenefitCalculationReemployedYear in lclbReemployedWorkHistory)
                {
                    lintParticipantAge = 0;
                    lintSpouseAge = 0;
                    adtAgeAtDate = new DateTime(Convert.ToInt32(lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.plan_year), 01, 01).AddYears(1);
                    lintParticipantAge = Convert.ToInt32(busGlobalFunctions.CalculatePersonAge(adtParticipantDOB, adtAgeAtDate));
                    lintSpouseAge = Convert.ToInt32(busGlobalFunctions.CalculatePersonAge(adtSpouseDOB, adtAgeAtDate));
                    if (ablnUseDisabilityFactors)
                    {
                        ldecFactor = GetDisabilityFactor(abusBenefitCalculationHeader, astrBenefitOptionValue, lintParticipantAge, lintSpouseAge, aintPlanBenefitID);
                    }
                    else
                    {
                        ldecFactor = GetFactor(abusBenefitCalculationHeader, astrBenefitOptionValue, lintSpouseAge, lintParticipantAge);
                    }


                    ldecBenefitAmount += Math.Round(ldecFactor * lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.accrued_benefit_amount, 2);
                    lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.plan_year &&
                        item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationYearlyDetail.benefit_option_factor = ldecFactor;
                    //RID 61301
                    lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.plan_year &&
                        item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationYearlyDetail.total_accrued_benefit = ldecBenefitAmount;

                    lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.benefit_option_factor = ldecFactor;
                    lbusBenefitCalculationReemployedYear.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount = ldecBenefitAmount;
                }
            }

            return ldecBenefitAmount;
        }


        public decimal GetDisabilityFactor(busBenefitCalculationHeader abusBenefitCalculationHeader, string astrBenefitOption, int aintParticipantAge, int aintSurvivorAge, int aintPlanBenefitID)
        {
            decimal ldecDisBenefitOptionFactor = 0;
            if (astrBenefitOption == busConstant.LIFE_ANNUTIY || astrBenefitOption == busConstant.FIVE_YEARS_CERTAIN_AND_LIFE_ANNUTIY ||
                    astrBenefitOption == busConstant.THREE_YEARS_CERTAIN_AND_LIFE_ANNUITY || astrBenefitOption == busConstant.TWO_YEARS_CERTAIN_AND_LIFE_ANNUITY)
            {
                ldecDisBenefitOptionFactor = 1;
            }
            else if (astrBenefitOption == busConstant.TEN_YEARS_CERTAIN_AND_LIFE_ANNUTIY)
            {
                ldecDisBenefitOptionFactor = GetBenefitOptionFactor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value, aintPlanBenefitID, aintParticipantAge, 0);
            }
            else
            {
                ldecDisBenefitOptionFactor = GetBenefitOptionFactor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value, aintPlanBenefitID, aintParticipantAge, aintSurvivorAge);
            }

            return ldecDisBenefitOptionFactor;
        }

        public decimal GetFactor(busBenefitCalculationHeader abusBenefitCalculationHeader, string astrBenefitOptionValue, int aintSurVivorAge, int aintParticipantAge, int aintReferenceNumber = 0, bool ablnRemployedFlag = false)// Optional parameters added as per PIR 275 Requirement -- Need to take factors from different table
        {
            decimal ldecBenefitOptionFactor = decimal.Zero;
            if (astrBenefitOptionValue == busConstant.JOINT_50_PERCENT_SURVIVOR_ANNUITY)
            {
                ldecBenefitOptionFactor = 0.86M + 0.005M * (aintSurVivorAge - aintParticipantAge) + 0.006M * (65 - aintParticipantAge);
            }
            else if (astrBenefitOptionValue == busConstant.JOINT_75_PERCENT_SURVIVOR_ANNUITY)
            {
                ldecBenefitOptionFactor = 0.80M + 0.01M * (aintSurVivorAge - aintParticipantAge) + 0.006M * (65 - aintParticipantAge);
            }
            else if (astrBenefitOptionValue == busConstant.JOINT_100_PERCENT_SURVIVOR_ANNUITY)
            {
                ldecBenefitOptionFactor = 0.75M + 0.01M * (aintSurVivorAge - aintParticipantAge) + 0.006M * (65 - aintParticipantAge);
            }
            else if (astrBenefitOptionValue == busConstant.JOINT_50_PERCENT_POPUP_ANNUITY)
            {
                ldecBenefitOptionFactor = 0.83M + 0.007M * (aintSurVivorAge - aintParticipantAge) + 0.006M * (65 - aintParticipantAge);
            }
            else if (astrBenefitOptionValue == busConstant.JOINT_100_PERCENT_POPUP_ANNUITY)
            {
                ldecBenefitOptionFactor = 0.71M + 0.01M * (aintSurVivorAge - aintParticipantAge) + 0.008M * (65 - aintParticipantAge);
            }
            else if (astrBenefitOptionValue == busConstant.TEN_YEARS_CERTAIN_AND_LIFE_ANNUTIY)
            {
                // Optional parameters added as per PIR 275 Requirement -- Need to take factors from different table
                int lintPlanBenefitId = GetPlanBenefitId(busConstant.MPIPP_PLAN_ID, busConstant.TEN_YEARS_CERTAIN_AND_LIFE_ANNUTIY);
                if (!ablnRemployedFlag)
                    ldecBenefitOptionFactor = GetBenefitOptionFactor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value, lintPlanBenefitId, aintParticipantAge, busConstant.ZERO_INT);
                else

                    ldecBenefitOptionFactor = GetBenefitOptionFactor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value, lintPlanBenefitId, aintParticipantAge, busConstant.ZERO_INT, aintReferenceNumber, ablnRemployedFlag);


            }
            else if (astrBenefitOptionValue == busConstant.LUMP_SUM)
            {

            }
            else if (astrBenefitOptionValue == busConstant.LIFE_ANNUTIY)
            {
                ldecBenefitOptionFactor = 1;
            }

            return ldecBenefitOptionFactor;
        }

        /// <summary>
        /// ablnStartFromRetirement : when to start calculating minimum distribution from Retirement date or from the last calculation.
        /// </summary>
        /// <param name="abusBenefitCalculationHeader"></param>
        /// <param name="abusPayeeAccount"></param>
        /// <param name="adtBatchRunDate"></param>
        /// <param name="adecReferenceAccruedBenefit"></param>
        /// <param name="ablnStartFromRetirement"></param>
        /// For Reemmployed Everything get stored in total accrued benefit.
        public void CalculateAccruedBenefitForReEmployedParticipant(busBenefitCalculationHeader abusBenefitCalculationHeader, busPayeeAccount abusPayeeAccount, DateTime adtBatchRunDate, bool ablnStartFromRetirement)
        {
            decimal ldecReEmployedBenefit = decimal.Zero;
            //RMD72Project commenting minimum distribution date calculation because this variable is not used and old logic is already commented.
            //DateTime adtMinimumDistributionDate = new DateTime(abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.AddYears(70).AddMonths(6).AddYears(1).Year, 04, 01);
            GetRateForAccruedBenefitCalculation(abusBenefitCalculationHeader);
            #region ReEmployedCalculation
            // As of Miminmum distribution participant gets the same benefit 

            decimal ldecPrevBenefitAmount = GetBenefitAmountOfParticipantFromYearlyDetail(abusBenefitCalculationHeader, abusBenefitCalculationHeader.iclbBenefitCalculationDetail[0], abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year);
            ldecReEmployedBenefit += ldecPrevBenefitAmount;

            foreach (cdoDummyWorkData lcdoDummyWorkData in abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory)
            {

                busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
                //PIR 627 10292015
                if (abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(t => t.year == lcdoDummyWorkData.year).Count() > 1
                    && abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(t => t.year == lcdoDummyWorkData.year).Sum(t => t.vested_hours) >= 870
                    && lcdoDummyWorkData.age > busConstant.RETIREMENT_NORMAL_AGE)
                {
                    if (abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(t => t.year == lcdoDummyWorkData.year &&
                        t.age == busConstant.RETIREMENT_NORMAL_AGE).Sum(t => t.vested_hours) < 870)
                    {
                        lcdoDummyWorkData.idecBenefitAmount =
                            Math.Round(abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(t => t.year == lcdoDummyWorkData.year).Sum(t => t.vested_hours) * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                    }
                    else
                    {
                        lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                    }
                }
                else if (lcdoDummyWorkData.vested_hours >= 870)
                {
                    lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                }
                ldecReEmployedBenefit += lcdoDummyWorkData.idecBenefitAmount;
                lbusBenefitCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, Convert.ToDecimal(lcdoDummyWorkData.year),
                                                            lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                            lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, decimal.Zero,
                                                            abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY ? ldecReEmployedBenefit : decimal.Zero
                                                            , busConstant.FLAG_YES);

                //PIR 1035
                lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.age
                    = busGlobalFunctions.CalculatePersonAgeInDec(abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth, busGlobalFunctions.GetLastDateOfComputationYear(lcdoDummyWorkData.year));
                abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                //} //PIR 627

            }
            #endregion


            #region MinimumDistribution
            /*
            else
            {
                decimal ldecEEDerived = decimal.Zero;
                DateTime ldtLastWorkingDate = new DateTime();
                string lstrEmpName = string.Empty;
                ldecEEDerived = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.ee_derived_benefit_amount;
                Dictionary<int, Dictionary<int, decimal>> ldictHoursAfterRetirement = LoadMPIHoursAfterRetirementDate(abusBenefitCalculationHeader.ibusPerson.icdoPerson.istrSSNNonEncrypted, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId, ref ldtLastWorkingDate, ref lstrEmpName);
                //abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.fl
                //As discussed we are presuming that person retires before min distributiion date , won't handle if retirement date is greater than minimum distribution date.
                if (ablnStartFromRetirement)
                {
                    foreach (cdoDummyWorkData lcdoDummyWorkData in abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory)
                    {
                        busBenefitCalculationYearlyDetail lbusBenefitPrevYear = null;
                        if (lcdoDummyWorkData.vested_hours >= 870)
                        {
                            if (lcdoDummyWorkData.year < adtMinimumDistributionDate.Year)
                            {
                                lbusBenefitPrevYear = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
                                busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate,2);
                                ldecReEmployedBenefit += lcdoDummyWorkData.idecBenefitAmount;
                                adecReferenceAccruedBenefit += ldecReEmployedBenefit;
                                lbusBenefitCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, Convert.ToDecimal(lcdoDummyWorkData.year),
                                                                            lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                                            lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, adecReferenceAccruedBenefit, adecReferenceAccruedBenefit, busConstant.FLAG_YES);
                                abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                                lbusBenefitPrevYear = lbusBenefitCalculationYearlyDetail;
                            }
                        }
                        else
                        {
                            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
                            lbusBenefitCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, Convert.ToDecimal(lcdoDummyWorkData.year),
                                            lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, 0,
                                            lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, adecReferenceAccruedBenefit, adecReferenceAccruedBenefit, busConstant.FLAG_YES);
                            abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);

                        }

                    }
                    CalculateMinimumDistributionBenefitForReEmployment(ldecEEDerived, adecReferenceAccruedBenefit, adtMinimumDistributionDate, adtBatchRunDate, ldictHoursAfterRetirement, abusBenefitCalculationHeader, ablnStartFromRetirement);
                }
                else
                {

                    //Need to pick last year's accrued benefit
                    CalculateMinimumDistributionBenefitForReEmployment(ldecEEDerived, adecReferenceAccruedBenefit, adtMinimumDistributionDate, adtBatchRunDate, ldictHoursAfterRetirement, abusBenefitCalculationHeader, ablnStartFromRetirement);
                    //GetReEvaluationForMinimumDistributionYear(abusBenefitCalculationHeader, lbusPersonAccount, ref ldecMinimumDistributionAccruedBenefit, adecReferenceAccruedBenefit);
                }

            }
            */
            #endregion
        }



        public decimal CalculateReducedBenefitForReEmployment(busPerson abusPerson, string astrBenefitTypeValue, decimal adecAge, DateTime adtRetirementDate, DateTime adtVestedDate,
                       busPersonAccount abusPersonAccount, busBenefitApplication abusBenefitApplication,
                       bool ablnIsQdroCal, Collection<busBenefitCalculationDetail> aclbbenefitCalculationDetail,
                        Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, int aintQualifiedYears, decimal ldecUnreducedAccruedBenefitAmount,
                        string astrRetirementSubType,
                        string astrBenefitType = "")
        {
            decimal ldecERF = 1;
            decimal ldecReducedAccruedBenefitAmount = new decimal();
            ldecReducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount;

            switch (astrRetirementSubType)
            {
                case busConstant.RETIREMENT_TYPE_REDUCED_EARLY:
                case busConstant.RETIREMENT_TYPE_SPL_REDUCED_EARLY:

                    // Kunal : Grandfather Rule : Need to pick the highest factor Mail from Debra 22nd March 2013
                    ldecERF = 0;
                    if (abusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID || item.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID ||
                        item.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID).Count() > 0)
                    {
                        Collection<busPersonAccount> lclbPersonAccount = new Collection<busPersonAccount>();
                        lclbPersonAccount = abusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID || item.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID ||
                            item.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID).ToList().ToCollection();
                        if (!lclbPersonAccount.IsNullOrEmpty())
                        {
                            ldecERF = CheckGrandfatheredRule(aintQualifiedYears, adtVestedDate,
                                abusPerson.icdoPerson.idtDateofBirth, adtRetirementDate, adecAge, abusBenefitApplication.aclbPersonWorkHistory_MPI, abusBenefitApplication,
                                lclbPersonAccount);
                        }
                    }

                    if (ldecERF == busConstant.ZERO_DECIMAL)
                    {
                        // This is for Early Retirement. Fetch the ERF from the lookup table
                        ldecERF = GetEarlyReductionFactor(abusPersonAccount.icdoPersonAccount.plan_id, astrBenefitTypeValue, astrRetirementSubType,
                                                            Convert.ToInt32(Math.Floor(adecAge))); //Sid Jain 05092012;
                    }

                    if (!ablnIsQdroCal)
                    {
                        ldecReducedAccruedBenefitAmount = ldecReducedAccruedBenefitAmount * (ldecERF);
                    }

                    break;




            }


            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                if (!aclbbenefitCalculationDetail.IsNullOrEmpty() && !ablnIsQdroCal)
                {
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.early_reduction_factor = ldecERF;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecReducedAccruedBenefitAmount;
                }
            }
            else
            {
                if (!aclbbenefitCalculationDetail.IsNullOrEmpty() && !ablnIsQdroCal)
                {
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.early_reduction_factor = ldecERF;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecReducedAccruedBenefitAmount;
                }
            }
            return ldecReducedAccruedBenefitAmount;

        }


        public decimal GetRateForAccruedBenefitCalculation(busBenefitCalculationHeader abusBenefitCalculationHeader)
        {
            string lstrRateType = string.Empty;
            lstrRateType = this.DeterminePlanRate(abusBenefitCalculationHeader.ibusPerson, abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date);
            string lstrBenSubTypeValue = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.benefit_subtype_value;

            Collection<cdoPlanBenefitRate> lclbcdoPlanBenefitRate = new Collection<cdoPlanBenefitRate>();

            DataTable ldtbPlanBenefitRate = busBase.Select("cdoPlanBenefitRate.Lookup", new object[] { });
            lclbcdoPlanBenefitRate = cdoDummyWorkData.GetCollection<cdoPlanBenefitRate>(ldtbPlanBenefitRate);
            //PIR 355
            lclbcdoPlanBenefitRate = BenefitRateScheduleSpecialCase(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date, lclbcdoPlanBenefitRate);

            lclbcdoPlanBenefitRate = lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == "B" || item.rate_type_value == "C" || item.rate_type_value == "Ca").ToList().ToCollection();

            abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI = abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.OrderByDescending(item => item.year).ToList().ToCollection();
            GetRateForBenefitCalculation(abusBenefitCalculationHeader.ibusPerson, abusBenefitCalculationHeader.ibusPerson.icdoPerson.istrSSNNonEncrypted, lstrRateType, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date,
                                                        lclbcdoPlanBenefitRate, abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI, lstrBenSubTypeValue, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value,
                                                        abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.min_distribution_flag == busConstant.FLAG_YES ? true : false//10 Percent RMD
                                                        , abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory);

            return decimal.Zero;
        }

        public void CalculateEEDerivedBenefit(int aintPersonAccountID, DateTime adtDOB, DateTime adtRetirementDate, ref decimal adecEEContribution, ref decimal adecEEInterest, ref decimal adecEEDerivedAmount)
        {
            decimal ldecTableBfactor = decimal.One;
            decimal ldecAge = busGlobalFunctions.CalculatePersonAgeInDec(adtDOB, adtRetirementDate);
            Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetirementContribution = new Collection<busPersonAccountRetirementContribution>();
            DataTable ldtbList = busBase.Select("cdoPersonAccountRetirementContribution.GetRetirementContributionbyAccountId", new object[1] { aintPersonAccountID });
            lclbPersonAccountRetirementContribution = GetCollection<busPersonAccountRetirementContribution>(ldtbList, "icdoPersonAccountRetirementContribution");

            //busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility();


            if (!lclbPersonAccountRetirementContribution.IsNullOrEmpty())
            {
                //lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(aintPersonAccountID);


                //if (lbusPersonAccountEligibility != null && lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date != DateTime.MinValue)
                //{
                //    adecEEContribution = (from item in lclbPersonAccountRetirementContribution
                //                          where
                //                          item.icdoPersonAccountRetirementContribution.computational_year > lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date.Year
                //                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                //    adecEEInterest = (from item in lclbPersonAccountRetirementContribution
                //                      where item.icdoPersonAccountRetirementContribution.computational_year > lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date.Year
                //                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                //}
                //else
                //{
                adecEEContribution = (from item in lclbPersonAccountRetirementContribution
                                      where
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                      select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                adecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                  where
                                  item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                  select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                // }


                decimal ldecTableAfactor = this.GetTableAFactor(ldecAge, busConstant.MPIPP_PLAN_ID, adtRetirementDate.Year);
                ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                               Math.Floor(ldecAge), adtRetirementDate.Year < 1988 ? 1988 : adtRetirementDate.Year);
                adecEEDerivedAmount = Math.Round((((adecEEContribution + adecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);

            }

        }


        public void CalculateOptionForReEmployedBenefit(busBenefitCalculationOptions abusBenefitCalculationOptions, busBenefitCalculationDetail abusBenefitCalculationDetail)
        {
            decimal ldecReducedBenefitAmount = abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount;

        }

        public decimal CalculateBenefitAmtForPension(busPerson abusPerson, string astrBenefitTypeValue, decimal adecAge, DateTime adtRetirementDate, DateTime adtVestedDate,
                             busPersonAccount abusPersonAccount, busBenefitApplication abusBenefitApplication,
                             bool ablnIsQdroCal,
                              Collection<busBenefitCalculationDetail> aclbbenefitCalculationDetail, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution,
                              Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, bool ablnMPIPPlan, string astrRetirementSubType, ref decimal adecLateAdjustmentAmt, int aintPersonId = 0, bool ablnReEvaluationMDBatch = false,
            string astrCalculationType = "", DateTime? adtEarliestRetirementDate = null)
        {

            decimal ldecReducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
            decimal ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
            int lintTotalQualifiedYear = busConstant.ZERO_INT;
            lintTotalQualifiedYear = abusBenefitApplication.aclbPersonWorkHistory_MPI.Last().qualified_years_count;

            busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility();
            lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(abusPersonAccount.icdoPersonAccount.person_account_id);

            ldecUnreducedAccruedBenefitAmount = CalculateUnReducedBenefitAmtForPension(abusPerson, adecAge, adtRetirementDate,
                              abusPersonAccount, abusBenefitApplication,
                              ablnIsQdroCal,
                               aclbbenefitCalculationDetail,
                              aclbQdroCalculationDetail, abusBenefitApplication.aclbPersonWorkHistory_MPI, astrRetirementSubType);

            #region Check if Withdrawal History Exists: Then Acrrued benefit = Accrued Benefit - EE derived

            if (astrRetirementSubType != busConstant.RETIREMENT_TYPE_LATE && astrRetirementSubType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                Collection<cdoPersonAccountRetirementContribution> lclbRetCont = new Collection<cdoPersonAccountRetirementContribution>();

                ldecUnreducedAccruedBenefitAmount = CalculateAccruedBenefitForPersonWithWithdrawal(astrRetirementSubType,
                                                                 lbusPersonAccountEligibility.icdoPersonAccountEligibility.vested_date,
                                                                 ldecUnreducedAccruedBenefitAmount, abusBenefitApplication.ibusPerson, abusBenefitApplication.ibusPerson.iclbPersonAccount,
                                                                 adtRetirementDate, abusBenefitApplication.aclbPersonWorkHistory_MPI, aclbPersonAccountRetirementContribution
                                                                 , lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date.Year, ref lclbRetCont);
            }


            #endregion


            ldecReducedAccruedBenefitAmount = CalculateReducedBenefit(abusPerson, astrBenefitTypeValue
              , adecAge, adtRetirementDate, adtVestedDate,
               abusPersonAccount, abusBenefitApplication, ablnIsQdroCal,
               aclbbenefitCalculationDetail, aclbQdroCalculationDetail, lintTotalQualifiedYear, ldecUnreducedAccruedBenefitAmount
               , astrRetirementSubType, ablnMPIPPlan, abusBenefitApplication.aclbPersonWorkHistory_MPI, aclbPersonAccountRetirementContribution, ref adecLateAdjustmentAmt, String.Empty, aintPersonId, ablnReEvaluationMDBatch, astrCalculationType: astrCalculationType, adtEarliestRetirementDate: adtEarliestRetirementDate);


            return ldecReducedAccruedBenefitAmount;
        }


        public decimal CalculateUnReducedBenefitAmtForPension(busPerson abusPerson, decimal adecAge, DateTime adtRetirementDate,
                       busPersonAccount abusPersonAccount, busBenefitApplication abusBenefitApplication,
                       bool ablnIsQdroCal,
                        Collection<busBenefitCalculationDetail> aclbbenefitCalculationDetail,
                        Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI,
                        string astrRetirementSubType, string astrBenefitType = "", DataTable adtbPlanBenefitRate = null,
                        bool ablnDataExtractionBatch = false, int aintLocalPlanQualifiedYears = 0, DataTable adtbWorkDataWeekly = null)
        {

            decimal ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
            decimal ldecTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
            int lintTotalQualifiedYear = busConstant.ZERO_INT;
            int lintMPIQualifiedYear = busConstant.ZERO_INT;
            bool lblnQualifiedYearCheck = false;
            int lintlastComputationYear = 0;
            decimal ldecTableAfactor = 1.0m;
            decimal ldecTableBfactor = 1.0m;
            if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                lintlastComputationYear = (abusBenefitApplication.aclbPersonWorkHistory_MPI.Where(item => item.iblnHoursAfterRetirement == false).ToList().ToCollection()).Max(item => item.year);
            }
            // Accrued Benefit = SUM( Qualified Hours for the plan year * Rate )
            // Step 1. Determine whether to use Plan B / Plan C / Plan Ca Rate table
            lstrRateType = DeterminePlanRate(abusBenefitApplication.ibusPerson, aclbPersonWorkHistory_MPI, adtRetirementDate, adtbWorkDataWeekly, ablnDataExtractionBatch);

            // Step 3. Read the Plan tables to avoid a DB hit each time
            Collection<cdoPlanBenefitRate> lclbcdoPlanBenefitRate = new Collection<cdoPlanBenefitRate>();

            if (adtbPlanBenefitRate != null)
            {
                lclbcdoPlanBenefitRate = cdoDummyWorkData.GetCollection<cdoPlanBenefitRate>(adtbPlanBenefitRate);
            }
            else
            {
                DataTable ldtbPlanBenefitRate = busBase.Select("cdoPlanBenefitRate.Lookup", new object[] { });
                lclbcdoPlanBenefitRate = cdoDummyWorkData.GetCollection<cdoPlanBenefitRate>(ldtbPlanBenefitRate);
            }
            //PIR 355
            lclbcdoPlanBenefitRate = BenefitRateScheduleSpecialCase(adtRetirementDate, lclbcdoPlanBenefitRate);

            lclbcdoPlanBenefitRate = lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == "B" || item.rate_type_value == "C" || item.rate_type_value == "Ca").ToList().ToCollection();

            // Step 4. Determine the Rate that needs to be used for Accured Benefit Calculation
            // Sort the Pension WorkHistory Collection (aclbPersonWorkHistory_MPI) in the decending order of the Qualified Years
            aclbPersonWorkHistory_MPI = aclbPersonWorkHistory_MPI.OrderByDescending(item => item.year).ToList().ToCollection();

            lintMPIQualifiedYear = lintMPIQualifiedYear + aintLocalPlanQualifiedYears;// This is required for Data Extraction batch

            GetRateForBenefitCalculation(abusPerson, abusPerson.icdoPerson.istrSSNNonEncrypted, lstrRateType, adtRetirementDate, lclbcdoPlanBenefitRate,
                aclbPersonWorkHistory_MPI, astrRetirementSubType, abusBenefitApplication.icdoBenefitApplication.benefit_type_value,
                abusBenefitApplication.icdoBenefitApplication.min_distribution_flag == busConstant.FLAG_YES ? true : false);//10 Percent RMD


            lintTotalQualifiedYear = aclbPersonWorkHistory_MPI.FirstOrDefault().qualified_years_count;

            // Sorting the Collection in Ascending order
            aclbPersonWorkHistory_MPI = aclbPersonWorkHistory_MPI.OrderBy(item => item.year).ToList().ToCollection();

            // Step 5. Iterate through the collection to calculate the Accrued Benefit Amount
            if (astrRetirementSubType != busConstant.RETIREMENT_TYPE_LATE &&
                astrRetirementSubType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPI)
                {
                    if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY && lintlastComputationYear == lcdoDummyWorkData.year && lcdoDummyWorkData.iblnHoursAfterRetirement)
                    {
                        cdoDummyWorkData lcdoLastDummyWorkData = abusBenefitApplication.aclbPersonWorkHistory_MPI.Where(item => item.year == lintlastComputationYear && !lcdoDummyWorkData.iblnHoursAfterRetirement).FirstOrDefault();
                        if (lcdoLastDummyWorkData.IsNull() || lcdoLastDummyWorkData.vested_hours < 400)
                        {
                            lintMPIQualifiedYear += 1;
                        }
                    }
                    else if (lcdoDummyWorkData.vested_hours >= 400)
                    {
                        lintMPIQualifiedYear += 1;
                    }
                    else if (lcdoDummyWorkData.year == 2023 && adtRetirementDate.Year >= 2023 && (lcdoDummyWorkData.qualified_hours >= 65 && lcdoDummyWorkData.qualified_hours < 400))
                    {
                        lintMPIQualifiedYear += 1;

                    }



                        // Puneet 06/07/2012 - Need to zero out the Accrued Benefit Amount if the Participant has incurred a forfeiture
                    if (lcdoDummyWorkData.istrForfietureFlag == busConstant.FLAG_YES)
                    {
                        lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                        ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
                        //PIR 1035
                        ldecTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
                    }
                    // “Credited Pension QY in 2023 per MOA 2024” --Ticket#153518
                    else if (lcdoDummyWorkData.year == 2023 && adtRetirementDate.Year >= 2023 && lintMPIQualifiedYear < 20 && (lcdoDummyWorkData.qualified_hours >= 65 && lcdoDummyWorkData.qualified_hours < 400))
                    {
                        lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);

                    }

                    else if ((((!ablnDataExtractionBatch && lcdoDummyWorkData.qualified_years_count < Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20)) ||
                               (ablnDataExtractionBatch && lintMPIQualifiedYear < 20))) &&
                         lcdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                    {
                        // These Hours will not be counted for in the calculation of accrued benefit amount
                        lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                    }
                    
                    else
                    {
                        if (((!ablnDataExtractionBatch && lcdoDummyWorkData.qualified_years_count > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20)) ||
                            (ablnDataExtractionBatch && lintMPIQualifiedYear > 20)) && lcdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                        {
                            if (lintMPIQualifiedYear > 20)
                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                            else
                            {
                                #region To Check If Local Merged - If yes give Benefit Else NO
                                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains("Local")).Count() > 0 && !ablnDataExtractionBatch)
                                {
                                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).Count() > 0)
                                    {
                                        if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_52).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                            if (lcdoDummyWorkData.qualified_years_count > 20)
                                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                    }

                                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).Count() > 0)
                                    {
                                        if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_161).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                            if (lcdoDummyWorkData.qualified_years_count > 20)
                                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                    }

                                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).Count() > 0)
                                    {
                                        if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_600).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                            if (lcdoDummyWorkData.qualified_years_count > 20)
                                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                    }

                                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).Count() > 0)
                                    {
                                        if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_666).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                            if (lcdoDummyWorkData.qualified_years_count > 20)
                                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                    }

                                    if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).Count() > 0)
                                    {
                                        if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.LOCAL_700).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                            if (lcdoDummyWorkData.qualified_years_count > 20)
                                                lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                    }

                                }
                                else
                                    lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                                #endregion
                            }
                        }
                        else
                        {
                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    //}

                    ldecUnreducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;

                    decimal ldecEEContribution = busConstant.ZERO_DECIMAL;
                    decimal ldecEEInterest = busConstant.ZERO_DECIMAL;

                    DataTable ldtbEEContributions = busBase.Select("cdoPersonAccountRetirementContribution.GetEEContibutionAndEEInterestForYear", new object[] { abusPersonAccount.icdoPersonAccount.person_account_id, lcdoDummyWorkData.year });
                    if (ldtbEEContributions.Rows.Count > 0)
                    {
                        ldecEEContribution = Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributions.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributions.Rows[0][0]);
                        ldecEEInterest = Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributions.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributions.Rows[0][1]);
                    }
                    //PIR-557
                    // Get the factors from Table AB
                    //Retirement type is paased LATE as factors are stored against LATE retirement sub type
                    ldecTableAfactor = this.GetTableAFactor(lcdoDummyWorkData.age, busConstant.MPIPP_PLAN_ID, lcdoDummyWorkData.year);

                    ldecTableBfactor = GetTableBFactorForLateRetr(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2, lcdoDummyWorkData.age, lcdoDummyWorkData.year);

                    // Step 6. Update the YTD Collection
                    if (astrRetirementSubType != busConstant.RETIREMENT_TYPE_LATE &&
                        astrRetirementSubType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && !ablnDataExtractionBatch)
                    {
                        if (!ablnIsQdroCal && aclbbenefitCalculationDetail != null)
                        {
                            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail();
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                            lbusBenefitCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, Convert.ToDecimal(lcdoDummyWorkData.year),
                                                                        lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                                        lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, ldecUnreducedAccruedBenefitAmount, ldecTotalAccruedBenefitAmount, busConstant.FLAG_NO, ldecTableBfactor, ldecTableAfactor, ldecEEContribution, ldecEEInterest);

                            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                            }
                            else
                            {
                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                            }
                        }
                        else if (ablnIsQdroCal && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                    item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).IsNullOrEmpty())
                        {
                            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = new busQdroCalculationYearlyDetail();
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                            lbusQdroCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, lcdoDummyWorkData.year,
                                                                        lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                                        lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, ldecUnreducedAccruedBenefitAmount,
                                                                        lcdoDummyWorkData.idecQdroHours, 0, ldecTotalAccruedBenefitAmount);
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().iclbQdroCalculationYearlyDetail.Add(lbusQdroCalculationYearlyDetail);
                        }
                        else if (ablnIsQdroCal && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                    item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).IsNullOrEmpty())
                        {
                            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = new busQdroCalculationYearlyDetail();
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                            lbusQdroCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, lcdoDummyWorkData.year,
                                                                        lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                                        lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, ldecUnreducedAccruedBenefitAmount,
                                                                        lcdoDummyWorkData.idecQdroHours, 0, ldecTotalAccruedBenefitAmount);
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().iclbQdroCalculationYearlyDetail.Add(lbusQdroCalculationYearlyDetail);
                        }
                        else if (ablnIsQdroCal && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                    item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                        {
                            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = new busQdroCalculationYearlyDetail();
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                            lbusQdroCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, lcdoDummyWorkData.year,
                                                                        lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                                        lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, ldecUnreducedAccruedBenefitAmount,
                                                                        lcdoDummyWorkData.idecQdroHours, 0, ldecTotalAccruedBenefitAmount);
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).FirstOrDefault().iclbQdroCalculationYearlyDetail.Add(lbusQdroCalculationYearlyDetail);
                        }
                    }
                }
            }
            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                if (!aclbbenefitCalculationDetail.IsNullOrEmpty() && !ablnIsQdroCal)
                {
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                }
            }
            else
            {
                if (ablnIsQdroCal == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoQdroCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                }
                else if (aclbbenefitCalculationDetail != null)
                {
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                }
            }


            return ldecUnreducedAccruedBenefitAmount;
        }


        //Kunal ref parameter value should be further used in code of late ret     
        public decimal CalculateReducedBenefit(busPerson abusPerson, string astrBenefitTypeValue, decimal adecAge, DateTime adtRetirementDate, DateTime adtVestedDate,
                               busPersonAccount abusPersonAccount, busBenefitApplication abusBenefitApplication,
                               bool ablnIsQdroCal, Collection<busBenefitCalculationDetail> aclbbenefitCalculationDetail,
                                Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, int aintQualifiedYears, decimal ldecUnreducedAccruedBenefitAmount,
                                string astrRetirementSubType, bool albnMPIPFlag, Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution,
                                ref decimal adecLateAdjustmentAmt, string astrBenefitType = "", int aintPersonId = 0, bool ablnReEvaluationMDBatch = false, bool ablnAnnualStmtDataExtractionBatch = false,
            string astrCalculationType = "", DateTime? adtEarliestRetirementDate = null)
        {
            decimal ldecERF = 1;
            int lintPlanId = 0;
            decimal ldecReducedAccruedBenefitAmount = new decimal();
            ldecReducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount;

            switch (astrRetirementSubType)
            {
                case busConstant.RETIREMENT_TYPE_REDUCED_EARLY:
                case busConstant.RETIREMENT_TYPE_SPL_REDUCED_EARLY:

                    // Check for Grandfathered Rule
                    ldecERF = 0; //Sid Jain 05092012
                    busPersonAccount lbusPersonAccount = new busPersonAccount();
                    if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value != busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                    {
                        if (abusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID || item.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID ||
                            item.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID).Count() > 0)
                        {
                            Collection<busPersonAccount> lclbPersonAccount = new Collection<busPersonAccount>();
                            lclbPersonAccount = abusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID || item.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID ||
                                item.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID).ToList().ToCollection();
                            if (!lclbPersonAccount.IsNullOrEmpty())
                            {
                                ldecERF = CheckGrandfatheredRule(aintQualifiedYears, adtVestedDate,
                                    abusPerson.icdoPerson.idtDateofBirth, adtRetirementDate, adecAge, abusBenefitApplication.aclbPersonWorkHistory_MPI, abusBenefitApplication,
                                    lclbPersonAccount);
                            }

                        }
                    }

                    if (ldecERF == busConstant.ZERO_DECIMAL)
                    {
                        // This is for Early Retirement. Fetch the ERF from the lookup table
                        ldecERF = GetEarlyReductionFactor(abusPersonAccount.icdoPersonAccount.plan_id, astrBenefitTypeValue, astrRetirementSubType,
                                                            Convert.ToInt32(Math.Floor(adecAge))); //Sid Jain 05092012;
                    }

                    if (!ablnIsQdroCal)
                    {
                        //Process QDRO Offset
                        if (!aclbbenefitCalculationDetail.IsNullOrEmpty())
                        {
                            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
    , aintPersonId, ref ldecReducedAccruedBenefitAmount);

                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                        .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecReducedAccruedBenefitAmount;

                            }

                            else
                            {
                                if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value != busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                                {

                                    this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).First()
                                        , aintPersonId, ref ldecReducedAccruedBenefitAmount);
                                }
                                else
                                {
                                    this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).First()
                                        , aintPersonId, ref ldecReducedAccruedBenefitAmount, astrCalculationType: astrCalculationType);
                                }

                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                                        .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecReducedAccruedBenefitAmount;
                            }
                        }
                        else
                        {
                            this.GetQdroFFset(aintPersonId, busConstant.MPIPP_PLAN_ID, ref ldecReducedAccruedBenefitAmount);
                        }


                        ldecReducedAccruedBenefitAmount = ldecReducedAccruedBenefitAmount * (ldecERF);
                    }

                    break;

                case busConstant.RETIREMENT_TYPE_NORMAL:
                case busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY:
                    // Normal Or Unreduced Retirement 
                    if (!ablnIsQdroCal)
                    {
                        if (!aclbbenefitCalculationDetail.IsNullOrEmpty())
                        {
                            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
                                 , aintPersonId, ref ldecReducedAccruedBenefitAmount);

                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                        .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecReducedAccruedBenefitAmount;

                            }
                            else
                            {
                                if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value != busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                                {
                                    //Process QDRO Offset
                                    this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).First()
                                        , aintPersonId, ref ldecReducedAccruedBenefitAmount);
                                }
                                else
                                {
                                    //Process QDRO Offset
                                    this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).First()
                                        , aintPersonId, ref ldecReducedAccruedBenefitAmount, astrCalculationType: astrCalculationType);
                                }

                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                                        .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecReducedAccruedBenefitAmount;
                            }
                        }
                        else
                        {
                            this.GetQdroFFset(aintPersonId, busConstant.MPIPP_PLAN_ID, ref ldecReducedAccruedBenefitAmount);
                        }
                    }

                    ldecERF = 1;

                    // Step 8. Calculate the Benefits for all the Benefit Options
                    //ldecFinalAccruedBenefitAmount = this.CalculateFinalBenefitForPensionBenefitOptions(ldecReducedAccruedBenefitAmount, astrBenefitOptionValue);

                    break;

                case busConstant.RETIREMENT_TYPE_LATE:
                case busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION:
                    // Retirement Type is Late
                    // Sort the Collection in Ascending order of the Plan Year
                    //this.ibusBenefitApplication.aclbPersonWorkHistory_MPIbusConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION: = this.ibusBenefitApplication.aclbPersonWorkHistory_MPI.OrderBy(item => item.year).ToList().ToCollection();
                    ldecUnreducedAccruedBenefitAmount = CalculateLateRetirementAccruedBenefitAmount(abusPersonAccount, abusPersonAccount.icdoPersonAccount.plan_id,
                                                                         astrBenefitTypeValue, abusPerson, aclbPersonWorkHistory_MPI,
                                                                         ablnIsQdroCal, aclbbenefitCalculationDetail, aclbQdroCalculationDetail,
                                                                         ref adecLateAdjustmentAmt, adtRetirementDate,
                                                                         albnMPIPFlag, adtVestedDate, aclbPersonAccountRetirementContribution, abusBenefitApplication.icdoBenefitApplication.benefit_type_value, ablnReEvaluationMDBatch, ablnAnnualStmtDataExtractionBatch, adtEarliestRetirementDate: adtEarliestRetirementDate);

                    busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility();
                    lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(abusPersonAccount.icdoPersonAccount.person_account_id);


                    if (adecLateAdjustmentAmt == 0)
                    {
                        ldecReducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount;
                    }
                    else
                    {
                        ldecReducedAccruedBenefitAmount = adecLateAdjustmentAmt;
                    }
                    //This variable should be used all across for further calculations;

                    if (!ablnIsQdroCal)
                    {
                        if (!aclbbenefitCalculationDetail.IsNullOrEmpty())
                        {
                            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
    , aintPersonId, ref ldecReducedAccruedBenefitAmount);

                                adecLateAdjustmentAmt = ldecReducedAccruedBenefitAmount;

                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                        .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecReducedAccruedBenefitAmount;

                            }
                            else
                            {
                                if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value != busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                                {
                                    //Process QDRO Offset
                                    this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).First()
                                        , aintPersonId, ref ldecReducedAccruedBenefitAmount);
                                }
                                else
                                {
                                    //Process QDRO Offset
                                    this.ProcessQDROOffset(aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).First()
                                        , aintPersonId, ref ldecReducedAccruedBenefitAmount, astrCalculationType: astrCalculationType);
                                }

                                adecLateAdjustmentAmt = ldecReducedAccruedBenefitAmount;

                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                                        .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecReducedAccruedBenefitAmount;
                            }
                        }
                        else
                        {
                            this.GetQdroFFset(aintPersonId, busConstant.MPIPP_PLAN_ID, ref ldecReducedAccruedBenefitAmount);
                            adecLateAdjustmentAmt = ldecReducedAccruedBenefitAmount;
                        }
                    }

                    ldecERF = 1;

                    // Step 8. Calculate the Benefits for all the Benefit Options
                    //ldecFinalAccruedBenefitAmount = this.CalculateFinalBenefitForPensionBenefitOptions(this.idecLateAdjustmentAmount, astrBenefitOptionValue);
                    break;

                default:
                    ldecERF = 1;
                    break;
            }
            //Benefit Commmencement date less than  55 we will use ERF factor for age 55 for Death
            if (astrBenefitTypeValue == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT && string.IsNullOrEmpty(abusPersonAccount.icdoPersonAccount.istrRetirementSubType))
            {
                ldecERF = GetEarlyReductionFactor(abusPersonAccount.icdoPersonAccount.plan_id, astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_REDUCED_EARLY,
                                    55);

                ldecReducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount * ldecERF;
            }

            if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                if (!aclbbenefitCalculationDetail.IsNullOrEmpty() && !ablnIsQdroCal)
                {
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.early_reduction_factor = ldecERF;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecReducedAccruedBenefitAmount;
                }
            }
            else
            {
                if (ablnIsQdroCal && !aclbQdroCalculationDetail.IsNullOrEmpty() && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                        item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO).IsNullOrEmpty())
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                        item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                        item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.early_reduction_factor = ldecERF;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id &&
                                        item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecReducedAccruedBenefitAmount;
                }

                if (!aclbbenefitCalculationDetail.IsNullOrEmpty() && !ablnIsQdroCal)
                {
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount = ldecUnreducedAccruedBenefitAmount;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.early_reduction_factor = ldecERF;
                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecReducedAccruedBenefitAmount;

                    if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE)
                    {
                        //PIR 172 - Display issue for late adjustment amount
                        busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().iclbBenefitCalculationYearlyDetail.LastOrDefault();  //OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).FirstOrDefault();

                        if (lbusBenefitCalculationYearlyDetail.IsNotNull())
                        {
                            // Late Retirement
                            aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.additional_accrued_benefit_amount =
                                lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.annual_adjustment_amount;

                            // Annual Max
                            aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount =
                                lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount;

                            //10 Percent
                            if (aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount
                                - aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.qdro_offset > 0)
                                aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount -=
                                    aclbbenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().icdoBenefitCalculationDetail.qdro_offset;
                        }
                    }
                }
            }



            return ldecReducedAccruedBenefitAmount;

        }



        public decimal CheckGrandfatheredRule(int aintTotalQualifiedYears, DateTime adtVestedDate, DateTime adtDateofBirth,
                                                DateTime adtRetirementDate, decimal adecParticipantAge, Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI, busBenefitApplication abusBenefitApplication, Collection<busPersonAccount> lclbPersonAccount)
        {
            decimal ldecERF = decimal.Zero;

            decimal ldecL52ERF = busConstant.ZERO_DECIMAL;
            decimal ldecL161ERF = busConstant.ZERO_DECIMAL;
            decimal ldecL700ERF = busConstant.ZERO_DECIMAL;

            foreach (busPersonAccount lbusPersonAccount in lclbPersonAccount)
            {
                if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID)
                {
                    if (adtVestedDate <= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_52)
                    {
                        // Participant is Vested at Merger
                        // Calculate the date when participant is 48
                        DateTime ldtDateAtParticipantAge48 = adtDateofBirth.AddYears(48);

                        // Check if Participant had 10 Pension Credits at this date
                        // Sum of Pension Credits upto ldtDateAtParticipantAge48.Year
                        if (aclbPersonWorkHistory_MPI != null && aclbPersonWorkHistory_MPI.Count > 0 && ldtDateAtParticipantAge48 <= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_52)
                        {
                            //UAT PIR 227 : Discussion With Debra 
                            //Previously checking pension credit as of participant's age 48 but instead 
                            //Need to check it as of the merger date

                            decimal ldecPensionCredit = aclbPersonWorkHistory_MPI.Where(item => item.year < busConstant.BenefitCalculation.MERGER_DATE_LOCAL_52.Year).Sum(item => item.L52_PensionCredits);

                            if (ldecPensionCredit >= 10)
                            {
                                // Calculate the Retirement Credits 
                                decimal ldecRetirementCredits = CalculateLocal52RetirementCreditsFORGrandfather(aclbPersonWorkHistory_MPI);
                                // Check Participants Age at Retirement and the Special Years
                                if (Math.Floor(adecParticipantAge) >= 55 && ldecRetirementCredits >= 15)
                                {
                                    // Participant is eligible for Grandfathered Early Retirement under Local 52 plan
                                    //DateTime ldtUnreducedRetrAgeDate = this.ibusPerson.icdoPerson.idtDateofBirth.AddYears(Convert.ToInt32(busConstant.BenefitCalculation.NORMAL_RETIREMENT_AGE_LOCAL_52));
                                    int lintCompareAge = GetBestAgeforReductionFactor_Local52(abusBenefitApplication);
                                    DateTime ldtUnreducedRetrAgeDate = adtDateofBirth.AddYears(lintCompareAge);
                                    if (ldtUnreducedRetrAgeDate.Day != 1)
                                        ldtUnreducedRetrAgeDate = ldtUnreducedRetrAgeDate.AddMonths(1);

                                    int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtUnreducedRetrAgeDate);

                                    if (DiffinMonths > 0)
                                    {
                                        ldecL52ERF = (1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_52 * DiffinMonths));
                                    }
                                    //635
                                    else
                                    {
                                        ldecL52ERF = (1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_52 * 0));
                                    }
                                }
                            }
                        }
                    }
                }
                if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID)
                {
                    // RULE :- Age 55 and Earned 15 Pension Credits on 01/01/2005 and Attains age 60
                    // Check if Participant is vested at merger
                    if (adtVestedDate <= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_161)
                    {
                        // Participant is Vested at Merger
                        // Calculate Age at Merger
                        decimal ldecAge = busGlobalFunctions.CalculatePersonAgeInDec(adtDateofBirth, busConstant.BenefitCalculation.MERGER_DATE_LOCAL_161);
                        if (ldecAge >= 55 && Math.Floor(adecParticipantAge) >= 60)
                        {
                            // Participant Age is greater than 55 at Merger
                            // Check for the Pension Credits
                            decimal ldecPensionCredits = aclbPersonWorkHistory_MPI.Sum(item => item.L161_PensionCredits);

                            if (ldecPensionCredits >= 15)
                            {
                                ldecL161ERF = 1.0m;
                            }
                        }
                    }
                }
                if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID)
                {
                    if (adtVestedDate <= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_700)
                    {
                        // Participant is Vested at Merger
                        DateTime ldtDateAtParticipantAge45 = adtDateofBirth.AddYears(45);

                        // Check if Participant had 5 Pension Credits at this date
                        // Sum of Pension Credits upto ldtDateAtParticipantAge45.Year
                        //PIR 922 Age 45 check correction
                        //if (aclbPersonWorkHistory_MPI != null && aclbPersonWorkHistory_MPI.Count > 0 && ldtDateAtParticipantAge45 >= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_700)  
                        if (aclbPersonWorkHistory_MPI != null && aclbPersonWorkHistory_MPI.Count > 0 && ldtDateAtParticipantAge45 <= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_700)
                        {
                            decimal ldecPensionCredit = aclbPersonWorkHistory_MPI.Where(item => item.year <= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_700.Year).Sum(item => item.L700_PensionCredits);

                            if (ldecPensionCredit >= 5)
                            {
                                // Check Participants Age at Retirement and the Special Years
                                if (Math.Floor(adecParticipantAge) >= 52 && aintTotalQualifiedYears >= 10)
                                {
                                    // Participant is eligible for Grandfathered Early Retirement under Local 700 plan
                                    int lintCompareAge = abusBenefitApplication.GetBestAgeforReductionFactor_Local700();
                                    DateTime ldtUnreducedRetrAgeDate = adtDateofBirth.AddYears(lintCompareAge);
                                    if (ldtUnreducedRetrAgeDate.Day != 1)
                                        ldtUnreducedRetrAgeDate = ldtUnreducedRetrAgeDate.AddMonths(1);

                                    int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtUnreducedRetrAgeDate);

                                    //PIR 922-2
                                    //ldecL700ERF = (1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * DiffinMonths));
                                    if (DiffinMonths > 0)
                                    {
                                        ldecL700ERF = (1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * DiffinMonths));
                                    }
                                    else
                                    {
                                        ldecL700ERF = (1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * 0));
                                    }

                                }
                            }
                        }
                    }
                }
            }

            ldecERF = Math.Max(ldecL52ERF, Math.Max(ldecL161ERF, ldecL700ERF));

            return ldecERF;
        }

        public decimal CalculateLocal52RetirementCredits(Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI)
        {
            //Credited Hours During Plan Year  Retirement Credit for Plan Year
            //    0 - 359                               0
            //    360 - 719                             1/4
            //    720 - 1079                            1/2
            //    1080 - 1439                           3/4
            //    1440 and over                         1


            decimal ldecRetirementCredit = busConstant.ZERO_DECIMAL;
            if (aclbPersonWorkHistory_MPI != null)
            {
                foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPI)
                {
                    if (lcdoDummyWorkData.L52_Hours >= 0 && lcdoDummyWorkData.L52_Hours <= 359)
                    {
                        ldecRetirementCredit = ldecRetirementCredit + 0;
                    }
                    else if (lcdoDummyWorkData.L52_Hours >= 360 && lcdoDummyWorkData.L52_Hours <= 719)
                    {
                        ldecRetirementCredit = ldecRetirementCredit + 0.25m;
                    }
                    else if (lcdoDummyWorkData.L52_Hours >= 720 && lcdoDummyWorkData.L52_Hours <= 1079)
                    {
                        ldecRetirementCredit = ldecRetirementCredit + 0.5m;
                    }
                    else if (lcdoDummyWorkData.L52_Hours >= 1080 && lcdoDummyWorkData.L52_Hours <= 1439)
                    {
                        ldecRetirementCredit = ldecRetirementCredit + 0.75m;
                    }
                    else
                    {
                        ldecRetirementCredit = ldecRetirementCredit + 1m;
                    }
                }
            }
            return ldecRetirementCredit;
        }

        //UAT PIR 227 : For Local 52 we apply the Retirement Credit Rules after the merger for MPI hours. The rule has been applied already to the hours before the merger.
        public decimal CalculateLocal52RetirementCreditsFORGrandfather(Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI)
        {
            //Credited Hours During Plan Year  Retirement Credit for Plan Year
            //    0 - 359                               0
            //    360 - 719                             1/4
            //    720 - 1079                            1/2
            //    1080 - 1439                           3/4
            //    1440 and over                         1


            decimal ldecRetirementCredit = decimal.Zero;
            decimal ldecPensionCredit = decimal.Zero;
            if (aclbPersonWorkHistory_MPI != null)
            {
                foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPI)
                {

                    if (lcdoDummyWorkData.year >= busConstant.BenefitCalculation.MERGER_DATE_LOCAL_52.Year)
                    {
                        if (lcdoDummyWorkData.vested_hours >= 0 && lcdoDummyWorkData.vested_hours <= 359)
                        {
                            ldecRetirementCredit = ldecRetirementCredit + 0;
                        }
                        else if (lcdoDummyWorkData.vested_hours >= 360 && lcdoDummyWorkData.vested_hours <= 719)
                        {
                            ldecRetirementCredit = ldecRetirementCredit + 0.25m;
                        }
                        else if (lcdoDummyWorkData.vested_hours >= 720 && lcdoDummyWorkData.vested_hours <= 1079)
                        {
                            ldecRetirementCredit = ldecRetirementCredit + 0.5m;
                        }
                        else if (lcdoDummyWorkData.vested_hours >= 1080 && lcdoDummyWorkData.vested_hours <= 1439)
                        {
                            ldecRetirementCredit = ldecRetirementCredit + 0.75m;
                        }
                        else
                        {
                            ldecRetirementCredit = ldecRetirementCredit + 1m;
                        }
                    }
                    else
                    {
                        ldecRetirementCredit += Math.Max(lcdoDummyWorkData.L52_PensionCredits, lcdoDummyWorkData.L52_Hours < 1440 ? 0 : 1);
                    }
                }
            }
            return ldecRetirementCredit;
        }


        public decimal CalculateEEDerivedBenefitAsOfRetirementDate(busBenefitCalculationHeader abusBenefitCalculationHeader, busQdroCalculationHeader abusQdroCalculationHeader)
        {
            decimal ldecEEDerivedAmount = new decimal();
            decimal ldecEEContribution = busConstant.ZERO_DECIMAL;
            decimal ldecEEInterest = busConstant.ZERO_DECIMAL;
            decimal ldecBenefitInterestRate = 0;
            Collection<busBenefitCalculationYearlyDetail> lclbbusBenefitCalculationYearlyDetail = null;
            Collection<busQdroCalculationYearlyDetail> lclbQdroCalculationYearlyDetail = null;
            int lintPersonAccountId = 0;
            decimal ldecTableBfactor = decimal.One;
            Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetirementContribution = new Collection<busPersonAccountRetirementContribution>();
            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = null;
            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = null;

            // busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility();


            if (abusBenefitCalculationHeader != null)
            {
                lintPersonAccountId = abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id ==
                                                busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoPersonAccount.person_account_id;
                //lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(lintPersonAccountId);

                lclbPersonAccountRetirementContribution =
                abusBenefitCalculationHeader.iclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId).
                OrderBy(item => item.icdoPersonAccountRetirementContribution.computational_year).ToList().ToCollection();
            }
            else if (abusQdroCalculationHeader != null)
            {
                lintPersonAccountId = abusQdroCalculationHeader.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id ==
                                                busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoPersonAccount.person_account_id;
                //lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(lintPersonAccountId);

                lclbPersonAccountRetirementContribution =
                abusQdroCalculationHeader.iclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId).
                OrderBy(item => item.icdoPersonAccountRetirementContribution.computational_year).ToList().ToCollection();
            }


            // To Do : Changes according to Vesting & Non Vesting will be done in Header 
            if (lclbPersonAccountRetirementContribution.Count() > 0)
            {
                if (abusBenefitCalculationHeader != null &&
                    abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id ==
                                                                abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).Count() > 0)
                {
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        if (abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).Count() > 0)
                        {
                            lclbbusBenefitCalculationYearlyDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().iclbBenefitCalculationYearlyDetail.ToList().ToCollection();
                            if (lclbbusBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == Convert.ToDecimal(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year)).Count() > 0)
                            {
                                lbusBenefitCalculationYearlyDetail = lclbbusBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == Convert.ToDecimal(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year)).FirstOrDefault();
                            }
                        }
                    }

                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_RETIREMENT && abusBenefitCalculationHeader.icdoBenefitCalculationHeader.istrRetirementType == busConstant.RETIREMENT_TYPE_LATE)
                    {
                        busBenefitCalculationDetail lbusBenefitCalculationDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id ==
                                                               abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).FirstOrDefault();
                        if (lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail != null && lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Count() > 0
                        && lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.
                        Where(t => t.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && t.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt > 0).Count() > 0)
                        {
                            ldecEEDerivedAmount = lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.
                                Where(t => t.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && t.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt > 0).OrderBy(t => t.icdoBenefitCalculationYearlyDetail.age).FirstOrDefault().icdoBenefitCalculationYearlyDetail.max_ee_derv_amt;

                            return ldecEEDerivedAmount;
                        }

                    }

                    //if (lbusPersonAccountEligibility != null && lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date != DateTime.MinValue)
                    //{
                    //    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution
                    //                          where item.icdoPersonAccountRetirementContribution.computational_year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year
                    //                          && item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date
                    //                          && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                    //                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                    //    ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                    //                      where item.icdoPersonAccountRetirementContribution.computational_year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year
                    //                      && item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date
                    //                      && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                    //                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                    //}
                    // else
                    //{
                    //if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_RETIREMENT)
                    //{
                    //    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution 
                    //                          where item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED 
                    //                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                    //    ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                    //                      where item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                    //                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();

                    //}
                    //else
                    //{
                    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                    }
                    else
                    {
                        ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();

                    }
                    //}
                    // }

                    object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year },
                                    iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                    if (lobjBenefitInterestRate.IsNotNull())
                    {
                        ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                    }
                    decimal ldecEEPartialInterestAmount = decimal.Zero;
                    //PIR-345: Commented IF condition
                    //if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    //{
                    ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Month - 1), 2);
                    ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;
                    //}

                    decimal ldecTableAfactor = this.GetTableAFactor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.age, busConstant.MPIPP_PLAN_ID, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year);
                    ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                                   abusBenefitCalculationHeader.icdoBenefitCalculationHeader.idecParticipantFullAge, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year < 1988 ? 1988 : abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year);
                    ldecEEDerivedAmount = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);

                    if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
                    {
                        if (lbusBenefitCalculationYearlyDetail != null)
                        {
                            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = ldecEEDerivedAmount;
                        }
                    }
                }
                #region QDRO
                else if (abusQdroCalculationHeader != null &&
                  abusQdroCalculationHeader.iclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).Count() > 0)
                {
                    //lbusQdroCalculationYearlyDetail = lclbQdroCalculationYearlyDetail.Where(item => item.icdoQdroCalculationYearlyDetail.plan_year ==
                    //    abusQdroCalculationHeader.GetRetirementDateforCalculation().Year).FirstOrDefault();

                    //if (lbusPersonAccountEligibility != null && lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date != DateTime.MinValue)
                    //{
                    //    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution
                    //                          where item.icdoPersonAccountRetirementContribution.computational_year < abusQdroCalculationHeader.GetRetirementDateforCalculation().Year
                    //                          && item.icdoPersonAccountRetirementContribution.effective_date <= abusQdroCalculationHeader.GetRetirementDateforCalculation()
                    //                          && item.icdoPersonAccountRetirementContribution.computational_year > lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date.Year
                    //                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                    //    ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                    //                      where item.icdoPersonAccountRetirementContribution.computational_year < abusQdroCalculationHeader.GetRetirementDateforCalculation().Year
                    //                      && item.icdoPersonAccountRetirementContribution.effective_date <= abusQdroCalculationHeader.GetRetirementDateforCalculation()
                    //                      && item.icdoPersonAccountRetirementContribution.computational_year > lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date.Year
                    //                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                    //}
                    //else
                    //{
                    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution
                                          where item.icdoPersonAccountRetirementContribution.computational_year <
                                              abusQdroCalculationHeader.GetRetirementDateforCalculation().Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusQdroCalculationHeader.GetRetirementDateforCalculation()
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();

                    ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                      where item.icdoPersonAccountRetirementContribution.computational_year <
                                          abusQdroCalculationHeader.GetRetirementDateforCalculation().Year &&
                                          item.icdoPersonAccountRetirementContribution.effective_date <= abusQdroCalculationHeader.GetRetirementDateforCalculation()
                                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                    // }

                    object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] {
                                                     abusQdroCalculationHeader.GetRetirementDateforCalculation().Year },
                                    iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                    if (lobjBenefitInterestRate.IsNotNull())
                    {
                        ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                    }
                    decimal ldecEEPartialInterestAmount = decimal.Zero;

                    if (abusQdroCalculationHeader.icdoQdroCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (abusQdroCalculationHeader.GetRetirementDateforCalculation().Month - 1), 2);
                        ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;
                    }

                    decimal ldecTableAfactor = this.GetTableAFactor(abusQdroCalculationHeader.icdoQdroCalculationHeader.age, busConstant.MPIPP_PLAN_ID,
                                                abusQdroCalculationHeader.GetRetirementDateforCalculation().Year);
                    ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                                   abusQdroCalculationHeader.icdoQdroCalculationHeader.iintParticipantAtRetirement, abusQdroCalculationHeader.GetRetirementDateforCalculation().Year < 1988 ? 1988 : abusQdroCalculationHeader.GetRetirementDateforCalculation().Year);
                    ldecEEDerivedAmount = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);


                    if (lbusBenefitCalculationYearlyDetail != null)
                    {
                        lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = ldecEEDerivedAmount;
                    }

                }
                #endregion

            }
            return ldecEEDerivedAmount;
        }

        public decimal CalculateEEDerivedBenefitTillDate(Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution,
                                                            decimal adecAge, DateTime adtCalculationDate, int adtForfeitureDateYear, bool ablnWithdrawalExistsBefore1976)
        {
            decimal ldecEEDerivedAmount = new decimal();
            decimal ldecEEContribution = busConstant.ZERO_DECIMAL;
            decimal ldecEEInterest = busConstant.ZERO_DECIMAL;
            decimal ldecBenefitInterestRate = 0;
            decimal ldecTableBfactor = decimal.One;

            if (aclbPersonAccountRetirementContribution.Count() > 0)
            {
                if (ablnWithdrawalExistsBefore1976 == false)
                {
                    ldecEEContribution = (from item in aclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < adtCalculationDate.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= adtCalculationDate &&
                                              item.icdoPersonAccountRetirementContribution.computational_year > adtForfeitureDateYear &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();

                    ldecEEInterest = (from item in aclbPersonAccountRetirementContribution
                                      where
                                          item.icdoPersonAccountRetirementContribution.computational_year < adtCalculationDate.Year &&
                                          item.icdoPersonAccountRetirementContribution.effective_date <= adtCalculationDate &&
                                          item.icdoPersonAccountRetirementContribution.computational_year > adtForfeitureDateYear &&
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                }
                else
                {
                    ldecEEContribution = (from item in aclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < adtCalculationDate.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= adtCalculationDate &&
                                              item.icdoPersonAccountRetirementContribution.computational_year > adtForfeitureDateYear &&
                                              item.icdoPersonAccountRetirementContribution.computational_year >= 1976 &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();

                    ldecEEInterest = (from item in aclbPersonAccountRetirementContribution
                                      where
                                          item.icdoPersonAccountRetirementContribution.computational_year < adtCalculationDate.Year &&
                                          item.icdoPersonAccountRetirementContribution.effective_date <= adtCalculationDate &&
                                          item.icdoPersonAccountRetirementContribution.computational_year >= 1976 &&
                                          item.icdoPersonAccountRetirementContribution.computational_year > adtForfeitureDateYear &&
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                }

                object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] {
                                                        adtCalculationDate.Year },
                                                    iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                if (lobjBenefitInterestRate.IsNotNull())
                {
                    ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                }
                decimal ldecEEPartialInterestAmount = decimal.Zero;

                ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (adtCalculationDate.Month - 1), 2);
                ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;

                decimal ldecTableAfactor = this.GetTableAFactor(adecAge, busConstant.MPIPP_PLAN_ID, adtCalculationDate.Year);
                ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                               adecAge, adtCalculationDate.Year < 1988 ? 1988 : adtCalculationDate.Year);
                ldecEEDerivedAmount = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);


            }

            return ldecEEDerivedAmount;
        }

        public decimal GetTableBFactorForEEDerived(string astrBenefitAccountTypeValue, string astrBenefitAccountSubtypeValue, int aintBenefitProvisionId, decimal adecAge, int aintPlanYear)
        {
            decimal ldecTableBFactor = busConstant.ZERO_DECIMAL;

            DataTable ldtbTableBFator = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetTableBFactorForLateRetirement",
                 new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge) < 65 ? 65 : Math.Floor(adecAge), aintPlanYear });

            if (ldtbTableBFator.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator.Rows[0][0].IsDBNull()))
            {
                ldecTableBFactor = Convert.ToDecimal(ldtbTableBFator.Rows[0][0]);
            }
            else
            {
                ldtbTableBFator = busBase.Select("cdoBenefitProvisionBenefitTypeFactor.GetLatestTableBFactorForLateRetirement",
                    new object[] { astrBenefitAccountTypeValue, astrBenefitAccountSubtypeValue, aintBenefitProvisionId, Math.Floor(adecAge) < 65 ? 65 : Math.Floor(adecAge) });

                if (ldtbTableBFator.Rows.Count > 0 && !Convert.ToBoolean(ldtbTableBFator.Rows[0][0].IsDBNull()))
                {
                    ldecTableBFactor = Convert.ToDecimal(ldtbTableBFator.Rows[0][0]);
                }
            }

            if (ldecTableBFactor == Decimal.Zero)
                ldecTableBFactor = Decimal.One;

            return ldecTableBFactor;
        }

        /*
           public void CalculateEEDerivedBenefitTillRetirementDate(busBenefitCalculationHeader abusBenefitCalculationHeader, out decimal adecEEDerivedAmount)
           {
               decimal ldecEEDerivedAmount = new decimal();
               decimal ldecUnreducedAccruedBenefitAmount = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.unreduced_benefit_amount;
               decimal ldecEEContribution = busConstant.ZERO_DECIMAL;
               decimal ldecEEInterest = busConstant.ZERO_DECIMAL;
               Collection<busBenefitCalculationYearlyDetail> lclbbusBenefitCalculationYearlyDetail = null;
               int lintPersonAccountId = abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).FirstOrDefault().icdoPersonAccount.person_account_id;
               busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = null;
               decimal ldecTableBfactor = decimal.One;
               Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetirementContribution = abusBenefitCalculationHeader.iclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId).OrderBy(item => item.icdoPersonAccountRetirementContribution.computational_year).ToList().ToCollection();
               foreach (cdoDummyWorkData lcdoDummyWorkData in abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI)
               {
                   ldecTableBfactor = decimal.One;
                       if (lcdoDummyWorkData.bis_years_count > lcdoDummyWorkData.vested_years_count)
                       {
                           lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                           ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
                       }
                       else if (lcdoDummyWorkData.qualified_years_count < Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20) &&
                           lcdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                       {
                           lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                       }
                       else
                       {
                           lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2);
                       }

                   if (abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).Count() > 0)
                   {
                       lclbbusBenefitCalculationYearlyDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).FirstOrDefault().iclbBenefitCalculationYearlyDetail.ToList().ToCollection();
                       if (lclbbusBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == Convert.ToDecimal(lcdoDummyWorkData.year)).Count() > 0)
                       {
                           lbusBenefitCalculationYearlyDetail = lclbbusBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == Convert.ToDecimal(lcdoDummyWorkData.year)).FirstOrDefault();
                       }
                   }
                   if (lcdoDummyWorkData.year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year)
                   {
                       if (lcdoDummyWorkData.year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year)
                       {
                           ldecEEContribution = (from item in lclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year <= lcdoDummyWorkData.year && item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                           ldecEEInterest = (from item in lclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year <= lcdoDummyWorkData.year && item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                       }
                       else
                       {
                           ldecEEContribution = (from item in lclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year < lcdoDummyWorkData.year && item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                           ldecEEInterest = (from item in lclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year < lcdoDummyWorkData.year && item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();

                           decimal ldecBenefitInterestRate = 0;
                           object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year },
                                               iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                           if (lobjBenefitInterestRate.IsNotNull())
                           {
                               ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                           }

                           decimal ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Month - 1), 2);
                           ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;

                       }
                       //DataTable ldtbEEContributions = busBase.Select("cdoPersonAccountRetirementContribution.GetEEContributionUptoEffectiveDate", new object[] { lintPersonAccountId, lcdoDummyWorkData.year, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date });


                       // Get the factors from Table AB
                       decimal ldecTableAfactor = this.GetTableAFactor(lcdoDummyWorkData.age, busConstant.MPIPP_PLAN_ID, lcdoDummyWorkData.year);
                       ldecTableBfactor = this.GetTableBFactor(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                                      lcdoDummyWorkData.age, lcdoDummyWorkData.year < 1988 ? 1988 : lcdoDummyWorkData.year);

                       //ldecEEContribution = Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributions.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributions.Rows[0][0]);
                       //ldecEEInterest = Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributions.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributions.Rows[0][1]);

                       lcdoDummyWorkData.idecEEDerivedBenefit = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);
                       ldecEEDerivedAmount = ldecEEDerivedAmount + lcdoDummyWorkData.idecEEDerivedBenefit;
                       //lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonthsAfterDate(abusBenefitCalculationHeader.ibusPerson.icdoPerson.ssn, lcdoDummyWorkData.year,
                       //                                                                                   abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId, null, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.payment_date);


                   }

                   if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
                   {
                       if (lbusBenefitCalculationYearlyDetail != null)
                       {
                           lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.suspendible_months_count = lcdoDummyWorkData.iintNonSuspendibleMonths;
                           lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = ldecEEDerivedAmount;

                       }
                       //abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);

                   }
               }
               adecEEDerivedAmount = ldecEEDerivedAmount;

           }
        */
        public int GetNonSuspendibleMonthsAfterDate(string astrParticipantSSN, int aintPlanYear, int aintPlanId,
            busBenefitCalculationYearlyDetail abusBenefitCalculationYearlyDetail, DateTime adtFromDate, DateTime adtToDate)
        {
            int lintNonSuspendibleMonths = busConstant.ZERO_INT;
            IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
            Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();

            if (lconLegacy != null)
            {
                IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                lobjParameter.ParameterName = "@SSN";
                lobjParameter.DbType = DbType.String;
                lobjParameter.Value = astrParticipantSSN;
                lcolParameters.Add(lobjParameter);

                IDbDataParameter lobjParameter1 = DBFunction.GetDBParameter();
                lobjParameter1.ParameterName = "@PLANYEAR";
                lobjParameter1.DbType = DbType.Int32;
                lobjParameter1.Value = aintPlanYear;
                lcolParameters.Add(lobjParameter1);

                IDbDataParameter lobjParameter2 = DBFunction.GetDBParameter();
                lobjParameter2.ParameterName = "@PLANID";
                lobjParameter2.DbType = DbType.Int32;
                lobjParameter2.Value = aintPlanId;
                lcolParameters.Add(lobjParameter2);

                Hashtable lhstMonthlyHours = new Hashtable();
                for (int i = 12; i >= 1; i--)
                {
                    lhstMonthlyHours.Add(i, busConstant.ZERO_DECIMAL);
                }
                IDataReader lDataReader = DBFunction.DBExecuteProcedureResult("usp_GetWorkDataForPlanYear", lcolParameters, lconLegacy, null);
                DataTable ldtbAnnualMonthlySummary = new DataTable();

                if (lDataReader != null)
                {
                    ldtbAnnualMonthlySummary.Load(lDataReader);
                    if (ldtbAnnualMonthlySummary.Rows.Count > 0)
                    {
                        // Iterate the data table and count the number of non suspendable months
                        foreach (DataRow ldrMonthlySummary in ldtbAnnualMonthlySummary.Rows)
                        {
                            DateTime ldtFromDate = Convert.ToDateTime(ldrMonthlySummary["FromDate"]);
                            if (ldtFromDate.Month >= adtFromDate.Month)
                            {
                                decimal ldecHours = 1M;
                                if (Convert.ToInt32(ldrMonthlySummary["Weeks"]) > 0)
                                {
                                    ldecHours = Convert.ToInt32(ldrMonthlySummary["PensionHours"]) / Convert.ToInt32(ldrMonthlySummary["Weeks"]);
                                }
                                else
                                {
                                    ldecHours = Convert.ToInt32(ldrMonthlySummary["PensionHours"]);
                                }

                                // Check for the no of weeks. Divide the hours equally per week.
                                while (ldtFromDate <= Convert.ToDateTime(ldrMonthlySummary["ToDate"]))
                                {

                                    if (ldtFromDate.Month == 12 && ldtFromDate.Year == aintPlanYear - 1)
                                    {
                                        lhstMonthlyHours[1] = (decimal)lhstMonthlyHours[1] + ldecHours;
                                    }
                                    else
                                    {
                                        lhstMonthlyHours[ldtFromDate.Month] = (decimal)lhstMonthlyHours[ldtFromDate.Month] + ldecHours;
                                    }

                                    ldtFromDate = ldtFromDate.AddDays(7);
                                }
                            }

                            IDictionaryEnumerator denum = lhstMonthlyHours.GetEnumerator();
                            DictionaryEntry dentry;

                            denum.Reset();
                            while (denum.MoveNext() != false)
                            {
                                dentry = (DictionaryEntry)denum.Current;
                                // Increase the count by 1 for each of them
                                //SuspendibleHoursChange
                                if ((decimal)dentry.Value < GetSuspendibleHoursValue(aintPlanYear, (int)dentry.Key) /*40*/)
                                {
                                    lintNonSuspendibleMonths = lintNonSuspendibleMonths + 1;

                                    // Insert the data in the Collection
                                    //busBenefitCalculationNonsuspendibleDetail lbusBenefitCalculationNonsuspendibleDetail = new busBenefitCalculationNonsuspendibleDetail() { icdoBenefitCalculationNonsuspendibleDetail = new cdoBenefitCalculationNonsuspendibleDetail() };
                                    //lbusBenefitCalculationNonsuspendibleDetail.LoadData(aintPlanYear, (int)dentry.Key, (decimal)dentry.Value);
                                    //abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail.Add(lbusBenefitCalculationNonsuspendibleDetail);
                                }
                            }
                        }
                    }

                }

            }
            return lintNonSuspendibleMonths;
        }




        public bool CheckIfHoursAfterRetirementDate(string astrParticipantSSN, DateTime adtRetirementDate)
        {
            try
            {
                IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
                Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();

                if (lconLegacy != null)
                {
                    IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                    lobjParameter.ParameterName = "@SSN";
                    lobjParameter.DbType = DbType.String;
                    lobjParameter.Value = astrParticipantSSN;
                    lcolParameters.Add(lobjParameter);

                    IDbDataParameter lobjParameter1 = DBFunction.GetDBParameter();
                    lobjParameter1.ParameterName = "@DATE";
                    lobjParameter1.DbType = DbType.DateTime;
                    lobjParameter1.Value = adtRetirementDate;
                    lcolParameters.Add(lobjParameter1);

                    IDbDataParameter lobjParameter2 = DBFunction.GetDBParameter();
                    lobjParameter2.ParameterName = "@RESULT";
                    lobjParameter2.DbType = DbType.String;
                    lobjParameter2.Direction = ParameterDirection.Output;
                    lobjParameter2.Size = 1;
                    lcolParameters.Add(lobjParameter2);

                    DBFunction.DBExecuteProcedureResult("usp_CheckWorkingHoursAfterGivenDate", lcolParameters, lconLegacy, null);
                    string strCheckIfHours = Convert.ToString(lcolParameters[2].Value);
                    if (strCheckIfHours == busConstant.FLAG_YES)
                    {
                        return true;
                    }

                }
            }
            catch
            {
                return false;
            }
            return false;
        }



        public void CalculateMEAAndMG(decimal adecFinalAccruedBenefitAmount, busPersonAccount abusPersonAccount,
                                    decimal adecLumpSumBenefitAmount, int aintPlanId, int aintAge,
                                    DateTime adtRetirementDate, int aintBeneficiaryAge, bool ablnQualifiedSpouseExists, bool ablnIsQdroCal,
                                    Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                    Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                    Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution,
                                    string astrCalculationType, int aintParticipantId = 0, int aintBeneficiaryPersonId = 0,
                                    string astrBenefitType = "", decimal adecCreditedMG = 0)
        {
            decimal altPayee_Fraction = busConstant.ZERO_DECIMAL;
            decimal ldecVestedEEContributionAmount = busConstant.ZERO_DECIMAL;
            decimal ldecVestedEEInterestAmount = busConstant.ZERO_DECIMAL;
            decimal ldecPresentValueAmount = busConstant.ZERO_DECIMAL;
            decimal ldecNonVestedEEContributionAmount = busConstant.ZERO_DECIMAL;
            decimal ldecNonVestedEEInterestAmount = busConstant.ZERO_DECIMAL;
            int lintPersonAccountId = abusPersonAccount.icdoPersonAccount.person_account_id;
            decimal ldecPartialVestedEEInterest = 0, ldecPartialNonVestedEEInterest = 0;

            // Minimum Guarantee = MAX (LUMPSUM, EE CONTRIBUTION & INTEREST)
            // Calculate Lumpsum
            decimal ldecBenefitOptionFactor = this.GetLumpsumBenefitFactor(aintAge, adtRetirementDate.Year) * 12;
            ldecBenefitOptionFactor = Math.Round(ldecBenefitOptionFactor, 3);

            if (adecLumpSumBenefitAmount == busConstant.ZERO_DECIMAL)
            {
                adecLumpSumBenefitAmount = Convert.ToDecimal(Math.Round(adecFinalAccruedBenefitAmount * ldecBenefitOptionFactor, 2));
            }
            ldecPresentValueAmount = Convert.ToDecimal(Math.Round(adecFinalAccruedBenefitAmount * ldecBenefitOptionFactor, 3));

            // Kunal : UAT PIR 239 : will show present value for individual plans.(no need to add)
            ////Apply Factor to Total Local Lumpsum Amount and Add it in Present Value
            //if (adecTotalLocalLumpsumAmount != 0)
            //{
            //    ldecPresentValueAmount += (adecTotalLocalLumpsumAmount * ldecBenefitOptionFactor);
            //}

            // Get the Total EE CONTRIBUTIONS & INTEREST
            //DataTable ldtbEEContributions = busBase.Select("cdoPersonAccountRetirementContribution.GetEEContributionForPlanYear", new object[] { aintPersonAccountId, adtRetirementDate.Year });
            if (!aclbPersonAccountRetirementContribution.IsNullOrEmpty())
            {
                if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId).Count() > 0)
                {
                    ldecVestedEEContributionAmount = abusPersonAccount.icdoPersonAccount.idecVestedEE;//(from item in aclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year < adtRetirementDate.Year && item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                    ldecVestedEEInterestAmount = abusPersonAccount.icdoPersonAccount.idecVestedEEInterest; //(from item in aclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year < adtRetirementDate.Year &&  item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();

                    if (astrCalculationType != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        decimal ldecPriorYearEEInterest = decimal.Zero;
                        ldecPartialVestedEEInterest = CalculatePartialEEInterest(adtRetirementDate, abusPersonAccount, true, false, aclbPersonAccountRetirementContribution, out ldecPriorYearEEInterest);
                    }

                    ldecVestedEEInterestAmount = ldecVestedEEInterestAmount + ldecPartialVestedEEInterest;

                    ldecNonVestedEEContributionAmount = abusPersonAccount.icdoPersonAccount.idecNonVestedEE;
                    ldecNonVestedEEInterestAmount = abusPersonAccount.icdoPersonAccount.idecNonVestedEEInterest;

                    if (astrCalculationType != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        decimal ldecPriorYearEEInterest = decimal.Zero;
                        ldecPartialNonVestedEEInterest = CalculatePartialEEInterest(adtRetirementDate, abusPersonAccount, false, true, aclbPersonAccountRetirementContribution, out ldecPriorYearEEInterest);
                    }

                    ldecNonVestedEEInterestAmount = ldecNonVestedEEInterestAmount + ldecPartialNonVestedEEInterest;

                    DateTime ldtEEContributionAsOfDate = (from item in aclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId select item.icdoPersonAccountRetirementContribution.transaction_date).Max();

                    if (ablnIsQdroCal == busConstant.BOOL_TRUE)
                    {
                        //aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                        //    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.total_ee_contribution_amount = ldecEEContributionAmount;
                        //aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                        //    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.total_ee_interest_amount = ldecEEInterestAmount;

                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.vested_ee_amount = ldecVestedEEContributionAmount;
                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.vested_ee_interest = ldecVestedEEInterestAmount;

                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                           item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;

                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.ee_as_of_date = ldtEEContributionAsOfDate;
                    }
                    else
                    {
                        if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.vested_ee_amount = ldecVestedEEContributionAmount;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.vested_ee_interest = ldecVestedEEInterestAmount;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.ee_as_of_date = ldtEEContributionAsOfDate;
                            if (ldecNonVestedEEContributionAmount != 0)
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                            }
                            if (ldecNonVestedEEInterestAmount != 0)
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                            }
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.vested_ee_amount = ldecVestedEEContributionAmount;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.vested_ee_interest = ldecVestedEEInterestAmount;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.ee_as_of_date = ldtEEContributionAsOfDate;
                            if (ldecNonVestedEEContributionAmount != 0)
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                            }

                            if (ldecNonVestedEEInterestAmount != 0)
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                            }

                        }
                    }
                }
            }


            if (ablnIsQdroCal == busConstant.BOOL_TRUE)
            {

                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.minimum_guarantee_amount = ldecVestedEEContributionAmount + ldecVestedEEInterestAmount;
            }
            else
            {
                if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                {

                    decimal ldecTotalEE = ldecVestedEEContributionAmount + ldecVestedEEInterestAmount;

                    //Explicitly Passing Calculation Type As ESTIMATE
                    ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault(), aintParticipantId, ref ldecTotalEE, false, false,
                    false, false, busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE);


                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.minimum_guarantee_amount =
                        ((ldecVestedEEContributionAmount - aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset)
                        + (ldecVestedEEInterestAmount - aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.total_ee_interest_qdro_offset));


                    //Disability Conversion -> Subtarct Credited MG in Early RTMT Payee Account from Current Diability MG
                    if (adecCreditedMG > 0)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.minimum_guarantee_amount =
                              aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.minimum_guarantee_amount - adecCreditedMG;
                    }
                    //Present Value Amount
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.present_value_amount = ldecPresentValueAmount;

                }
                else
                {

                    decimal ldecTotalEE = ldecVestedEEContributionAmount + ldecVestedEEInterestAmount;

                    //Explicitly Passing Calculation Type As ESTIMATE
                    //Ticket# 73070
                    ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault(), aintParticipantId, ref ldecTotalEE, false, false,
                   false, false, astrCalculationType);

                    //Ticket#73070
                    var ldecVestedAmount = (ldecVestedEEContributionAmount + ldecVestedEEInterestAmount) * aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.idecAltPayee_Fraction;
                    var minimum_guarantee_amount = ((ldecVestedEEContributionAmount + ldecVestedEEInterestAmount) - ldecVestedAmount);
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.minimum_guarantee_amount = ((ldecVestedEEContributionAmount + ldecVestedEEInterestAmount) - ldecVestedAmount);

                    //Present Value Amount
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.present_value_amount = ldecPresentValueAmount;

                }
            }


            // Monthly Exclusion Amount = EE CONTRIBUTION / NUMBER OF RECOVERY MONTHS
            int lintRecoveryMonths = busConstant.ZERO_INT;
            int lintAge = busConstant.ZERO_INT;

            if (!CheckIfSurvivorIsQualifiedSpouse(aintParticipantId, aintBeneficiaryPersonId))
            {
                // Calculate based on Single Life
                //    AGE       Number of Recovery Months
                // 55 and under	        360
                // 56 - 60	            310
                // 61 - 65	            260
                // 66 - 70	            210
                // 71 and over	        160


                lintAge = Convert.ToInt32(aintAge);

                if (lintAge <= 55)
                {
                    lintRecoveryMonths = 360;
                }
                else if (lintAge <= 60)
                {
                    lintRecoveryMonths = 310;
                }
                else if (lintAge <= 65)
                {
                    lintRecoveryMonths = 260;
                }
                else if (lintAge <= 70)
                {
                    lintRecoveryMonths = 210;
                }
                else
                {
                    lintRecoveryMonths = 160;
                }

            }
            else
            {
                // Calculate based on Joint & Survivor 50%
                // Combined AGES                            Number of Recovery Months
                // Not more than 110                                410
                // More than 110, but not more than 120             360
                // More than 120, but not more than 130             310
                // More than 130, but not more than 140             260
                // More than 140                                    210

                lintAge = Convert.ToInt32(aintAge + aintBeneficiaryAge);
                if (lintAge <= 110)
                {
                    lintRecoveryMonths = 410;
                }
                else if (lintAge <= 120)
                {
                    lintRecoveryMonths = 360;
                }
                else if (lintAge <= 130)
                {
                    lintRecoveryMonths = 310;
                }
                else if (lintAge <= 140)
                {
                    lintRecoveryMonths = 260;
                }
                else
                {
                    lintRecoveryMonths = 210;
                }
            }
            #region Calculate MEA

            if (ablnIsQdroCal == busConstant.BOOL_FALSE)
            {
                if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    decimal ldecTotalEE = ldecVestedEEContributionAmount;

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.monthly_exclusion_amount =
                    Math.Round((ldecVestedEEContributionAmount - aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id ==
                    aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset) / lintRecoveryMonths, 2);
                }
                else
                {
                    //Ticket# 73070
                    decimal ldecTotalEE = ldecVestedEEContributionAmount - aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.idecAlt_payee_ee_contribution;

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.monthly_exclusion_amount =
                    Math.Round(ldecTotalEE / lintRecoveryMonths, 2);

                }
            }

            #endregion

            //RequestID: 72091
            #region Calculate Popup MEA

            lintAge = Convert.ToInt32(aintAge + aintBeneficiaryAge);
            if (lintAge <= 110)
            {
                lintRecoveryMonths = 410;
            }
            else if (lintAge <= 120)
            {
                lintRecoveryMonths = 360;
            }
            else if (lintAge <= 130)
            {
                lintRecoveryMonths = 310;
            }
            else if (lintAge <= 140)
            {
                lintRecoveryMonths = 260;
            }
            else
            {
                lintRecoveryMonths = 210;
            }


            if (ablnIsQdroCal == busConstant.BOOL_FALSE)
            {
                if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    decimal ldecTotalEE = ldecVestedEEContributionAmount;

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.popup_monthly_exclusion_amount =
                    Math.Round((ldecVestedEEContributionAmount - aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id ==
                    aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset) / lintRecoveryMonths, 2);
                }
                else
                {

                    decimal ldecTotalEE = ldecVestedEEContributionAmount - aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.idecAlt_payee_ee_contribution;

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().icdoBenefitCalculationDetail.popup_monthly_exclusion_amount =
                    Math.Round(ldecTotalEE / lintRecoveryMonths, 2);

                }
            }

            #endregion

        }

        public bool CheckIfActivePayeeAccount(int aintQDROCalculationDetails = 0, int aintBenefitCalculationDetails = 0)
        {
            bool lblnActivePayeeAccount = false;

            int lintActivePayeeAccount = 0;
            lintActivePayeeAccount =
                (int)DBFunction.DBExecuteScalar("cdoQdroCalculationHeader.CheckIfPayeeAccountActive", new object[2] { aintQDROCalculationDetails, aintBenefitCalculationDetails },
                iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

            if (lintActivePayeeAccount > 0)
                lblnActivePayeeAccount = true;

            return lblnActivePayeeAccount;
        }

        public void ProcessQDROOffset(busBenefitCalculationDetail abusBenefitCalculationDetail, int aintParticiapantID, ref decimal adecUnreducedAccruedBenefit,
       bool ablnEEFlag = false, bool ablnUVHPFlag = false, bool ablnL52SplAccFlag = false, bool ablnL161SplAccFlag = false, string astrCalculationType = "", string astrBenefitType = "",
       bool ablnPreRetiremntDeathNonSpouse = false)
        {

            int lintPlanId = 0;
            string lstrSubPlan = string.Empty;

            DataTable ldtlbQRDOOffset = new DataTable();
            DataTable ldtbQDROOffsetSubPlans = new DataTable();
            DataTable ldtlbQRDOOffsetSubPlansEstimates = new DataTable();
            DataTable ldtlbAltPayeeBenefitAmount = new DataTable();
            decimal ldecQdroOffset = 0;
            ArrayList larrDROModel = new ArrayList();

            Collection<busQdroCalculationDetail> lclbQdroCalculationDetail = new Collection<busQdroCalculationDetail>();
            Collection<busQdroCalculationOptions> lclbqdroCalculationOptions = new Collection<busQdroCalculationOptions>();
            lintPlanId = abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id;

            #region QDRO Offset
            if (!ablnEEFlag && !ablnUVHPFlag && !ablnL52SplAccFlag && !ablnL161SplAccFlag)
            {
                if (ldtlbQRDOOffset.IsNull() || ldtlbQRDOOffset.Rows.Count <= 0)
                {
                    //Ticket - 68700
                    //NOTE:- If Anychanges or correction to GetQDROOffSet query,  the same changes applied to GetQDROOffSetPreRetirement query 
                    if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT && lintPlanId == busConstant.IAP_PLAN_ID)
                    {
                        ldtlbQRDOOffset = Select("cdoQdroCalculationHeader.GetQDROOffSetPreRetirement", new object[2] { aintParticiapantID, lintPlanId });

                    }
                    else
                    {
                        //NOTE:-If Anychanges or correction to GetQDROOffSet query,  the same changes applied to GetQDROOffSetPreRetirement query  
                        ldtlbQRDOOffset = Select("cdoQdroCalculationHeader.GetQDROOffSet", new object[2] { aintParticiapantID, lintPlanId });
                    }


                    if (ldtlbQRDOOffset.Rows.Count > 0)
                        lclbQdroCalculationDetail = GetCollection<busQdroCalculationDetail>(ldtlbQRDOOffset, "icdoQdroCalculationDetail");
                }

                ldtlbAltPayeeBenefitAmount = Select("cdoQdroCalculationHeader.GetAltPayeeBenefitAmountByCalculationType", new object[2] { aintParticiapantID, 1 });
                if (ldtlbAltPayeeBenefitAmount.Rows.Count > 0)
                    lclbqdroCalculationOptions = GetCollection<busQdroCalculationOptions>(ldtlbAltPayeeBenefitAmount, "icdoQdroCalculationOptions");

                foreach (busQdroCalculationDetail lbusQdroCalculationDetail in lclbQdroCalculationDetail)
                {
                    // lbusQdroCalculationDetail.LoadQdroCalculationOptionss();

                    if (lbusQdroCalculationDetail.icdoQdroCalculationDetail.ee_flag != busConstant.FLAG_YES && lbusQdroCalculationDetail.icdoQdroCalculationDetail.uvhp_flag != busConstant.FLAG_YES
                        && lbusQdroCalculationDetail.icdoQdroCalculationDetail.l52_spl_acc_flag != busConstant.FLAG_YES && lbusQdroCalculationDetail.icdoQdroCalculationDetail.l161_spl_acc_flag != busConstant.FLAG_YES)
                    {
                        //10 Percent
                        if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.qdro_model_value == lbusQdroCalculationDetail.icdoQdroCalculationDetail.qdro_model_value &&
                            item.icdoQdroCalculationDetail.istrIsFinal == "Y").Count() > 0
                            && (!larrDROModel.Contains(lbusQdroCalculationDetail.icdoQdroCalculationDetail.qdro_model_value)))
                        {
                            if (CheckIfActivePayeeAccount(lbusQdroCalculationDetail.icdoQdroCalculationDetail.qdro_calculation_detail_id))
                            {
                                // ldecQdroOffset += lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_amt_before_conversion;

                                if (lclbqdroCalculationOptions.Count() > 0 && lbusQdroCalculationDetail.icdoQdroCalculationDetail.plan_id == 1)
                                {
                                    ldecQdroOffset = lclbqdroCalculationOptions.Select(y => y.icdoQdroCalculationOptions.alt_payee_benefit_amount).SingleOrDefault();
                                }
                                else
                                {
                                    ldecQdroOffset += lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_amt_before_conversion;

                                }


                                larrDROModel.Add(lbusQdroCalculationDetail.icdoQdroCalculationDetail.qdro_model_value);
                            }
                            //Ticket#73070
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAltPayee_Fraction = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_fraction;
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlt_payee_ee_contribution = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_ee_contribution;
                        }
                        else if (!larrDROModel.Contains(lbusQdroCalculationDetail.icdoQdroCalculationDetail.qdro_model_value))
                        {
                            // ldecQdroOffset += lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_amt_before_conversion;
                            // ldecQdroOffset += lbusQdroCalculationDetail.iclbQdroCalculationOptions.Select(i => i.icdoQdroCalculationOptions.alt_payee_benefit_amount).SingleOrDefault();
                            if (lclbqdroCalculationOptions.Count() > 0 && lbusQdroCalculationDetail.icdoQdroCalculationDetail.plan_id == 1)
                            {
                                ldecQdroOffset = lclbqdroCalculationOptions.Select(y => y.icdoQdroCalculationOptions.alt_payee_benefit_amount).SingleOrDefault();
                            }
                            else
                            {
                                ldecQdroOffset += lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_amt_before_conversion;

                            }
                            //Ticket#73070
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAltPayee_Fraction = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_fraction;
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlt_payee_ee_contribution = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_ee_contribution;
                        }

                        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE && lbusQdroCalculationDetail.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                        {
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset +=
                                lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.alt_payee_ee_contribution;
                            // .Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution);

                            //Ticket#73070
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAltPayee_Fraction = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_fraction;
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlt_payee_ee_contribution = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_ee_contribution;

                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset +=
                                lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &
                                item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.alt_payee_interest_amount;
                            //.Sum(item => item.icdoQdroCalculationDetail.alt_payee_interest_amount);
                            if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                            {
                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset +=
                                    lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                                    item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.non_vested_altpayee_ee_amount;

                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset +=
                                    lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                                    item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.non_vested_altpayee_ee_interest;

                            }
                            ////mahua
                            //abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset +=
                            //   lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                            //   item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            //   item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.alt_payee_uvhp +

                            //   lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                            //   item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            //   item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.non_vested_altpayee_ee_amount; 

                            //abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset +=
                            //  lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                            //  item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            //  item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.alt_payee_uvhp_interest +
                            //  lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID &&
                            //  item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO &&
                            //  item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.non_vested_altpayee_ee_interest;
                        }

                        else if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL && lbusQdroCalculationDetail.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                        {

                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                                    .Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution) + lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                                    .Sum(item => item.icdoQdroCalculationDetail.alt_payee_interest_amount);

                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID)
                                   .Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution);

                            //Ticket#73070
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAltPayee_Fraction = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_fraction;
                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlt_payee_ee_contribution = lbusQdroCalculationDetail.icdoQdroCalculationDetail.alt_payee_ee_contribution;

                        }
                    }

                }

                if (lclbQdroCalculationDetail.Count > 0)
                {
                    if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id == 1 && lclbqdroCalculationOptions.Count() > 0)
                    {

                        ldecQdroOffset = lclbqdroCalculationOptions.Select(y => y.icdoQdroCalculationOptions.alt_payee_benefit_amount).SingleOrDefault();
                    }

                    abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset = ldecQdroOffset;
                    adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset;
                }
            }


            #endregion QDRO Offset

            #region QDRO Offset for SubPlans
            else
            {
                int lintAlternatePayeeId = 0;
                DataTable ldtblAlternatePayee = Select("cdoBenefitCalculationHeader.GetAlternatePayeeIDForParticipant", new object[1] { aintParticiapantID });

                //Find Alternate Payee for Approved Final QDRO Estimate
                DataTable ldbtlAlternatePayeeFromQDROFinalEstimate = Select("cdoQdroCalculationHeader.GetAlternatePayeeFromFinalQDROEstimate", new object[2] { aintParticiapantID, lintPlanId });
                if (ldbtlAlternatePayeeFromQDROFinalEstimate.Rows.Count > 0)
                {
                    if (ldtblAlternatePayee.Rows.Count <= 0)
                    {
                        ldtblAlternatePayee = ldbtlAlternatePayeeFromQDROFinalEstimate;
                    }
                    else
                    {
                        if (ldbtlAlternatePayeeFromQDROFinalEstimate.Rows.Count > 0)
                        {
                            foreach (DataRow ldtr in ldbtlAlternatePayeeFromQDROFinalEstimate.Rows)
                            {
                                bool lblnFlag = false;
                                foreach (DataRow ldtRow in ldtblAlternatePayee.Rows)
                                {
                                    if (Convert.ToInt32(ldtRow[0]) == Convert.ToInt32(ldtr[0]))
                                    {
                                        lblnFlag = true;
                                    }
                                }
                                if (!lblnFlag)
                                {
                                    DataRow ldtDataRow = ldtblAlternatePayee.NewRow();
                                    ldtDataRow[0] = ldtr[0];
                                    ldtblAlternatePayee.Rows.Add(ldtDataRow);
                                }
                            }
                        }
                    }
                }

                if (ldtblAlternatePayee.Rows.Count > 0)
                {
                    foreach (DataRow ldtRow in ldtblAlternatePayee.Rows)
                    {
                        if (Convert.ToString(ldtRow[0]).IsNotNullOrEmpty())
                        {
                            lintAlternatePayeeId = Convert.ToInt32(ldtRow[0]);
                        }
                        if (lintAlternatePayeeId > 0)
                        {
                            #region QDRO Offset for SubPlans (Final Approved Withdrawal)
                            ldtbQDROOffsetSubPlans.Clear();
                            ldtbQDROOffsetSubPlans = Select("cdoBenefitCalculationHeader.GetQDROOffsetSubPlans", new object[2] { lintAlternatePayeeId, lintPlanId });

                            bool lblnCheck = false;
                            if (ablnEEFlag && ablnUVHPFlag)
                            {
                                if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][0]).IsNotNullOrEmpty() || Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][1]).IsNotNullOrEmpty()
                                || Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][2]).IsNotNullOrEmpty()
                                || Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][3]).IsNotNullOrEmpty())
                                {
                                    lblnCheck = true;
                                }
                            }
                            else if (ablnEEFlag)
                            {
                                if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][0]).IsNotNullOrEmpty() || Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][1]).IsNotNullOrEmpty())
                                {
                                    lblnCheck = true;
                                }
                            }
                            else if (ablnUVHPFlag)
                            {
                                if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][2]).IsNotNullOrEmpty() || Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][3]).IsNotNullOrEmpty())
                                {
                                    lblnCheck = true;
                                }
                            }
                            else if (ablnL52SplAccFlag)
                            {
                                if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][4]).IsNotNullOrEmpty())
                                {
                                    lblnCheck = true;
                                }
                            }
                            else if (ablnL161SplAccFlag)
                            {
                                if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][5]).IsNotNullOrEmpty())
                                {
                                    lblnCheck = true;
                                }
                            }


                            if (ldtbQDROOffsetSubPlans.Rows.Count > 0 && lblnCheck)
                            {
                                if (ablnEEFlag && ablnUVHPFlag)
                                {
                                    decimal idecEEContribution = 0;
                                    decimal idecUVHPContribution = 0;
                                    decimal idecEEInterest = 0;
                                    decimal idecUVHPInterest = 0;



                                    if ((Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()]).IsNotNullOrEmpty()) ||
                                        (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()]).IsNotNullOrEmpty()))
                                    {

                                        if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                                        {
                                            idecEEContribution = Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()]);
                                            idecEEInterest = Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_interest.ToString().ToUpper()]);
                                        }
                                        if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                                        {
                                            idecUVHPContribution = Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()]);
                                            idecUVHPInterest = Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_interest_amount.ToString().ToUpper()]);
                                        }

                                        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                        {
                                            //abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset += idecEEContribution;
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset += idecUVHPContribution + idecEEContribution;

                                            // abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset += idecEEInterest;
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset += idecUVHPInterest + idecEEInterest;
                                        }
                                        else
                                        {
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += idecUVHPContribution + idecEEContribution + idecEEInterest + idecUVHPInterest;
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += idecUVHPContribution + idecEEContribution;
                                        }


                                    }

                                }
                                //else if (ablnEEFlag)
                                //{
                                //    if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                                //    {
                                //        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                //        {
                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()]);
                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_interest.ToString().ToUpper()]);
                                //        }
                                //        else
                                //        {
                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()])
                                //                + Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_interest.ToString().ToUpper()]);

                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.non_vested_ee_amount.ToString().ToUpper()]);
                                //        }


                                //    }
                                //}
                                //else if (ablnUVHPFlag)
                                //{
                                //    if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                                //    {
                                //        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                //        {
                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()]);
                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_interest_amount.ToString().ToUpper()]);
                                //        }
                                //        else
                                //        {
                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()])
                                //                + Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_interest_amount.ToString().ToUpper()]);

                                //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution +=
                                //                Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.total_uvhp_contribution_amount.ToString().ToUpper()]);

                                //        }


                                //    }
                                //}
                                else if (ablnL52SplAccFlag)
                                {
                                    if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local52_special_acct_bal_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                                    {
                                        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                        {
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.l52_spl_acc_qdro_offset += Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local52_special_acct_bal_amount.ToString().ToUpper()]);

                                        }
                                        else
                                        {
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local52_special_acct_bal_amount.ToString().ToUpper()]);
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local52_special_acct_bal_amount.ToString().ToUpper()]);

                                        }

                                    }
                                }
                                else if (ablnL161SplAccFlag)
                                {
                                    if (Convert.ToString(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local161_special_acct_bal_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                                    {
                                        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                        {
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.l161_spl_acc_qdro_offset += Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local161_special_acct_bal_amount.ToString().ToUpper()]);

                                        }
                                        else
                                        {
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local161_special_acct_bal_amount.ToString().ToUpper()]);
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += Convert.ToDecimal(ldtbQDROOffsetSubPlans.Rows[0][enmBenefitCalculationDetail.local161_special_acct_bal_amount.ToString().ToUpper()]);

                                        }

                                    }
                                }
                            }
                            #endregion QDRO Offset for SubPlans (Final Approved Withdrawal)

                            #region QDRO Offset for SubPlans (QDRO Approved Estimate)

                            if (!lblnCheck)
                            {
                                ldtlbQRDOOffsetSubPlansEstimates.Clear();
                                ldtlbQRDOOffsetSubPlansEstimates = Select("cdoQdroCalculationHeader.GetQDROOffSetEstimateDetails", new object[3] { aintParticiapantID, lintAlternatePayeeId, lintPlanId });

                                decimal idecNonVestedEEContribution = 0;
                                decimal idecUVHPContribution = 0;
                                decimal idecNonVestedEEInterest = 0;
                                decimal idecUVHPInterest = 0;

                                decimal idecVestedEEContribution = 0;
                                decimal idecVestedEEInterest = 0;

                                if (ldtlbQRDOOffsetSubPlansEstimates.Rows.Count > 0)
                                {
                                    Collection<busQdroCalculationDetail> lcblQdroCalculationDetail = new Collection<busQdroCalculationDetail>();
                                    lclbQdroCalculationDetail = GetCollection<busQdroCalculationDetail>(ldtlbQRDOOffsetSubPlansEstimates, "icdoQdroCalculationDetail");

                                    if (ablnEEFlag && ablnUVHPFlag)
                                    {
                                        if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).Count() > 0)
                                        {
                                            idecNonVestedEEContribution = lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).
                                                FirstOrDefault().icdoQdroCalculationDetail.alt_payee_ee_contribution;
                                            //.Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution);
                                            idecNonVestedEEInterest = lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).
                                                FirstOrDefault().icdoQdroCalculationDetail.alt_payee_interest_amount;
                                            //.Sum(item => item.icdoQdroCalculationDetail.alt_payee_interest_amount);
                                        }

                                        if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).Count() > 0)
                                        {
                                            idecUVHPContribution = lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).
                                                FirstOrDefault().icdoQdroCalculationDetail.alt_payee_uvhp;

                                            idecUVHPInterest = lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).
                                                FirstOrDefault().icdoQdroCalculationDetail.alt_payee_uvhp_interest;
                                        }

                                        //for PIR-83
                                        if (ablnPreRetiremntDeathNonSpouse)
                                        {
                                            idecVestedEEContribution =
                                                  lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.alt_payee_ee_contribution;

                                            idecVestedEEInterest =
                                                lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.alt_payee_interest_amount;
                                        }

                                        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                        {
                                            if (ablnPreRetiremntDeathNonSpouse)//PIR 83
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset += idecVestedEEContribution;

                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset += idecUVHPContribution + idecNonVestedEEContribution;

                                            if (ablnPreRetiremntDeathNonSpouse)//PIR 83
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset += idecVestedEEInterest;

                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset += idecUVHPInterest + idecNonVestedEEInterest;
                                        }
                                        else
                                        {
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += idecUVHPContribution + idecNonVestedEEContribution + idecNonVestedEEInterest + idecUVHPInterest;

                                            if (ablnPreRetiremntDeathNonSpouse)//PIR 83
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += idecVestedEEContribution + idecVestedEEInterest;

                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += idecUVHPContribution + idecNonVestedEEContribution;

                                            if (ablnPreRetiremntDeathNonSpouse)//PIR 83
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += idecVestedEEContribution;
                                        }
                                    }
                                    //else if (ablnEEFlag)
                                    //{
                                    //    if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).Count() > 0)
                                    //    {
                                    //        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                    //        {
                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES)
                                    //                    .Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution);
                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES)
                                    //                  .Sum(item => item.icdoQdroCalculationDetail.alt_payee_interest_amount);

                                    //        }
                                    //        else
                                    //        {
                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES)
                                    //                    .Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution) + lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES)
                                    //                    .Sum(item => item.icdoQdroCalculationDetail.alt_payee_interest_amount);

                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES)
                                    //                   .Sum(item => item.icdoQdroCalculationDetail.alt_payee_ee_contribution);

                                    //        }
                                    //    }
                                    //}
                                    //else if (ablnUVHPFlag)
                                    //{
                                    //    if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).Count() > 0)
                                    //    {
                                    //        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                    //        {
                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES)
                                    //                      .Sum(item => item.icdoQdroCalculationDetail.alt_payee_uvhp);
                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES)
                                    //                  .Sum(item => item.icdoQdroCalculationDetail.alt_payee_uvhp_interest);

                                    //        }
                                    //        else
                                    //        {
                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES)
                                    //                      .Sum(item => item.icdoQdroCalculationDetail.alt_payee_uvhp) + lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES)
                                    //                  .Sum(item => item.icdoQdroCalculationDetail.alt_payee_uvhp_interest);

                                    //            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES)
                                    //                      .Sum(item => item.icdoQdroCalculationDetail.alt_payee_uvhp);
                                    //        }


                                    //    }
                                    //}
                                    else if (ablnL52SplAccFlag)
                                    {
                                        if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).Count() > 0)
                                        {
                                            if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                            {
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.l52_spl_acc_qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES)
                                                        .Sum(item => item.icdoQdroCalculationDetail.alt_payee_amt_before_conversion);

                                            }
                                            else
                                            {
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES)
                                                        .Sum(item => item.icdoQdroCalculationDetail.alt_payee_amt_before_conversion);

                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES)
                                                        .Sum(item => item.icdoQdroCalculationDetail.alt_payee_amt_before_conversion);
                                            }

                                        }
                                    }
                                    else if (ablnL161SplAccFlag)
                                    {
                                        if (lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).Count() > 0)
                                        {
                                            if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                                            {
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.l161_spl_acc_qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES)
                                                        .Sum(item => item.icdoQdroCalculationDetail.alt_payee_amt_before_conversion);

                                            }
                                            else
                                            {
                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES)
                                                        .Sum(item => item.icdoQdroCalculationDetail.alt_payee_amt_before_conversion);

                                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.idecAlternatePayeePurecontribution += lclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES)
                                                        .Sum(item => item.icdoQdroCalculationDetail.alt_payee_amt_before_conversion);

                                            }
                                        }
                                    }
                                }
                            }
                            #endregion  #region QDRO Offset for SubPlans (QDRO Approved Estimate)
                        }
                    }

                    if (adecUnreducedAccruedBenefit != decimal.Zero)
                    {
                        if (astrCalculationType == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                        {
                            if (ablnEEFlag && ablnUVHPFlag)
                            {
                                adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset +
                                    abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset
                                    + abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset + abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset);
                            }
                            else if (ablnEEFlag)
                            {
                                adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_contribution_qdro_offset
                                    + abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_ee_interest_qdro_offset);
                            }
                            else if (ablnUVHPFlag)
                            {
                                adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_contribution_qdro_offset
                                    + abusBenefitCalculationDetail.icdoBenefitCalculationDetail.total_uvhp_interest_qdro_offset);
                            }
                            else if (ablnL52SplAccFlag)
                            {
                                adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - abusBenefitCalculationDetail.icdoBenefitCalculationDetail.l52_spl_acc_qdro_offset;
                            }
                            else if (ablnL161SplAccFlag)
                            {
                                adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - abusBenefitCalculationDetail.icdoBenefitCalculationDetail.l161_spl_acc_qdro_offset;
                            }
                        }
                        else
                        {
                            adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset;
                        }
                    }
                }
            }
            #endregion QDRO Offset for SubPlans
        }


        public void GetQdroFFset(int aintParticiapantID, int aintPlanID, ref decimal adecUnreducedAccruedBenefit,
               bool ablnEEFlag = false, bool ablnUVHPFlag = false, bool ablnL52SplAccFlag = false, bool ablnL161SplAccFlag = false)
        {
            int lintPlanId = 0;
            string lstrSubPlan = string.Empty;
            decimal ldecQdroOffset = decimal.Zero;

            DataTable ldtlbQRDOOffset = Select("cdoQdroCalculationHeader.GetQDROOffSet", new object[2] { aintParticiapantID, lintPlanId });

            if (ldtlbQRDOOffset.Rows.Count > 0)
            {

                if (ablnEEFlag)
                {
                    if (Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_ee_contribution.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                            Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_interest_amount.ToString().ToUpper()]).IsNotNullOrEmpty())
                    {
                        ldecQdroOffset = Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_ee_contribution.ToString().ToUpper()]) +
                            Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_interest_amount.ToString().ToUpper()]);
                        adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - ldecQdroOffset;
                    }
                }
                else if (ablnUVHPFlag)
                {
                    if (Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_uvhp.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                        Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_uvhp_interest.ToString().ToUpper()]).IsNotNullOrEmpty())
                    {
                        ldecQdroOffset = Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_uvhp.ToString().ToUpper()]) +
                            Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_uvhp_interest.ToString().ToUpper()]);
                        adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - ldecQdroOffset;
                    }
                }
                else if (ablnL52SplAccFlag)
                {
                    if (Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_l52_spl_acc_amt.ToString().ToUpper()]).IsNotNullOrEmpty())
                    {
                        ldecQdroOffset = Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_l52_spl_acc_amt.ToString().ToUpper()]);
                        adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - ldecQdroOffset;
                    }
                }
                else if (ablnL161SplAccFlag)
                {
                    if (Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_l161_spl_acc_amt.ToString().ToUpper()]).IsNotNullOrEmpty())
                    {
                        ldecQdroOffset = Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_l161_spl_acc_amt.ToString().ToUpper()]);
                        adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - ldecQdroOffset;
                    }
                }
                else
                {
                    if (Convert.ToString(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_amt_before_conversion.ToString().ToUpper()]).IsNotNullOrEmpty())
                    {
                        ldecQdroOffset =
                            Convert.ToDecimal(ldtlbQRDOOffset.Rows[0][enmQdroCalculationDetail.alt_payee_amt_before_conversion.ToString().ToUpper()]);
                        adecUnreducedAccruedBenefit = adecUnreducedAccruedBenefit - ldecQdroOffset;
                    }


                }
            }
        }

        public decimal CalculateMEA(decimal adecEEContAndInterest, bool ablnIsQualifiedSpouse, decimal adecParticipantAge, decimal adecBenefeciaryAge)
        {
            int lintRecoveryMonths = 0;
            if (ablnIsQualifiedSpouse)
            {
                // Calculate based on Joint & Survivor 50%
                // Combined AGES                            Number of Recovery Months
                // Not more than 110                                410
                // More than 110, but not more than 120             360
                // More than 120, but not more than 130             310
                // More than 130, but not more than 140             260
                // More than 140                                    210

                int lintAge = Convert.ToInt32(Math.Floor(adecParticipantAge) + Math.Floor(adecBenefeciaryAge));
                if (lintAge <= 110)
                {
                    lintRecoveryMonths = 410;
                }
                else if (lintAge <= 120)
                {
                    lintRecoveryMonths = 360;
                }
                else if (lintAge <= 130)
                {
                    lintRecoveryMonths = 310;
                }
                else if (lintAge <= 140)
                {
                    lintRecoveryMonths = 260;
                }
                else
                {
                    lintRecoveryMonths = 210;
                }
            }
            else
            {

                // Calculate based on Single Life
                //    AGE       Number of Recovery Months
                // 55 and under	        360
                // 56 - 60	            310
                // 61 - 65	            260
                // 66 - 70	            210
                // 71 and over	        160


                int lintAge = Convert.ToInt32(Math.Floor(adecParticipantAge));

                if (lintAge <= 55)
                {
                    lintRecoveryMonths = 360;
                }
                else if (lintAge <= 60)
                {
                    lintRecoveryMonths = 310;
                }
                else if (lintAge <= 65)
                {
                    lintRecoveryMonths = 260;
                }
                else if (lintAge <= 70)
                {
                    lintRecoveryMonths = 210;
                }
                else
                {
                    lintRecoveryMonths = 160;
                }

            }

            return Math.Round(adecEEContAndInterest / lintRecoveryMonths, 2);
        }

        public Decimal FetchUVHPAmountandInterest(bool ablnIsQdroCal, Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                               busBenefitCalculationHeader abusBenefitCalculationHeader, busQdroCalculationHeader abusQdroCalculationHeader, int aintPersonAccountId, DateTime adtRetirementDate)
        {
            decimal ldecUVHPContributionAmount = busConstant.ZERO_DECIMAL;
            decimal ldecUVHPInterestAmount = busConstant.ZERO_DECIMAL;
            decimal ldecPriorYearUVHPInterest = decimal.Zero;
            // Fetch the UV & HP Contribution and Interest Amounts
            DataTable ldtbUVHPContributionsInterest = busBase.Select("cdoPersonAccountRetirementContribution.GetTotalUVHPContribution", new object[] { aintPersonAccountId, adtRetirementDate.Year });
            if (ldtbUVHPContributionsInterest.Rows.Count > 0)
            {
                ldecUVHPContributionAmount = Convert.ToDecimal(Convert.ToBoolean(ldtbUVHPContributionsInterest.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbUVHPContributionsInterest.Rows[0][0]);
                ldecUVHPInterestAmount = Convert.ToDecimal(Convert.ToBoolean(ldtbUVHPContributionsInterest.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbUVHPContributionsInterest.Rows[0][1]);
                ldecUVHPInterestAmount = ldecUVHPInterestAmount + CalculatePartialUVHPInterest(adtRetirementDate, aintPersonAccountId, out ldecPriorYearUVHPInterest);
                DateTime ldtUVHPAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbUVHPContributionsInterest.Rows[0][2].IsDBNull()) ? DateTime.MinValue : ldtbUVHPContributionsInterest.Rows[0][2]);

                if (ablnIsQdroCal == busConstant.BOOL_TRUE && (!aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).IsNullOrEmpty()))
                {
                    //if (abusQdroCalculationHeader.icdoQdroCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                    //{
                    //    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoQdroCalculationDetail.total_uvhp_contribution_amount = ldecUVHPContributionAmount;
                    //    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoQdroCalculationDetail.total_uvhp_interest_amount = ldecUVHPInterestAmount;
                    //    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoQdroCalculationDetail.uvhp_as_of_date = ldtUVHPAsOfDate;
                    //}
                    //else
                    //{
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.total_uvhp_contribution_amount = ldecUVHPContributionAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.total_uvhp_interest_amount = ldecUVHPInterestAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.uvhp_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.uvhp_as_of_date = ldtUVHPAsOfDate;
                    //}
                }
                else if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_contribution_amount = ldecUVHPContributionAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_interest_amount = ldecUVHPInterestAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoBenefitCalculationDetail.uvhp_as_of_date = ldtUVHPAsOfDate;
                    }
                    else
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_contribution_amount = ldecUVHPContributionAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_interest_amount = ldecUVHPInterestAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.uvhp_as_of_date = ldtUVHPAsOfDate;
                    }
                }
                else
                {
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_contribution_amount = ldecUVHPContributionAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_interest_amount = ldecUVHPInterestAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.uvhp_flag.IsNotNull()).FirstOrDefault().icdoBenefitCalculationDetail.uvhp_as_of_date = ldtUVHPAsOfDate;
                    }

                    else
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_contribution_amount = ldecUVHPContributionAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.total_uvhp_interest_amount = ldecUVHPInterestAmount;
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.uvhp_as_of_date = ldtUVHPAsOfDate;
                    }

                }
            }
            return ldecUVHPContributionAmount + ldecUVHPInterestAmount;
        }


        public Decimal FetchEEAmountandInterest(bool ablnIsQdroCal, Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                            busBenefitCalculationHeader abusBenefitCalculationHeader, busQdroCalculationHeader abusQdroCalculationHeader,
                                            busPersonAccount abusPersonAccount, DateTime adtRetirementDate,
                                            Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, string astrCalculationType)
        {
            decimal ldecNonVestedEEContributionAmount = busConstant.ZERO_DECIMAL;
            decimal ldecNonVestedEEInterestAmount = busConstant.ZERO_DECIMAL;
            decimal ldecPartialIterest = busConstant.ZERO_DECIMAL;
            // Fetch the UV & HP Contribution and Interest Amounts
            //DataTable ldtbEEContributionsInterest = busBase.Select("cdoPersonAccountRetirementContribution.GetTotalEEContribution", new object[] { abusPersonAccount.icdoPersonAccount.person_account_id });
            //if (ldtbEEContributionsInterest.Rows.Count > 0)
            //{
            ldecNonVestedEEContributionAmount = abusPersonAccount.icdoPersonAccount.idecNonVestedEE;//Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributionsInterest.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributionsInterest.Rows[0][0]);
            ldecNonVestedEEInterestAmount = abusPersonAccount.icdoPersonAccount.idecNonVestedEEInterest;//Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributionsInterest.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributionsInterest.Rows[0][1]);

            if (astrCalculationType != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
            {
                decimal ldecPriorYearInterest = decimal.Zero;
                ldecPartialIterest = CalculatePartialEEInterest(adtRetirementDate, abusPersonAccount, false, true, aclbPersonAccountRetirementContribution, out ldecPriorYearInterest);
            }

            ldecNonVestedEEInterestAmount = ldecNonVestedEEInterestAmount + ldecPartialIterest;
            DateTime ldtEEAsOfDate = (from item in aclbPersonAccountRetirementContribution
                                      where item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                      select item.icdoPersonAccountRetirementContribution.transaction_date).Max();
            //Convert.ToDateTime(Convert.ToBoolean(ldtbEEContributionsInterest.Rows[0][2].IsDBNull()) ? DateTime.MinValue : ldtbEEContributionsInterest.Rows[0][2]);

            if (ablnIsQdroCal == busConstant.BOOL_TRUE)
            {
                if (abusQdroCalculationHeader.icdoQdroCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.ee_flag.IsNotNull()).FirstOrDefault().icdoQdroCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.ee_flag.IsNotNull()).FirstOrDefault().icdoQdroCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.ee_flag.IsNotNull()).FirstOrDefault().icdoQdroCalculationDetail.ee_as_of_date = ldtEEAsOfDate;
                }
                else
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoQdroCalculationDetail.ee_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.ee_as_of_date = ldtEEAsOfDate;
                }
            }
            else if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.ee_flag.IsNotNull()).
                        FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.ee_flag.IsNotNull()).
                        FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.ee_flag.IsNotNull()).FirstOrDefault()
                        .icdoBenefitCalculationDetail.ee_as_of_date = ldtEEAsOfDate;
                }
                else
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().
                        icdoBenefitCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().
                        icdoBenefitCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().
                        icdoBenefitCalculationDetail.ee_as_of_date = ldtEEAsOfDate;
                }
            }
            else
            {
                if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.ee_flag.IsNotNull()).
                        FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.ee_flag.IsNotNull()).
                        FirstOrDefault().icdoBenefitCalculationDetail.non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID && item.icdoBenefitCalculationDetail.ee_flag.IsNotNull()).
                        FirstOrDefault().icdoBenefitCalculationDetail.ee_as_of_date = ldtEEAsOfDate;
                }

                else
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.
                            non_vested_ee_amount = ldecNonVestedEEContributionAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.
                        non_vested_ee_interest = ldecNonVestedEEInterestAmount;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.
                        ee_as_of_date = ldtEEAsOfDate;
                }

            }
            //}
            return ldecNonVestedEEContributionAmount + ldecNonVestedEEInterestAmount;
        }

        public bool CheckIfSurvivorIsQualifiedSpouse(int aintParticipantId, int aintBeneficiaryPersonId)
        {
            bool lblnQualifiedSpouse = busConstant.BOOL_FALSE;

            if (aintBeneficiaryPersonId != 0)
            {
                busPerson lbusPerson = new busPerson();
                lbusPerson.FindPerson(aintBeneficiaryPersonId);

                // Check the SGT_RELATIONSHIP Table to determine the relationship between the participant and the survivor / beneficiary
                DataTable ldtbPersonBeneficiaryRelationship = busBase.Select<cdoRelationship>(new string[] { enmRelationship.person_id.ToString(), enmRelationship.beneficiary_person_id.ToString() },
                    new object[] { aintParticipantId, aintBeneficiaryPersonId }, null, null);
                if (ldtbPersonBeneficiaryRelationship != null && ldtbPersonBeneficiaryRelationship.Rows.Count > 0)
                {
                    foreach (DataRow ldrPersonBeneRelation in ldtbPersonBeneficiaryRelationship.Rows)
                    {
                        busRelationship lbusRelationship = new busRelationship() { icdoRelationship = new cdoRelationship() };
                        lbusRelationship.icdoRelationship.LoadData(ldrPersonBeneRelation);
                        if (lbusRelationship.icdoRelationship.relationship_value == busConstant.BENEFICIARY_RELATIONSHIP_SPOUSE)
                        {
                            int QualifiedDROExists = (int)DBFunction.DBExecuteScalar("cdoDroApplication.CheckCountofApprovedDROforPersonandPayee", new object[2] { aintBeneficiaryPersonId, aintParticipantId }, iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                            if (QualifiedDROExists == 0 && lbusPerson.icdoPerson.date_of_death == DateTime.MinValue)
                            {
                                lblnQualifiedSpouse = busConstant.BOOL_TRUE;
                                break;
                            }
                        }
                    }
                }
            }

            return lblnQualifiedSpouse;
        }

        public bool CheckIfSpouse(int aintParticipantId, int aintBeneficiaryPersonId)
        {
            if (aintBeneficiaryPersonId != 0)
            {
                // Check the SGT_RELATIONSHIP Table to determine the relationship between the participant and the survivor / beneficiary
                DataTable ldtbPersonBeneficiaryRelationship = busBase.Select<cdoRelationship>(new string[2] { enmRelationship.person_id.ToString().ToUpper(), enmRelationship.beneficiary_person_id.ToString().ToUpper() },
                    new object[2] { aintParticipantId, aintBeneficiaryPersonId }, null, null);
                if (ldtbPersonBeneficiaryRelationship != null && ldtbPersonBeneficiaryRelationship.Rows.Count > 0)
                {
                    foreach (DataRow ldrPersonBeneRelation in ldtbPersonBeneficiaryRelationship.Rows)
                    {
                        busRelationship lbusRelationship = new busRelationship() { icdoRelationship = new cdoRelationship() };
                        lbusRelationship.icdoRelationship.LoadData(ldrPersonBeneRelation);
                        if (lbusRelationship.icdoRelationship.relationship_value == busConstant.BENEFICIARY_RELATIONSHIP_SPOUSE)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public decimal CalculatePartialEEInterest(DateTime adtRetirementDate, busPersonAccount abusPersonAccount, bool ablnPersonVested, bool ablnPersonNonVested,
                                                    Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, out decimal adecPriorYearInterest)
        {
            decimal ldecEETotalContributions = busConstant.ZERO_DECIMAL;
            decimal ldecEEPartialInterestAmount = busConstant.ZERO_DECIMAL;
            decimal ldecBenefitInterestRate = 1.0m;
            decimal ldecPriorYearInterest = decimal.Zero;
            adecPriorYearInterest = decimal.Zero;
            // Get the Benefit Interest Rate

            DateTime ldtEffectiveDate = new DateTime();
            // Get the Total EE Contributions 
            if (!aclbPersonAccountRetirementContribution.IsNullOrEmpty())
            {

                //decimal ldecEEContributionAmount = (from item in aclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year < adtRetirementDate.Year && item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                //decimal ldecEEInterestAmount = (from item in aclbPersonAccountRetirementContribution where item.icdoPersonAccountRetirementContribution.computational_year < adtRetirementDate.Year && item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();

                decimal ldecVestedEEContributionAmount = abusPersonAccount.icdoPersonAccount.idecVestedEE;
                decimal ldecNonVestedEEContributionAmount = abusPersonAccount.icdoPersonAccount.idecNonVestedEE;
                decimal ldecVestedEEInterest = abusPersonAccount.icdoPersonAccount.idecVestedEEInterest;
                decimal ldecNonVestedEEInterest = abusPersonAccount.icdoPersonAccount.idecNonVestedEEInterest;

                if (ablnPersonVested)
                {
                    ldecEETotalContributions = ldecVestedEEContributionAmount + ldecVestedEEInterest;
                    if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").Count() > 0)
                    {
                        cdoPersonAccountRetirementContribution lcdoVestedContribution = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").OrderByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date).FirstOrDefault().icdoPersonAccountRetirementContribution;
                        if (adtRetirementDate.Year - lcdoVestedContribution.computational_year == 2)
                        {
                            object lobjPriorYearBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year - 1 },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                            if (lobjPriorYearBenefitInterestRate.IsNotNull())
                            {
                                ldecBenefitInterestRate = (Decimal)lobjPriorYearBenefitInterestRate;
                            }
                            ldecPriorYearInterest = Math.Round((ldecEETotalContributions * ldecBenefitInterestRate), 2);
                            adecPriorYearInterest = ldecPriorYearInterest;
                        }
                    }
                }
                else if (ablnPersonNonVested)
                {
                    ldecEETotalContributions = ldecNonVestedEEContributionAmount + ldecNonVestedEEInterest;
                    if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_NON_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").Count() > 0)
                    {
                        cdoPersonAccountRetirementContribution lcdoNonVestedContribution = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_NON_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").OrderByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date).FirstOrDefault().icdoPersonAccountRetirementContribution;

                        if (adtRetirementDate.Year - lcdoNonVestedContribution.computational_year == 2)
                        {
                            object lobjPriorYearBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year - 1 },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                            if (lobjPriorYearBenefitInterestRate.IsNotNull())
                            {
                                ldecBenefitInterestRate = (Decimal)lobjPriorYearBenefitInterestRate;
                            }
                            ldecPriorYearInterest = Math.Round((ldecEETotalContributions * ldecBenefitInterestRate), 2);
                            adecPriorYearInterest = ldecPriorYearInterest;
                        }
                    }
                }
                else if (ablnPersonVested && ablnPersonNonVested)
                {
                    ldecEETotalContributions = ldecVestedEEContributionAmount + ldecVestedEEInterest + ldecNonVestedEEContributionAmount + ldecNonVestedEEInterest;
                    if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                         item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").Count() > 0)
                    {
                        cdoPersonAccountRetirementContribution lcdoVestedContribution = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                             item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").OrderByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date).FirstOrDefault().icdoPersonAccountRetirementContribution;
                        if (adtRetirementDate.Year - lcdoVestedContribution.computational_year == 2)
                        {
                            object lobjPriorYearBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year - 1 },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                            if (lobjPriorYearBenefitInterestRate.IsNotNull())
                            {
                                ldecBenefitInterestRate = (Decimal)lobjPriorYearBenefitInterestRate;
                            }
                            ldecPriorYearInterest = Math.Round((ldecEETotalContributions * ldecBenefitInterestRate), 2);
                        }
                    }
                    if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_NON_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").Count() > 0)
                    {
                        cdoPersonAccountRetirementContribution lcdoNonVestedContribution = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_NON_VESTED && item.icdoPersonAccountRetirementContribution.transaction_type_value != "PMNT").OrderByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date).FirstOrDefault().icdoPersonAccountRetirementContribution;

                        if (adtRetirementDate.Year - lcdoNonVestedContribution.computational_year == 2)
                        {
                            object lobjPriorYearBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year - 1 },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                            if (lobjPriorYearBenefitInterestRate.IsNotNull())
                            {
                                ldecBenefitInterestRate = (Decimal)lobjPriorYearBenefitInterestRate;
                            }
                            ldecPriorYearInterest += Math.Round((ldecEETotalContributions * ldecBenefitInterestRate), 2);
                        }
                    }

                }


            }
            //else
            //{
            //    DataTable ldtbEEContributions = busBase.Select("cdoPersonAccountRetirementContribution.GetEEContributionForPlanYear", new object[] { abusPersonAccount.icdoPersonAccount.person_account_id,
            //                                                                                                                                        adtRetirementDate.Year });
            //    if (ldtbEEContributions.Rows.Count > 0)
            //    {
            //        decimal ldecEEContributionAmount = Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributions.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributions.Rows[0][0]);
            //        decimal ldecEEInterestAmount = Convert.ToDecimal(Convert.ToBoolean(ldtbEEContributions.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbEEContributions.Rows[0][1]);
            //        DateTime ldtEEAsOfDate = DateTime.MinValue;
            //      //  GetEEContributionsUptoPlanYear(aclbPersonAccountRetirementContribution, aintPersonAccountId, adtRetirementDate.Year - 1, out ldecEEContributionAmount, out ldecEEInterestAmount, out ldtEEAsOfDate);
            //        ldecEETotalContributions = ldecEEContributionAmount + ldecEEInterestAmount;
            //    }
            //}

            // Calculate the Partial Interest Amount
            ldecEEPartialInterestAmount = ldecPriorYearInterest;
            if (adtRetirementDate.Month != 1)
            {
                object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year },
                                                iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                if (lobjBenefitInterestRate.IsNotNull())
                {
                    ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                }

                ldecEEPartialInterestAmount = ldecPriorYearInterest + Math.Round(((ldecEETotalContributions + ldecPriorYearInterest) * ldecBenefitInterestRate) / 12 * (adtRetirementDate.Month - 1), 2);
            }
            return ldecEEPartialInterestAmount;
        }

        public decimal CalculatePartialUVHPInterest(DateTime adtRetirementDate, int aintPersonAccountId, out decimal adecPriorYearInterest)
        {
            decimal ldecUVHPTotalContributions = busConstant.ZERO_DECIMAL;
            decimal ldecUVHPPartialInterestAmount = busConstant.ZERO_DECIMAL;
            decimal ldecBenefitInterestRate = 1.0m;
            adecPriorYearInterest = decimal.Zero;

            DataTable ldtbUVHPContributionsInterest = busBase.Select("cdoPersonAccountRetirementContribution.GetTotalUVHPContribution", new object[] { aintPersonAccountId, adtRetirementDate.Year });
            if (ldtbUVHPContributionsInterest != null && ldtbUVHPContributionsInterest.Rows.Count > 0)
            {
                decimal ldecUVHPContributionAmount = Convert.ToDecimal(Convert.ToBoolean(ldtbUVHPContributionsInterest.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbUVHPContributionsInterest.Rows[0][0]);
                decimal ldecUVHPInterestAmount = Convert.ToDecimal(Convert.ToBoolean(ldtbUVHPContributionsInterest.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbUVHPContributionsInterest.Rows[0][1]);
                ldecUVHPTotalContributions = ldecUVHPContributionAmount + ldecUVHPInterestAmount;
                int lintCompYear = Convert.ToInt32(ldtbUVHPContributionsInterest.Rows[0][enmPersonAccountRetirementContribution.computational_year.ToString()]);
                if (adtRetirementDate.Year - lintCompYear == 2)
                {
                    object lobjPriorYearBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year - 1 },
                                         iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                    if (lobjPriorYearBenefitInterestRate.IsNotNull())
                    {
                        ldecBenefitInterestRate = (Decimal)lobjPriorYearBenefitInterestRate;
                    }
                    adecPriorYearInterest += Math.Round((ldecUVHPTotalContributions * ldecBenefitInterestRate), 2);
                }

                //DateTime ldtUVHPAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbUVHPContributionsInterest.Rows[0][2].IsDBNull()) ? DateTime.MinValue : ldtbUVHPContributionsInterest.Rows[0][2]);
            }
            // }
            ldecUVHPPartialInterestAmount = adecPriorYearInterest;
            // Calculate the Partial Interest Amount
            // Get the Benefit Interest Rate
            if (adtRetirementDate.Month != 1)
            {
                object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[] { adtRetirementDate.Year },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                if (lobjBenefitInterestRate != null)
                {
                    ldecBenefitInterestRate = Convert.ToDecimal(lobjBenefitInterestRate);
                }

                ldecUVHPPartialInterestAmount = adecPriorYearInterest + Math.Round(((ldecUVHPTotalContributions + adecPriorYearInterest) * ldecBenefitInterestRate) / 12 * (adtRetirementDate.Month - 1), 2);
            }
            return ldecUVHPPartialInterestAmount;
        }

        public decimal GetSuspendibleHoursValue(int aintPlanYear, int aintMonth)
        {
            decimal ldecHoursValue = busConstant.ZERO_DECIMAL;

            DataTable ldtbHoursValue = busBase.Select("cdoPersonSuspendibleMonth.GetSuspendibleHoursValue", new object[] { aintPlanYear, aintMonth });
            if (ldtbHoursValue != null && ldtbHoursValue.Rows.Count > 0)
            {
                ldecHoursValue = Convert.ToDecimal(Convert.ToBoolean(ldtbHoursValue.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbHoursValue.Rows[0][0]);
            }
            return ldecHoursValue;
        }

        //Pass the Batch Run Date , returm month for which cut off date is before the date passed
        public DateTime LastEvaluatedMonth(DateTime adtBatchRunDate)
        {
            DateTime ldtLastEvaluatedMonth = new DateTime();
            IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
            Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();

            if (lconLegacy != null)
            {
                IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                lobjParameter.ParameterName = "@QDATE";
                lobjParameter.DbType = DbType.DateTime;
                lobjParameter.Value = adtBatchRunDate;
                lcolParameters.Add(lobjParameter);


                IDataReader lDataReader = DBFunction.DBExecuteProcedureResult("usp_get_EA_cutoffdate", lcolParameters, lconLegacy, null);
                DataTable ldtbLatestCutOffMonth = new DataTable();

                if (lDataReader != null)
                {
                    ldtbLatestCutOffMonth.Load(lDataReader);
                    if (ldtbLatestCutOffMonth.Rows.Count > 0)
                    {
                        ldtLastEvaluatedMonth = Convert.ToDateTime(ldtbLatestCutOffMonth.Rows[0]["QUALIFYINGENDDATE"]);
                    }
                }
            }


            return ldtLastEvaluatedMonth;
        }


        public Hashtable GetMonthlyHoursForPlanYear(string astrParticipantSSN, int aintPlanYear, int aintPlanId)
        {
            // Create a Hashtable and initialise it
            Hashtable lhstMonthlyHours = new Hashtable();
            for (int i = 12; i >= 1; i--)
            {
                lhstMonthlyHours.Add(i, busConstant.ZERO_DECIMAL);
            }

            IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
            Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();

            if (lconLegacy != null)
            {
                IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                lobjParameter.ParameterName = "@SSN";
                lobjParameter.DbType = DbType.String;
                lobjParameter.Value = astrParticipantSSN;
                lcolParameters.Add(lobjParameter);

                IDbDataParameter lobjParameter1 = DBFunction.GetDBParameter();
                lobjParameter1.ParameterName = "@PLANYEAR";
                lobjParameter1.DbType = DbType.Int32;
                lobjParameter1.Value = aintPlanYear;
                lcolParameters.Add(lobjParameter1);

                IDbDataParameter lobjParameter2 = DBFunction.GetDBParameter();
                lobjParameter2.ParameterName = "@PLANID";
                lobjParameter2.DbType = DbType.Int32;
                lobjParameter2.Value = aintPlanId;
                lcolParameters.Add(lobjParameter2);

                IDataReader lDataReader = DBFunction.DBExecuteProcedureResult("usp_GetWorkDataForPlanYear", lcolParameters, lconLegacy, null);
                DataTable ldtbAnnualMonthlySummary = new DataTable();

                if (lDataReader != null)
                {
                    ldtbAnnualMonthlySummary.Load(lDataReader);
                    if (ldtbAnnualMonthlySummary.Rows.Count > 0)
                    {
                        // Iterate the data table and count the number of non suspendible months
                        foreach (DataRow ldrMonthlySummary in ldtbAnnualMonthlySummary.Rows)
                        {
                            DateTime ldtFromDate = Convert.ToDateTime(ldrMonthlySummary["FromDate"]);
                            decimal ldecHours = 1M;
                            int lintPayrollMonth = 1;

                            if (Convert.ToInt32(ldrMonthlySummary["Weeks"]) > 0)
                            {
                                ldecHours = Convert.ToDecimal(ldrMonthlySummary["PensionHours"]) / Convert.ToInt32(ldrMonthlySummary["Weeks"]);
                            }
                            else
                            {
                                ldecHours = Convert.ToDecimal(ldrMonthlySummary["PensionHours"]);
                            }

                            if (aintPlanYear < 2004)
                            {
                                // Check for the no of weeks. Divide the hours equally per week.
                                while (ldtFromDate <= Convert.ToDateTime(ldrMonthlySummary["ToDate"]))
                                {
                                    if (ldtFromDate.Month == 12 && ldtFromDate.Year == aintPlanYear - 1)
                                    {
                                        lhstMonthlyHours[1] = (decimal)lhstMonthlyHours[1] + ldecHours;
                                    }
                                    else
                                    {
                                        lhstMonthlyHours[ldtFromDate.Month] = (decimal)lhstMonthlyHours[ldtFromDate.Month] + ldecHours;
                                    }

                                    ldtFromDate = ldtFromDate.AddDays(7);
                                }
                            }
                            else if (aintPlanYear >= 2004)
                            {
                                // Check for the no of weeks. Divide the hours equally per week.
                                while (ldtFromDate <= Convert.ToDateTime(ldrMonthlySummary["ToDate"]))
                                {
                                    lintPayrollMonth = busGlobalFunctions.GetPayrollMonth(ldtFromDate);
                                    lhstMonthlyHours[lintPayrollMonth] = (decimal)lhstMonthlyHours[lintPayrollMonth] + ldecHours;
                                    ldtFromDate = ldtFromDate.AddDays(7);
                                }
                            }
                        }
                    }
                }
            }

            return lhstMonthlyHours;
        }

        public decimal GetWorkDataAfterDate(string astrParticipantSSN, int aintPlanYear, int aintPlanId, DateTime adtWithdrawalDate)
        {

            decimal ldecHousAfterWithdrawal = decimal.Zero;
            IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
            Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();

            if (lconLegacy != null)
            {
                IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                lobjParameter.ParameterName = "@SSN";
                lobjParameter.DbType = DbType.String;
                lobjParameter.Value = astrParticipantSSN;
                lcolParameters.Add(lobjParameter);

                IDbDataParameter lobjParameter1 = DBFunction.GetDBParameter();
                lobjParameter1.ParameterName = "@PLANYEAR";
                lobjParameter1.DbType = DbType.Int32;
                lobjParameter1.Value = aintPlanYear;
                lcolParameters.Add(lobjParameter1);

                IDbDataParameter lobjParameter2 = DBFunction.GetDBParameter();
                lobjParameter2.ParameterName = "@PLANID";
                lobjParameter2.DbType = DbType.Int32;
                lobjParameter2.Value = aintPlanId;
                lcolParameters.Add(lobjParameter2);

                IDataReader lDataReader = DBFunction.DBExecuteProcedureResult("usp_GetWorkDataForPlanYear", lcolParameters, lconLegacy, null);
                DataTable ldtbAnnualMonthlySummary = new DataTable();

                if (lDataReader != null)
                {
                    ldtbAnnualMonthlySummary.Load(lDataReader);
                    if (ldtbAnnualMonthlySummary.Rows.Count > 0)
                    {
                        // Iterate the data table and count the number of non suspendible months
                        foreach (DataRow ldrMonthlySummary in ldtbAnnualMonthlySummary.Rows)
                        {
                            #region Commented Proration Code //PIR 1052
                            //DateTime ldtFromDate = Convert.ToDateTime(ldrMonthlySummary["FromDate"]);

                            //int lintPayrollMonth = 1;
                            //decimal ldecHours = decimal.Zero;
                            //if (Convert.ToInt32(ldrMonthlySummary["Weeks"]) > 0)
                            //{
                            //    ldecHours = (Convert.ToString(ldrMonthlySummary["PensionHours"]).IsNotNullOrEmpty() ? Convert.ToDecimal(ldrMonthlySummary["PensionHours"]) : 0.0M) / Convert.ToInt32(ldrMonthlySummary["Weeks"]);
                            //}
                            //else
                            //{
                            //    ldecHours = Convert.ToString(ldrMonthlySummary["PensionHours"]).IsNotNullOrEmpty() ? Convert.ToDecimal(ldrMonthlySummary["PensionHours"]) : 0.0M;
                            //}
                            //// Check for the no of weeks. Divide the hours equally per week.


                            //while (ldtFromDate <= Convert.ToDateTime(ldrMonthlySummary["ToDate"]))
                            //{
                            //    if (ldtFromDate.Year == aintPlanYear && ldtFromDate >= adtWithdrawalDate)
                            //    {
                            //        ldecHousAfterWithdrawal += ldecHours;
                            //    }

                            //    ldtFromDate = ldtFromDate.AddDays(7);
                            //}
                            #endregion Commented Proration Code //PIR 1052

                            //PIR 1052
                            DateTime ldtFromDate = Convert.ToDateTime(ldrMonthlySummary["FromDate"]);
                            if (ldtFromDate.Year == aintPlanYear && ldtFromDate > adtWithdrawalDate)
                            {
                                ldecHousAfterWithdrawal += Convert.ToString(ldrMonthlySummary["PensionHours"]).IsNotNullOrEmpty() ? Convert.ToDecimal(ldrMonthlySummary["PensionHours"]) : 0.0M;
                            }
                        }
                    }
                }
            }
            return ldecHousAfterWithdrawal;

        }
        public int GetNonSuspendibleMonths(string astrParticipantSSN, busPerson abusPerson, int aintPlanYear, int aintPlanId, busBenefitCalculationYearlyDetail abusBenefitCalculationYearlyDetail,
                                            DateTime adtStartDate, DateTime adtEndDate, bool ablnGetSuspendibleMonths = false)
        {
            int lintNonSuspendibleMonths = busConstant.ZERO_INT;


            IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
            Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();
            try
            {
                if (lconLegacy != null)
                {
                    IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                    lobjParameter.ParameterName = "@SSN";
                    lobjParameter.DbType = DbType.String;
                    lobjParameter.Value = astrParticipantSSN;
                    lcolParameters.Add(lobjParameter);

                    IDbDataParameter lobjParameter1 = DBFunction.GetDBParameter();
                    lobjParameter1.ParameterName = "@PLANYEAR";
                    lobjParameter1.DbType = DbType.Int32;
                    lobjParameter1.Value = aintPlanYear;
                    lcolParameters.Add(lobjParameter1);

                    IDbDataParameter lobjParameter2 = DBFunction.GetDBParameter();
                    lobjParameter2.ParameterName = "@PLANID";
                    lobjParameter2.DbType = DbType.Int32;
                    lobjParameter2.Value = aintPlanId;
                    lcolParameters.Add(lobjParameter2);

                    //IDbDataParameter lobjParameter3 = DBFunction.GetDBParameter();
                    //lobjParameter3.ParameterName = "@RESULT";
                    //lobjParameter3.DbType = DbType.Int32;
                    //lobjParameter3.Direction = ParameterDirection.ReturnValue;
                    //lcolParameters.Add(lobjParameter3);

                    // Create a Hashtable and initialise it
                    Hashtable lhstMonthlyHours = new Hashtable();
                    for (int i = 12; i >= 1; i--)
                    {
                        lhstMonthlyHours.Add(i, busConstant.ZERO_DECIMAL);
                    }


                    IDataReader lDataReader = DBFunction.DBExecuteProcedureResult("usp_GetWorkDataForPlanYear", lcolParameters, lconLegacy, null);
                    DataTable ldtbAnnualMonthlySummary = new DataTable();

                    if (lDataReader != null)
                    {
                        ldtbAnnualMonthlySummary.Load(lDataReader);
                        if (ldtbAnnualMonthlySummary.Rows.Count > 0)
                        {
                            // Iterate the data table and count the number of non suspendible months
                            foreach (DataRow ldrMonthlySummary in ldtbAnnualMonthlySummary.Rows)
                            {
                                DateTime ldtFromDate = Convert.ToDateTime(ldrMonthlySummary["FromDate"]);
                                decimal ldecHours = 1M;
                                int lintPayrollMonth = 1;

                                if (ldrMonthlySummary["Weeks"].ToString().IsNumeric() && Convert.ToInt32(ldrMonthlySummary["Weeks"]) > 0)
                                {
                                    ldecHours = Convert.ToDecimal(ldrMonthlySummary["PensionHours"]) / Convert.ToInt32(ldrMonthlySummary["Weeks"]);
                                }
                                else
                                {
                                    ldecHours = Convert.ToDecimal(ldrMonthlySummary["PensionHours"]);
                                }

                                if (aintPlanYear < 2004)
                                {
                                    // Check for the no of weeks. Divide the hours equally per week.
                                    while (ldtFromDate <= Convert.ToDateTime(ldrMonthlySummary["ToDate"]))
                                    {
                                        if (ldtFromDate.Month == 12 && ldtFromDate.Year == aintPlanYear - 1)
                                        {
                                            lhstMonthlyHours[1] = (decimal)lhstMonthlyHours[1] + ldecHours;
                                        }
                                        else
                                        {
                                            lhstMonthlyHours[ldtFromDate.Month] = (decimal)lhstMonthlyHours[ldtFromDate.Month] + ldecHours;
                                        }

                                        ldtFromDate = ldtFromDate.AddDays(7);
                                    }
                                }
                                else if (aintPlanYear >= 2004)
                                {
                                    // Check for the no of weeks. Divide the hours equally per week.
                                    while (ldtFromDate <= Convert.ToDateTime(ldrMonthlySummary["ToDate"]))
                                    {
                                        lintPayrollMonth = busGlobalFunctions.GetPayrollMonth(ldtFromDate);
                                        lhstMonthlyHours[lintPayrollMonth] = (decimal)lhstMonthlyHours[lintPayrollMonth] + ldecHours;
                                        //if (ldtFromDate.Month == 12 && ldtFromDate.Year == aintPlanYear - 1)
                                        //{
                                        //    lhstMonthlyHours[1] = (decimal)lhstMonthlyHours[1] + ldecHours;
                                        //}
                                        //else
                                        //{
                                        //    lhstMonthlyHours[ldtFromDate.Month] = (decimal)lhstMonthlyHours[ldtFromDate.Month] + ldecHours;
                                        //}

                                        ldtFromDate = ldtFromDate.AddDays(7);
                                    }
                                }
                            }

                            IDictionaryEnumerator denum = lhstMonthlyHours.GetEnumerator();
                            DictionaryEntry dentry;

                            int lintPayrollStartMonth = busGlobalFunctions.GetPayrollMonth(adtStartDate);
                            int lintPayrollEndMonth = busGlobalFunctions.GetPayrollMonth(adtEndDate);

                            denum.Reset();
                            while (denum.MoveNext() != false)
                            {
                                dentry = (DictionaryEntry)denum.Current;
                                bool lblnFlag = false;
                                // Increase the count by 1 for each of them
                                //SuspendibleHoursChange
                                if (decimal.Round((decimal)dentry.Value, 2) < GetSuspendibleHoursValue(aintPlanYear, (int)dentry.Key) /*40*/)  // && (int)dentry.Key >= adtStartDate.Month && (int)dentry.Key <= adtEndDate.Month)
                                {
                                    if (aintPlanYear < 2004)
                                    {
                                        if ((int)dentry.Key >= adtStartDate.Month && (int)dentry.Key <= adtEndDate.Month)
                                            lblnFlag = true;
                                    }
                                    else
                                    {
                                        if ((int)dentry.Key >= lintPayrollStartMonth && (int)dentry.Key <= lintPayrollEndMonth)
                                            lblnFlag = true;
                                    }

                                    if (CalculateNonSuspendibleMonth(abusPerson, (int)dentry.Key, aintPlanYear) == 0)         //if returns == 0 means month is non suspendible month if > 0 then month is suspendible month
                                    {
                                        // ablnGetSuspendibleMonths = false;
                                    }
                                    else
                                    {
                                        // ablnGetSuspendibleMonths = true;
                                    }

                                    if (lblnFlag)
                                    {
                                        lintNonSuspendibleMonths = lintNonSuspendibleMonths + 1;

                                        if (!ablnGetSuspendibleMonths)
                                        {
                                            // Insert the data in the Collection
                                            busBenefitCalculationNonsuspendibleDetail lbusBenefitCalculationNonsuspendibleDetail = new busBenefitCalculationNonsuspendibleDetail() { icdoBenefitCalculationNonsuspendibleDetail = new cdoBenefitCalculationNonsuspendibleDetail() };
                                            lbusBenefitCalculationNonsuspendibleDetail.LoadData(aintPlanYear, (int)dentry.Key, (decimal)dentry.Value);
                                            if (abusBenefitCalculationYearlyDetail != null)
                                            {
                                                if (abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail != null)
                                                {
                                                    abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail.Add(lbusBenefitCalculationNonsuspendibleDetail);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (ablnGetSuspendibleMonths && abusBenefitCalculationYearlyDetail != null)
                                {
                                    if (aintPlanYear < 2004)
                                    {
                                        if ((int)dentry.Key >= adtStartDate.Month && (int)dentry.Key <= adtEndDate.Month)
                                            lblnFlag = true;
                                    }
                                    else
                                    {
                                        if ((int)dentry.Key >= lintPayrollStartMonth && (int)dentry.Key <= lintPayrollEndMonth)
                                            lblnFlag = true;
                                    }
                                    if (lblnFlag)
                                    {
                                        abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.suspendible_months_count += 1;
                                        busBenefitCalculationNonsuspendibleDetail lbusBenefitCalculationNonsuspendibleDetail = new busBenefitCalculationNonsuspendibleDetail() { icdoBenefitCalculationNonsuspendibleDetail = new cdoBenefitCalculationNonsuspendibleDetail() };
                                        lbusBenefitCalculationNonsuspendibleDetail.LoadData(aintPlanYear, (int)dentry.Key, (decimal)dentry.Value);
                                        if (abusBenefitCalculationYearlyDetail != null)
                                        {
                                            if (abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail != null)
                                            {
                                                abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail.Add(lbusBenefitCalculationNonsuspendibleDetail);
                                            }
                                        }
                                    }


                                }
                            }
                        }

                        else
                        {
                            // No hours found for this computation year. 
                            // Hence the Total count of Non-Suspendible months will be the calculated based on the Start and End dates
                            int lintPayrollStartMonth = busGlobalFunctions.GetPayrollMonth(adtStartDate);
                            int lintPayrollEndMonth = busGlobalFunctions.GetPayrollMonth(adtEndDate);

                            if (aintPlanYear < 2004)
                            {
                                lintNonSuspendibleMonths = adtEndDate.Month - adtStartDate.Month + 1;
                                // Insert the data in the Collection
                                for (int i = adtStartDate.Month; i <= adtEndDate.Month; i++)
                                {
                                    if (abusBenefitCalculationYearlyDetail != null)
                                    {
                                        busBenefitCalculationNonsuspendibleDetail lbusBenefitCalculationNonsuspendibleDetail = new busBenefitCalculationNonsuspendibleDetail() { icdoBenefitCalculationNonsuspendibleDetail = new cdoBenefitCalculationNonsuspendibleDetail() };
                                        lbusBenefitCalculationNonsuspendibleDetail.LoadData(aintPlanYear, i, busConstant.ZERO_DECIMAL);
                                        if (abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail != null)
                                        {
                                            abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail.Add(lbusBenefitCalculationNonsuspendibleDetail);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                lintNonSuspendibleMonths = lintPayrollEndMonth - lintPayrollStartMonth + 1;
                                // Insert the data in the Collection
                                for (int i = lintPayrollStartMonth; i <= lintPayrollEndMonth; i++)
                                {
                                    if (abusBenefitCalculationYearlyDetail != null)
                                    {
                                        busBenefitCalculationNonsuspendibleDetail lbusBenefitCalculationNonsuspendibleDetail = new busBenefitCalculationNonsuspendibleDetail() { icdoBenefitCalculationNonsuspendibleDetail = new cdoBenefitCalculationNonsuspendibleDetail() };
                                        lbusBenefitCalculationNonsuspendibleDetail.LoadData(aintPlanYear, i, busConstant.ZERO_DECIMAL);
                                        if (abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail != null)
                                        {
                                            abusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail.Add(lbusBenefitCalculationNonsuspendibleDetail);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
            }
            finally
            {
                if (lconLegacy.IsNotNull() && lconLegacy.State == ConnectionState.Open)
                {
                    lconLegacy.Close();
                }
            }
            return lintNonSuspendibleMonths;
        }

        public int CalculateNonSuspendibleMonth(busPerson abusPerson, int aintNonSuspendibleMonth, int aintCalculationPlanYear)
        {
            int lintNonSuspendibleMonthCount = busConstant.ZERO_INT;

            abusPerson.LoadPersonSuspendibleMonth();

            lintNonSuspendibleMonthCount = abusPerson.iclbPersonSuspendibleMonth.Where(item => item.icdoPersonSuspendibleMonth.person_id == abusPerson.icdoPerson.person_id &&
                item.icdoPersonSuspendibleMonth.plan_year == aintCalculationPlanYear && item.icdoPersonSuspendibleMonth.suspendible_month_value == Convert.ToString(aintNonSuspendibleMonth)).Count();

            return lintNonSuspendibleMonthCount;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="adictHours"></param>Hours Collection 
        /// <param name="aclbusPersonSuspendibleMonth"></param> Non Signatory Months Collection For Person
        /// <param name="adtComparisonDate"></param>
        /// <returns></returns>
        public bool CheckIfMonthIsSuspendible(Dictionary<int, Dictionary<int, decimal>> adictHours, Collection<busPersonSuspendibleMonth> aclbusPersonSuspendibleMonth, DateTime adtComparisonDate)
        {
            bool lblnIsSuspendible = false;
            //SuspendibleHoursChange
            if (!adictHours.IsNullOrEmpty() && adictHours.Keys.Contains(adtComparisonDate.Year) && adictHours[adtComparisonDate.Year][adtComparisonDate.Month] >= GetSuspendibleHoursValue(adtComparisonDate.Year, adtComparisonDate.Month) /*40*/)
            {
                lblnIsSuspendible = true;
            }
            else if (!aclbusPersonSuspendibleMonth.IsNullOrEmpty() && aclbusPersonSuspendibleMonth.Where(item =>
                item.icdoPersonSuspendibleMonth.plan_year == adtComparisonDate.Year && item.icdoPersonSuspendibleMonth.suspendible_month_value.Trim() == Convert.ToString(adtComparisonDate.Month)).Count() > 0)
            {
                lblnIsSuspendible = true;
            }
            return lblnIsSuspendible;
        }

        //Reemployment
        public int GetSuspendibleMonthsBetweenTwoDates(Dictionary<int, Dictionary<int, decimal>> adictHours, Collection<busPersonSuspendibleMonth> aclbusPersonSuspendibleMonth, DateTime adtFromDate, DateTime adtToDate)
        {
            int lintSuspendibleMonths = 0;
            DateTime ldtFromDate = adtFromDate;
            while (ldtFromDate <= adtToDate)
            {
                if (CheckIfMonthIsSuspendible(adictHours, aclbusPersonSuspendibleMonth, ldtFromDate))
                {
                    lintSuspendibleMonths++;
                }
                ldtFromDate = ldtFromDate.AddMonths(1);
            }
            return lintSuspendibleMonths;
        }

        public ArrayList GetNonSuspendibleMonthBetweenTwoDates(Dictionary<int, Dictionary<int, decimal>> adictHours, Collection<busPersonSuspendibleMonth> aclbusPersonSuspendibleMonth, DateTime adtFromDate, DateTime adtToDate)
        {
            int lintCount = 0;
            ArrayList larr = new ArrayList();
            DateTime ldtNonSuspendibleMonth = new DateTime();
            DateTime ldtFromDate = adtFromDate;
            while (ldtFromDate <= adtToDate)
            {
                if (!CheckIfMonthIsSuspendible(adictHours, aclbusPersonSuspendibleMonth, ldtFromDate))
                {
                    ldtNonSuspendibleMonth = ldtFromDate;
                    larr.Add(ldtFromDate);
                }
                lintCount++;

                ldtFromDate = ldtFromDate.AddMonths(1);
            }
            return larr;
        }


        public decimal GetLocalLumpsumBenefitAmount(decimal adecAge, busBenefitApplication abusBenefitApplication, busPerson abusPerson, DateTime adtRetirementDate, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution)
        {
            decimal ldecTotalLumpsumBenefitAmount = busConstant.ZERO_DECIMAL;

            foreach (busPersonAccount lbusPersonAccount in abusBenefitApplication.ibusPerson.iclbPersonAccount)
            {
                if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Count() > 0)
                {
                    if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_600_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal600(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                    false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                    null, null,
                                                                                                                    Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                    aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_666_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal666(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                    false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                    adecAge,
                                                                                                                    null, null,
                                                                                                                    Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                    aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal52(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                    false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                    null, null,
                                                                                                                    Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                    aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal161(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                    false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                    null, null,
                                                                                                                    Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                    aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal700(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                    false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                    aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                    null, null,
                                                                                                                    Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                    aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);

                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));

                    }
                }
            }
            return ldecTotalLumpsumBenefitAmount;
        }

        /// <summary>
        /// No Reduction Factor Applied in case of Disability
        /// </summary>
        /// <param name="adecAge"></param>
        /// <param name="abusBenefitApplication"></param>
        /// <param name="abusPerson"></param>
        /// <param name="adtRetirementDate"></param>
        /// <param name="aclbPersonAccountRetirementContribution"></param>
        /// <returns></returns>
        public decimal GetTotalFrozenAmountForDiability(decimal adecAge, busBenefitApplication abusBenefitApplication, busPerson abusPerson, DateTime adtRetirementDate, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution)
        {
            decimal ldecTotalLumpsumBenefitAmount = busConstant.ZERO_DECIMAL;

            foreach (busPersonAccount lbusPersonAccount in abusBenefitApplication.ibusPerson.iclbPersonAccount)
            {
                if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Count() > 0)
                {
                    if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_600_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);

                        if (lbusPersonAccount.icdoPersonAccount.istrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE)
                        {
                            ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal600(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                        false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                        null, null,
                                                                                                                        Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                        aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        }
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_666_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);
                        if (lbusPersonAccount.icdoPersonAccount.istrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE)
                        {
                            ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal666(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                        false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                        adecAge,
                                                                                                                        null, null,
                                                                                                                        Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                        aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        }
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);
                        if (lbusPersonAccount.icdoPersonAccount.istrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE)
                        {
                            ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal52(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                        false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                        null, null,
                                                                                                                        Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                        aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        }
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);
                        if (lbusPersonAccount.icdoPersonAccount.istrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE)
                        {
                            ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal161(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                        false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                        null, null,
                                                                                                                        Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                        aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        }
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));
                    }
                    else if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);

                        if (lbusPersonAccount.icdoPersonAccount.istrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE)
                        {
                            ldecTotalBenefitAmount = CalculateTotalBenefitAmtForLocal700(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType, adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                                                                                                                         aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                                                                                                                         false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                                                                                                                         aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                                                                                                                         null, null,
                                                                                                                         Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                                                                                                                         aclbPersonAccountRetirementContribution, busConstant.BOOL_FALSE);
                        }
                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount));

                    }
                }
            }
            return ldecTotalLumpsumBenefitAmount;
        }

        // wasim
        public decimal GetLumpsumBenefitFactorByAGE(int aintMemberAge)
        {
            object lobjLumpsumBenefitFactor = null;
            lobjLumpsumBenefitFactor = DBFunction.DBExecuteScalar("cdoBenefitProvisionLumpsumFactor.GetLumpSumFactorByAge", new object[1] { aintMemberAge },
                                                                   iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
            //Ticket : 61531
            if (lobjLumpsumBenefitFactor.IsNotNull())
            {
                return (decimal)lobjLumpsumBenefitFactor;
            }

            return 0;
        }

        /// <summary>
        /// Calculate Lumpsum benefit factor
        /// </summary>
        /// <param name="aintMemberAge"></param>
        /// <param name="aintRetirementYear"></param>
        /// <returns></returns>
        public decimal GetLumpsumBenefitFactor(int aintMemberAge, int aintRetirementYear)
        {
            object lobjLumpsumBenefitFactor = null;
            lobjLumpsumBenefitFactor = DBFunction.DBExecuteScalar("cdoBenefitProvisionLumpsumFactor.GetLumpSumFactor", new object[2] { aintMemberAge, aintRetirementYear },
                                                                   iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

            //Ticket : 61531
            if (lobjLumpsumBenefitFactor.IsNotNull())
            {
                return (decimal)lobjLumpsumBenefitFactor;
            }


            return 0;
        }


        public decimal CalculateLateRetirementAccruedBenefitAmount(busPersonAccount abusPersonAccount, int aintPlanId, string astrBenefitTypeValue, busPerson abusPerson,
       Collection<cdoDummyWorkData> aclbPersonWorkHistory_MPI, bool ablnIsQdroCal, Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
       Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, ref decimal adecLateAdjustmentAmt, DateTime adtRetirementDate, bool ablMPIPlanFlag, DateTime adtVestingDate,
       Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, string astrBenefitType = "", bool ablnReEvaluationMDBatch = false, bool ablnAnnualStmtDataExtractionBatch = false, DateTime? adtEarliestRetirementDate = null)
        {
            //decimal ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL; //Removed ldecUnreducedAccruedBenefitAmount
            decimal ldecPrevYrMaxEEDerivedBen = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYrEEDerivedBen = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYrAge = busConstant.ZERO_DECIMAL;
            decimal ldecPRevYrAnnualMax = busConstant.ZERO_DECIMAL;
            decimal ldecNormalRetirementAge = GetNormalRetirementAge(aintPlanId);
            decimal ldecTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYrLateRetirementAdjustment = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYrTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
            //DateTime ldtMinDistributionDate = Convert.ToDateTime(busGlobalFunctions.CalculateMinDistributionDate(abusPerson.icdoPerson.idtDateofBirth, adtVestingDate));
            int lintMPIQualifiedYear = busConstant.ZERO_INT;
            DateTime ldtForfietureDate = new DateTime();
            DateTime ldtLatestWithdrawalDateBeforeVesting = new DateTime();
            bool lblnVestedAfterNRA = false;

            //RMD72Project
            //Added bellow code to determine md date
            decimal ldecMDAge = busConstant.BenefitCalculation.AGE_70_HALF;
            //int lintPersonId = lbusPersonAccount.icdoPersonAccount.person_id;
            //DateTime ldtVestedDate = busGlobalFunctions.GetVestedDate(lintPersonId, aintPlanId);
            DateTime ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(abusPerson.icdoPerson.person_id, adtVestingDate);  //calculate MD Date based on participant MD age option

            // RID# 153935 Late retirement adjustment was not working for Age 73 differed MD. This fix is for continue late retirement adjustments till new differed MD age.
            //DateTime ldt72MinDate = busGlobalFunctions.Get72MinDistributionDate(abusPerson.icdoPerson.idtDateofBirth, adtVestingDate); //calculate MD date based on age 70.5
            //if (ldtMinDistributionDate == ldt72MinDate)
            //{
            //    ldecMDAge = busConstant.BenefitCalculation.AGE_72;
            //}
            ldecMDAge = busGlobalFunctions.GetMinDistributionAge(abusPerson.icdoPerson.person_id, adtVestingDate);

            //If participant had age 72 option but retireed before 72MD date, business asked to use 70.5 instead of if participant age 72 MD date.
            //if (ldtMinDistributionDate == ldt72MinDate && adtRetirementDate < ldtMinDistributionDate)
            //{
            //    ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(abusPerson.icdoPerson.idtDateofBirth, adtVestingDate); //calculate MD date based on age 70.5
            //    ldecMDAge = busConstant.BenefitCalculation.AGE_70_HALF;
            //}


            //Prod PIR 131 : Corrected Normal Retirement Date Calculation : Release 3
            DateTime ldtNormalRetirementDate = abusPerson.icdoPerson.idtDateofBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge));
            if (ldtNormalRetirementDate.Day != 1)
            {
                ldtNormalRetirementDate = ldtNormalRetirementDate.AddMonths(1).GetFirstDayofMonth();
            }
            Collection<cdoPersonAccountRetirementContribution> lclbPersonWithdrawalCollection = new Collection<cdoPersonAccountRetirementContribution>();
            if (adtVestingDate > ldtNormalRetirementDate)
            {
                if (adtVestingDate.Day == 1)
                    ldtNormalRetirementDate = adtVestingDate;
                else
                    ldtNormalRetirementDate = adtVestingDate.GetLastDayofMonth().AddDays(1);

                //RID - 60998
                ldecNormalRetirementAge = busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.idtDateofBirth, ldtNormalRetirementDate);
                lblnVestedAfterNRA = true;
            }

            DateTime ldtLatestCutOffDate = new DateTime();
            if (astrBenefitType != busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
            {
                ldtLatestCutOffDate = LastEvaluatedMonth(DateTime.Now);
            }
            if (ldtLatestCutOffDate > adtRetirementDate)
            {
                ldtLatestCutOffDate = busGlobalFunctions.GetLastPayrollDayOfMonth(adtRetirementDate.Month == 1 ? adtRetirementDate.AddMonths(-1).Year : adtRetirementDate.Year, adtRetirementDate.AddMonths(-1).Month); ;
            }
            else if (ldtLatestCutOffDate == DateTime.MinValue)
            {
                ldtLatestCutOffDate = busGlobalFunctions.GetLastPayrollDayOfMonth(DateTime.Now.Year, DateTime.Now.Month);

                if (ldtLatestCutOffDate > DateTime.Now)
                {
                    ldtLatestCutOffDate = busGlobalFunctions.GetLastPayrollDayOfMonth(DateTime.Now.Month == 1 ? DateTime.Now.AddMonths(-1).Year : DateTime.Now.Year, DateTime.Now.AddMonths(-1).Month);
                }
            }


            //PIR 1035
            decimal ldecAgeAtRetirement = busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.idtDateofBirth, adtRetirementDate);

            Collection<cdoDummyWorkData> lclbDummyWork4RetirementYear = null;


            decimal ldecAgeForLateRetirement = ldecNormalRetirementAge;

            busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility();
            lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(abusPersonAccount.icdoPersonAccount.person_account_id);

            if (lbusPersonAccountEligibility != null && lbusPersonAccountEligibility.icdoPersonAccountEligibility != null)
            {
                ldtForfietureDate = lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date;
            }

            CalculateAccruedBenefitForPersonWithWithdrawal(busConstant.RETIREMENT_TYPE_LATE, adtVestingDate, decimal.Zero, abusPerson, abusPerson.iclbPersonAccount, adtRetirementDate, aclbPersonWorkHistory_MPI, aclbPersonAccountRetirementContribution, ldtForfietureDate.Year,
                ref lclbPersonWithdrawalCollection);
            if (!lclbPersonWithdrawalCollection.IsNullOrEmpty())
            {
                if (lclbPersonWithdrawalCollection.Where(item => !item.iblnWithdrawalDateAfterVesting).Count() > 0)
                {
                    ldtLatestWithdrawalDateBeforeVesting = lclbPersonWithdrawalCollection.OrderByDescending(item => item.effective_date.Year).Where(item => !item.iblnWithdrawalDateAfterVesting).FirstOrDefault().effective_date;
                }
            }


            // Puneet 06/12/2012 - New Rule for Late Retirement Calc :- The rate used for accrued benefit calculation will the rate present at that year.
            // Check if Vested Date is after age 65 (NRD)
            if (adtVestingDate > ldtNormalRetirementDate)
            {
                // Late Retirement begins on the month after the Vested Date
                // Calculate the Participant Age at Vested Date
                DateTime ldtMonthAfterVestingDate = adtVestingDate.AddMonths(1).AddDays(-1 * adtVestingDate.Day + 1);
                ldecAgeForLateRetirement = (ldtMonthAfterVestingDate.Year - abusPerson.icdoPerson.idtDateofBirth.Year) + (ldtMonthAfterVestingDate.Month - abusPerson.icdoPerson.idtDateofBirth.Month) / 12;
            }

            // Check if the Retirement Date Computation Year exists in the Work History Collection. If not Add it
            int lintMaxComputationYear = aclbPersonWorkHistory_MPI.Max(item => item.year);

            #region Adding empty data for all computation years until the retirement date computation year
            //PIR 1053
            // Adding empty data for all computation years until the retirement date computation year
            ////PIR 854 On the Minimum Distribution Calculations OPUS should not include the accrued benefit for hours worked in the year of MD date //PIR 854 - Mailed Issue on 05/08/2015 For PIR 278
            string lstrRetirementType = string.Empty;
            if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0 &&
                aclbBenefitCalculationDetail.Where(t => t.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID
                    && t.icdoBenefitCalculationDetail.ee_flag.IsNullOrEmpty() && t.icdoBenefitCalculationDetail.uvhp_flag.IsNullOrEmpty()).Count() > 0)
            {
                lstrRetirementType = aclbBenefitCalculationDetail.Where(t => t.icdoBenefitCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID
                    && t.icdoBenefitCalculationDetail.ee_flag.IsNullOrEmpty() && t.icdoBenefitCalculationDetail.uvhp_flag.IsNullOrEmpty()).FirstOrDefault().icdoBenefitCalculationDetail.benefit_subtype_value;
            }

            if (lintMaxComputationYear <= adtRetirementDate.Year && !ablnReEvaluationMDBatch) //PIR 854 - Mailed Issue on 05/08/2015 For PIR 278
            {
                // Fetch the data for the last computation year in the collection
                cdoDummyWorkData lcdoDummyWorkDataForLastComputationYear = aclbPersonWorkHistory_MPI.Where(item => item.year == lintMaxComputationYear).FirstOrDefault();
                Decimal ldecAge = lcdoDummyWorkDataForLastComputationYear.age;
                lclbDummyWork4RetirementYear = new Collection<cdoDummyWorkData>();
                DateTime ldtToDate = adtRetirementDate;

                //PIR 1053
                if (lstrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                {
                    if (adtRetirementDate.Month != 1)
                        ldtToDate = adtRetirementDate.AddYears(-1);
                }


                for (int lintComputationYear = lintMaxComputationYear + 1; lintComputationYear <= ldtToDate.Year; lintComputationYear++)//PIR 1053
                {
                    cdoDummyWorkData lcdoDummyWorkData = new cdoDummyWorkData();
                    lcdoDummyWorkData.year = lintComputationYear;
                    lcdoDummyWorkData.computation_year = lintComputationYear.ToString();
                    lcdoDummyWorkData.age = ++ldecAge;
                    lcdoDummyWorkData.qualified_hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.vested_hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.qualified_years_count = lcdoDummyWorkDataForLastComputationYear.qualified_years_count;
                    lcdoDummyWorkData.vested_years_count = lcdoDummyWorkDataForLastComputationYear.vested_years_count;
                    lcdoDummyWorkData.anniversary_years_count = lcdoDummyWorkDataForLastComputationYear.anniversary_years_count;
                    lcdoDummyWorkData.bis_years_count = 0;
                    lcdoDummyWorkData.comments = null;

                    lcdoDummyWorkData.idecTotalPensionHours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecTotalIAPHours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecTotalHealthHours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.iintHealthCount = lcdoDummyWorkDataForLastComputationYear.iintHealthCount;

                    lcdoDummyWorkData.L600_Hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L666_Hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L700_Hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L161_Hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L52_Hours = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L600_PensionCredits = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L666_PensionCredits = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L161_PensionCredits = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L700_PensionCredits = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.L52_PensionCredits = busConstant.ZERO_DECIMAL;

                    lcdoDummyWorkData.iintPlanYear = lintComputationYear;
                    lcdoDummyWorkData.idecBenefitRate = lcdoDummyWorkDataForLastComputationYear.idecBenefitRate;
                    lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = lcdoDummyWorkDataForLastComputationYear.idecPlanYearAccruedBenefit;

                    aclbPersonWorkHistory_MPI.Add(lcdoDummyWorkData);
                    lclbDummyWork4RetirementYear.Add(lcdoDummyWorkData);
                }
            }
            #endregion

            decimal ldecEEContributionAmount = busConstant.ZERO_DECIMAL;
            decimal ldecEEInterestAmount = busConstant.ZERO_DECIMAL;
            DateTime ldtEEContributionAsOfDate = DateTime.MinValue;
            decimal ldecHrTillDate = 0, ldecEEContributionTillDate = 0, ldecEEInterestTillDate = 0, ldecTotalAccruedBenefitTillDate = 0, ldecAccuredBenefitatBreak = 0;
            decimal ldecTotalBaseBenefitforIncreaseCalc = Decimal.Zero;
            decimal ldecTotalBaseBenefitforIncreaseCalcPrevYear = Decimal.Zero;
            decimal ldecTotalBaseBenefitforIncreaseCalc10 = Decimal.Zero;
            decimal ldecTotalBaseBenefitforIncreaseCalcPrevYear10 = Decimal.Zero;

            //PIR 1035
            decimal ldecActiveIncrease = decimal.Zero;
            DateTime ldtActiveIncreaseDate = DateTime.MinValue;

            // Fetch the Plan Benefit Rates
            DataTable ldtbPlanBenefitRate = busBase.Select("cdoPlanBenefitRate.Lookup", new object[] { });
            Collection<cdoPlanBenefitRate> lclbcdoPlanBenefitRate = cdoDummyWorkData.GetCollection<cdoPlanBenefitRate>(ldtbPlanBenefitRate);
            //PIR 355
            lclbcdoPlanBenefitRate = BenefitRateScheduleSpecialCase(adtRetirementDate, lclbcdoPlanBenefitRate);

            foreach (cdoDummyWorkData lcdoDummyWorkData in aclbPersonWorkHistory_MPI)
            {
                decimal ldecActiveIncreaseAmount = decimal.Zero;

                //PIR 862
                if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT && Convert.ToString(adtEarliestRetirementDate).IsNotNullOrEmpty())
                {
                    if (Convert.ToDateTime(adtEarliestRetirementDate) != DateTime.MinValue && lcdoDummyWorkData.year > Convert.ToDateTime(adtEarliestRetirementDate).Year)
                        break;
                }

                busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail();

                //PIR 914
                lbusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail = new Collection<busBenefitCalculationNonsuspendibleDetail>();
                ldecActiveIncrease = decimal.Zero;

                #region To Calculate Benefit Amount for Each Year

                ldecEEContributionAmount = busConstant.ZERO_DECIMAL;
                ldecEEInterestAmount = busConstant.ZERO_DECIMAL;

                if (lcdoDummyWorkData.vested_hours >= 400)
                {
                    lintMPIQualifiedYear += 1;

                }
               else if (lcdoDummyWorkData.year == 2023 && adtRetirementDate.Year >= 2023 && (lcdoDummyWorkData.qualified_hours >= 65 && lcdoDummyWorkData.qualified_hours < 400))
                {
                    lintMPIQualifiedYear += 1;

                }

                // Check for Forfeiture prior to Vesting
                if (lcdoDummyWorkData.istrForfietureFlag == busConstant.FLAG_YES)
                {
                    // Participant has forfeited the Benefit Amount
                    lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                    //ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;//Removed ldecUnreducedAccruedBenefitAmount
                    ldecTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
                    GetEEContributionsUptoPlanYear(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData.year, ldtForfietureDate,
                                                    out ldecEEContributionAmount, out ldecEEInterestAmount, out ldtEEContributionAsOfDate);
                }
                // “Credited Pension QY in 2023 per MOA 2024” --Ticket#153518
                else if (lcdoDummyWorkData.year == 2023 && adtRetirementDate.Year >= 2023 && lintMPIQualifiedYear < 20 && (lcdoDummyWorkData.qualified_hours >= 65 && lcdoDummyWorkData.qualified_hours < 400))
                {
                    lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);

                }
                else if (lcdoDummyWorkData.qualified_years_count < Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20) &&
                    lcdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                {
                    // These Hours will not be counted for in the calculation of accrued benefit amount
                    lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                    GetEEContributionsUptoPlanYear(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData.year, ldtForfietureDate,
                                                    out ldecEEContributionAmount, out ldecEEInterestAmount, out ldtEEContributionAsOfDate);
                }
                else if (lcdoDummyWorkData.year < ldtLatestWithdrawalDateBeforeVesting.Year)
                {
                    lcdoDummyWorkData.idecBenefitAmount = decimal.Zero;
                    //ldecUnreducedAccruedBenefitAmount = decimal.Zero;//Removed ldecUnreducedAccruedBenefitAmount
                    ldecTotalAccruedBenefitAmount = decimal.Zero;
                }
                else
                {
                    if (lcdoDummyWorkData.qualified_years_count > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20) &&
                        lcdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                    {
                        if (lintMPIQualifiedYear > 20)
                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                        else
                        {
                            #region To Check If Local Merged - If yes give Benefit Else NO
                            if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains("Local")).Count() > 0)
                            {
                                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_52).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_161).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_600).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_666).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.LOCAL_700).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                            }
                            else
                                lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                            #endregion
                        }
                    }
                    else
                    {
                        lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                    }
                    if (lcdoDummyWorkData.year == ldtLatestWithdrawalDateBeforeVesting.Year)
                    {
                        //Subtract the benefit amount before withdrawal
                        lcdoDummyWorkData.idecBenefitAmount = CalculateBenefitAmountForWithdrawalYear(abusPerson.icdoPerson.ssn, aintPlanId, ldtLatestWithdrawalDateBeforeVesting, lcdoDummyWorkData);

                    }
                }

                if (lcdoDummyWorkData.age <= ldecNormalRetirementAge || Math.Floor(lcdoDummyWorkData.age) == ldecNormalRetirementAge ||
                    (lblnVestedAfterNRA && ldtNormalRetirementDate.Month != 1 && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year && lcdoDummyWorkData.age < busConstant.BenefitCalculation.AGE_71_HALF))//RID - 60998
                {
                    ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;

                    if (!lclbPersonWithdrawalCollection.IsNullOrEmpty())
                    {
                        if (lcdoDummyWorkData.year > ldtLatestWithdrawalDateBeforeVesting.Year)
                        {
                            if (lclbPersonWithdrawalCollection.Where(item => item.iblnWithdrawalDateAfterVesting && lcdoDummyWorkData.year == item.effective_date.Year).Count() > 0)
                            {
                                ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount -
                                    lclbPersonWithdrawalCollection.Where(item => item.iblnWithdrawalDateAfterVesting && lcdoDummyWorkData.year == item.effective_date.Year).FirstOrDefault().idecEEDerivedBenefitForYear;

                                //Prod Pir 199, 345
                                //Removed ldecUnreducedAccruedBenefitAmount
                                //ldecUnreducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount -
                                //    lclbPersonWithdrawalCollection.Where(item => item.iblnWithdrawalDateAfterVesting && lcdoDummyWorkData.year == item.effective_date.Year).FirstOrDefault().idecEEDerivedBenefitForYear;
                            }
                        }
                    }
                    if (lcdoDummyWorkData.vested_years_count >= 11)
                    {
                        if (lcdoDummyWorkData.bis_years_count >= 2)
                        {
                            ldecTotalBaseBenefitforIncreaseCalc = lcdoDummyWorkData.idecBenefitAmount;
                            ldecTotalBaseBenefitforIncreaseCalcPrevYear = ldecTotalBaseBenefitforIncreaseCalc;

                            ldecTotalBaseBenefitforIncreaseCalc10 = Decimal.Zero;
                            ldecTotalBaseBenefitforIncreaseCalcPrevYear10 = ldecTotalBaseBenefitforIncreaseCalc10;
                        }
                        else
                        {
                            ldecTotalBaseBenefitforIncreaseCalc = ldecTotalBaseBenefitforIncreaseCalc + lcdoDummyWorkData.idecBenefitAmount;
                            ldecTotalBaseBenefitforIncreaseCalcPrevYear = ldecTotalBaseBenefitforIncreaseCalc;
                        }
                    }
                    else if (lcdoDummyWorkData.vested_years_count <= 10 || lcdoDummyWorkData.bis_years_count >= 2)
                    {
                        if (lcdoDummyWorkData.bis_years_count >= 2)
                        {
                            ldecTotalBaseBenefitforIncreaseCalc10 = lcdoDummyWorkData.idecBenefitAmount;
                            ldecTotalBaseBenefitforIncreaseCalcPrevYear10 = ldecTotalBaseBenefitforIncreaseCalc10;
                        }
                        else
                        {
                            ldecTotalBaseBenefitforIncreaseCalc10 = ldecTotalBaseBenefitforIncreaseCalc10 + lcdoDummyWorkData.idecBenefitAmount;
                            ldecTotalBaseBenefitforIncreaseCalcPrevYear10 = ldecTotalBaseBenefitforIncreaseCalc10;
                        }
                    }
                }

                //RMD72Project
                //Replacing busConstant.BenefitCalculation.AGE_71_HALF with calculated MD age variable ldecMDAge
                if (lcdoDummyWorkData.age >= ldecNormalRetirementAge + 1 && lcdoDummyWorkData.age < ldecMDAge + 1 /* busConstant.BenefitCalculation.AGE_71_HALF */)
                {

                    //PIR 1035
                    decimal ldecActiveIncreasePerc = decimal.Zero;
                    decimal ldecActiveIncreasePerc10 = decimal.Zero;

                    //2nd 10 Percent increase added check that 10 percent on accrude benefit should apply only for previous 10% increase not on 2017 increase
                    //10 Percent - RMD
                    if (ldtMinDistributionDate.Date > new DateTime(lcdoDummyWorkData.year + 1, 1, 1).Date
                            && lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == lstrRateType
                                                               && item.effective_date <= adtRetirementDate && Convert.ToInt32(item.qualified_year_limit_value) > 10 && item.increase_percentage.IsNotNull()
                                                               && item.increase_percentage > 0
                                                               && ((item.minimum_distribution_effective_date == DateTime.MinValue && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year)
                                                                    || (
                                                                            (item.minimum_distribution_effective_date != DateTime.MinValue
                                                                                &&
                                                                                (
                                                                                        //RMD72Project
                                                                                        //Replacing busConstant.BenefitCalculation.AGE_70_HALF with calculated MD age variable ldecMDAge 
                                                                                        !(lstrRetirementType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION
                                                                                        && ldecAgeAtRetirement > ldecMDAge && adtRetirementDate >= item.minimum_distribution_effective_date
                                                                                        && adtRetirementDate > ldtMinDistributionDate && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//Ticket - 68184 //Ticket - 87971
                                                                                    &&
                                                                                    !(lstrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//RID 60998
                                                                                 )
                                                                                && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year && Convert.ToInt32(item.plan_year) < 2017
                                                                            )
                                                                        )
                                                                   )
                                                               ).Count() > 0)
                    {
                        ldecActiveIncreasePerc = lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == lstrRateType
                                                               && item.effective_date <= adtRetirementDate && Convert.ToInt32(item.qualified_year_limit_value) > 10 && item.increase_percentage.IsNotNull()
                                                               && item.increase_percentage > 0
                                                               && ((item.minimum_distribution_effective_date == DateTime.MinValue && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year)
                                                                    || (
                                                                            (item.minimum_distribution_effective_date != DateTime.MinValue
                                                                                &&
                                                                                (
                                                                                    //RMD72Project
                                                                                    //Replacing busConstant.BenefitCalculation.AGE_70_HALF with calculated MD age variable ldecMDAge 
                                                                                    !(lstrRetirementType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION
                                                                                        && ldecAgeAtRetirement > ldecMDAge && adtRetirementDate >= item.minimum_distribution_effective_date
                                                                                        && adtRetirementDate > ldtMinDistributionDate && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//Ticket - 68184 //Ticket - 87971
                                                                                    &&
                                                                                    !(lstrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//RID 60998
                                                                                 )
                                                                                && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year && Convert.ToInt32(item.plan_year) < 2017
                                                                            )
                                                                        )
                                                                   )
                                                               ).FirstOrDefault().increase_percentage;

                        //PIR 1035
                        ldecActiveIncrease = Math.Round(ldecActiveIncreasePerc * 100, 2);

                    }

                    //2nd 10 Percent increase added check that 10 percent on accrude benefit should apply only for previous 10% increase not on 2017 increase
                    //10 Percent - RMD
                    if (ldtMinDistributionDate.Date > new DateTime(lcdoDummyWorkData.year + 1, 1, 1).Date
                        && lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == lstrRateType
                                                               && item.effective_date <= adtRetirementDate && Convert.ToInt32(item.qualified_year_limit_value) == 10 && item.increase_percentage.IsNotNull()
                                                               && item.increase_percentage > 0
                                                               && ((item.minimum_distribution_effective_date == DateTime.MinValue && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year)
                                                                    || (
                                                                            (item.minimum_distribution_effective_date != DateTime.MinValue
                                                                                &&
                                                                                (
                                                                                    //RMD72Project
                                                                                    //Replacing busConstant.BenefitCalculation.AGE_70_HALF with calculated MD age variable ldecMDAge 
                                                                                    !(lstrRetirementType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION
                                                                                        && ldecAgeAtRetirement > ldecMDAge && adtRetirementDate >= item.minimum_distribution_effective_date
                                                                                        && adtRetirementDate > ldtMinDistributionDate && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//Ticket - 68184 //Ticket - 87971
                                                                                    &&
                                                                                    !(lstrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//RID 60998
                                                                                 )
                                                                                && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year && Convert.ToInt32(item.plan_year) < 2017
                                                                            )
                                                                        )
                                                                   )
                                                               ).Count() > 0)
                    {
                        ldecActiveIncreasePerc10 = lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == lstrRateType
                                                               && item.effective_date <= adtRetirementDate && Convert.ToInt32(item.qualified_year_limit_value) == 10 && item.increase_percentage.IsNotNull()
                                                               && item.increase_percentage > 0
                                                               && ((item.minimum_distribution_effective_date == DateTime.MinValue && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year)
                                                                    || (
                                                                            (item.minimum_distribution_effective_date != DateTime.MinValue
                                                                                &&
                                                                                (
                                                                                    //RMD72Project
                                                                                    //Replacing busConstant.BenefitCalculation.AGE_70_HALF with calculated MD age variable ldecMDAge 
                                                                                    !(lstrRetirementType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION
                                                                                        && ldecAgeAtRetirement > ldecMDAge && adtRetirementDate >= item.minimum_distribution_effective_date
                                                                                        && adtRetirementDate > ldtMinDistributionDate && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//Ticket - 68184 //Ticket - 87971
                                                                                    &&
                                                                                    !(lstrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && ldtMinDistributionDate.Year < item.minimum_distribution_effective_date.Year)//RID 60998
                                                                                 )
                                                                                && Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year && Convert.ToInt32(item.plan_year) < 2017
                                                                            )
                                                                        )
                                                                   )
                                                               ).FirstOrDefault().increase_percentage;
                    }

                    //If Participant is on break in years 2015 / 2016 then he/she is not eligible for increase.
                    bool lblnIsBIS = false;
                    if (lclbcdoPlanBenefitRate.Where(item => item.rate_type_value == lstrRateType && item.plan_year == lcdoDummyWorkData.year
                                                                && item.increase_percentage.IsNotNull()
                                                                && item.increase_percentage > 0
                                                                && item.effective_end_year != decimal.Zero && item.effective_end_year <= lcdoDummyWorkData.year + 1).Count() > 0)
                    {
                        //May need to add foreach loop based on structure of future increases.
                        if (aclbPersonWorkHistory_MPI.Where(item => item.year == lcdoDummyWorkData.year + 1 && item.bis_years_count >= 2).Count() > 0)
                        {
                            lblnIsBIS = true;
                        }
                    }

                    if (lcdoDummyWorkData.bis_years_count >= 2 || lblnIsBIS)
                    {
                        if (lcdoDummyWorkData.vested_years_count >= 11)
                        {
                            ldecTotalBaseBenefitforIncreaseCalc = lcdoDummyWorkData.idecBenefitAmount;
                            ldecTotalBaseBenefitforIncreaseCalc10 = decimal.Zero;
                        }
                        else
                        {
                            ldecTotalBaseBenefitforIncreaseCalc = decimal.Zero;
                            ldecTotalBaseBenefitforIncreaseCalc10 = lcdoDummyWorkData.idecBenefitAmount;
                        }

                        //10 Percent - RMD
                        ldecActiveIncrease = Decimal.Zero;
                    }
                    else
                    {
                        ldecTotalBaseBenefitforIncreaseCalc = Math.Round((ldecTotalBaseBenefitforIncreaseCalcPrevYear * (1 + ldecActiveIncreasePerc)), 2) + lcdoDummyWorkData.idecBenefitAmount;
                        ldecTotalBaseBenefitforIncreaseCalc10 = Math.Round((ldecTotalBaseBenefitforIncreaseCalcPrevYear10 * (1 + ldecActiveIncreasePerc10)), 2);
                    }

                    Decimal ldecTemp = Decimal.Zero;
                    Decimal ldecTemp10 = Decimal.Zero;


                    if (lcdoDummyWorkData.bis_years_count >= 2 || lblnIsBIS)
                    {
                        ldecTemp = Decimal.Zero;
                        ldecTemp10 = Decimal.Zero;

                        //10 Percent - RMD
                        ldecActiveIncrease = Decimal.Zero;
                    }
                    else
                    {
                        ldecTemp = ldecTotalBaseBenefitforIncreaseCalcPrevYear;
                        ldecTemp10 = ldecTotalBaseBenefitforIncreaseCalcPrevYear10;
                    }

                    ldecActiveIncreaseAmount = Math.Max(0, (ldecTotalBaseBenefitforIncreaseCalc10 - ldecTemp10) + (ldecTotalBaseBenefitforIncreaseCalc - ldecTemp));

                    //ldecUnreducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount + ldecActiveIncreaseAmount;//Removed ldecUnreducedAccruedBenefitAmount
                    ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + ldecActiveIncreaseAmount;

                    ldecTotalBaseBenefitforIncreaseCalcPrevYear = ldecTotalBaseBenefitforIncreaseCalc;
                    ldecTotalBaseBenefitforIncreaseCalcPrevYear10 = ldecTotalBaseBenefitforIncreaseCalc10;

                }

                #endregion

                decimal ldecTableAfactor = 1.0m;
                decimal ldecTableBfactor = 1.0m; // Defaulting it to 1 and not 0 because we divide the EE Contributions by this factor.

                //RMD72Project
                //Replacing busConstant.BenefitCalculation.AGE_71_HALF with calculated MD age variable ldecMDAge
                if (lcdoDummyWorkData.age >= ldecMDAge + 1 // busConstant.BenefitCalculation.AGE_71_HALF
                    &&
                       //Ticket 69718
                       (
                            Math.Floor(lcdoDummyWorkData.age) > ldecNormalRetirementAge
                            ||
                            (Math.Floor(lcdoDummyWorkData.age) == ldecNormalRetirementAge && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year)
                            ||
                            (lblnVestedAfterNRA && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year)
                        )
                    )
                {
                    // Participant should be receiving MD. Hence he will not receive the Late Retirement Acturial increase
                    // The Accrued Benefit Amount will also be frozen as of the year end when the participant turns age 70.5
                    // Hence Calculate the Benefit Amount for that Year to be shown on the screen, But do not Add it to the Total Unreduced Benefit Amount.


                    ldecHrTillDate = decimal.Zero;

                    if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                    {
                        // Calculate EE Derived Benefit and the Acturial Increase
                        // Fetch the EE Contribution and interst earned upto the plan year
                        lcdoDummyWorkData.age = ldecAgeAtRetirement;

                        {
                            GetEEContributionUptoEffectiveDate(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData.year, ldtForfietureDate, adtRetirementDate, out ldecEEContributionAmount, out ldecEEInterestAmount);

                            // Calculate the Partial Interest upto Retirement Date
                            // Get the Benefit Interest Rate
                            decimal ldecInterestRate = busConstant.ZERO_DECIMAL;
                            object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year },
                                                             iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                            if (lobjBenefitInterestRate.IsNotNull())
                            {
                                ldecInterestRate = (Decimal)lobjBenefitInterestRate;
                            }

                            decimal ldecPartialInterest = Math.Round((ldecEEContributionAmount + ldecEEInterestAmount) * ldecInterestRate / 12 * (adtRetirementDate.Month - 1), 2);
                            ldecEEInterestAmount = ldecEEInterestAmount + ldecPartialInterest;
                        }
                    }

                    else
                    {
                        GetEEContributionsUptoPlanYear(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData.year, ldtForfietureDate, out ldecEEContributionAmount, out ldecEEInterestAmount, out ldtEEContributionAsOfDate);

                        if (lcdoDummyWorkData.year != ldtMinDistributionDate.Year) //for-PIR-619
                        {
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                            //ldecUnreducedAccruedBenefitAmount = ldecTotalAccruedBenefitAmount;//Removed ldecUnreducedAccruedBenefitAmount
                        }

                    }

                    //year Split Up logic on the basis of MD rules for PIR 619
                    if (lcdoDummyWorkData.year == ldtMinDistributionDate.Year && (adtVestingDate.Year < ldtMinDistributionDate.Year && adtVestingDate != DateTime.MinValue)
                        && (lstrRetirementType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION || (lstrRetirementType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && adtRetirementDate.Year > ldtMinDistributionDate.Year)))//Ticket - 68184
                    {
                        //PIR 1035
                        //69718
                        //ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount - lcdoDummyWorkData.idecBenefitAmount;

                        CalculateDataTillAge65orMinDistDate(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData, DateTime.MinValue,
                                                ldtMinDistributionDate, ldtForfietureDate, ldecTotalAccruedBenefitAmount, aintPlanId, astrBenefitTypeValue, astrBenefitType,
                                                ldecPrevYrEEDerivedBen, ldecPrevYrMaxEEDerivedBen, ldecPrevYrTotalAccruedBenefitAmount, ldecPRevYrAnnualMax,
                                                ldecPrevYrAge, abusPerson.icdoPerson.ssn, ldecTableAfactor, adtRetirementDate, ablnIsQdroCal,
                                                ablMPIPlanFlag, abusPerson.icdoPerson.idtDateofBirth, aclbBenefitCalculationDetail, aclbQdroCalculationDetail, out ldecHrTillDate, out ldecEEContributionTillDate,
                                                out ldecEEInterestTillDate, out ldecTotalAccruedBenefitTillDate, out ldecAccuredBenefitatBreak, lcdoDummyWorkData.year - 1);

                        //PIR 1035
                        //69718
                        //ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;

                        ldecPrevYrLateRetirementAdjustment = lcdoDummyWorkData.idecLateRetirementAdjustment;
                    }
                    else if (lcdoDummyWorkData.year == adtVestingDate.Year) //RID 60998
                    {
                        //PIR 1035
                        ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount - lcdoDummyWorkData.idecBenefitAmount;

                        CalculateDataTillAge65orMinDistDate(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData, DateTime.MinValue,
                            adtVestingDate, ldtForfietureDate, ldecTotalAccruedBenefitAmount, aintPlanId, astrBenefitTypeValue, astrBenefitType,
                            ldecPrevYrEEDerivedBen, ldecPrevYrMaxEEDerivedBen, ldecPrevYrTotalAccruedBenefitAmount, ldecPRevYrAnnualMax,
                            ldecPrevYrAge, abusPerson.icdoPerson.ssn, ldecTableAfactor, adtRetirementDate, ablnIsQdroCal,
                            ablMPIPlanFlag, abusPerson.icdoPerson.idtDateofBirth, aclbBenefitCalculationDetail, aclbQdroCalculationDetail, out ldecHrTillDate, out ldecEEContributionTillDate,
                            out ldecEEInterestTillDate, out ldecTotalAccruedBenefitTillDate, out ldecAccuredBenefitatBreak, lcdoDummyWorkData.year - 1);

                        ldecTotalAccruedBenefitAmount = lcdoDummyWorkData.idecBenefitAmount + ldecTotalAccruedBenefitTillDate;
                        //ldecUnreducedAccruedBenefitAmount = ldecTotalAccruedBenefitAmount;//Removed ldecUnreducedAccruedBenefitAmount
                    }


                    // Calculate the Table B Factor to be shown on the screen
                    ldecTableBfactor = GetTableBFactor(astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_LATE, aintPlanId, lcdoDummyWorkData.age, lcdoDummyWorkData.year);

                    //Added for PIR-557
                    ldecTableAfactor = this.GetTableAFactor(lcdoDummyWorkData.age, busConstant.MPIPP_PLAN_ID, lcdoDummyWorkData.year);

                    // ER Derived and ER Acturial Increase will be Zero

                    lcdoDummyWorkData.idecERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecERActurialIncrease = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecTotalERDerivedBenefit = busConstant.ZERO_DECIMAL;

                    // EE Derived and EE Actuarial Increase will be the same as Prev Yrs Max EE Derived Benefit amount
                    lcdoDummyWorkData.idecEEDerivedBenefit = Math.Round((((ldecEEContributionAmount + ldecEEInterestAmount) * ldecTableAfactor) / ldecTableBfactor), 2);
                    lcdoDummyWorkData.idecTotalERDerivedBenefit = lcdoDummyWorkData.idecERDerivedBenefit = ldecTotalAccruedBenefitAmount - lcdoDummyWorkData.idecEEDerivedBenefit;

                    //Ticket - 65946
                    lcdoDummyWorkData.idecEEActurialIncrease = ldecPrevYrMaxEEDerivedBen;

                    //Ticket - 68184
                    if (lstrRetirementType != busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION && lcdoDummyWorkData.year == ldtMinDistributionDate.Year && adtRetirementDate.Year == ldtMinDistributionDate.Year
                     && adtRetirementDate.Year == ldtMinDistributionDate.Year && adtRetirementDate < ldtMinDistributionDate)
                    {
                        lcdoDummyWorkData.idecEEActurialIncrease =
                            ldecPrevYrMaxEEDerivedBen + Math.Round(0.012m * (ldecPrevYrMaxEEDerivedBen * ((lcdoDummyWorkData.age - ldecPrevYrAge) * 12.0m)), 2);
                        lcdoDummyWorkData.idecTotalERDerivedBenefit = lcdoDummyWorkData.idecERDerivedBenefit = ldecPRevYrAnnualMax - ldecPrevYrMaxEEDerivedBen;

                        // Read the Non-Suspendible Months from EA
                        #region Suspendible Months Calculation
                        if (lcdoDummyWorkData.age >= busConstant.RETIREMENT_NORMAL_AGE && !lcdoDummyWorkData.iblnHoursAfterRetirement && lcdoDummyWorkData.year >= ldtNormalRetirementDate.Year)
                        {
                            DateTime ldtStartDate = DateTime.MinValue;
                            DateTime ldtEndDate = DateTime.MinValue;

                            if (((lcdoDummyWorkData.year == ldtNormalRetirementDate.Year) || ((ldtNormalRetirementDate.Year - lcdoDummyWorkData.year == 1) && ldtNormalRetirementDate.Month == 1)))
                            {
                                if (lcdoDummyWorkData.year < 2004)
                                {
                                    ldtStartDate = ldtNormalRetirementDate;
                                    if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                                    {
                                        ldtEndDate = adtRetirementDate.AddDays(-1);
                                    }
                                    else
                                    {
                                        ldtEndDate = new DateTime(lcdoDummyWorkData.year, 12, 31);
                                    }
                                }
                                else if (((ldtNormalRetirementDate.Year - lcdoDummyWorkData.year == 1) && ldtNormalRetirementDate.Month == 1))
                                {
                                    ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                                    ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                                }
                                else
                                {
                                    ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(ldtNormalRetirementDate.Year, ldtNormalRetirementDate.Month);
                                    if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                                    {
                                        ldtEndDate = ldtLatestCutOffDate;
                                    }
                                    else
                                    {
                                        ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                                    }
                                }

                            }

                            else if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                            {
                                if (lcdoDummyWorkData.year < 2004)
                                {
                                    ldtStartDate = new DateTime(lcdoDummyWorkData.year, 1, 1);
                                    ldtEndDate = adtRetirementDate.AddDays(-1);
                                }
                                else
                                {
                                    ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 1);
                                    ldtEndDate = ldtLatestCutOffDate;
                                }


                            }
                            else
                            {
                                if (lcdoDummyWorkData.year < 2004)
                                {
                                    ldtStartDate = new DateTime(lcdoDummyWorkData.year, 1, 1);
                                    ldtEndDate = new DateTime(lcdoDummyWorkData.year, 12, 31);
                                }
                                else
                                {
                                    ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 1);
                                    ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                                }
                            }

                            if (((ldtNormalRetirementDate.Year - lcdoDummyWorkData.year == 1) && ldtNormalRetirementDate.Month == 1))
                                lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                            else
                            {
                                if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                                {
                                    //Prod Pir 312
                                    DateTime ldtEarliestReirementDate = Convert.ToDateTime(adtEarliestRetirementDate);
                                    if (ldtStartDate >= DateTime.Now)
                                    {
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                    }
                                    else if (ldtEndDate > ldtEarliestReirementDate)
                                    {
                                        if (ldtStartDate > ldtEarliestReirementDate)
                                        {
                                            lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                        }
                                        else
                                        {
                                            ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(ldtEarliestReirementDate.AddDays(-1).Year, ldtEarliestReirementDate.AddDays(-1).Month);
                                            lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);

                                        }
                                    }
                                    else
                                    {
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                                    }
                                }
                                else
                                {
                                    //Prod Pir 278 + PIR 251Enhancement : to count all months as suspendible after current date
                                    if (ldtStartDate > ldtLatestCutOffDate)
                                    {
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                    }
                                    else if (ldtEndDate > ldtLatestCutOffDate)
                                    {
                                        ldtEndDate = ldtLatestCutOffDate;
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                                    }
                                    else if (ldtStartDate > ldtEndDate)
                                    {
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                    }
                                    else
                                    {
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                                    }
                                }
                            }
                        }
                        else
                        {
                            lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                        }
                        #endregion

                        lcdoDummyWorkData.idecERActurialIncrease = Math.Round((0.012m * lcdoDummyWorkData.idecERDerivedBenefit * lcdoDummyWorkData.iintNonSuspendibleMonths), 2);
                        lcdoDummyWorkData.idecTotalERDerivedBenefit = lcdoDummyWorkData.idecERDerivedBenefit + lcdoDummyWorkData.idecERActurialIncrease;
                    }

                    lcdoDummyWorkData.idecMaxEEDerivedBenefit = Math.Max(lcdoDummyWorkData.idecEEDerivedBenefit, lcdoDummyWorkData.idecEEActurialIncrease);

                    // Calculate the Late Retirement Adjustment & Annual Max
                    lcdoDummyWorkData.idecLateRetirementAdjustment = lcdoDummyWorkData.idecMaxEEDerivedBenefit + lcdoDummyWorkData.idecTotalERDerivedBenefit;
                    lcdoDummyWorkData.idecAnnualMax = Math.Max(ldecTotalAccruedBenefitAmount, lcdoDummyWorkData.idecLateRetirementAdjustment);


                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount + Math.Min(lcdoDummyWorkData.idecEEDerivedBenefit, busConstant.ZERO_DECIMAL);

                    ldecPrevYrEEDerivedBen = lcdoDummyWorkData.idecEEDerivedBenefit;
                    ldecPrevYrMaxEEDerivedBen = lcdoDummyWorkData.idecMaxEEDerivedBenefit;
                    ldecPrevYrAge = lcdoDummyWorkData.age;
                    ldecPrevYrLateRetirementAdjustment = lcdoDummyWorkData.idecLateRetirementAdjustment;


                    if (lcdoDummyWorkData.year == ldtMinDistributionDate.Year)
                    {
                        Decimal ldecOrgiBenefitAmt = lcdoDummyWorkData.idecBenefitAmount;

                        if (lcdoDummyWorkData.idecBenefitAmount > 0.0M && ldecAccuredBenefitatBreak > 0.0M)
                        {
                            //for-PIR-619
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;

                            //ldecUnreducedAccruedBenefitAmount = ldecTotalAccruedBenefitAmount;//Removed ldecUnreducedAccruedBenefitAmount
                            lcdoDummyWorkData.idecBenefitAmount = lcdoDummyWorkData.idecBenefitAmount - ldecAccuredBenefitatBreak;
                        }
                        else if (lcdoDummyWorkData.idecBenefitAmount > 0.0M && ldecAccuredBenefitatBreak <= 0.0M)
                            lcdoDummyWorkData.idecBenefitAmount = Math.Round((lcdoDummyWorkData.qualified_hours - ldecHrTillDate) * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                    }

                }
                else if (
                            Math.Floor(lcdoDummyWorkData.age) > ldecNormalRetirementAge
                            ||
                            (Math.Floor(lcdoDummyWorkData.age) == ldecNormalRetirementAge && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year)
                            ||
                            (lblnVestedAfterNRA && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year)
                        )//RID 61301
                {
                    ldecTableBfactor = 1.0m;
                    ldecHrTillDate = decimal.Zero;
                    //Prod PIR : 370
                    ldecAccuredBenefitatBreak = decimal.Zero;
                    //Added OR condition for PIR-619
                    if ((Math.Floor(lcdoDummyWorkData.age) == 65 && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year) ||
                        (Math.Floor(lcdoDummyWorkData.age) > 65 && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year))
                    {

                        //PIR 1035
                        //Ticket 69718
                        if (ldtNormalRetirementDate.Month == 1)
                            ldecTotalAccruedBenefitAmount = (ldecTotalAccruedBenefitAmount - ldecActiveIncreaseAmount) + lcdoDummyWorkData.idecBenefitAmount;//Removed ldecUnreducedAccruedBenefitAmount
                        else
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount - lcdoDummyWorkData.idecBenefitAmount;

                        CalculateDataTillAge65orMinDistDate(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData, ldtNormalRetirementDate,
                                                DateTime.MinValue, ldtForfietureDate, ldecTotalAccruedBenefitAmount, aintPlanId, astrBenefitTypeValue, astrBenefitType,
                                                ldecPrevYrEEDerivedBen, ldecPrevYrMaxEEDerivedBen, ldecPrevYrTotalAccruedBenefitAmount, ldecPRevYrAnnualMax,
                                                ldecPrevYrAge, abusPerson.icdoPerson.ssn, ldecTableAfactor, adtRetirementDate, ablnIsQdroCal,
                                                ablMPIPlanFlag, abusPerson.icdoPerson.idtDateofBirth, aclbBenefitCalculationDetail, aclbQdroCalculationDetail, out ldecHrTillDate, out ldecEEContributionTillDate,
                                                out ldecEEInterestTillDate, out ldecTotalAccruedBenefitTillDate, out ldecAccuredBenefitatBreak);

                        //PIR 1035
                        //Ticket 69718
                        if (ldtNormalRetirementDate.Month == 1)
                            ldecTotalAccruedBenefitAmount = (ldecTotalAccruedBenefitAmount + ldecActiveIncreaseAmount) - lcdoDummyWorkData.idecBenefitAmount;
                        else
                            ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;


                        ldecPrevYrMaxEEDerivedBen = lcdoDummyWorkData.idecMaxEEDerivedBenefit;
                        ldecPRevYrAnnualMax = lcdoDummyWorkData.idecAnnualMax;
                        ldecPrevYrTotalAccruedBenefitAmount = ldecTotalAccruedBenefitTillDate;
                        ldecPrevYrAge = 65;
                    }

                    // Get the factors from Table AB
                    if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                    {

                        //PIR 1035
                        lcdoDummyWorkData.age = ldecAgeAtRetirement;
                        ldecTableBfactor = GetTableBFactor(astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_LATE, aintPlanId,
                                                                ldecAgeAtRetirement,
                                                                lcdoDummyWorkData.year < 1988 ? 1988 : lcdoDummyWorkData.year - 1);

                        //Added for PIR-557
                        ldecTableAfactor = this.GetTableAFactor(lcdoDummyWorkData.age, busConstant.MPIPP_PLAN_ID, lcdoDummyWorkData.year);

                        {
                            GetEEContributionUptoEffectiveDate(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData.year, ldtForfietureDate, adtRetirementDate,
                                                                out ldecEEContributionAmount, out ldecEEInterestAmount);

                            decimal ldecInterestRate = busConstant.ZERO_DECIMAL;
                            object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtRetirementDate.Year },
                                                             iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                            if (lobjBenefitInterestRate.IsNotNull())
                            {
                                ldecInterestRate = (Decimal)lobjBenefitInterestRate;
                            }

                            decimal ldecPartialInterest = Math.Round((ldecEEContributionAmount + ldecEEInterestAmount) * ldecInterestRate / 12 * (adtRetirementDate.Month - 1), 2);
                            ldecEEInterestAmount = ldecEEInterestAmount + ldecPartialInterest;
                        }
                    }
                    else
                    {
                        ldecTableBfactor = GetTableBFactor(astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_LATE, aintPlanId,
                                                                    lcdoDummyWorkData.age, lcdoDummyWorkData.year < 1988 ? 1988 : lcdoDummyWorkData.year);

                        //Added for PIR-557
                        ldecTableAfactor = this.GetTableAFactor(lcdoDummyWorkData.age, busConstant.MPIPP_PLAN_ID, lcdoDummyWorkData.year);

                        GetEEContributionsUptoPlanYear(aclbPersonAccountRetirementContribution, abusPersonAccount, lcdoDummyWorkData.year, ldtForfietureDate,
                                                        out ldecEEContributionAmount, out ldecEEInterestAmount, out ldtEEContributionAsOfDate);
                    }

                    if (Math.Floor(lcdoDummyWorkData.age) == 65 || lcdoDummyWorkData.year == ldtMinDistributionDate.Year ||
                        (lcdoDummyWorkData.age > 65 && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year)) //Added OR condition for PIR-619
                    {

                        Decimal ldecOrgiBenefitAmt = lcdoDummyWorkData.idecBenefitAmount;

                        if (lcdoDummyWorkData.idecBenefitAmount > 0.0M && ldecAccuredBenefitatBreak > 0.0M)
                            lcdoDummyWorkData.idecBenefitAmount = lcdoDummyWorkData.idecBenefitAmount - ldecAccuredBenefitatBreak;

                        else if (lcdoDummyWorkData.idecBenefitAmount > 0.0M && ldecAccuredBenefitatBreak <= 0.0M)
                            lcdoDummyWorkData.idecBenefitAmount = Math.Round((lcdoDummyWorkData.qualified_hours - ldecHrTillDate) * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);

                        //Removed ldecUnreducedAccruedBenefitAmount
                        //if (lcdoDummyWorkData.age < busConstant.BenefitCalculation.AGE_71_HALF)
                        //{
                        //    ldecUnreducedAccruedBenefitAmount = ldecTotalAccruedBenefitAmount;
                        //}

                    }

                    lcdoDummyWorkData.idecEEDerivedBenefit = Math.Round((((ldecEEContributionAmount + ldecEEInterestAmount) * ldecTableAfactor) / ldecTableBfactor), 2);
                    lcdoDummyWorkData.idecEEActurialIncrease = ldecPrevYrMaxEEDerivedBen + Math.Round(0.012m * (ldecPrevYrMaxEEDerivedBen * ((lcdoDummyWorkData.age - ldecPrevYrAge) * 12.0m)), 2);
                    lcdoDummyWorkData.idecMaxEEDerivedBenefit = Math.Max(lcdoDummyWorkData.idecEEDerivedBenefit, lcdoDummyWorkData.idecEEActurialIncrease);
                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = Math.Max(ldecTotalAccruedBenefitAmount, 0) + lcdoDummyWorkData.idecBenefitAmount + (lcdoDummyWorkData.idecEEDerivedBenefit - ldecPrevYrEEDerivedBen);

                    // Calculate the ER Derived Benefit
                    lcdoDummyWorkData.idecERDerivedBenefit = Math.Max(ldecPrevYrTotalAccruedBenefitAmount == busConstant.ZERO_DECIMAL ? ldecTotalAccruedBenefitAmount : ldecPrevYrTotalAccruedBenefitAmount, ldecPRevYrAnnualMax) -
                                                                        (ldecPrevYrMaxEEDerivedBen == busConstant.ZERO_DECIMAL ? lcdoDummyWorkData.idecMaxEEDerivedBenefit : ldecPrevYrMaxEEDerivedBen);

                    // Read the Non-Suspendible Months from EA
                    #region Suspendible Months Calculation
                    if (lcdoDummyWorkData.age >= busConstant.RETIREMENT_NORMAL_AGE && !lcdoDummyWorkData.iblnHoursAfterRetirement && lcdoDummyWorkData.year >= ldtNormalRetirementDate.Year)
                    {
                        DateTime ldtStartDate = DateTime.MinValue;
                        DateTime ldtEndDate = DateTime.MinValue;

                        if (((lcdoDummyWorkData.year == ldtNormalRetirementDate.Year) || ((ldtNormalRetirementDate.Year - lcdoDummyWorkData.year == 1) && ldtNormalRetirementDate.Month == 1)))
                        {
                            if (lcdoDummyWorkData.year < 2004)
                            {
                                ldtStartDate = ldtNormalRetirementDate;
                                if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                                {
                                    ldtEndDate = adtRetirementDate.AddDays(-1);
                                }
                                else
                                {
                                    ldtEndDate = new DateTime(lcdoDummyWorkData.year, 12, 31);
                                }
                            }
                            else if (((ldtNormalRetirementDate.Year - lcdoDummyWorkData.year == 1) && ldtNormalRetirementDate.Month == 1))
                            {
                                ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                                ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                            }
                            else
                            {
                                ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(ldtNormalRetirementDate.Year, ldtNormalRetirementDate.Month);
                                if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                                {
                                    ldtEndDate = ldtLatestCutOffDate;
                                }
                                else
                                {
                                    ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                                }
                            }

                        }

                        else if (lcdoDummyWorkData.year == adtRetirementDate.Year)
                        {
                            if (lcdoDummyWorkData.year < 2004)
                            {
                                ldtStartDate = new DateTime(lcdoDummyWorkData.year, 1, 1);
                                ldtEndDate = adtRetirementDate.AddDays(-1);
                            }
                            else
                            {
                                ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 1);
                                ldtEndDate = ldtLatestCutOffDate;
                            }


                        }
                        else
                        {
                            if (lcdoDummyWorkData.year < 2004)
                            {
                                ldtStartDate = new DateTime(lcdoDummyWorkData.year, 1, 1);
                                ldtEndDate = new DateTime(lcdoDummyWorkData.year, 12, 31);
                            }
                            else
                            {
                                ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 1);
                                ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                            }
                        }

                        if (((ldtNormalRetirementDate.Year - lcdoDummyWorkData.year == 1) && ldtNormalRetirementDate.Month == 1))
                            lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                        else
                        {
                            if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                            {
                                //Prod Pir 312
                                DateTime ldtEarliestReirementDate = Convert.ToDateTime(adtEarliestRetirementDate);
                                if (ldtStartDate >= DateTime.Now)
                                {
                                    lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                }
                                else if (ldtEndDate > ldtEarliestReirementDate)
                                {
                                    if (ldtStartDate > ldtEarliestReirementDate)
                                    {
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                    }
                                    else
                                    {
                                        ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(ldtEarliestReirementDate.AddDays(-1).Year, ldtEarliestReirementDate.AddDays(-1).Month);
                                        lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);

                                    }
                                }
                                else
                                {
                                    lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                                }
                            }
                            else
                            {
                                //Prod Pir 278 + PIR 251Enhancement : to count all months as suspendible after current date
                                if (ldtStartDate > ldtLatestCutOffDate)
                                {
                                    lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                }
                                else if (ldtEndDate > ldtLatestCutOffDate)
                                {
                                    ldtEndDate = ldtLatestCutOffDate;
                                    lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                                }
                                else if (ldtStartDate > ldtEndDate)
                                {
                                    lcdoDummyWorkData.iintNonSuspendibleMonths = 0;
                                }
                                else
                                {
                                    lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusPerson.icdoPerson.ssn, abusPerson, lcdoDummyWorkData.year, aintPlanId, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                                }
                            }
                        }
                    }
                    else
                    {
                        lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                    }
                    #endregion

                    // Calculate the ER Derived Benefit and the Acturial Increase
                    if (lcdoDummyWorkData.idecEEDerivedBenefit != busConstant.ZERO_DECIMAL && lcdoDummyWorkData.idecEEDerivedBenefit >= ldecTotalAccruedBenefitAmount)
                    {
                        lcdoDummyWorkData.idecERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    }


                    lcdoDummyWorkData.idecERActurialIncrease = Math.Round((0.012m * lcdoDummyWorkData.idecERDerivedBenefit * lcdoDummyWorkData.iintNonSuspendibleMonths), 2);

                    lcdoDummyWorkData.idecTotalERDerivedBenefit = lcdoDummyWorkData.idecERDerivedBenefit + lcdoDummyWorkData.idecERActurialIncrease;

                    // Calculate the Late Retirement Adjustment & Annual Max
                    lcdoDummyWorkData.idecLateRetirementAdjustment = lcdoDummyWorkData.idecMaxEEDerivedBenefit + lcdoDummyWorkData.idecTotalERDerivedBenefit;
                    lcdoDummyWorkData.idecAnnualMax = Math.Max(ldecTotalAccruedBenefitAmount, lcdoDummyWorkData.idecLateRetirementAdjustment);

                    ldecPrevYrEEDerivedBen = lcdoDummyWorkData.idecEEDerivedBenefit;
                    ldecPrevYrMaxEEDerivedBen = lcdoDummyWorkData.idecMaxEEDerivedBenefit;
                    ldecPrevYrAge = lcdoDummyWorkData.age;
                    ldecPrevYrTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount;

                }
                else
                {
                    lcdoDummyWorkData.idecEEDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecEEActurialIncrease = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecMaxEEDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecERActurialIncrease = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecTotalERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecLateRetirementAdjustment = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecAnnualMax = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = Math.Max(ldecTotalAccruedBenefitAmount, busConstant.ZERO_DECIMAL) + lcdoDummyWorkData.idecBenefitAmount + Math.Min(lcdoDummyWorkData.idecEEDerivedBenefit, busConstant.ZERO_DECIMAL);
                    //Added for PIR-557
                    ldecTableBfactor = GetTableBFactorForLateRetr(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2, lcdoDummyWorkData.age, lcdoDummyWorkData.year);
                    ldecTableAfactor = this.GetTableAFactor(lcdoDummyWorkData.age, busConstant.MPIPP_PLAN_ID, lcdoDummyWorkData.year);
                }

                //Removed ldecUnreducedAccruedBenefitAmount
                //if (lcdoDummyWorkData.age < ldecNormalRetirementAge)
                //{
                //    ldecUnreducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                //}

                //Update Ytd collection
                ldecPRevYrAnnualMax = lcdoDummyWorkData.idecAnnualMax == busConstant.ZERO_DECIMAL ? ldecTotalAccruedBenefitAmount : lcdoDummyWorkData.idecAnnualMax;

                if (lcdoDummyWorkData.year == ldtForfietureDate.Year)
                {
                    ldecTotalAccruedBenefitAmount = Decimal.Zero;
                    //ldecUnreducedAccruedBenefitAmount = Decimal.Zero;//Removed ldecUnreducedAccruedBenefitAmount
                }

                if (Math.Floor(lcdoDummyWorkData.age) == 65 || lcdoDummyWorkData.year == ldtMinDistributionDate.Year ||
                    (Math.Floor(lcdoDummyWorkData.age) > 65 && ldtNormalRetirementDate.Year == lcdoDummyWorkData.year))  //Added OR condition for PIR-619
                {
                    //PIR 914
                    Collection<busBenefitCalculationNonsuspendibleDetail> lclbBenefitCalculationNonsuspendibleDetail =
                        new Collection<busBenefitCalculationNonsuspendibleDetail>();
                    lclbBenefitCalculationNonsuspendibleDetail = lbusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail;
                    lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail();
                    lbusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail = new Collection<busBenefitCalculationNonsuspendibleDetail>();


                    if (ablnAnnualStmtDataExtractionBatch == false && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                        UpdateYearlyDetailTable(lcdoDummyWorkData.qualified_hours - ldecHrTillDate, lcdoDummyWorkData.vested_hours - ldecHrTillDate, lcdoDummyWorkData.idecTotalHealthHours - ldecHrTillDate,
                                               ablnIsQdroCal, ablMPIPlanFlag, lcdoDummyWorkData, aclbQdroCalculationDetail, aintPlanId, astrBenefitType, ldecTotalAccruedBenefitAmount,
                                               ldecTotalAccruedBenefitAmount, ldecEEContributionAmount - ldecEEContributionTillDate,
                                               ldecEEInterestAmount - ldecEEInterestTillDate, ldecTableBfactor, ldecTableAfactor, adtRetirementDate,
                                               lbusBenefitCalculationYearlyDetail, aclbBenefitCalculationDetail, ldecActiveIncrease, ldtActiveIncreaseDate);
                    //PIR 914
                    lbusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail = lclbBenefitCalculationNonsuspendibleDetail;
                }
                else
                {
                    //PIR 914
                    if (ablnAnnualStmtDataExtractionBatch == false && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                        UpdateYearlyDetailTable(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.idecTotalHealthHours,
                                                ablnIsQdroCal, ablMPIPlanFlag, lcdoDummyWorkData, aclbQdroCalculationDetail, aintPlanId, astrBenefitType, ldecTotalAccruedBenefitAmount,
                                                ldecTotalAccruedBenefitAmount, ldecEEContributionAmount, ldecEEInterestAmount, ldecTableBfactor, ldecTableAfactor, adtRetirementDate, lbusBenefitCalculationYearlyDetail,
                                                aclbBenefitCalculationDetail, ldecActiveIncrease, ldtActiveIncreaseDate);
                }

                ldecAccuredBenefitatBreak = Decimal.Zero;
            }

            adecLateAdjustmentAmt = Math.Max(ldecTotalAccruedBenefitAmount, ldecPRevYrAnnualMax);

            // Remove the Current Retirement Date Computation Year from the Collection
            if (!lclbDummyWork4RetirementYear.IsNullOrEmpty())
            {
                foreach (cdoDummyWorkData item in lclbDummyWork4RetirementYear)
                {
                    if (aclbPersonWorkHistory_MPI.Contains(item))
                    {
                        aclbPersonWorkHistory_MPI.Remove(item);
                    }
                }
            }


            return ldecTotalAccruedBenefitAmount;
        }

        //Prod Pir 10,56
        public decimal CalculateBenefitAmountForWithdrawalYear(string astrSSN, int aintPlanId, DateTime adtWithdrawalDate, cdoDummyWorkData acdoDummyWorkData)
        {
            decimal ldecBenefitAmountAfterWithdrawal = decimal.Zero;
            if (!string.IsNullOrEmpty(astrSSN))
            {
                ldecHoursAfterWithdrawal = this.GetWorkDataAfterDate(astrSSN, acdoDummyWorkData.year, aintPlanId, adtWithdrawalDate);
                if (ldecHoursAfterWithdrawal > decimal.Zero)
                {
                    if (acdoDummyWorkData.idecBenefitAmount > decimal.Zero)
                    {
                        ldecBenefitAmountAfterWithdrawal = Math.Round(ldecHoursAfterWithdrawal * acdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                    }
                }
            }
            return ldecBenefitAmountAfterWithdrawal;
        }
        /// <summary>
        /// Calculate Data till 65 years of age
        /// </summary>
        /// <param name="aclbPersonAccountRetirementContribution"></param>
        /// <param name="abusPersonAccount"></param>
        /// <param name="acdoDummyWorkData"></param>
        /// <param name="adtNormalRetirementDate"></param>
        /// <param name="adtForfietureDate"></param>
        /// <param name="adecUnreducedAccruedBenefitAmount"></param>
        /// <param name="aintPlanId"></param>
        /// <param name="astrBenefitTypeValue"></param>
        /// <param name="astrBenefitType"></param>
        /// <param name="adecPrevYrEEDerivedBen"></param>
        /// <param name="adecPrevYrMaxEEDerivedBen"></param>
        /// <param name="adecPrevYrTotalAccruedBenefitAmount"></param>
        /// <param name="adecPRevYrAnnualMax"></param>
        /// <param name="adecPrevYrAge"></param>
        /// <param name="astrSSn"></param>
        /// <param name="adecTableAfactor"></param>
        /// <param name="adtRetirementDate"></param>
        /// <param name="ablnIsQdroCal"></param>
        /// <param name="ablMPIPlanFlag"></param>
        /// <param name="aclbBenefitCalculationDetail"></param>
        /// <param name="aclbQdroCalculationDetail"></param>
        /// <param name="ldecHoursAtAge65"></param>
        /// <param name="ldecEEContributionAmount"></param>
        /// <param name="ldecEEInterestAmount"></param>
        /// <param name="ldecTotalAccruedBenefitAtAge65"></param>
        private void CalculateDataTillAge65orMinDistDate(Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, busPersonAccount abusPersonAccount,
                                                   cdoDummyWorkData acdoDummyWorkData, DateTime adtNormalRetirementDate, DateTime adtMinDistributionDate, DateTime adtForfietureDate,
                                                   decimal adecUnreducedAccruedBenefitAmount, int aintPlanId, string astrBenefitTypeValue, string astrBenefitType,
                                                   decimal adecPrevYrEEDerivedBen, decimal adecPrevYrMaxEEDerivedBen,
                                                   decimal adecPrevYrTotalAccruedBenefitAmount, decimal adecPRevYrAnnualMax, decimal adecPrevYrAge, string astrSSn, decimal adecTableAfactor,
                                                   DateTime adtRetirementDate, bool ablnIsQdroCal, bool ablMPIPlanFlag, DateTime adtDOB,
                                                   Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail, Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                                   out decimal ldecHoursAtAge65, out decimal ldecEEContributionAmount, out decimal ldecEEInterestAmount, out decimal ldecTotalAccruedBenefitAtAge65,
                                                   out decimal ldecAccuredBenefitatBreak, int aintMDYear = 0)
        {
            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail();
            Decimal ldecOriginalAccuredBenefit = Decimal.Zero;
            Decimal ldecOriginalBenefitRate = acdoDummyWorkData.idecBenefitRate;

            ldecOriginalAccuredBenefit = acdoDummyWorkData.idecBenefitAmount;


            if (adtNormalRetirementDate != DateTime.MinValue)
            {
                GetEEContributionUptoEffectiveDate(aclbPersonAccountRetirementContribution, abusPersonAccount, acdoDummyWorkData.year, adtForfietureDate,
                                                    adtNormalRetirementDate, out ldecEEContributionAmount, out ldecEEInterestAmount);

                // Calculate the Partial Interest upto Age 65
                // Get the Benefit Interest Rate
                decimal ldecInterestRate = busConstant.ZERO_DECIMAL;
                object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtNormalRetirementDate.Year },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                if (lobjBenefitInterestRate.IsNotNull())
                {
                    ldecInterestRate = (Decimal)lobjBenefitInterestRate;
                }

                decimal ldecPartialInterest = Math.Round((ldecEEContributionAmount + ldecEEInterestAmount) * ldecInterestRate / 12 * (adtNormalRetirementDate.Month - 1), 2);
                ldecEEInterestAmount = ldecEEInterestAmount + ldecPartialInterest;

                // Calculate the Accrued Benefit upto Age 65
                ldecHoursAtAge65 = busConstant.ZERO_DECIMAL;
                Hashtable lhstMonthlyHours = new Hashtable();
                //Prod Pir 10: It works good in case of ret date since its is 1st of the month
                lhstMonthlyHours = GetMonthlyHoursForPlanYear(astrSSn, acdoDummyWorkData.year, aintPlanId);

                IDictionaryEnumerator denum = lhstMonthlyHours.GetEnumerator();
                DictionaryEntry dentry;
                denum.Reset();
                while (denum.MoveNext() != false)
                {
                    dentry = (DictionaryEntry)denum.Current;
                    if ((int)dentry.Key < adtNormalRetirementDate.Month)
                    {
                        ldecHoursAtAge65 = ldecHoursAtAge65 + (decimal)dentry.Value;
                    }
                }

            }
            else
            {
                GetEEContributionUptoEffectiveDate(aclbPersonAccountRetirementContribution, abusPersonAccount, acdoDummyWorkData.year, adtForfietureDate,
                                                    adtMinDistributionDate, out ldecEEContributionAmount, out ldecEEInterestAmount);

                // Calculate the Partial Interest upto Age 65
                // Get the Benefit Interest Rate
                decimal ldecInterestRate = busConstant.ZERO_DECIMAL;
                object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { adtMinDistributionDate.Year },
                                                 iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                if (lobjBenefitInterestRate.IsNotNull())
                {
                    ldecInterestRate = (Decimal)lobjBenefitInterestRate;
                }

                decimal ldecPartialInterest = Math.Round((ldecEEContributionAmount + ldecEEInterestAmount) * ldecInterestRate / 12 * (adtMinDistributionDate.Month - 1), 2);
                ldecEEInterestAmount = ldecEEInterestAmount + ldecPartialInterest;

                // Calculate the Accrued Benefit upto Age 65
                ldecHoursAtAge65 = busConstant.ZERO_DECIMAL;

            }

            //Prod PIR 68 : We will get benefit amount oonly if hours in year are greater than 400 or qualified count greater than 20.

            //PIR 1035
            if (ldecOriginalAccuredBenefit > decimal.Zero && adtMinDistributionDate == DateTime.MinValue)
            {
                //PIR 1035
                if (adtMinDistributionDate != DateTime.MinValue && acdoDummyWorkData.idecBenefitRateAtMDAge > 0)
                {
                    ldecAccuredBenefitatBreak = Math.Round(ldecHoursAtAge65 * acdoDummyWorkData.idecBenefitRateAtMDAge, 2, MidpointRounding.AwayFromZero);
                }
                else
                {
                    ldecAccuredBenefitatBreak = Math.Round(ldecHoursAtAge65 * acdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                }
                ldecTotalAccruedBenefitAtAge65 = adecUnreducedAccruedBenefitAmount + ldecAccuredBenefitatBreak;
                acdoDummyWorkData.idecBenefitAmount = ldecAccuredBenefitatBreak;

                //PIR 1035
                if ((adtNormalRetirementDate != DateTime.MinValue && adtNormalRetirementDate.Month == 1) || (adtMinDistributionDate != DateTime.MinValue && adtMinDistributionDate.Month == 1))
                {
                    ldecTotalAccruedBenefitAtAge65 = ldecTotalAccruedBenefitAtAge65 - ldecOriginalAccuredBenefit;
                }

                //PIR 1035
                ldecOriginalAccuredBenefit = Math.Round((acdoDummyWorkData.qualified_hours - ldecHoursAtAge65) * acdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero) + ldecAccuredBenefitatBreak;
            }
            else
            {
                ldecTotalAccruedBenefitAtAge65 = adecUnreducedAccruedBenefitAmount;
                ldecAccuredBenefitatBreak = Decimal.Zero;
                acdoDummyWorkData.idecBenefitAmount = Decimal.Zero;
            }

            decimal ldecTableBfactor = 1.0M;
            DataTable ldtbTableBFator = new DataTable();

            //PIR- 557
            Decimal RetrAge = busGlobalFunctions.CalculatePersonAgeInDec(adtDOB, adtNormalRetirementDate);
            Decimal ldtMDAge = busGlobalFunctions.CalculatePersonAgeInDec(adtDOB, adtMinDistributionDate);

            decimal ldecTableAfactor = this.GetTableAFactor(RetrAge, busConstant.MPIPP_PLAN_ID, acdoDummyWorkData.year);
            if (adtMinDistributionDate != DateTime.MinValue)
            {

                //PIR 1035
                if (adtMinDistributionDate.Month == 1)
                {
                    ldecTableBfactor = GetTableBFactor(astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_LATE, aintPlanId,
                                                       ldtMDAge, acdoDummyWorkData.year < 1988 ? 1988 : acdoDummyWorkData.year);
                }
                else
                {
                    ldecTableBfactor = GetTableBFactor(astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_LATE, aintPlanId,
                                                                    ldtMDAge,
                                                                    acdoDummyWorkData.year < 1988 ? 1988 : acdoDummyWorkData.year - 1);
                }
                //10 Percent - RMD
                ldecTableAfactor = 1;
            }
            else
            {
                //PIR 1035
                //PIR 1070 //PIR 1035
                if (Math.Floor(RetrAge) > 65 || (Math.Floor(RetrAge) == 65 && ldecTableBfactor == 1)) //PIR 616 New
                {
                    ldecTableBfactor = GetTableBFactor(astrBenefitTypeValue, busConstant.RETIREMENT_TYPE_LATE, aintPlanId,
                                                                    RetrAge,
                                                                    acdoDummyWorkData.year < 1988 ? 1988 : acdoDummyWorkData.year - 1);
                }
            }


            acdoDummyWorkData.idecEEDerivedBenefit = Math.Round((((ldecEEContributionAmount + ldecEEInterestAmount) * adecTableAfactor) / ldecTableBfactor), 2);

            if (adtMinDistributionDate != DateTime.MinValue || adtMinDistributionDate.IsNotNull())
                acdoDummyWorkData.idecEEActurialIncrease = adecPrevYrMaxEEDerivedBen;
            else
                acdoDummyWorkData.idecERActurialIncrease = 0.0M;

            acdoDummyWorkData.idecMaxEEDerivedBenefit = Math.Max(acdoDummyWorkData.idecEEDerivedBenefit, acdoDummyWorkData.idecEEActurialIncrease);

            acdoDummyWorkData.idecERDerivedBenefit = Math.Max(adecPrevYrTotalAccruedBenefitAmount == busConstant.ZERO_DECIMAL ? ldecTotalAccruedBenefitAtAge65 : adecPrevYrTotalAccruedBenefitAmount, adecPRevYrAnnualMax) -
                                                             (adecPrevYrMaxEEDerivedBen == busConstant.ZERO_DECIMAL ? acdoDummyWorkData.idecMaxEEDerivedBenefit : adecPrevYrMaxEEDerivedBen);

            acdoDummyWorkData.idecTotalERDerivedBenefit = acdoDummyWorkData.idecERDerivedBenefit;
            acdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;

            acdoDummyWorkData.idecERActurialIncrease = busConstant.ZERO_DECIMAL;

            acdoDummyWorkData.idecLateRetirementAdjustment = acdoDummyWorkData.idecMaxEEDerivedBenefit + acdoDummyWorkData.idecTotalERDerivedBenefit;
            acdoDummyWorkData.idecAnnualMax = Math.Max(ldecTotalAccruedBenefitAtAge65, acdoDummyWorkData.idecLateRetirementAdjustment);

            adecPrevYrEEDerivedBen = acdoDummyWorkData.idecEEDerivedBenefit;
            adecPrevYrMaxEEDerivedBen = acdoDummyWorkData.idecMaxEEDerivedBenefit;
            adecPrevYrTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAtAge65;
            adecPRevYrAnnualMax = acdoDummyWorkData.idecAnnualMax == busConstant.ZERO_DECIMAL ? ldecTotalAccruedBenefitAtAge65 : acdoDummyWorkData.idecAnnualMax;

            //PIR 1035
            decimal ldtCurrentAgeTemp = 0;
            if (adtNormalRetirementDate != DateTime.MinValue)
            {
                adecPrevYrAge = 65;

                if (adtNormalRetirementDate.Month == 1)
                {
                    //PIR 1035
                    ldtCurrentAgeTemp = acdoDummyWorkData.age;
                    acdoDummyWorkData.age = 65;
                }
            }
            else if (adtMinDistributionDate != DateTime.MinValue)
            {
                adecPrevYrAge = ldtMDAge;
                ldtCurrentAgeTemp = acdoDummyWorkData.age;
                acdoDummyWorkData.age = ldtMDAge;


            }
            else
                adecPrevYrAge = acdoDummyWorkData.age;

            //PIR 1035
            if (acdoDummyWorkData.idecBenefitRateAtMDAge > 0)
                acdoDummyWorkData.idecBenefitRate = acdoDummyWorkData.idecBenefitRateAtMDAge;

            if (!aclbBenefitCalculationDetail.IsNullOrEmpty())
                UpdateYearlyDetailTable(ldecHoursAtAge65, ldecHoursAtAge65, ldecHoursAtAge65, ablnIsQdroCal, ablMPIPlanFlag, acdoDummyWorkData, aclbQdroCalculationDetail, aintPlanId, astrBenefitType,
                                        adecUnreducedAccruedBenefitAmount, ldecTotalAccruedBenefitAtAge65, ldecEEContributionAmount, ldecEEInterestAmount, ldecTableBfactor, ldecTableAfactor, adtRetirementDate,
                                        lbusBenefitCalculationYearlyDetail, aclbBenefitCalculationDetail);

            acdoDummyWorkData.idecBenefitAmount = ldecOriginalAccuredBenefit;
            acdoDummyWorkData.idecBenefitRate = ldecOriginalBenefitRate;

            //PIR 1035
            if (adtNormalRetirementDate != DateTime.MinValue && adtNormalRetirementDate.Month == 1)
                acdoDummyWorkData.age = ldtCurrentAgeTemp;
            else if (adtMinDistributionDate != DateTime.MinValue)
                acdoDummyWorkData.age = ldtCurrentAgeTemp;
        }




        /// <summary>
        /// update yearly detail table
        /// </summary>
        /// <param name="adecAnnualHours"></param>
        /// <param name="adecVestedHours"></param>
        /// <param name="adecHealthHours"></param>
        /// <param name="ablnIsQdroCal"></param>
        /// <param name="ablMPIPlanFlag"></param>
        /// <param name="acdoDummyWorkData"></param>
        /// <param name="aclbQdroCalculationDetail"></param>
        /// <param name="aintPlanId"></param>
        /// <param name="astrBenefitType"></param>
        /// <param name="adecUnreducedAccruedBenefitAmount"></param>
        /// <param name="adecTotalAccruedBenefitAmount"></param>
        /// <param name="adecEEContributionAmount"></param>
        /// <param name="adecEEInterestAmount"></param>
        /// <param name="adecTableBfactor"></param>
        /// <param name="adtRetirementDate"></param>
        /// <param name="abusBenefitCalculationYearlyDetail"></param>
        /// <param name="aclbBenefitCalculationDetail"></param>
        private void UpdateYearlyDetailTable(decimal adecAnnualHours, decimal adecVestedHours, decimal adecHealthHours, bool ablnIsQdroCal, bool ablMPIPlanFlag,
                                            cdoDummyWorkData acdoDummyWorkData, Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                            int aintPlanId, string astrBenefitType, decimal adecUnreducedAccruedBenefitAmount, decimal adecTotalAccruedBenefitAmount,
                                            decimal adecEEContributionAmount, decimal adecEEInterestAmount, decimal adecTableBfactor, decimal adecTableAfactor, DateTime adtRetirementDate,
                                            busBenefitCalculationYearlyDetail abusBenefitCalculationYearlyDetail, Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail, decimal adecActiveIncrease = 0M,
                                            DateTime? adtActiveIncreaseDate = null)
        {
            // Update the YTD Collection

            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = new busQdroCalculationYearlyDetail();


            if (ablnIsQdroCal && ablMPIPlanFlag)
            {
                lbusQdroCalculationYearlyDetail.LoadData(adecAnnualHours, acdoDummyWorkData.bis_years_count, acdoDummyWorkData.year,
                                                         acdoDummyWorkData.qualified_years_count, adecVestedHours, acdoDummyWorkData.vested_years_count, acdoDummyWorkData.idecBenefitRate,
                                                         acdoDummyWorkData.idecBenefitAmount, adecHealthHours, acdoDummyWorkData.iintHealthCount, adecUnreducedAccruedBenefitAmount,
                                                         acdoDummyWorkData.idecQdroHours, 0, adecTotalAccruedBenefitAmount);

                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.ee_contribution_amount = adecEEContributionAmount;
                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.ee_interest_amount = adecEEInterestAmount;
                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.ee_derived_amount = acdoDummyWorkData.idecEEDerivedBenefit;
                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.er_derived_amount = acdoDummyWorkData.idecERDerivedBenefit;
                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.suspendible_months_count = acdoDummyWorkData.iintNonSuspendibleMonths;
                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.annual_adjustment_amount = acdoDummyWorkData.idecLateRetirementAdjustment;
                lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.actuarial_equivalent_amount = acdoDummyWorkData.idecAnnualMax;

                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId).FirstOrDefault().iclbQdroCalculationYearlyDetail.Add(lbusQdroCalculationYearlyDetail);
            }
            else if (ablMPIPlanFlag)
            {
                abusBenefitCalculationYearlyDetail.LoadData(adecAnnualHours, acdoDummyWorkData.bis_years_count, Convert.ToDecimal(acdoDummyWorkData.year),
                                                            acdoDummyWorkData.qualified_years_count, adecVestedHours, acdoDummyWorkData.vested_years_count, acdoDummyWorkData.idecBenefitRate,
                                                        acdoDummyWorkData.idecBenefitAmount, adecHealthHours, acdoDummyWorkData.iintHealthCount, adecUnreducedAccruedBenefitAmount,
                                                         adecTotalAccruedBenefitAmount);

                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_contribution_amount = adecEEContributionAmount;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_interest_amount = adecEEInterestAmount;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = acdoDummyWorkData.idecEEDerivedBenefit;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_derived_amount = acdoDummyWorkData.idecERDerivedBenefit;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.suspendible_months_count = acdoDummyWorkData.iintNonSuspendibleMonths;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.annual_adjustment_amount = acdoDummyWorkData.idecLateRetirementAdjustment;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount = acdoDummyWorkData.idecAnnualMax;

                //PIR 1035
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.age = acdoDummyWorkData.age;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_act_inc_amt = acdoDummyWorkData.idecEEActurialIncrease;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_act_inc_amt = acdoDummyWorkData.idecERActurialIncrease;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt = acdoDummyWorkData.idecMaxEEDerivedBenefit;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.table_b_factor = adecTableBfactor;
                abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.table_a_factor = adecTableAfactor;

                //PIR 1035
                if (adecActiveIncrease > 0)
                {
                    abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.active_retiree_inc = adecActiveIncrease;
                    abusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.inc_effective_date = Convert.ToDateTime(adtActiveIncreaseDate);
                }


                if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).FirstOrDefault().
                                                iclbBenefitCalculationYearlyDetail.Add(abusBenefitCalculationYearlyDetail);

                }
                else
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(abusBenefitCalculationYearlyDetail);
                }
            }
        }

        /*
        /// <summary>
        /// Put The Logic in Such a way , pivk Previous year max ee derived from calculation
        /// For Conversion pick the EE derived calculated.
        /// </summary>
        /// <param name="abusBenefitCalculationHeader"></param>
        /// <param name="abusPersonAccount"></param>
        /// <param name="adecLateAdjustmentAmt"></param>
        /// <param name="aclbPersonAccountRetirementContribution"></param>
        /// <param name="astrBenefitType"></param>
        /// <returns></returns>
        
        public decimal GetReEvaluationForMinimumDistributionYear(busBenefitCalculationHeader abusBenefitCalculationHeader, busPersonAccount abusPersonAccount, 
            ref decimal adecLateAdjustmentAmt,decimal adecAccruedBenefit)
        {
            decimal ldecUnreducedAccruedBenefitAmount = decimal.Zero;
            decimal ldecPrevYrMaxEEDerivedBen = decimal.Zero;
            decimal ldecPrevYrEEDerivedBen = decimal.Zero;
            decimal ldecPrevYrAge = decimal.Zero;
            decimal ldecPRevYrAnnualMax = decimal.Zero;
            decimal ldecNormalRetirementAge = decimal.Zero;
            decimal ldecTotalAccruedBenefitAmount = decimal.Zero;
            decimal ldecPrevYrTotalAccruedBenefitAmount = decimal.Zero;
            int lintMPIQualifiedYear = abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.LastOrDefault().qualified_years_count;
            DateTime ldtForfietureDate = new DateTime();
            DateTime ldtNormalRetirementDate = abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge)).AddMonths(1).AddDays(-1 * abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.Day).AddDays(1);
            //int lintYears, lintMonths, lintDays;
            Dictionary<int, Dictionary<int, decimal>> ldictHoursAfterRetirement = new Dictionary<int, Dictionary<int, decimal>>();

            busBenefitCalculationDetail lbusBenefitCalculationDetail = new busBenefitCalculationDetail { icdoBenefitCalculationDetail = new cdoBenefitCalculationDetail() };
            lbusBenefitCalculationDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).FirstOrDefault();
            Collection<busBenefitCalculationYearlyDetail> lclbYearlyDetails = new Collection<busBenefitCalculationYearlyDetail>();
            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id > 0 && !lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
            {
                lclbYearlyDetails = lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderBy(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ToList().ToCollection();
                ldecUnreducedAccruedBenefitAmount = lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount;
                //ldecPrevYrMaxEEDerivedBen = lclbYearlyDetails.Last().icdoBenefitCalculationYearlyDetail;
                ldecPrevYrEEDerivedBen = busConstant.ZERO_DECIMAL;
                ldecPrevYrAge = busConstant.ZERO_DECIMAL;
                ldecPRevYrAnnualMax = busConstant.ZERO_DECIMAL;
                ldecNormalRetirementAge = GetNormalRetirementAge(abusPersonAccount.icdoPersonAccount.plan_id);
                ldecTotalAccruedBenefitAmount = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id != 0 ? lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount : adecAccruedBenefit;
                ldecPrevYrTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
                lintMPIQualifiedYear = abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.LastOrDefault().qualified_years_count;
                ldtForfietureDate = new DateTime();
                ldtNormalRetirementDate = abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge)).AddMonths(1).AddDays(-1 * abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.Day).AddDays(1);
                //int lintYears, lintMonths, lintDays;
            }
            else
            {
                ldictHoursAfterRetirement = LoadMPIHoursAfterRetirementDate(abusBenefitCalculationHeader.ibusPerson.icdoPerson.istrSSNNonEncrypted, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date);
            }
            // As EE derived Benefit won't change in case of ReEmployed Participants
            //Calculated at the time of calculating final calculation.
            //For Conversion records pushed in payee account and detail section : ReEmployed Batch
            decimal ldecEEDerivedBenefit = lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.ee_derived_benefit_amount;

            #region Get GAM 71

            decimal ldecAge = Math.Floor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.age);

            decimal ldecGAM71Factor = GetBenefitTypeFactor(ldecAge);

            #endregion
            

             ldecUnreducedAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
             ldecPrevYrMaxEEDerivedBen = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id == 0 ? lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.ee_derived_benefit_amount : lclbYearlyDetails.Last().icdoBenefitCalculationYearlyDetail.max_ee_derv_amt;
             ldecPrevYrEEDerivedBen = busConstant.ZERO_DECIMAL;
             ldecPrevYrAge = busConstant.ZERO_DECIMAL;
             ldecPRevYrAnnualMax = busConstant.ZERO_DECIMAL;
             ldecNormalRetirementAge = GetNormalRetirementAge(abusPersonAccount.icdoPersonAccount.plan_id);
             ldecTotalAccruedBenefitAmount = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id != 0 ? lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount : adecAccruedBenefit; 
             ldecPrevYrTotalAccruedBenefitAmount = busConstant.ZERO_DECIMAL;
                lintMPIQualifiedYear = abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.LastOrDefault().qualified_years_count;
                ldtForfietureDate = new DateTime();
                ldtNormalRetirementDate = abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge)).AddMonths(1).AddDays(-1 * abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth.Day).AddDays(1);
                //int lintYears, lintMonths, lintDays;
                //busGlobalFunctions.GetDetailTimeSpan(abusPerson.icdoPerson.idtDateofBirth, adtRetirementDate, out lintYears, out lintMonths, out lintDays);
            //decimal ldecAgeAtRetirement = Math.Round(Convert.ToDecimal(lintYears) + Convert.ToDecimal(lintMonths) / 12, 4);
            Collection<cdoDummyWorkData> lclbDummyWork4RetirementYear = null;

            decimal ldecAgeForLateRetirement = ldecNormalRetirementAge;

            busPersonAccountEligibility lbusPersonAccountEligibility = new busPersonAccountEligibility();
            lbusPersonAccountEligibility = lbusPersonAccountEligibility.LoadPersonAccEligibilityByPersonAccountId(abusPersonAccount.icdoPersonAccount.person_account_id);

            if (lbusPersonAccountEligibility != null && lbusPersonAccountEligibility.icdoPersonAccountEligibility != null)
            {
                ldtForfietureDate = lbusPersonAccountEligibility.icdoPersonAccountEligibility.forfeiture_date;
            }

            // Check if the Retirement Date Computation Year exists in the Work History Collection. If not Add it
            int lintMaxComputationYear = abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.Max(item => item.year);

            #region Adding empty data for all computation years until the retirement date computation year
            // Adding empty data for all computation years until the retirement date computation year
            
            #endregion


            // Fetch the Plan Benefit Rates
            DataTable ldtbPlanBenefitRate = busBase.Select("cdoPlanBenefitRate.Lookup", new object[] { });
            Collection<cdoPlanBenefitRate> lclbcdoPlanBenefitRate = cdoDummyWorkData.GetCollection<cdoPlanBenefitRate>(ldtbPlanBenefitRate);

            foreach (cdoDummyWorkData lcdoDummyWorkData in abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory)
            {
                if (lcdoDummyWorkData.vested_hours >= 400)
                    lintMPIQualifiedYear += 1;


                if(lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.reemployed_accrued_benefit_effective_date == DateTime.MinValue ||(lbusBenefitCalculationDetail.icdoBenefitCalculationDetail.reemployed_accrued_benefit_effective_date.Year <= lcdoDummyWorkData.year))
                {
                #region To Calculate Benefit Amount for Each Year

                // Apply the Active Increase if age >= 65 && age <= 71.5
                if (lcdoDummyWorkData.age >= ldecNormalRetirementAge + 1 && lcdoDummyWorkData.age < busConstant.BenefitCalculation.AGE_71_HALF)
                {
                    // Check if Active Increase exists for current year
                    cdoPlanBenefitRate lcdoPlanBenefitRate = lclbcdoPlanBenefitRate.Where(item => Convert.ToInt32(item.plan_year) == lcdoDummyWorkData.year).FirstOrDefault();
                    if (lcdoPlanBenefitRate.IsNotNull())
                    {
                        decimal ldecActiveIncreasePerc = lcdoPlanBenefitRate.increase_percentage;
                        decimal ldecActiveIncreaseAmount = Math.Round(ldecTotalAccruedBenefitAmount * ldecActiveIncreasePerc / 100, 2);
                        ldecUnreducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount + ldecActiveIncreaseAmount;
                        ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + ldecActiveIncreaseAmount;
                    }
                }


                busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail();
                lbusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail = new Collection<busBenefitCalculationNonsuspendibleDetail>();

                {
                    if (lcdoDummyWorkData.qualified_years_count > Convert.ToInt32(busConstant.BenefitCalculation.QUALIFIED_YEARS_20) &&
                        lcdoDummyWorkData.qualified_hours < busConstant.MIN_HOURS_FOR_VESTED_YEAR)
                    {
                        if (lintMPIQualifiedYear > 20)
                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                        else
                        {
                            #region To Check If Local Merged - If yes give Benefit Else NO
                            if (abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains("Local")).Count() > 0)
                            {
                                if (abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_52)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_52).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_161)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_161).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_600)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_600).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.Local_666)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.Local_666).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                                if (abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode.Contains(busConstant.LOCAL_700)).Count() > 0)
                                {
                                    if (lcdoDummyWorkData.year >= abusBenefitCalculationHeader.ibusPerson.iclbPersonAccount.Where(local => local.icdoPersonAccount.istrPlanCode == busConstant.LOCAL_700).FirstOrDefault().icdoPersonAccount.idtMergerDate.Year)
                                        if (lcdoDummyWorkData.qualified_years_count > 20)
                                            lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                                }

                            }
                            else
                                lcdoDummyWorkData.idecBenefitAmount = busConstant.ZERO_DECIMAL;
                            #endregion
                        }
                    }
                    else
                    {
                        lcdoDummyWorkData.idecBenefitAmount = Math.Round(lcdoDummyWorkData.qualified_hours * lcdoDummyWorkData.idecBenefitRate, 2, MidpointRounding.AwayFromZero);
                    }
                }
                //}


                if (lcdoDummyWorkData.age < busConstant.BenefitCalculation.AGE_71_HALF)
                {
                    ldecTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                }


                #endregion

                decimal ldecTableAfactor = 1.0m;
                decimal ldecTableBfactor = 1.0m;                   // Defaulting it to 1 and not 0 because we divide the EE Contributions by this factor.

                if (lcdoDummyWorkData.age >= busConstant.BenefitCalculation.AGE_71_HALF)
                {
                    
                    ldecTableBfactor = GetTableBFactor(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, abusPersonAccount.icdoPersonAccount.plan_id, lcdoDummyWorkData.age, lcdoDummyWorkData.year);
                    lcdoDummyWorkData.idecERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecERActurialIncrease = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecTotalERDerivedBenefit = busConstant.ZERO_DECIMAL;

                    // EE Derived and EE Actuarial Increase will be the same as Prev Yrs Max EE Derived Benefit amount
                    lcdoDummyWorkData.idecEEDerivedBenefit = ldecEEDerivedBenefit;
                    lcdoDummyWorkData.idecEEActurialIncrease = ldecPrevYrMaxEEDerivedBen;
                    lcdoDummyWorkData.idecMaxEEDerivedBenefit = ldecPrevYrMaxEEDerivedBen;

                    lcdoDummyWorkData.idecLateRetirementAdjustment = lcdoDummyWorkData.idecMaxEEDerivedBenefit + (ldecUnreducedAccruedBenefitAmount - ldecPrevYrMaxEEDerivedBen);
                    lcdoDummyWorkData.idecAnnualMax = ldecPRevYrAnnualMax;

                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = ldecUnreducedAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount + Math.Min(lcdoDummyWorkData.idecEEDerivedBenefit, busConstant.ZERO_DECIMAL);
                }
                else if (Math.Floor(lcdoDummyWorkData.age) >= ldecNormalRetirementAge)
                {
                    ldecTableBfactor = 1.0m;                   // Defaulting it to 1 and not 0 because we divide the EE Contributions by this factor.
                    
                    lcdoDummyWorkData.idecEEDerivedBenefit = ldecEEDerivedBenefit;
                    lcdoDummyWorkData.idecEEActurialIncrease = ldecPrevYrMaxEEDerivedBen + Math.Round(0.012m * ldecPrevYrMaxEEDerivedBen * ((lcdoDummyWorkData.age - ldecPrevYrAge) * 12.0m), 2);
                    lcdoDummyWorkData.idecMaxEEDerivedBenefit = Math.Max(lcdoDummyWorkData.idecEEDerivedBenefit, lcdoDummyWorkData.idecEEActurialIncrease);
                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = Math.Max(ldecUnreducedAccruedBenefitAmount, 0) + lcdoDummyWorkData.idecBenefitAmount + (lcdoDummyWorkData.idecEEDerivedBenefit - ldecPrevYrEEDerivedBen);

                    // Calculate the ER Derived Benefit
                    lcdoDummyWorkData.idecERDerivedBenefit = Math.Max(ldecPrevYrTotalAccruedBenefitAmount == busConstant.ZERO_DECIMAL ? ldecTotalAccruedBenefitAmount : ldecPrevYrTotalAccruedBenefitAmount, ldecPRevYrAnnualMax) -
                                                                        (ldecPrevYrMaxEEDerivedBen == busConstant.ZERO_DECIMAL ? lcdoDummyWorkData.idecMaxEEDerivedBenefit : ldecPrevYrMaxEEDerivedBen);

                    // Read the Non-Suspendible Months from EA
                    if (lcdoDummyWorkData.age >= busConstant.RETIREMENT_NORMAL_AGE)
                    {
                        DateTime ldtStartDate = DateTime.MinValue;
                        DateTime ldtEndDate = DateTime.MinValue;
                        if (lcdoDummyWorkData.year < 2004)
                        {
                            ldtStartDate = new DateTime(lcdoDummyWorkData.year, 1, 1);
                            ldtEndDate = new DateTime(lcdoDummyWorkData.year, 12, 31);
                        }
                        else
                        {
                            ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(lcdoDummyWorkData.year, 1);
                            ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(lcdoDummyWorkData.year, 12);
                        }

                        lcdoDummyWorkData.iintNonSuspendibleMonths = GetNonSuspendibleMonths(abusBenefitCalculationHeader.ibusPerson.icdoPerson.istrSSNNonEncrypted.ToString(), abusBenefitCalculationHeader.ibusPerson, lcdoDummyWorkData.year, abusPersonAccount.icdoPersonAccount.plan_id, lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                    }
                    else
                    {
                        lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                    }

                    // Calculate the ER Derived Benefit and the Acturial Increase
                    if (lcdoDummyWorkData.idecEEDerivedBenefit != busConstant.ZERO_DECIMAL && lcdoDummyWorkData.idecEEDerivedBenefit >= ldecTotalAccruedBenefitAmount)
                    {
                        lcdoDummyWorkData.idecERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    }
                    lcdoDummyWorkData.idecERActurialIncrease = Math.Round((0.012m * lcdoDummyWorkData.idecERDerivedBenefit * lcdoDummyWorkData.iintNonSuspendibleMonths), 2);

                    lcdoDummyWorkData.idecTotalERDerivedBenefit = lcdoDummyWorkData.idecERDerivedBenefit + lcdoDummyWorkData.idecERActurialIncrease;

                    // Calculate the Late Retirement Adjustment & Annual Max
                    lcdoDummyWorkData.idecLateRetirementAdjustment = lcdoDummyWorkData.idecMaxEEDerivedBenefit + lcdoDummyWorkData.idecTotalERDerivedBenefit;
                    lcdoDummyWorkData.idecAnnualMax = Math.Max(ldecTotalAccruedBenefitAmount, lcdoDummyWorkData.idecLateRetirementAdjustment);

                    ldecPrevYrEEDerivedBen = lcdoDummyWorkData.idecEEDerivedBenefit;
                    ldecPrevYrMaxEEDerivedBen = lcdoDummyWorkData.idecMaxEEDerivedBenefit;
                    ldecPrevYrAge = lcdoDummyWorkData.age;
                    ldecPrevYrTotalAccruedBenefitAmount = ldecTotalAccruedBenefitAmount;

                }
                else
                {
                    lcdoDummyWorkData.idecEEDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecEEActurialIncrease = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecMaxEEDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecERActurialIncrease = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecTotalERDerivedBenefit = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecLateRetirementAdjustment = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.idecAnnualMax = busConstant.ZERO_DECIMAL;
                    lcdoDummyWorkData.iintNonSuspendibleMonths = busConstant.ZERO_INT;
                    lcdoDummyWorkData.idecPlanYearAccruedBenefit = Math.Max(ldecUnreducedAccruedBenefitAmount, busConstant.ZERO_DECIMAL) + lcdoDummyWorkData.idecBenefitAmount + Math.Min(lcdoDummyWorkData.idecEEDerivedBenefit, busConstant.ZERO_DECIMAL);
                }


                //mahua condition should be changed . can apply for min distribution
                if (lcdoDummyWorkData.age < busConstant.BenefitCalculation.AGE_71_HALF)
                {
                    ldecUnreducedAccruedBenefitAmount = ldecUnreducedAccruedBenefitAmount + lcdoDummyWorkData.idecBenefitAmount;
                }

                // Update the YTD Collection
                ldecPRevYrAnnualMax = lcdoDummyWorkData.idecAnnualMax == busConstant.ZERO_DECIMAL ? ldecTotalAccruedBenefitAmount : lcdoDummyWorkData.idecAnnualMax;
                //busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail();
                if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId == busConstant.MPIPP_PLAN_ID)
                {
                    lbusBenefitCalculationYearlyDetail.LoadData(lcdoDummyWorkData.qualified_hours, lcdoDummyWorkData.bis_years_count, Convert.ToDecimal(lcdoDummyWorkData.year),
                                                                lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                                            lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, ldecUnreducedAccruedBenefitAmount,  ldecTotalAccruedBenefitAmount);

                    //lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_contribution_amount = ldecEEContributionAmount;
                    //lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_interest_amount = ldecEEInterestAmount;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = lcdoDummyWorkData.idecEEDerivedBenefit;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_derived_amount = lcdoDummyWorkData.idecERDerivedBenefit;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.suspendible_months_count = lcdoDummyWorkData.iintNonSuspendibleMonths;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.annual_adjustment_amount = lcdoDummyWorkData.idecLateRetirementAdjustment;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount = lcdoDummyWorkData.idecAnnualMax;

                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.age = Math.Floor(lcdoDummyWorkData.age);
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_act_inc_amt = lcdoDummyWorkData.idecEEActurialIncrease;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_act_inc_amt = lcdoDummyWorkData.idecERActurialIncrease;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt = lcdoDummyWorkData.idecMaxEEDerivedBenefit;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.table_b_factor = ldecTableBfactor;

                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                       abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id  && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                    }
                    else
                    {
                        abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusPersonAccount.icdoPersonAccount.plan_id).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                    }
                }
            }
            
            }
            

            adecLateAdjustmentAmt = Math.Max(ldecUnreducedAccruedBenefitAmount, ldecPRevYrAnnualMax);


            // Remove the Current Retirement Date Computation Year from the Collection
            if (!lclbDummyWork4RetirementYear.IsNullOrEmpty())
            {
                foreach (cdoDummyWorkData item in lclbDummyWork4RetirementYear)
                {
                    if (abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.Contains(item))
                    {
                        abusBenefitCalculationHeader.ibusBenefitApplication.aclbPersonWorkHistory_MPI.Remove(item);
                    }
                }
            }


            return ldecTotalAccruedBenefitAmount;
        }

        */

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public decimal CalculateMinimumDistributionBenefitForReEmployment(decimal adecPrevYearEEDerived, decimal adecAccruedBenefit
            , DateTime adtMinimumDistributionDate, DateTime adtDateOfDetermination
            , Dictionary<int, Dictionary<int, decimal>> adictHoursAfterRetirementdate, busBenefitCalculationHeader abusBenefitCalculationHeader, bool ablnStartFromRetirement)
        {
            decimal ldecNewAccruedBenefit = decimal.Zero;

            decimal ldecPrevYearEEderived = adecPrevYearEEDerived;
            decimal ldecPrevYearAccruedBenefit = adecAccruedBenefit;
            decimal ldecCurrentYearErDerived = ldecPrevYearAccruedBenefit - ldecPrevYearEEderived;
            decimal ldecBenefitAsOfDeterninationDate = ldecPrevYearAccruedBenefit;
            decimal ldecCummulativeYTD = decimal.Zero;
            decimal ldecCurrentYTD = decimal.Zero;
            int[] lintArrPlanYear = null;
            decimal ldecYearHours = decimal.Zero;
            decimal ldecCurrentHours = decimal.Zero;
            decimal ldecBenefitRate = decimal.Zero;
            decimal ldecErDerived = adecAccruedBenefit - adecPrevYearEEDerived;
            decimal ldecErCurrentYear = decimal.Zero;
            decimal ldecErPrevYear = decimal.Zero;
            int lintSuspendibleMonthsBeforeInc = 0;
            int linSuspendibleMonthsAfterInc = 0;
            decimal ldecRetireInc = decimal.Zero;
            decimal ldecBenefitOptionFactor = decimal.Zero;
            decimal ldecAccruedBenefitBeforeMinDistributionYear = adecAccruedBenefit;

            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail;

            #region Get GAM 71
            decimal ldecBenOptionFactor = decimal.One;
            decimal ldecAge = Math.Floor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.age);
            decimal ldecGAM71Factor = GetBenefitTypeFactor(ldecAge);

            //-ve value reuired for comparison with YTD
            decimal ldecValueOfBenefitsPaid = decimal.Zero;

            //To be added imn Previous Year accrued Benefit, to get the new amount math.max(0, ytd + value of benefits)
            decimal ldecEvaluateIncrease = decimal.Zero;

            #endregion



            for (int i = adtMinimumDistributionDate.Year; i < adtDateOfDetermination.Year; i++)
            {
                lintArrPlanYear.Add(i);
            }
            Array.Sort(lintArrPlanYear);
            if (lintArrPlanYear.Length > 0)
            {
                if (ablnStartFromRetirement)
                {
                    foreach (int lint in lintArrPlanYear)
                    {

                        linSuspendibleMonthsAfterInc = 0;
                        decimal ldecAnnualHours = decimal.Zero;
                        if (adictHoursAfterRetirementdate.Keys.Contains(lint))
                        {
                            ldecAnnualHours = adictHoursAfterRetirementdate[lint].Sum(x => x.Value);
                            //SuspendibleHoursChange
                            lintSuspendibleMonthsBeforeInc = adictHoursAfterRetirementdate[lint].Where(item => item.Value >= GetSuspendibleHoursValue(lint, (int)item.Key) /*40*/).Count();
                        }
                        //1.)
                        ldecErDerived = ldecAccruedBenefitBeforeMinDistributionYear - adecPrevYearEEDerived;
                        ldecCummulativeYTD += GetAccruedBenefitForPreviousYear(abusBenefitCalculationHeader, adictHoursAfterRetirementdate, lint, adtMinimumDistributionDate);
                        //2.)
                        ldecErCurrentYear += ldecErDerived * lintSuspendibleMonthsBeforeInc + (ldecErDerived * (1 + ldecRetireInc) * linSuspendibleMonthsAfterInc) + ldecErPrevYear;

                        ldecAge = busGlobalFunctions.CalculatePersonAgeInDec(abusBenefitCalculationHeader.ibusPerson.icdoPerson.idtDateofBirth, busGlobalFunctions.GetLastDateOfComputationYear(lint));

                        ldecGAM71Factor = GetBenefitTypeFactor(ldecAge);

                        //4.) Value of Benefits
                        ldecValueOfBenefitsPaid = Math.Round(ldecErCurrentYear / ldecGAM71Factor, 2) * -1;
                        //5.)Evaluate Increase
                        ldecEvaluateIncrease = Math.Max(0, ldecValueOfBenefitsPaid + ldecErCurrentYear);
                        ldecNewAccruedBenefit = ldecAccruedBenefitBeforeMinDistributionYear + ldecEvaluateIncrease;
                        ldecAccruedBenefitBeforeMinDistributionYear = ldecNewAccruedBenefit;
                        ldecErPrevYear = ldecErCurrentYear;

                        lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
                        cdoDummyWorkData lcdoDummyWorkData = new cdoDummyWorkData();
                        lcdoDummyWorkData = abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(lcdoDummyData => lcdoDummyData.year == lint).FirstOrDefault();
                        lbusBenefitCalculationYearlyDetail.LoadData(ldecAnnualHours, 0, lint,
                                            lcdoDummyWorkData.qualified_years_count, lcdoDummyWorkData.vested_hours, lcdoDummyWorkData.vested_years_count, lcdoDummyWorkData.idecBenefitRate,
                                            lcdoDummyWorkData.idecBenefitAmount, lcdoDummyWorkData.idecTotalHealthHours, lcdoDummyWorkData.iintHealthCount, adecAccruedBenefit, adecAccruedBenefit, busConstant.FLAG_YES);
                        abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);


                    }
                }
                else
                {
                    //ldecErCurrentYear = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.FirstOrDefault().icdoBenefitCalculationYearlyDetail.er;
                    ldecCummulativeYTD = (from item in abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail
                                          where item.icdoBenefitCalculationYearlyDetail.plan_year < adtDateOfDetermination.AddYears(-1).Year && item.icdoBenefitCalculationYearlyDetail.plan_year >= adtMinimumDistributionDate.Year
                                          select item.icdoBenefitCalculationYearlyDetail.accrued_benefit_amount).Sum();

                    foreach (int lint in lintArrPlanYear)
                    {
                        lintSuspendibleMonthsBeforeInc = 0;
                        ldecErDerived = decimal.Zero;

                        //SuspendibleHoursChange
                        lintSuspendibleMonthsBeforeInc = adictHoursAfterRetirementdate[lint].Where(item => item.Value >= GetSuspendibleHoursValue(lint, (int)item.Key) /*40*/).Count();
                        ldecErDerived = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == lint).FirstOrDefault().icdoBenefitCalculationYearlyDetail.er_derived_amount;
                        ldecErCurrentYear += ldecErDerived * lintSuspendibleMonthsBeforeInc + (ldecErDerived * (1 + ldecRetireInc) * linSuspendibleMonthsAfterInc) + ldecErPrevYear;


                    }
                }
            }

            ldecErDerived = adecAccruedBenefit - adecPrevYearEEDerived;

            //SuspendibleHoursChange
            lintSuspendibleMonthsBeforeInc = adictHoursAfterRetirementdate[adtDateOfDetermination.AddYears(-1).Year].Where(item => item.Value >= GetSuspendibleHoursValue(adtDateOfDetermination.AddYears(-1).Year, (int)item.Key) /*40*/).Count();

            ldecCurrentHours = abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(item => item.year == adtDateOfDetermination.AddYears(-1).Year).FirstOrDefault().vested_hours;
            ldecBenefitRate = abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(lcdoDummyData => lcdoDummyData.year == adtDateOfDetermination.AddYears(-1).Year).FirstOrDefault().idecBenefitRate;

            //1.) Get Cummulative YTD : 1st Comparison Parameter
            ldecCurrentYTD = Math.Round(ldecBenefitRate * ldecCurrentHours, 2, MidpointRounding.AwayFromZero);
            ldecCummulativeYTD += ldecCurrentYTD;

            //2.) Get Currennt Year Benefit = (Er * susp before inc )+ (ER*(1+Act/RetInc)*susp after inc) + Prev ER Current ER
            ldecErCurrentYear += ldecErDerived * lintSuspendibleMonthsBeforeInc + (ldecErDerived * (1 + ldecRetireInc) * lintSuspendibleMonthsBeforeInc) + ldecErPrevYear;

            //3.)Gam 71
            ldecGAM71Factor = GetBenefitTypeFactor(ldecAge);
            //4.) Value of Benefits
            ldecValueOfBenefitsPaid = Math.Round(ldecErCurrentYear / ldecGAM71Factor, 2) * -1;

            //5.)Evaluate Increase
            ldecEvaluateIncrease = Math.Max(0, ldecValueOfBenefitsPaid + ldecErCurrentYear);

            ldecNewAccruedBenefit = ldecPrevYearAccruedBenefit + ldecEvaluateIncrease;

            lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
            cdoDummyWorkData lcdoWorkData = new cdoDummyWorkData();
            lcdoWorkData = abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(lcdoDummyData => lcdoDummyData.year == adtDateOfDetermination.AddYears(-1).Year).FirstOrDefault();
            lbusBenefitCalculationYearlyDetail.LoadData(adictHoursAfterRetirementdate[adtDateOfDetermination.AddYears(-1).Year].Sum(x => x.Value), 0, adtDateOfDetermination.AddYears(-1).Year,
                                lcdoWorkData.qualified_years_count, lcdoWorkData.vested_hours, lcdoWorkData.vested_years_count, lcdoWorkData.idecBenefitRate,
                                lcdoWorkData.idecBenefitAmount, lcdoWorkData.idecTotalHealthHours, lcdoWorkData.iintHealthCount, adecAccruedBenefit, adecAccruedBenefit);
            abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);


            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.suspendible_months_count = lintSuspendibleMonthsBeforeInc;
            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_derived_amount = ldecErDerived;
            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = adecPrevYearEEDerived;
            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.total_accrued_benefit = ldecNewAccruedBenefit;



            return ldecNewAccruedBenefit;
        }




        public decimal GetAccruedBenefitForPreviousYear(busBenefitCalculationHeader abusBenefitCalculationHeader, Dictionary<int, Dictionary<int, decimal>> adictHoursAfterRetirementdate, int aintYear, DateTime adtMinimumDistributionDate)
        {

            decimal ldecPrevYearYTDBenefit = decimal.Zero;
            decimal ldecBenefitRate = decimal.Zero;
            decimal ldecYearHours = decimal.Zero;
            if (adictHoursAfterRetirementdate.Keys.Contains(aintYear))
            {
                ldecYearHours = adictHoursAfterRetirementdate[aintYear].Sum(x => x.Value);
            }
            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id == 0)
            {
                ldecBenefitRate = abusBenefitCalculationHeader.ibusBenefitApplication.aclbReEmployedWorkHistory.Where(lcdoDummyData => lcdoDummyData.year == aintYear).FirstOrDefault().idecBenefitRate;
                if (ldecYearHours >= 870)
                {
                    ldecPrevYearYTDBenefit = Math.Round(ldecYearHours * ldecBenefitRate, 2, MidpointRounding.AwayFromZero);
                }
            }
            else
            {
                ldecPrevYearYTDBenefit = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault().iclbBenefitCalculationYearlyDetail.FirstOrDefault().icdoBenefitCalculationYearlyDetail.accrued_benefit_amount;
            }
            return ldecPrevYearYTDBenefit;
        }

        public decimal GetBenefitTypeFactor(decimal adecAge)
        {
            DataTable ldtbList = busBase.Select<cdoBenefitProvisionBenefitTypeFactor>(new string[] { enmBenefitProvisionBenefitTypeFactor.benefit_provision_id.ToString(),
                                enmBenefitProvisionBenefitTypeFactor.benefit_account_type_value.ToString(),
                                enmBenefitProvisionBenefitTypeFactor.benefit_account_subtype_value.ToString(),  enmBenefitProvisionBenefitTypeFactor.age.ToString() },
                                new object[] { 2, busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION, Convert.ToInt32(adecAge) }, null, null);


            if (ldtbList.Rows.Count > 0)
            {
                return Convert.ToDecimal(ldtbList.Rows[0][enmBenefitProvisionBenefitTypeFactor.benefit_type_factor.ToString()]);
            }

            return 0;
        }
        /// <summary>
        /// This Method Fetches the Relative Value of the Benefit Option
        /// </summary>
        /// <param name="astrBenefitOptionValue"> Benefit Option Value </param>
        /// <param name="adecParticipantAge"> Participant's Age </param>
        /// <param name="adecSpouseAge"> Spouse's Age </param>
        /// <returns> Relative Value </returns>
        public string GetRelativeValue(string astrBenefitOptionValue, decimal adecParticipantAge, decimal adecSpouseAge)
        {
            decimal lintRelativePercentage = new decimal();
            lintRelativePercentage = 100.00M;
            string lstrRelativeValue = null;

            object lobjRelativePercent = DBFunction.DBExecuteScalar("cdoBenefitProvisionBenefitOptionFactor.GetRelativeValue",
                                            new object[] { astrBenefitOptionValue, Math.Min(Math.Max(Math.Floor(adecParticipantAge), 55), 71), Math.Min(Math.Max(Math.Floor(adecSpouseAge), 20), 99) },
                                            iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

            if (lobjRelativePercent.IsNotNull())
            {
                lintRelativePercentage = Convert.ToDecimal(lobjRelativePercent);
            }

            if (lintRelativePercentage == 95)
            {
                lstrRelativeValue = busConstant.BenefitCalculation.RELATIVE_VALUE_APPROX_EQUAL;
            }
            else
            {
                lstrRelativeValue = lintRelativePercentage.ToString() + "%";
            }

            return lstrRelativeValue;
        }


        #region LocalReduced_Death

        public decimal GetTotalLocalBenefitAmountForDeath(decimal adecAge, busBenefitApplication abusBenefitApplication, busPerson abusPerson, DateTime adtRetirementDate, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution)
        {
            decimal ldecTotalLumpsumBenefitAmount = busConstant.ZERO_DECIMAL;

            foreach (busPersonAccount lbusPersonAccount in abusBenefitApplication.ibusPerson.iclbPersonAccount)
            {
                if (aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Count() > 0)
                {
                    if (lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_161_PLAN_ID || lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_600_PLAN_ID ||
                        lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_666_PLAN_ID || lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_52_PLAN_ID ||
                        lbusPersonAccount.icdoPersonAccount.plan_id == busConstant.LOCAL_700_PLAN_ID)
                    {
                        decimal ldecTotalBenefitAmount = CalculateTotalBenefitAmtForDeathLocals(lbusPersonAccount.icdoPersonAccount.istrRetirementSubType,
                        adtRetirementDate, abusPerson.icdoPerson.idtDateofBirth,
                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount),
                         false, abusBenefitApplication, aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount),
                        aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount),
                         null, null, lbusPersonAccount.icdoPersonAccount.plan_id, Convert.ToInt32(adecAge),
                         Convert.ToInt32(aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lbusPersonAccount.icdoPersonAccount.person_account_id).Max(item => item.icdoPersonAccountRetirementContribution.computational_year)),
                            aclbPersonAccountRetirementContribution, false, abusPerson.icdoPerson.person_id);

                        ldecTotalLumpsumBenefitAmount = ldecTotalLumpsumBenefitAmount + ldecTotalBenefitAmount;
                    }

                }
            }
            ldecTotalLumpsumBenefitAmount = Math.Round(ldecTotalLumpsumBenefitAmount, 2);
            return ldecTotalLumpsumBenefitAmount;
        }


        public decimal CalculateTotalBenefitAmtForDeathLocals(string astrRetirementSubType, DateTime adtRetirementDate, DateTime adtDateOfBirth,
                                            decimal adecLocalFrozenBenefitAmt, bool ablnIsQdroCalulation, busBenefitApplication abusbenefitApplication,
                                            decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt,
                                            Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                            Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail, int aintPlanID, int aintParticipantAgeAtEarliestRetirement,
                                            int aintMaxComputationYear, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, bool ablnFinalCalc, int aintPersonId = 0
                                            , DateTime? adtEarliestRetirementDate = null) //PIR 862
        {
            decimal ldecTotalBenefitAmount = adecLocalFrozenBenefitAmt;
            decimal ldecERF = 0;
            decimal ldecPensionCredits = busConstant.ZERO_DECIMAL;

            switch (aintPlanID)
            {
                case 3:
                    ldecPensionCredits = abusbenefitApplication.Local600_PensionCredits;
                    break;
                case 4:
                    ldecPensionCredits = abusbenefitApplication.Local666_PensionCredits;
                    break;
                case 6:
                    ldecPensionCredits = abusbenefitApplication.Local700_PensionCredits;
                    break;
                case 7:
                    ldecPensionCredits = abusbenefitApplication.Local52_PensionCredits;
                    break;
                case 8:
                    ldecPensionCredits = abusbenefitApplication.Local161_PensionCredits;
                    break;
                case 1:
                case 2:
                default:
                    break;
            }


            if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanID).First().icdoQdroCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }
            else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
            {
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;

                this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First()
    , aintPersonId, ref ldecTotalBenefitAmount);
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().
    icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;


            }

            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_REDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_SPL_REDUCED_EARLY)
            {
                if (aintParticipantAgeAtEarliestRetirement < 55)
                {
                    aintParticipantAgeAtEarliestRetirement = 55;
                }
                if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First()
    , aintPersonId, ref ldecTotalBenefitAmount);
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().
        icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                }


                ldecERF = this.GetEarlyReductionFactor(busConstant.MPIPP_PLAN_ID, busConstant.BENEFIT_TYPE_RETIREMENT, astrRetirementSubType,
                                                                aintParticipantAgeAtEarliestRetirement);

                ldecTotalBenefitAmount = ldecTotalBenefitAmount * ldecERF;

                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanID).First().icdoQdroCalculationDetail.early_reduction_factor = ldecERF;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().icdoBenefitCalculationDetail.early_reduction_factor = ldecERF;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
            }
            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_NORMAL)
            {
                if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First()
                    , aintPersonId, ref ldecTotalBenefitAmount);
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().
                    icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                }
                ldecTotalBenefitAmount = Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount, 2, MidpointRounding.AwayFromZero));
                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanID).First().icdoQdroCalculationDetail.early_reduction_factor = 1;
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1;
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
            }
            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE ||
                     astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                int lintPersonAccountId = abusbenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == aintPlanID).First().icdoPersonAccount.person_account_id;

                ldecTotalBenefitAmount = CalculateLocalBenefitAmountLateRetirement(lintPersonAccountId,
                                                GetMergerDate(aintPlanID), aintPlanID,
                                                adtDateOfBirth, adtRetirementDate,
                                                 adecPreBISBenefitAmt, adecPostBISBenefitAmt, ablnIsQdroCalulation,
                                                  aclbBenefitCalculationDetail, aclbQdroCalculationDetail, ldecPensionCredits, aintMaxComputationYear, adecLocalFrozenBenefitAmt,
                                                  aclbPersonAccountRetirementContribution, ablnFinalCalc, abusbenefitApplication

                                                   , adtEarliestRetirementDate);//PIR 862 //PIR 795-Last optional parameter added 'abusbenefitApplication'
                if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First()
                    , aintPersonId, ref ldecTotalBenefitAmount);
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().
                    icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                }
                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanID).First().icdoQdroCalculationDetail.early_reduction_factor = 1;
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {

                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1;
                }
            }


            return ldecTotalBenefitAmount;
        }



        public DateTime GetMergerDate(int aintPlanID)
        {
            switch (aintPlanID)
            {
                case busConstant.LOCAL_161_PLAN_ID:
                    return busConstant.BenefitCalculation.MERGER_DATE_LOCAL_161;
                case busConstant.LOCAL_600_PLAN_ID:
                    return busConstant.BenefitCalculation.MERGER_DATE_LOCAL_600;
                case busConstant.LOCAL_666_PLAN_ID:
                    return busConstant.BenefitCalculation.MERGER_DATE_LOCAL_666;
                case busConstant.LOCAL_700_PLAN_ID:
                    return busConstant.BenefitCalculation.MERGER_DATE_LOCAL_700;
                case busConstant.LOCAL_52_PLAN_ID:
                    return busConstant.BenefitCalculation.MERGER_DATE_LOCAL_52;
            }
            return DateTime.MinValue;
        }
        #endregion

        #region Get Total Benefit Amount for Local Plans

        public decimal CalculateTotalBenefitAmtForLocal161(string astrRetirementSubType, DateTime adtRetirementDate, DateTime adtDateOfBirth,
                                                 decimal adecLocalFrozenBenefitAmt, bool ablnIsQdroCalulation, busBenefitApplication abusbenefitApplication,
                                                 decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt,
                                                 Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                                 Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                                 int aintMaxComputationYear, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution,
                                                 bool ablnFinalCalc, int aintPersonId = 0)
        {
            decimal ldecTotalBenefitAmount = 0;

            //First STEP GET THE FROZEN AMOUNT and OTHER INFORMATION FROM SOMEWHERE lIKE EE,IAP ACC BALANCE etc 
            //LOAD THAT BUSINESS OBJECT WHICH SHOULD BE A PART OF busBenefitCalculationHeader
            //And also the other BUSINESS OBJECTS THAT NEED TO BE LOADED


            int lintPersonAccountId = abusbenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.istrPlanCode == busConstant.Local_161).First().icdoPersonAccount.person_account_id;
            if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().icdoQdroCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }
            else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
            {

                if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
                }
                else
                {
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
                }
            }

            ldecTotalBenefitAmount = adecLocalFrozenBenefitAmt;
            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_REDUCED_EARLY)
            {
                // First Step would be to Determine the Reduction Factor 
                //Multiply Reducttion factor with lintFrozenBenefitAmount and Populate the Detail Business Object
                DateTime ldtNormalRetrAgeDate = adtDateOfBirth.AddYears(busConstant.LOCAL_161_RETIREMENT_NORMAL_AGE);
                if (ldtNormalRetrAgeDate.Day != 1)
                    ldtNormalRetrAgeDate = ldtNormalRetrAgeDate.AddMonths(1);
                int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtNormalRetrAgeDate);

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                    ldecTotalBenefitAmount = ((1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_161 * DiffinMonths)) * ldecTotalBenefitAmount);

                }


                ldecTotalBenefitAmount = Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount, 2, MidpointRounding.AwayFromZero));

                //Setup Benefit Detail Object
                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().icdoQdroCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_161 * DiffinMonths);
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_161 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                    else
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_161 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                }
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_NORMAL)
            {
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                ldecTotalBenefitAmount = Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount, 2, MidpointRounding.AwayFromZero));
            }
            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                ldecTotalBenefitAmount = CalculateLocalBenefitAmountLateRetirement(lintPersonAccountId,
                                                 busConstant.BenefitCalculation.MERGER_DATE_LOCAL_161, busConstant.LOCAL_161_PLAN_ID,
                                                 adtDateOfBirth, adtRetirementDate,
                                                 adecPreBISBenefitAmt, adecPostBISBenefitAmt, ablnIsQdroCalulation,
                                                 aclbBenefitCalculationDetail, aclbQdroCalculationDetail, abusbenefitApplication.Local161_PensionCredits,
                                                 aintMaxComputationYear, adecLocalFrozenBenefitAmt, aclbPersonAccountRetirementContribution, ablnFinalCalc, abusbenefitApplication); //PIR 795-Last optional parameter added 'abusbenefitApplication'

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //RID 61301
                if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count() > 0 && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).Count() > 0)
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_161_PLAN_ID).First().
                               icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount = ldecTotalBenefitAmount;

            }

            return ldecTotalBenefitAmount;
        }


        public decimal CalculateTotalBenefitAmtForLocal52(string astrRetirementSubType, DateTime adtRetirementDate, DateTime adtDateOfBirth,
                                                 decimal adecLocalFrozenBenefitAmt, bool ablnIsQdroCalulation, busBenefitApplication abusbenefitApplication,
                                                 decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt,
                                                 Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                                 Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                                 int aintMaxComputationYear, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, bool ablnFinalCalc, int aintPersonId = 0)
        {
            decimal ldecTotalBenefitAmount = 0;

            int lintPersonAccountId = abusbenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.istrPlanCode == busConstant.Local_52).First().icdoPersonAccount.person_account_id;
            if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().icdoQdroCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }
            else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
            {
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }

            ldecTotalBenefitAmount = adecLocalFrozenBenefitAmt;

            int CompareAge = 0;

            //This Amount Will Probably also go into the Calculation Detail Table as one of the fields                

            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_REDUCED_EARLY)
            {
                CompareAge = GetBestAgeforReductionFactor_Local52(abusbenefitApplication);
                DateTime ldtUnreducedRetrAgeDate = adtDateOfBirth.AddYears(CompareAge);
                if (ldtUnreducedRetrAgeDate.Day != 1)
                    ldtUnreducedRetrAgeDate = ldtUnreducedRetrAgeDate.AddMonths(1);

                int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtUnreducedRetrAgeDate);

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }

                    ldecTotalBenefitAmount = ((1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_52 * DiffinMonths)) * ldecTotalBenefitAmount);
                }

                //Setup Benefit Detail Object
                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().icdoQdroCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_52 * DiffinMonths);
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_52 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                    else
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_52 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                }
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_NORMAL)
            {
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                ldecTotalBenefitAmount = CalculateLocalBenefitAmountLateRetirement(lintPersonAccountId,
                                                busConstant.BenefitCalculation.MERGER_DATE_LOCAL_52, busConstant.LOCAL_52_PLAN_ID,
                                                 adtDateOfBirth, adtRetirementDate,
                                                 adecPreBISBenefitAmt, adecPostBISBenefitAmt, ablnIsQdroCalulation,
                                                 aclbBenefitCalculationDetail, aclbQdroCalculationDetail, abusbenefitApplication.Local52_PensionCredits, aintMaxComputationYear, adecLocalFrozenBenefitAmt,
                                                 aclbPersonAccountRetirementContribution, ablnFinalCalc, abusbenefitApplication); //PIR 795-Last optional parameter added 'abusbenefitApplication'

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //RID 61301
                if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count() > 0 && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).Count() > 0)
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_52_PLAN_ID).First().
                               icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount = ldecTotalBenefitAmount;

            }

            return ldecTotalBenefitAmount;
        }


        public decimal CalculateTotalBenefitAmtForLocal600(string astrRetirementSubType, DateTime adtRetirementDate, DateTime adtDateOfBirth,
                                         decimal adecLocalFrozenBenefitAmt, bool ablnIsQdroCalulation, busBenefitApplication abusbenefitApplication,
                                         decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt,
                                         Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                         Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                         int aintMaxComputationYear, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, bool ablnFinalCalc, int aintPersonId = 0)
        {

            int lintPersonAccountId = abusbenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.istrPlanCode == busConstant.Local_600).First().icdoPersonAccount.person_account_id;

            if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().icdoQdroCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }
            else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
            {
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }

            decimal ldecTotalBenefitAmount = new decimal();
            int CompareAge = 0;

            ldecTotalBenefitAmount = adecLocalFrozenBenefitAmt;
            //This Amount Will Probably also go into the Calculation Detail Table as one of the fields                

            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_REDUCED_EARLY)
            {
                CompareAge = GetBestAgeforReductionFactor_Local600(abusbenefitApplication);
                DateTime ldtUnreducedRetrAgeDate = adtDateOfBirth.AddYears(CompareAge);
                if (ldtUnreducedRetrAgeDate.Day != 1)
                    ldtUnreducedRetrAgeDate = ldtUnreducedRetrAgeDate.AddMonths(1);
                int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtUnreducedRetrAgeDate);

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }


                    ldecTotalBenefitAmount = ((1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_600 * DiffinMonths)) * ldecTotalBenefitAmount);
                }

                //Setup Benefit Detail Object

                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().icdoQdroCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_600 * DiffinMonths);
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;//PIR-1064
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_600 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                    else
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_600 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;//PIR-1064
                    }
                }
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_NORMAL)
            {
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {

                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
      , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //Commented beacuse we need to Ceiling this value for Benefit Options Grid.
                //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Round(ldecTotalBenefitAmount, 0, MidpointRounding.AwayFromZero));
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                ldecTotalBenefitAmount = this.CalculateLocalBenefitAmountLateRetirement(lintPersonAccountId,
                                                busConstant.BenefitCalculation.MERGER_DATE_LOCAL_600, busConstant.LOCAL_600_PLAN_ID,
                                                adtDateOfBirth, adtRetirementDate,
                                                 adecPreBISBenefitAmt, adecPostBISBenefitAmt, ablnIsQdroCalulation,
                                                 aclbBenefitCalculationDetail, aclbQdroCalculationDetail, abusbenefitApplication.Local600_PensionCredits, aintMaxComputationYear, adecLocalFrozenBenefitAmt,
                                                 aclbPersonAccountRetirementContribution, ablnFinalCalc, abusbenefitApplication); //PIR 795-Last optional parameter added 'abusbenefitApplication'

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //RID 61301
                if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count() > 0 && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).Count() > 0)
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_600_PLAN_ID).First().
                               icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount = ldecTotalBenefitAmount;
            }

            //PIR-1064
            return ldecTotalBenefitAmount;

        }

        public decimal CalculateTotalBenefitAmtForLocal666(string astrRetirementSubType, DateTime adtRetirementDate, DateTime adtDateOfBirth,
                                         decimal adecLocalFrozenBenefitAmt, bool ablnIsQdroCalulation, busBenefitApplication abusbenefitApplication,
                                         decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt, decimal adecAge,
                                         Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                         Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                          int aintMaxComputationYear, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, bool ablnFinalCalc, int aintPersonId = 0)
        {
            int lintPersonAccountId = abusbenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.istrPlanCode == busConstant.Local_666).First().icdoPersonAccount.person_account_id;

            if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoQdroCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }
            else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
            {
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }

            decimal ldecTotalBenefitAmount = new decimal();

            ldecTotalBenefitAmount = adecLocalFrozenBenefitAmt;
            //This Amount Will Probably also go into the Calculation Detail Table as one of the fields                

            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_REDUCED_EARLY)
            {
                // First Step would be to Determine the Reduction Factor 
                //Multiply Reducttion factor with lintFrozenBenefitAmount and Populate the Detail Business Object

                if (adecAge < 60)
                {
                    //Determine THE FACTOR FROM MPI EARLY RETIREMENT MAYBE IT CAN COME FROM A db TABLE
                    decimal factorforMPIEarlyRetrirement = abusbenefitApplication.GetFactorFor_Local666(busConstant.MPIPP_PLAN_ID, busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_REDUCED_EARLY, adecAge);

                    //Process QDRO Offset
                    if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                    {
                        if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                        {
                            this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
    , aintPersonId, ref ldecTotalBenefitAmount);

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                    .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                        }
                        else
                        {
                            this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First()
                                , aintPersonId, ref ldecTotalBenefitAmount);

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().
                                icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                        }

                        ldecTotalBenefitAmount = factorforMPIEarlyRetrirement * ldecTotalBenefitAmount;

                    }

                    //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M); //RequestID# 67706 - Rounding should be done only at final benefit amount
                    ////Setup Benefit Detail Object
                    if (ablnIsQdroCalulation == busConstant.BOOL_TRUE)
                    {
                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoQdroCalculationDetail.early_reduction_factor = factorforMPIEarlyRetrirement;
                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                    else
                    {
                        if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduction_factor = factorforMPIEarlyRetrirement;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduction_factor = factorforMPIEarlyRetrirement;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                        }
                    }
                }
                else
                {
                    DateTime ldtNormalRetrAgeDate = adtDateOfBirth.AddYears(busConstant.LOCAL_666_RETIREMENT_NORMAL_AGE);
                    if (ldtNormalRetrAgeDate.Day != 1)
                        ldtNormalRetrAgeDate = ldtNormalRetrAgeDate.AddMonths(1);
                    int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtNormalRetrAgeDate);

                    //Process QDRO Offset
                    if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                    {
                        if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                        {
                            this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
    , aintPersonId, ref ldecTotalBenefitAmount);

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                    .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                        }
                        else
                        {
                            this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First()
                                , aintPersonId, ref ldecTotalBenefitAmount);

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().
                                icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                        }
                        ldecTotalBenefitAmount = ((1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_666 * DiffinMonths)) * ldecTotalBenefitAmount);

                    }

                    //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M); //RequestID# 67706 - Rounding should be done only at final benefit amount
                    //Setup Benefit Detail Object
                    if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                    {
                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoQdroCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_666 * DiffinMonths);
                        aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                    else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                    {
                        if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_666 * DiffinMonths);
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_666 * DiffinMonths);
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                        }
                    }
                }
            }
            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_NORMAL)
            {
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M); //RequestID# 67706 - Rounding should be done only at final benefit amount
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                ldecTotalBenefitAmount = this.CalculateLocalBenefitAmountLateRetirement(lintPersonAccountId,
                                                busConstant.BenefitCalculation.MERGER_DATE_LOCAL_666, busConstant.LOCAL_666_PLAN_ID,
                                                adtDateOfBirth, adtRetirementDate,
                                                 adecPreBISBenefitAmt, adecPostBISBenefitAmt, ablnIsQdroCalulation,
                                                 aclbBenefitCalculationDetail, aclbQdroCalculationDetail, abusbenefitApplication.Local666_PensionCredits, aintMaxComputationYear, adecLocalFrozenBenefitAmt,
                                                 aclbPersonAccountRetirementContribution, ablnFinalCalc, abusbenefitApplication); //PIR 795-Last optional parameter added 'abusbenefitApplication'
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
                        , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M);  //RequestID# 67706 - Rounding should be done only at final benefit amount

                //RID 61301
                if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count() > 0 && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).Count() > 0)
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID).First().
                               icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount = ldecTotalBenefitAmount;
            }

            return ldecTotalBenefitAmount;
        }


        public decimal CalculateTotalBenefitAmtForLocal700(string astrRetirementSubType, DateTime adtRetirementDate, DateTime adtDateOfBirth,
                                                decimal adecLocalFrozenBenefitAmt, bool ablnIsQdroCalulation, busBenefitApplication abusBenefitApplication,
                                                decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt,
                                                Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                                Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                                int aintMaxComputationYear, Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, bool ablnFinalCalc, int aintPersonId = 0)
        {
            int lintPersonAccountId = abusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.istrPlanCode == busConstant.LOCAL_700).First().icdoPersonAccount.person_account_id;

            if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().icdoQdroCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }
            else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
            {
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().icdoBenefitCalculationDetail.unreduced_benefit_amount = adecLocalFrozenBenefitAmt;
            }

            decimal ldecTotalBenefitAmount = new decimal();
            int CompareAge = 0;

            ldecTotalBenefitAmount = adecLocalFrozenBenefitAmt;

            //This Amount Will Probably also go into the Calculation Detail Table as one of the fields                

            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_REDUCED_EARLY)
            {
                CompareAge = abusBenefitApplication.GetBestAgeforReductionFactor_Local700();
                DateTime ldtUnreducedRetrAgeDate = adtDateOfBirth.AddYears(CompareAge);
                if (ldtUnreducedRetrAgeDate.Day != 1)
                    ldtUnreducedRetrAgeDate = ldtUnreducedRetrAgeDate.AddMonths(1);

                int DiffinMonths = System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(adtRetirementDate, ldtUnreducedRetrAgeDate);

                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                    ldecTotalBenefitAmount = ((1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * DiffinMonths)) * ldecTotalBenefitAmount);
                }

                //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M);  //PIR 833 no rounding at this point, it should be at the end.

                //Setup Benefit Detail Object
                if (ablnIsQdroCalulation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0)
                {
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().icdoQdroCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * DiffinMonths);
                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                }
                else if (ablnIsQdroCalulation == busConstant.BOOL_FALSE && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                {
                    if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                    else
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduction_factor = 1 - (busConstant.BenefitCalculation.REDUCTION_FACTOR_LOCAL_700 * DiffinMonths);
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().icdoBenefitCalculationDetail.early_reduced_benefit_amount = ldecTotalBenefitAmount;
                    }
                }
            }
            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_UNREDUCED_EARLY || astrRetirementSubType == busConstant.RETIREMENT_TYPE_NORMAL)
            {
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
, aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M);  //PIR 833 no rounding at this point, it should be at the end.
            }

            else if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
            {
                ldecTotalBenefitAmount = this.CalculateLocalBenefitAmountLateRetirement(lintPersonAccountId,
                                                busConstant.BenefitCalculation.MERGER_DATE_LOCAL_700, busConstant.LOCAL_700_PLAN_ID,
                                                adtDateOfBirth, adtRetirementDate,
                                                 adecPreBISBenefitAmt, adecPostBISBenefitAmt, ablnIsQdroCalulation,
                                                 aclbBenefitCalculationDetail, aclbQdroCalculationDetail, abusBenefitApplication.Local700_PensionCredits, aintMaxComputationYear, adecLocalFrozenBenefitAmt,
                                                 aclbPersonAccountRetirementContribution, ablnFinalCalc, abusBenefitApplication); //PIR 795-Last optional parameter added 'abusbenefitApplication'
                //Process QDRO Offset
                if (!ablnIsQdroCalulation && !aclbBenefitCalculationDetail.IsNullOrEmpty())
                {
                    if (abusBenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate).First()
                        , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == adtRetirementDate)
                                .First().icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;

                    }
                    else
                    {
                        this.ProcessQDROOffset(aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First()
                            , aintPersonId, ref ldecTotalBenefitAmount);

                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().
                            icdoBenefitCalculationDetail.idecBenefitsAfterQDROOffSet = ldecTotalBenefitAmount;
                    }
                }

                //RID 61301
                if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count() > 0 && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).Count() > 0)
                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID).First().
                               icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount = ldecTotalBenefitAmount;

                //ldecTotalBenefitAmount = Convert.ToDecimal(Math.Ceiling(ldecTotalBenefitAmount / 0.5M) * 0.5M);  //PIR 833 no rounding at this point, it should be at the end.
            }

            return ldecTotalBenefitAmount;
        }

        public decimal CalculateLocalBenefitAmountLateRetirement(int aintPersonAccountId, DateTime adtMergerDate, int aintPlanId,
                                    DateTime adtDateOfBirth, DateTime adtRetirementDate,
                                    decimal adecPreBISBenefitAmt, decimal adecPostBISBenefitAmt, bool ablnIsQdroCal,
                                    Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                    Collection<busQdroCalculationDetail> aclbQdroCalculationDetail,
                                    decimal adecLocalPensionCredits, int aintMaxComputationYear, decimal adecLocalFrozenBenefitAmount,
                                    Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, bool ablnFinalCalc = false, busBenefitApplication abusbenefitApplication = null
                                    , DateTime? adtEarliestRetirementDate = null) //PIR 862
        {
            // Steps to Calculate the Late Retirement Benefit Amount for the Locals
            //.	D - Max(Normal Accrued Benefit  or Previous Years Annual Max) = ER Derived Benefit
            //.	E - (ER Derived Benefit * 1.2%) * Non Suspendible Months = ER Actual Increase
            //.	F - ER Derived Benefit + ER Actuarial Increase = Total ER Derived Benefit
            //.	G - Total ER Derived = Late Retirement Adjustment
            //.	H - Max of Normal Accrued Benefit or Late Retirement Adj = Annual Max
            //.	I - Final Step is to Apply the benefit option adjustment factor to get the Final Late Retirement Benefit Amount

            DateTime ldtPlanDate = adtMergerDate;
            decimal ldecAge = busConstant.ZERO_DECIMAL;

            // Post Merger All Local Plans follow the MPI Rules. Hence get the Normal Retirement Age for MPI Plan (Not the Local Plan)
            decimal ldecNormalRetirementAge = this.GetNormalRetirementAge(busConstant.MPIPP_PLAN_ID);
            //DateTime ldtNormalRetirementDate = adtDateOfBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge)).AddMonths(1).AddDays(-1 * adtDateOfBirth.Day).AddDays(1);

            //Prod PIR 914 : Corrected Normal Retirement Date Calculation : Release 3
            DateTime ldtNormalRetirementDate = adtDateOfBirth.AddYears(Convert.ToInt32(ldecNormalRetirementAge));
            if (ldtNormalRetirementDate.Day != 1)
            {
                ldtNormalRetirementDate = ldtNormalRetirementDate.AddMonths(1).GetFirstDayofMonth();
            }

            decimal ldecCurrYearFrozenBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId && item.icdoPersonAccountRetirementContribution.transaction_type_value == "BBAL").Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);
            decimal ldecCurrYearPreBISAmt = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId && item.icdoPersonAccountRetirementContribution.transaction_type_value == "BBAL").Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount);
            decimal ldecCurrYearPostBISAmt = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId && item.icdoPersonAccountRetirementContribution.transaction_type_value == "BBAL").Sum(item => item.icdoPersonAccountRetirementContribution.local_post_bis_amount);

            //RMD72Project
            //commented bellow line
            //DateTime ldtMinDistributionDate = Convert.ToDateTime(busGlobalFunctions.CalculateMinDistributionDate(adtDateOfBirth, DateTime.MinValue));//Pir-278

            //decimal ldecCurrYearPreBISActurialIncrease = busConstant.ZERO_DECIMAL;
            //decimal ldecCurrYearPostBISActurialIncrease = busConstant.ZERO_DECIMAL;
            //decimal ldecPrevYearPreBISActurialIncrease = busConstant.ZERO_DECIMAL;
            //decimal ldecPrevYearPostBISActurialIncrease = busConstant.ZERO_DECIMAL;
            decimal ldecCurrYearActurialIncrease = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYearActurialIncrease = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYearFrozenBenefitAmount = busConstant.ZERO_DECIMAL;
            int lintNonSuspendibleMonths = busConstant.ZERO_INT;

            //            decimal ldecCurrYearTotalBenefitAmount = ldecCurrYearPreBISAmt + ldecCurrYearPostBISAmt + ldecCurrYearPreBISActurialIncrease + ldecCurrYearPostBISActurialIncrease;
            decimal ldecCurrYearTotalBenefitAmount = ldecCurrYearPreBISAmt + ldecCurrYearPostBISAmt + ldecCurrYearActurialIncrease;
            decimal ldecERDerived = busConstant.ZERO_DECIMAL;
            decimal ldecTotalERDerived = busConstant.ZERO_DECIMAL;
            decimal ldecAnnualMax = busConstant.ZERO_DECIMAL;
            decimal ldecPrevYearAnnualMaxAmt = busConstant.ZERO_DECIMAL;
            decimal ldecIncreasePerc = busConstant.ZERO_DECIMAL;

            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = null;
            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = null;

            busPerson lbusPerson = new busPerson() { icdoPerson = new cdoPerson() };
            busPersonAccount lbusPersonAccount = new busPersonAccount() { icdoPersonAccount = new cdoPersonAccount() };
            if (lbusPersonAccount.FindPersonAccount(aintPersonAccountId))
            {
                lbusPerson.FindPerson(lbusPersonAccount.icdoPersonAccount.person_id);
            }

            //RMD72Project
            //Added bellow code to determine md date
            decimal ldecMDAge = busConstant.BenefitCalculation.AGE_70_HALF;
            int lintPersonId = lbusPersonAccount.icdoPersonAccount.person_id;
            DateTime ldtVestedDate = busGlobalFunctions.GetVestedDate(lintPersonId, aintPlanId);
            DateTime ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(lintPersonId, ldtVestedDate);  //calculate MD Date based on participant MD age option

            // RID# 153935 Fixing the code so it can work for Age 73 differed MD. 
            ldecMDAge = busGlobalFunctions.GetMinDistributionAge(lintPersonId, ldtVestedDate);

            //DateTime ldt72MinDate = busGlobalFunctions.Get72MinDistributionDate(adtDateOfBirth, ldtVestedDate); //calculate MD date based on age 70.5
            //if (ldtMinDistributionDate == ldt72MinDate)
            //{
            //    ldecMDAge = busConstant.BenefitCalculation.AGE_72;
            //}
            //If participant had age 72 option but retireed before 72MD date, business asked to use 70.5 instead of if participant age 72 MD date.
            //if (ldtMinDistributionDate == ldt72MinDate && adtRetirementDate < ldtMinDistributionDate)
            //{
            //    ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(adtDateOfBirth, ldtVestedDate); //calculate MD date based on age 70.5
            //    ldecMDAge = busConstant.BenefitCalculation.AGE_70_HALF;
            //}


            Collection<cdoPlanBenefitRate> aclbcdoPlanBenefitRate = new Collection<cdoPlanBenefitRate>();

            DataTable ldtbPlanBenefitRate = busBase.Select("cdoPlanBenefitRate.Lookup", new object[] { });
            aclbcdoPlanBenefitRate = cdoDummyWorkData.GetCollection<cdoPlanBenefitRate>(ldtbPlanBenefitRate);
            //PIR 355
            aclbcdoPlanBenefitRate = BenefitRateScheduleSpecialCase(adtRetirementDate, aclbcdoPlanBenefitRate);

            //PIR 862
            DateTime ldtRetirementDate = adtRetirementDate;
            if (abusbenefitApplication != null && abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT
                && Convert.ToString(adtEarliestRetirementDate).IsNotNullOrEmpty())
            {
                if (Convert.ToDateTime(adtEarliestRetirementDate) != DateTime.MinValue)
                {
                    adtRetirementDate = Convert.ToDateTime(adtEarliestRetirementDate);
                }
            }

            // Starting with the Merger Date Calculate the Annual Max based on the Frozen Benefit Amount 
            while (ldtPlanDate <= adtRetirementDate)
            {
                // Reset the Variables 

                ldecCurrYearFrozenBenefitAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId && item.icdoPersonAccountRetirementContribution.effective_date <= ldtPlanDate).Sum(item => item.icdoPersonAccountRetirementContribution.local_frozen_benefit_amount);
                ldecCurrYearPreBISAmt = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == aintPersonAccountId && item.icdoPersonAccountRetirementContribution.effective_date <= ldtPlanDate).Sum(item => item.icdoPersonAccountRetirementContribution.local_pre_bis_amount);
                ldecCurrYearPostBISAmt = ldecCurrYearFrozenBenefitAmount - ldecCurrYearPreBISAmt;

                lintNonSuspendibleMonths = busConstant.ZERO_INT;
                //ldecCurrYearPreBISActurialIncrease = busConstant.ZERO_DECIMAL;
                //ldecCurrYearPostBISActurialIncrease = busConstant.ZERO_DECIMAL;
                ldecCurrYearActurialIncrease = busConstant.ZERO_DECIMAL;
                ldecERDerived = busConstant.ZERO_DECIMAL;
                ldecTotalERDerived = busConstant.ZERO_DECIMAL;
                ldecAnnualMax = busConstant.ZERO_DECIMAL;
                ldecIncreasePerc = busConstant.ZERO_DECIMAL;

                // Get the Participant Age at the Plan Date or Retirement Date
                int lintYears, lintMonths, lintDays;
                if (ldtPlanDate.Year == adtRetirementDate.Year)
                {
                    busGlobalFunctions.GetDetailTimeSpan(adtDateOfBirth, adtRetirementDate, out lintYears, out lintMonths, out lintDays);
                }
                else
                {
                    busGlobalFunctions.GetDetailTimeSpan(adtDateOfBirth, ldtPlanDate, out lintYears, out lintMonths, out lintDays);
                }

                ldecAge = Math.Round(Convert.ToDecimal(lintYears) + Convert.ToDecimal(lintMonths) / 12, 4);

                // Apply CBA increase if any
                //10 Percent Increase - Manually Insert Percent Increase
                //if (aclbcdoPlanBenefitRate.Where(item => item.effective_date >= ldtPlanDate && item.plan_year == ldtPlanDate.Year && item.plan_year > aintMaxComputationYear && item.rate_type_value == "B").Count() > busConstant.ZERO_INT)
                //{
                //    ldecIncreasePerc = aclbcdoPlanBenefitRate.Where(item => item.effective_date >= ldtPlanDate && item.plan_year == ldtPlanDate.Year && item.rate_type_value == "B").FirstOrDefault().increase_percentage;
                //    if (ldecIncreasePerc > busConstant.ZERO_DECIMAL)
                //    {
                //        decimal ldecCBAIncrease = Math.Round((ldecCurrYearPostBISAmt * ldecIncreasePerc / 100), 2);
                //        ldecCurrYearPostBISAmt = ldecCurrYearPostBISAmt + ldecCBAIncrease;
                //        ldecCurrYearFrozenBenefitAmount = ldecCurrYearPreBISAmt + ldecCurrYearPostBISAmt;

                //        // If Final Calc, Insert the CBA Increase into the Contribution Table. 
                //        // Add the Reference is as the Calc Header Id or Benefit Application Id
                //        if (ablnFinalCalc)
                //        {
                //            busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                //            lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(aintPersonAccountId, ldtPlanDate, DateTime.Now, ldtPlanDate.Year, busConstant.ZERO_DECIMAL, busConstant.ZERO_DECIMAL, busConstant.ZERO_DECIMAL,
                //                busConstant.TRANSACTION_TYPE_CBA_INCREASE, busConstant.ZERO_DECIMAL, busConstant.ZERO_DECIMAL, busConstant.ZERO_DECIMAL, busConstant.ZERO_DECIMAL, ldecCBAIncrease, busConstant.CONTRIBUTION_TYPE_LOCAL_BENEFITS,
                //                null, busConstant.ZERO_DECIMAL, busConstant.ZERO_DECIMAL, busConstant.ZERO_INT);
                //        }
                //    }
                //}

                lbusBenefitCalculationYearlyDetail = new busBenefitCalculationYearlyDetail() { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };
                if (ablnIsQdroCal == busConstant.BOOL_TRUE)
                {
                    lbusQdroCalculationYearlyDetail = new busQdroCalculationYearlyDetail() { icdoQdroCalculationYearlyDetail = new cdoQdroCalculationYearlyDetail() };
                }
                else
                {
                    lbusBenefitCalculationYearlyDetail.iclbBenefitCalculationNonsuspendibleDetail = new Collection<busBenefitCalculationNonsuspendibleDetail>();
                }


                if (Math.Ceiling(ldecAge) >= ldecNormalRetirementAge)           // Condition check will be for MPIPP Normal Retirement Age = 65
                {
                    if (Math.Ceiling(ldecAge) == ldecNormalRetirementAge)
                    {
                        // Need to do all the calculations for Age 65
                        lintNonSuspendibleMonths = busConstant.ZERO_INT;
                        //ldecCurrYearPreBISActurialIncrease = busConstant.ZERO_DECIMAL;
                        //ldecCurrYearPostBISActurialIncrease = busConstant.ZERO_DECIMAL;
                        ldecCurrYearActurialIncrease = busConstant.ZERO_DECIMAL;
                        ldecERDerived = Math.Max(ldecPrevYearFrozenBenefitAmount, ldecPrevYearAnnualMaxAmt);
                        ldecTotalERDerived = ldecERDerived;
                        ldecAnnualMax = Math.Max(ldecTotalERDerived, ldecCurrYearFrozenBenefitAmount);

                        //ldecPrevYearPreBISActurialIncrease = ldecPrevYearPreBISActurialIncrease + ldecCurrYearPreBISActurialIncrease;
                        //ldecPrevYearPostBISActurialIncrease = ldecPrevYearPostBISActurialIncrease + ldecCurrYearPostBISActurialIncrease;
                        ldecPrevYearActurialIncrease = ldecPrevYearActurialIncrease + ldecCurrYearActurialIncrease;
                        ldecPrevYearAnnualMaxAmt = ldecAnnualMax;
                    }
                    //PIR -795
                    DateTime ldtLatestCutOffDate = new DateTime();
                    if (abusbenefitApplication.icdoBenefitApplication.benefit_type_value != busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                    {
                        ldtLatestCutOffDate = LastEvaluatedMonth(DateTime.Now);
                    }
                    if (ldtLatestCutOffDate > adtRetirementDate)
                    {
                        ldtLatestCutOffDate = busGlobalFunctions.GetLastPayrollDayOfMonth(adtRetirementDate.Month == 1 ? adtRetirementDate.AddMonths(-1).Year : adtRetirementDate.Year, adtRetirementDate.AddMonths(-1).Month); ;
                    }
                    else if (ldtLatestCutOffDate == DateTime.MinValue)
                    {
                        ldtLatestCutOffDate = busGlobalFunctions.GetLastPayrollDayOfMonth(DateTime.Now.Year, DateTime.Now.Month);

                        if (ldtLatestCutOffDate > DateTime.Now)
                        {
                            ldtLatestCutOffDate = busGlobalFunctions.GetLastPayrollDayOfMonth(DateTime.Now.Month == 1 ? DateTime.Now.AddMonths(-1).Year : DateTime.Now.Year, DateTime.Now.AddMonths(-1).Month);
                        }
                    }
                    DateTime ldtStartDate = DateTime.MinValue;
                    DateTime ldtEndDate = DateTime.MinValue;

                    if (ldtPlanDate.Year == ldtNormalRetirementDate.Year)
                    {
                        if (ldtNormalRetirementDate.Year >= 2004)
                        {
                            ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(ldtNormalRetirementDate.Year, ldtNormalRetirementDate.Month);
                            ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(ldtNormalRetirementDate.Year, 12);
                        }
                        else
                        {
                            ldtStartDate = ldtNormalRetirementDate;
                            ldtEndDate = new DateTime(ldtPlanDate.Year, 12, 31);
                        }
                    }
                    else if (ldtPlanDate.Year == adtMergerDate.Year)
                    {
                        if (adtMergerDate.Year >= 2004)
                        {
                            ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(adtMergerDate.Year, adtMergerDate.Month);
                            ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(ldtPlanDate.Year, 12);
                        }
                        else
                        {
                            ldtStartDate = adtMergerDate;
                            ldtEndDate = new DateTime(ldtPlanDate.Year, 12, 31);
                        }
                    }
                    else if (ldtPlanDate.Year == adtRetirementDate.Year)
                    {
                        // Retirement Date will always be in future. Hence not adding the if condition check as in previous cases
                        ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(ldtPlanDate.Year, 1);
                        ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(adtRetirementDate.AddDays(-1).Year, adtRetirementDate.AddDays(-1).Month);
                    }
                    else
                    {
                        if (ldtPlanDate.Year >= 2004)
                        {
                            ldtStartDate = busGlobalFunctions.GetFirstPayrollDayOfMonth(ldtPlanDate.Year, 1);
                            ldtEndDate = busGlobalFunctions.GetLastPayrollDayOfMonth(ldtPlanDate.Year, 12);
                        }
                        else
                        {
                            ldtStartDate = new DateTime(ldtPlanDate.Year, 1, 1);
                            ldtEndDate = new DateTime(ldtPlanDate.Year, 12, 31);
                        }
                    }
                    //PIR- 795
                    //PIR- 278-Non-suspendible months till prior to MD date for local benefits                   
                    if (ldtPlanDate.Year >= ldtMinDistributionDate.Year && !(aclbBenefitCalculationDetail.IsNullOrEmpty()) //added 2nd condition to avoid the errors occuring because of NULL collection.
                        && aclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.benefit_subtype_value == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                    {
                        lintNonSuspendibleMonths = busConstant.ZERO_INT;
                    }
                    else if (ldtStartDate > ldtLatestCutOffDate)
                    {
                        lintNonSuspendibleMonths = 0;
                    }
                    else if (ldtEndDate > ldtLatestCutOffDate)
                    {
                        ldtEndDate = ldtLatestCutOffDate;
                        lintNonSuspendibleMonths = GetNonSuspendibleMonths(lbusPerson.icdoPerson.istrSSNNonEncrypted.ToString(), lbusPerson, ldtPlanDate.Year,
                                                                                busConstant.MPIPP_PLAN_ID, // aintPlanId, Non-Suspendible months will be calculated for MPI Plan Post Merger.
                                                                                lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                    }
                    else if (ldtStartDate > ldtEndDate)
                    {
                        lintNonSuspendibleMonths = busConstant.ZERO_INT;
                    }
                    else
                    {


                        lintNonSuspendibleMonths = GetNonSuspendibleMonths(lbusPerson.icdoPerson.istrSSNNonEncrypted.ToString(), lbusPerson, ldtPlanDate.Year,
                                                                                                 busConstant.MPIPP_PLAN_ID, // aintPlanId, Non-Suspendible months will be calculated for MPI Plan Post Merger.
                                                                                                 lbusBenefitCalculationYearlyDetail, ldtStartDate, ldtEndDate);
                    }

                    ldecERDerived = Math.Max(ldecPrevYearFrozenBenefitAmount, ldecPrevYearAnnualMaxAmt);
                    //ldecCurrYearPreBISActurialIncrease = Math.Round((ldecCurrYearPreBISAmt + ldecPrevYearPreBISActurialIncrease) * busConstant.BenefitCalculation.LATE_ACTURIAL_INCREASE_PERCENTAGE * lintNonSuspendibleMonths, 2);
                    //ldecCurrYearPostBISActurialIncrease = Math.Round((ldecCurrYearPostBISAmt + ldecPrevYearPostBISActurialIncrease) * busConstant.BenefitCalculation.LATE_ACTURIAL_INCREASE_PERCENTAGE * lintNonSuspendibleMonths, 2);
                    //ldecTotalERDerived = ldecERDerived + (ldecCurrYearPreBISActurialIncrease + ldecCurrYearPostBISActurialIncrease);
                    ldecCurrYearActurialIncrease = Math.Round(ldecERDerived * busConstant.BenefitCalculation.LATE_ACTURIAL_INCREASE_PERCENTAGE * lintNonSuspendibleMonths, 2);
                    ldecTotalERDerived = ldecERDerived + ldecCurrYearActurialIncrease;

                }

                //ldecCurrYearTotalBenefitAmount = ldecCurrYearPreBISAmt + ldecCurrYearPreBISActurialIncrease + ldecCurrYearPostBISAmt + ldecCurrYearPostBISActurialIncrease;
                ldecAnnualMax = Math.Max(ldecTotalERDerived, ldecCurrYearFrozenBenefitAmount);
                ldecCurrYearTotalBenefitAmount = ldecCurrYearPreBISAmt + ldecCurrYearPostBISAmt + ldecCurrYearActurialIncrease;

                //Added for PIR-557
                Decimal ldecTableBfactor = GetTableBFactorForLateRetr(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2, ldecAge, ldtPlanDate.Year);
                Decimal ldecTableAfactor = this.GetTableAFactor(ldecAge, busConstant.MPIPP_PLAN_ID, ldtPlanDate.Year);

                // To Do 
                // Fetch the Total Qualified Hours, Total Qualified Year Count, Vested Hours, Vested Year Count, Health Hours, Health Year Count, Break Year Count for the Current Plan Year
                // Need to Read this data from EA
                // Insert into the Yearly Detail Collection
                if (ablnIsQdroCal == busConstant.BOOL_TRUE)
                {
                    lbusQdroCalculationYearlyDetail.LoadData(busConstant.ZERO_DECIMAL, busConstant.ZERO_INT, ldtPlanDate.Year, 0, 0.0m, 0, 0.0m, 0.0m, 0.0m, 0, ldecAnnualMax, 0.0m);
                    //lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.local_credited_days = ;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.pension_credit = adecLocalPensionCredits;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.suspendible_months_count = lintNonSuspendibleMonths;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.ee_derived_amount = busConstant.ZERO_DECIMAL;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.er_derived_amount = ldecERDerived;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.accrued_benefit_amount = ldecCurrYearFrozenBenefitAmount;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.actuarial_accrued_benenfit = ldecCurrYearTotalBenefitAmount;                            // Total Accrued Ben
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.actuarial_equivalent_amount = ldecAnnualMax;
                    lbusQdroCalculationYearlyDetail.icdoQdroCalculationYearlyDetail.annual_adjustment_amount = ldecTotalERDerived;

                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == aintPlanId).FirstOrDefault().iclbQdroCalculationYearlyDetail.Add(lbusQdroCalculationYearlyDetail);
                }
                else
                {
                    lbusBenefitCalculationYearlyDetail.LoadData(busConstant.ZERO_DECIMAL, busConstant.ZERO_INT, ldtPlanDate.Year, 0, 0.0m, 0, 0.0m, 0.0m, 0.0m, 0, ldecAnnualMax);
                    //lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.local_credited_days = ;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.pension_credit = adecLocalPensionCredits;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.suspendible_months_count = lintNonSuspendibleMonths;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = busConstant.ZERO_DECIMAL;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_derived_amount = ldecERDerived;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.accrued_benefit_amount = ldecCurrYearFrozenBenefitAmount;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_accrued_benenfit = ldecCurrYearTotalBenefitAmount;                            // Total Accrued Ben
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount = ldecAnnualMax;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.annual_adjustment_amount = ldecTotalERDerived;

                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.age = ldecAge;

                    //RMD72Project
                    //using calculated MD Age ldecMDAge instead of busConstant.BenefitCalculation.AGE_70_HALF
                    if (lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.age >= ldecMDAge)
                    {
                        lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date = ldecAnnualMax;
                    }

                    //lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_act_inc_amt = ldecCurrYearPreBISActurialIncrease + ldecCurrYearPostBISActurialIncrease;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_act_inc_amt = ldecCurrYearActurialIncrease;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_act_inc_amt = busConstant.ZERO_DECIMAL;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt = busConstant.ZERO_DECIMAL;
                    //PIR-557
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.table_b_factor = ldecTableBfactor;
                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.table_a_factor = ldecTableAfactor;

                    if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                    {
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == aintPlanId).FirstOrDefault().iclbBenefitCalculationYearlyDetail.Add(lbusBenefitCalculationYearlyDetail);
                    }
                }

                ldecPrevYearFrozenBenefitAmount = ldecCurrYearFrozenBenefitAmount;
                //ldecPrevYearPreBISActurialIncrease = ldecPrevYearPreBISActurialIncrease + ldecCurrYearPreBISActurialIncrease;
                //ldecPrevYearPostBISActurialIncrease = ldecPrevYearPostBISActurialIncrease + ldecCurrYearPostBISActurialIncrease;
                ldecPrevYearActurialIncrease = ldecPrevYearActurialIncrease + ldecCurrYearActurialIncrease;
                ldecPrevYearAnnualMaxAmt = ldecAnnualMax;

                // Increase the Plan Date by 1 Year
                if (ldtPlanDate.Month != 1)
                {
                    // Local 700 Merger date is 07/01/2002
                    // Hence need to reset the plan date to jan of next year 
                    ldtPlanDate = ldtPlanDate.AddYears(1).AddMonths(-1 * ldtPlanDate.Month).AddMonths(1);
                }
                else
                {
                    ldtPlanDate = ldtPlanDate.AddYears(1);
                }
            }

            //PIR 862
            if (abusbenefitApplication != null && abusbenefitApplication.icdoBenefitApplication.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT
                && Convert.ToString(adtEarliestRetirementDate).IsNotNullOrEmpty())
            {
                if (Convert.ToDateTime(adtEarliestRetirementDate) != DateTime.MinValue)
                {
                    adtRetirementDate = ldtRetirementDate;
                }
            }

            return ldecAnnualMax;
        }



        #endregion

        //property to contain iap allocation summary
        public busIapAllocationSummary ibusLatestIAPAllocationSummaryAsofYear { get; set; }
        public decimal idecQuarterlyAllocationIAP { get; set; }
        public decimal idecQuarterlyAllocationL52Spl { get; set; }
        public decimal idecQuarterlyAllocationL161Spl { get; set; }
        public decimal idecRYAlloc2 { get; set; }
        public decimal idecRYAlloc4 { get; set; }
        public DateTime idtEffectiveDate { get; set; }

        public decimal idecPrevIapBalance = decimal.Zero;
        public DateTime idtPrevBalanceAsOfYear = new DateTime();

        public decimal idecPrevL161SpecialAccountBalance { get; set; }
        public decimal idecPrevL52SpecialAccountBalance { get; set; }

        public decimal idecRYAlloc2AsOnAwardedOnDate { get; set; }
        public decimal idecRYAlloc4AsOnAwardedOnDate { get; set; }
        public decimal idecRYIAPBalanceAsOnAwardedOnDate { get; set; }
        public decimal idecQuarterlyAllocationIAPAsOnAwardedOnDate { get; set; }

        public decimal idecIAPBalanceAsOnAwardedOnDate { get; set; }
        public decimal idecL161BalanceAsOnAwardedOnDate { get; set; }
        public decimal idecL152BalanceAsOnAwardedOnDate { get; set; }
        public DateTime idtBalanceAsOnAwardedOnDate { get; set; }
        public DateTime idtAwardedOnDateEffectiveDate { get; set; }

        //public decimal idecIAPBalanceAsOnOnsetDate { get; set; }
        //public decimal idecL161BalanceAsOnOnsetDate { get; set; }
        //public decimal idecL52BalanceAsOnOnsetDate { get; set; }
        //public DateTime idtBalanceAsOnOnsetDate { get; set; }


        //Method to load IAP allocation summary as of a given year
        public void LoadIAPAllocationSummaryAsofYear(int aintYear)
        {
            ibusLatestIAPAllocationSummaryAsofYear = new busIapAllocationSummary();
            ibusLatestIAPAllocationSummaryAsofYear.LoadLatestAllocationSummaryAsofYear(aintYear);
        }


        public DateTime ldtIAPBalanceAsOfDate { get; set; }

        public void GetIAPAndSpecialAccountBalance(bool ablnIsQdroCalculation, Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                                   busBenefitCalculationHeader abusCalculationHeader, busQdroCalculationHeader abusQdroCalculationHeader,
                                                   DateTime adtGivenDate, decimal adecTotalIAPHours, decimal adecIAPHoursA2, decimal adecIAPPercent,
                                                    bool ablnExecuteIAPAllocation = true, bool ablnLocal52SpecialAccount = false, bool ablnLocal161SpecialAccount = false, int aintQDROBalanceAsOfYear = 0)
        {
            //Gets Not Null in option 2 for disability.

            //if (ibusLatestIAPAllocationSummaryAsofYear == null)
            if (ablnIsQdroCalculation == busConstant.BOOL_TRUE)
            {
                LoadIAPAllocationSummaryAsofYear(adtGivenDate.Year);
            }
            else
            {
                LoadIAPAllocationSummaryAsofYear(adtGivenDate.Year - 1); //Its dependens on the fate of when the BATCH is RUN
            }

            if (ablnIsQdroCalculation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0 &&
                           aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.plan_id = busConstant.IAP_PLAN_ID;
            }
            else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.istrPlanCode = busConstant.IAP;
            }

            // Step 1. Fetch the IAP Balance from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION table
            decimal ldecIAPBalance = busConstant.ZERO_DECIMAL, ldecFactor = 0;
            decimal ldecLocal52SpecialAccountBalance = busConstant.ZERO_DECIMAL;
            decimal ldecLocal161SpecialAccountBalance = busConstant.ZERO_DECIMAL;
            ldtIAPBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal52SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal161SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            busIAPAllocationHelper lobjIAPHelper = new busIAPAllocationHelper();
            DataTable ldtbIAPBalance = new DataTable();
            busPersonAccountRetirementContribution lobjContribution = new busPersonAccountRetirementContribution();
            int lintPersonAccountID = 0;

            //query to get the iap account balance
            if (ablnIsQdroCalculation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0 &&
                 aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                lintPersonAccountID = aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.person_account_id;
                ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceForQDROAsofYear",
                    new object[2] { aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.person_account_id,
                                    ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year});
            }
            //Ticket#104194
            else if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
            {
                //Ticket#109103
                // ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceAndPreRetirementDeathBalanceAsofYear",
                ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceForPreRetirementDeath",
                          new object[1] { aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id });
                //  ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year});



            }
            else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                lintPersonAccountID = aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
                if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)//PIR 985
                {
                    ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetTotalIAPAccountBalanceForIap",
                        new object[1] { aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id });
                }
                else
                {
                    ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceAsofYear",
                        new object[2] { aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id,
                                    ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year});
                }
            }

            if (ldtbIAPBalance.IsNotNull() && ldtbIAPBalance.Rows.Count > 0)
            {

                //Ticket# 68700
                if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                {
                    ldecIAPBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["IAP_BALANCE_AMOUNT_PRE_RTMT_DEATH"].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0]["IAP_BALANCE_AMOUNT_PRE_RTMT_DEATH"]);
                    ldecLocal52SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["LOCAL52_SPECIAL_ACCT_BAL_AMOUNT_PRE_RTMT_DEATH"].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0]["LOCAL52_SPECIAL_ACCT_BAL_AMOUNT_PRE_RTMT_DEATH"]);
                    ldecLocal161SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["LOCAL161_SPECIAL_ACCT_BAL_AMOUNT_PRE_RTMT_DEATH"].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0]["LOCAL161_SPECIAL_ACCT_BAL_AMOUNT_PRE_RTMT_DEATH"]);
                    ldtIAPBalanceAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["EFFECTIVE_DATE"].IsDBNull()) ? DateTime.MinValue : ldtbIAPBalance.Rows[0]["EFFECTIVE_DATE"]);
                }
                else
                {
                    ldecIAPBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["IAP_BALANCE_AMOUNT"].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0]["IAP_BALANCE_AMOUNT"]);
                    ldecLocal52SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["LOCAL52_SPECIAL_ACCT_BAL_AMOUNT"].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0]["LOCAL52_SPECIAL_ACCT_BAL_AMOUNT"]);
                    ldecLocal161SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["LOCAL161_SPECIAL_ACCT_BAL_AMOUNT"].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0]["LOCAL161_SPECIAL_ACCT_BAL_AMOUNT"]);
                    ldtIAPBalanceAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbIAPBalance.Rows[0]["EFFECTIVE_DATE"].IsDBNull()) ? DateTime.MinValue : ldtbIAPBalance.Rows[0]["EFFECTIVE_DATE"]);

                }



                if (ablnExecuteIAPAllocation)
                {
                    #region Code for IAP and Special Account Quaterly Allocations
                    //if the latest allocation year in one year prior to the given date then, participant is eligible for QY and RY
                    if ((ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year + 1) == adtGivenDate.Year)
                    {
                        //quarterly allocation
                        int lintQuarter = 0;
                        bool lblnEligibleForRY = false;
                        //determining the eligible quarter
                        if (adtGivenDate.Month >= 4 && adtGivenDate.Month <= 6)
                        {
                            lintQuarter = 1;
                            idtEffectiveDate = new DateTime(adtGivenDate.Year, 3, DateTime.DaysInMonth(adtGivenDate.Year, 3));
                        }
                        else if (adtGivenDate.Month >= 7 && adtGivenDate.Month <= 9)
                        {
                            lintQuarter = 2;
                            idtEffectiveDate = new DateTime(adtGivenDate.Year, 6, DateTime.DaysInMonth(adtGivenDate.Year, 6));
                        }
                        else if (adtGivenDate.Month >= 10 && adtGivenDate.Month <= 12)
                        {
                            lintQuarter = 3;
                            idtEffectiveDate = new DateTime(adtGivenDate.Year, 9, DateTime.DaysInMonth(adtGivenDate.Year, 9));
                        }
                        //calculating QY for iap and posting to contribution
                        //Ticket# 87831
                        //RID 99556 null check added abusCalculationHeader != null 
                        if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)//PIR 985
                        {
                            //151767
                            //if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == "DSBL")
                            //{
                            //    idecQuarterlyAllocationIAP = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecIAPBalance, lintQuarter, ref ldecFactor);

                            //}
                        }
                        else
                        {
                            idecQuarterlyAllocationIAP = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecIAPBalance, lintQuarter, ref ldecFactor);
                        }


                        if (idecQuarterlyAllocationIAP != 0.00M)
                        {
                            lblnEligibleForRY = true;
                            ldtIAPBalanceAsOfDate = idtEffectiveDate;
                        }
                        ldecIAPBalance += idecQuarterlyAllocationIAP;


                        //calculating QY for L52 and posting to contribution
                        //Ticket# 87831
                        //RID 99556 null check added abusCalculationHeader != null 
                        if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)//PIR 985
                        {
                            //151767
                            //if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == "DSBL")
                            //{
                            //    idecQuarterlyAllocationL52Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal52SpecialAccountBalance, lintQuarter, ref ldecFactor);

                            //}
                        }
                        else
                        {
                            idecQuarterlyAllocationL52Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal52SpecialAccountBalance, lintQuarter, ref ldecFactor);
                        }

                        ldecLocal52SpecialAccountBalance += idecQuarterlyAllocationL52Spl;
                        //PIR 1015
                        if ((lintQuarter == 1 || lintQuarter == 2 || lintQuarter == 3) && !ablnIsQdroCalculation && idecQuarterlyAllocationL52Spl == 0 && aclbBenefitCalculationDetail != null && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                              item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                              item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag = busConstant.FLAG_YES;
                        }
                        else if ((lintQuarter == 1 || lintQuarter == 2 || lintQuarter == 3) && ablnIsQdroCalculation && idecQuarterlyAllocationL52Spl == 0 && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                              item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                              item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.adjustment_l52spl_payment_flag = busConstant.FLAG_YES;
                        }

                        //calculating QY for L161 and posting to contribution
                        //Ticket# 87831
                        //RID 99556 null check added abusCalculationHeader != null 
                        if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)//PIR 985
                        {
                            if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == "DSBL")
                            {
                                idecQuarterlyAllocationL161Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal161SpecialAccountBalance, lintQuarter, ref ldecFactor);

                            }
                        }
                        else
                        {
                            idecQuarterlyAllocationL161Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal161SpecialAccountBalance, lintQuarter, ref ldecFactor);
                        }

                        ldecLocal161SpecialAccountBalance += idecQuarterlyAllocationL161Spl;
                        //PIR 1015
                        if ((lintQuarter == 1 || lintQuarter == 2 || lintQuarter == 3) && !ablnIsQdroCalculation && idecQuarterlyAllocationL161Spl == 0 && aclbBenefitCalculationDetail != null && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_YES;
                        }
                        if ((lintQuarter == 1 || lintQuarter == 2 || lintQuarter == 3) && ablnIsQdroCalculation && idecQuarterlyAllocationL161Spl == 0 && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_YES;
                        }


                        //For MD particpants do not calculate RY allocations
                        bool lblnIsMDParticipant = false;
                        if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE
                            && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                        {
                            if (aclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.benefit_subtype_value == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                            {
                                lblnIsMDParticipant = true;
                            }
                        }

                        //checking eligible for RY allocation
                        if ((lblnEligibleForRY || (adtGivenDate.Month == 1 || adtGivenDate.Month == 2 || adtGivenDate.Month == 3))
                              && adecTotalIAPHours >= 400 && !lblnIsMDParticipant)
                        {
                            //calculating RY for iap and posting to contribution
                            idecRYAlloc2 = Math.Round(adecIAPHoursA2 * Convert.ToDecimal(HelperUtil.GetData1ByCodeValue(52, busConstant.IAPAllocation2Factor)), 2, MidpointRounding.AwayFromZero);
                            ldecIAPBalance += idecRYAlloc2;
                            idecRYAlloc4 = adecIAPPercent;
                            ldecIAPBalance += idecRYAlloc4;
                        }

                        if (!ablnIsQdroCalculation)
                        {
                            if (aclbBenefitCalculationDetail != null && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).IsNullOrEmpty() && idecQuarterlyAllocationIAP == 0 && (lintQuarter == 1 || lintQuarter == 2 || lintQuarter == 3))//PIR 1015
                            {
                                if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value != busConstant.BENEFIT_TYPE_DISABILITY || (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY &&
                                    adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date))
                                {
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                   ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                    item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                                 || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_YES;
                                }
                            }

                            if (abusCalculationHeader != null && aclbBenefitCalculationDetail != null && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value != busConstant.BENEFIT_TYPE_DEATH_POST_RETIREMENT)
                            {
                                if (!aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).IsNullOrEmpty())
                                {
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.idecRate = ldecFactor;
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.idecQuaterllyAllocation = idecQuarterlyAllocationIAP;
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.iintQuater = lintQuarter;
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.idecTotal = ldecIAPBalance;
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                               ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                             || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.idecPrevYearEndingBalance = ldecIAPBalance - idecQuarterlyAllocationIAP;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (!ablnIsQdroCalculation)
                        {
                            if (ldecIAPBalance > 0 && aclbBenefitCalculationDetail != null && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                   ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                    item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                 || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).IsNullOrEmpty())
                            {
                                if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value != busConstant.BENEFIT_TYPE_DISABILITY || (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY &&
                                    adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date))
                                {
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                       ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                        item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                     || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_YES;
                                }
                            }
                            if (ldecLocal52SpecialAccountBalance > 0 && aclbBenefitCalculationDetail != null && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag = busConstant.FLAG_YES;
                            }
                            if (ldecLocal161SpecialAccountBalance > 0 && aclbBenefitCalculationDetail != null && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_YES;
                            }
                        }
                        else
                        {



                            if (aintQDROBalanceAsOfYear > 0 && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                   ((item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                    item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                 || (item.icdoQdroCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoQdroCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).IsNullOrEmpty())
                            {

                                if (ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year < aintQDROBalanceAsOfYear) // PIR - 1015
                                {
                                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                  ((item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                   item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                || (item.icdoQdroCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoQdroCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoQdroCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_YES;
                                }

                            }
                            if (ldecLocal52SpecialAccountBalance > 0 && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                if (ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year < aintQDROBalanceAsOfYear) // PIR - 1015
                                {
                                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.adjustment_l52spl_payment_flag = busConstant.FLAG_YES;
                                }
                            }
                            if (ldecLocal161SpecialAccountBalance > 0 && aclbQdroCalculationDetail != null && !aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                if (ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year < aintQDROBalanceAsOfYear) // PIR - 1015
                                {
                                    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                    item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_YES;
                                }
                            }
                        }
                    }
                    #endregion
                }

                #region DRO
                if (ablnIsQdroCalculation == busConstant.BOOL_TRUE)
                {
                    if (aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0 && (!aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                  item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO &&
                                  item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO).IsNullOrEmpty()) && !ablnLocal161SpecialAccount && !ablnLocal52SpecialAccount)
                    {
                        if (aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.accrued_benefit_amt != 0)
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = 0;
                        }
                        else
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecIAPBalance;
                        }
                    }
                    else if (ablnLocal161SpecialAccount && (!aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty()))
                    {
                        if (aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.accrued_benefit_amt != 0)
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                 item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = 0;
                        }
                        else
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecLocal161SpecialAccountBalance;
                        }
                    }
                    else if (ablnLocal52SpecialAccount && (!aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).IsNullOrEmpty()))
                    {
                        if (aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.accrued_benefit_amt != 0)
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = 0;
                        }
                        else
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoQdroCalculationDetail.early_reduced_benefit_amount = ldecLocal52SpecialAccountBalance;
                        }
                    }

                    if (abusQdroCalculationHeader.IsNotNull() && (!aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                       item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO).IsNullOrEmpty()))
                    {
                        if (abusQdroCalculationHeader.icdoQdroCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                       item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.iap_balance_amount = ldecIAPBalance;

                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                       item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.iap_as_of_date = ldtIAPBalanceAsOfDate;
                        }
                        else
                        {
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                       item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.iap_balance_amount = ldecIAPBalance;
                            aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoQdroCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                                       item.icdoQdroCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO).FirstOrDefault().icdoQdroCalculationDetail.iap_as_of_date = ldtIAPBalanceAsOfDate;
                        }
                    }
                }
                #endregion

                #region DISABILITY
                else if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateIAPBenefit)
                    {
                        if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date)
                        {
                            idecIAPBalanceAsOnAwardedOnDate = ldecIAPBalance;
                            idecL161BalanceAsOnAwardedOnDate = ldecLocal161SpecialAccountBalance;
                            idecL152BalanceAsOnAwardedOnDate = ldecLocal52SpecialAccountBalance;
                            idtBalanceAsOnAwardedOnDate = ldtIAPBalanceAsOfDate;

                        }
                        //else if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.ssa_disability_onset_date)
                        //{
                        //    idecIAPBalanceAsOnOnsetDate = ldecIAPBalance;
                        //    idecL161BalanceAsOnOnsetDate = ldecLocal161SpecialAccountBalance;
                        //    idecL52BalanceAsOnOnsetDate = ldecLocal52SpecialAccountBalance;
                        //    idtBalanceAsOnOnsetDate = ldtIAPBalanceAsOfDate;
                        //}

                        if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2 ||
                            adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                        {
                            if (ldecIAPBalance > idecIAPBalanceAsOnAwardedOnDate)
                            {
                                if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                {
                                    (abusCalculationHeader as busDisabiltyBenefitCalculation).idtLatestDate = abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date;

                                }
                                else if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2)
                                {
                                    (abusCalculationHeader as busDisabiltyBenefitCalculation).idtLatestDate = abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2;

                                }
                                idecPrevIapBalance = ldecIAPBalance;
                                idecPrevL161SpecialAccountBalance = ldecLocal161SpecialAccountBalance;
                                idecPrevL52SpecialAccountBalance = ldecLocal52SpecialAccountBalance;
                                idtPrevBalanceAsOfYear = ldtIAPBalanceAsOfDate;
                            }
                            //else if (idecIAPBalanceAsOnOnsetDate > ldecIAPBalance && idecIAPBalanceAsOnOnsetDate > idecIAPBalanceAsOnAwardedOnDate)
                            //{
                            //    (abusCalculationHeader as busDisabiltyBenefitCalculation).idtLatestDate = abusCalculationHeader.icdoBenefitCalculationHeader.ssa_disability_onset_date;
                            //    idecPrevIapBalance = idecIAPBalanceAsOnOnsetDate;
                            //    idecPrevL161SpecialAccountBalance = idecL161BalanceAsOnOnsetDate;
                            //    idecPrevL52SpecialAccountBalance = idecL52BalanceAsOnOnsetDate;
                            //    idtPrevBalanceAsOfYear = idtBalanceAsOnOnsetDate;
                            //}
                            else
                            {
                                (abusCalculationHeader as busDisabiltyBenefitCalculation).idtLatestDate = abusCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date;
                                idecPrevIapBalance = idecIAPBalanceAsOnAwardedOnDate;
                                idecPrevL161SpecialAccountBalance = idecL161BalanceAsOnAwardedOnDate;
                                idecPrevL52SpecialAccountBalance = idecL152BalanceAsOnAwardedOnDate;
                                idtPrevBalanceAsOfYear = idtBalanceAsOnAwardedOnDate;
                            }
                        }


                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() &&
                                                                       item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = idecPrevIapBalance;

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() &&
                                                                       item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = idtPrevBalanceAsOfYear;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = idecPrevIapBalance;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = idtPrevBalanceAsOfYear;
                        }
                        if (!ablnExecuteIAPAllocation && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                           ((item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_NO &&
                                                            item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_NO)
                                                         || (item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()))).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_YES;
                        }

                    }

                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateL52SplAccBenefit)
                    {
                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.local52_special_acct_bal_amount = idecPrevL52SpecialAccountBalance;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.local52_special_acct_bal_amount = idecPrevL52SpecialAccountBalance;
                        }
                    }

                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateL161SplAccBenefit)
                    {
                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.local161_special_acct_bal_amount = idecPrevL161SpecialAccountBalance;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.local161_special_acct_bal_amount = idecPrevL161SpecialAccountBalance;
                        }
                    }
                }
                #endregion

                #region DEATH_POST_RETIREMENT
                else if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_POST_RETIREMENT)
                {
                    if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0 &&
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID
                            && item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).Count() > 0)
                    {

                        ProcessQDROOffset(abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID
                            && item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).First()
                          , abusCalculationHeader.icdoBenefitCalculationHeader.person_id, ref ldecLocal52SpecialAccountBalance, ablnL52SplAccFlag: true, astrCalculationType: busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL);


                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID
                            && item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.local52_special_acct_bal_amount = ldecLocal52SpecialAccountBalance;
                    }
                    else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0 &&
                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID
                            && item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).Count() > 0)
                    {

                        ProcessQDROOffset(abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID
                      && item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).First()
                    , abusCalculationHeader.icdoBenefitCalculationHeader.person_id, ref ldecLocal161SpecialAccountBalance, ablnL161SplAccFlag: true, astrCalculationType: busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL);



                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID
                           && item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.local161_special_acct_bal_amount = ldecLocal161SpecialAccountBalance;
                    }
                }
                #endregion

                #region RETR_DEATH
                else
                {
                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateIAPBenefit)
                    {
                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() &&
                                                                       item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = ldecIAPBalance;

                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() &&
                                                                       item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty()).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = ldtIAPBalanceAsOfDate;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = ldecIAPBalance;
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = ldtIAPBalanceAsOfDate;
                        }

                    }

                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateL52SplAccBenefit)
                    {
                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.l52_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.local52_special_acct_bal_amount = ldecLocal52SpecialAccountBalance;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.local52_special_acct_bal_amount = ldecLocal52SpecialAccountBalance;
                        }
                    }

                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateL161SplAccBenefit)
                    {
                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.l161_spl_acc_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.local161_special_acct_bal_amount = ldecLocal161SpecialAccountBalance;
                        }
                        else
                        {
                            aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.local161_special_acct_bal_amount = ldecLocal161SpecialAccountBalance;
                        }
                    }


                }

                #endregion
            }

            //if (ablnIsQdroCalculation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0 &&
            //    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            //{
            //    lbusBenefitCalculationDetail.i = aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.person_account_id;
            //  //  aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
            //}
            //else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            //{
            //    lintPersonAccountID = aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;

            //}
        }



        public decimal GetIAPAndSpecialAdjustmentBalance(bool ablnIsQdroCalculation, Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail,
                                                 busBenefitCalculationHeader abusCalculationHeader,
                                                 DateTime adtGivenDate, decimal adecTotalIAPHours, decimal adecIAPHoursA2, decimal adecIAPPercent, int maxYear, string lstrFundsType, DateTime adtRetirementDateForPostingContributions, out bool IsAdjustmentDone,
                                                  bool ablnExecuteIAPAllocation = true, bool ablnLocal52SpecialAccount = false, bool ablnLocal161SpecialAccount = false, int person_account_id = 0)
        {
            //Gets Not Null in option 2 for disability.

            //if (ibusLatestIAPAllocationSummaryAsofYear == null)
            IsAdjustmentDone = false;
            if (ablnIsQdroCalculation == busConstant.BOOL_TRUE)
            {
                LoadIAPAllocationSummaryAsofYear(maxYear);
            }
            else
            {
                LoadIAPAllocationSummaryAsofYear(maxYear); //Its dependens on the fate of when the BATCH is RUN
            }



            // Step 1. Fetch the IAP Balance from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION table
            decimal ldecIAPBalance = busConstant.ZERO_DECIMAL, ldecFactor = 0;
            decimal ldecLocal52SpecialAccountBalance = busConstant.ZERO_DECIMAL;
            decimal ldecLocal161SpecialAccountBalance = busConstant.ZERO_DECIMAL;
            DateTime ldtIAPBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal52SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal161SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            busIAPAllocationHelper lobjIAPHelper = new busIAPAllocationHelper();
            DataTable ldtbIAPBalance = new DataTable();
            busPersonAccountRetirementContribution lobjContribution = new busPersonAccountRetirementContribution();
            int lintPersonAccountId = 0, aintReferenceID = 0;

            //query to get the iap account balance
            if (person_account_id != 0)
            {
                if (ablnIsQdroCalculation)
                {

                }
                else
                {
                    lintPersonAccountId = person_account_id;
                    aintReferenceID = person_account_id;
                    ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceBetweenYears",
                        new object[3] { person_account_id
                                    ,adtGivenDate.Year,adtGivenDate});
                }
            }
            else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                lintPersonAccountId = aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
                ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceBetweenYears",
                    new object[3] { aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id
                                    //,aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date.Year
                                    ,adtGivenDate.Year,adtGivenDate});
            }

            if (ldtbIAPBalance.IsNotNull() && ldtbIAPBalance.Rows.Count > 0)
            {
                ldecIAPBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][0]);
                ldecLocal52SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][1]);
                ldecLocal161SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][2].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][2]);
                ldtIAPBalanceAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbIAPBalance.Rows[0][3].IsDBNull()) ? DateTime.MinValue : ldtbIAPBalance.Rows[0][3]);

                if (ablnExecuteIAPAllocation)
                {
                    bool iapAllocationYearly = false;
                    #region Code for IAP and Special Account Quaterly Allocations
                    Boolean aboolSpecialCases = false;
                    string astrGoliveDate = HelperUtil.GetData1ByCodeValue(52, "GLDT");
                    if (astrGoliveDate.IsNotNullOrEmpty())
                    {
                        DateTime adtGoLiveDate = new DateTime();
                        adtGoLiveDate = Convert.ToDateTime(astrGoliveDate);
                        //if (!((ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year + 1) == adtGivenDate.Year))
                        //{
                        if (person_account_id != 0 && adtGoLiveDate.Year > adtGivenDate.Year)
                        {
                            aboolSpecialCases = true;
                        }
                        //}
                    }
                    //if the latest allocation year in one year prior to the given date then, participant is eligible for QY and RY
                    if ((ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year + 1) == adtGivenDate.Year || aboolSpecialCases || abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        //quarterly allocation
                        int lintQuarter = 0;
                        bool lblnEligibleForRY = false;

                        //determining the eligible quarter
                        if (adtGivenDate.Month >= 4 && adtGivenDate.Month <= 6 && aboolSpecialCases != true)
                        {
                            lintQuarter = 1;
                            idtEffectiveDate = new DateTime(adtGivenDate.Year, 3, DateTime.DaysInMonth(adtGivenDate.Year, 3));
                        }
                        else if (adtGivenDate.Month >= 7 && adtGivenDate.Month <= 9 && aboolSpecialCases != true)
                        {
                            lintQuarter = 2;
                            idtEffectiveDate = new DateTime(adtGivenDate.Year, 6, DateTime.DaysInMonth(adtGivenDate.Year, 6));
                        }
                        else if (adtGivenDate.Month >= 10 && adtGivenDate.Month <= 12 && aboolSpecialCases != true)
                        {
                            lintQuarter = 3;
                            idtEffectiveDate = new DateTime(adtGivenDate.Year, 9, DateTime.DaysInMonth(adtGivenDate.Year, 9));
                        }
                        else
                        {
                            iapAllocationYearly = true;
                            ldecIAPBalance = 0M; ldecLocal52SpecialAccountBalance = 0M; ldecLocal161SpecialAccountBalance = 0M;
                            if (person_account_id != 0)
                            {
                                lintPersonAccountId = person_account_id;
                                aintReferenceID = person_account_id;
                                ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceForYear",
                                    new object[1] { person_account_id
                                   });
                            }
                            else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
                            {
                                lintPersonAccountId = aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
                                ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceForYear",
                                    new object[1] { aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id
                                    });
                            }

                            ldecIAPBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][0]);
                            ldecLocal52SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][1]);
                            ldecLocal161SpecialAccountBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][2].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][2]);
                            ldtIAPBalanceAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbIAPBalance.Rows[0][3].IsDBNull()) ? DateTime.MinValue : ldtbIAPBalance.Rows[0][3]);
                            if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date)
                                {
                                    idecIAPBalanceAsOnAwardedOnDate = ldecIAPBalance;
                                    idecL161BalanceAsOnAwardedOnDate = ldecLocal161SpecialAccountBalance;
                                    idecL152BalanceAsOnAwardedOnDate = ldecLocal52SpecialAccountBalance;
                                    idtBalanceAsOnAwardedOnDate = ldtIAPBalanceAsOfDate;
                                    idecQuarterlyAllocationIAPAsOnAwardedOnDate = idecQuarterlyAllocationIAP;

                                }
                                else if (ldecIAPBalance < idecIAPBalanceAsOnAwardedOnDate)
                                {
                                    ldecIAPBalance = idecIAPBalanceAsOnAwardedOnDate;
                                    ldecLocal161SpecialAccountBalance = idecL152BalanceAsOnAwardedOnDate;
                                    ldecLocal52SpecialAccountBalance = idecL152BalanceAsOnAwardedOnDate;
                                    ldtIAPBalanceAsOfDate = idtBalanceAsOnAwardedOnDate;
                                    idecQuarterlyAllocationIAP = idecQuarterlyAllocationIAPAsOnAwardedOnDate;
                                }
                            }


                            if (ldecLocal52SpecialAccountBalance != 0 && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                  item.icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                  item.icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment += ldecLocal52SpecialAccountBalance;
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                     item.icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_YES;

                                IsAdjustmentDone = true;
                            }

                            //calculating QY for L161 and posting to contribution
                            //idecQuarterlyAllocationL161Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal161SpecialAccountBalance, lintQuarter, ref ldecFactor);
                            //ldecLocal161SpecialAccountBalance += idecQuarterlyAllocationL161Spl;

                            if (ldecLocal161SpecialAccountBalance != 0 && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                   item.icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {

                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                   item.icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment = ldecLocal161SpecialAccountBalance;
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                      item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_NO;
                                IsAdjustmentDone = true;

                            }


                            //For MD particpants do not calculate RY allocations
                            bool lblnIsMDParticipant = false;
                            if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE
                                && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                            {
                                if (aclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.benefit_subtype_value == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                                {
                                    lblnIsMDParticipant = true;
                                }
                            }

                            if (adecTotalIAPHours >= 400 && !lblnIsMDParticipant)
                            {
                                //calculating RY for iap and posting to contribution
                                idecRYAlloc2 = Math.Round(adecIAPHoursA2 * Convert.ToDecimal(HelperUtil.GetData1ByCodeValue(52, busConstant.IAPAllocation2Factor)), 2, MidpointRounding.AwayFromZero);
                                ldecIAPBalance += idecRYAlloc2;
                                idecRYAlloc4 = adecIAPPercent;
                                ldecIAPBalance += idecRYAlloc4;
                            }
                            if (ldecIAPBalance != 0 && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                  item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {

                                if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                                {
                                    if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                    {
                                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                        item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = ldtIAPBalanceAsOfDate;


                                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                      item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment += ldecIAPBalance;

                                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                              item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_NO;
                                        IsAdjustmentDone = true;
                                    }
                                }
                                else
                                {
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                          item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment += ldecIAPBalance;
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                          item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_NO;
                                    IsAdjustmentDone = true;
                                }

                            }
                            if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                {
                                    if (person_account_id != 0 && (ldecIAPBalance > 0))
                                    {
                                        IsAdjustmentDone = true;
                                    }
                                }
                            }
                            else if ((ldecIAPBalance != decimal.Zero || idecQuarterlyAllocationL52Spl != decimal.Zero ||
                                            this.idecQuarterlyAllocationL161Spl != decimal.Zero))//there could be -ve amount so greater than 0 check is invalid.
                            {
                                IsAdjustmentDone = true;
                            }
                        }

                        if (!iapAllocationYearly)
                        {
                            //calculating QY for iap and posting to contribution
                            idecQuarterlyAllocationIAP = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecIAPBalance, lintQuarter, ref ldecFactor);
                            if (idecQuarterlyAllocationIAP != 0.00M)
                            {
                                lblnEligibleForRY = true;

                            }

                            ldecIAPBalance += idecQuarterlyAllocationIAP;
                            DataTable ldtbIAPBalancePaid = new DataTable();
                            if (person_account_id != 0)
                            {
                                lintPersonAccountId = person_account_id;
                                aintReferenceID = person_account_id;
                                //PROD PIR 764
                                //ldtbIAPBalancePaid = busBase.Select("cdoPersonAccountRetirementContribution.GetPaidIAPBalanceBetweenYears",
                                //    new object[2] { person_account_id 
                                //    ,adtGivenDate});
                                ldtbIAPBalancePaid = busBase.Select("cdoPersonAccountRetirementContribution.GetPaidIAPBalanceBetweenYears",
                                   new object[1] { person_account_id });
                            }
                            else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
                            {
                                lintPersonAccountId = aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
                                //PROD PIR 764
                                //ldtbIAPBalancePaid = busBase.Select("cdoPersonAccountRetirementContribution.GetPaidIAPBalanceBetweenYears",
                                //    new object[2] { aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id
                                //    ,adtGivenDate});
                                ldtbIAPBalancePaid = busBase.Select("cdoPersonAccountRetirementContribution.GetPaidIAPBalanceBetweenYears",
                                    new object[1] { person_account_id });
                            }
                            if (ldtbIAPBalancePaid.IsNotNull() && ldtbIAPBalancePaid.Rows.Count > 0)
                            {
                                ldecIAPBalance = ldecIAPBalance + Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalancePaid.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalancePaid.Rows[0][0]);
                                ldecLocal52SpecialAccountBalance = ldecLocal52SpecialAccountBalance + Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalancePaid.Rows[0][1].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalancePaid.Rows[0][1]);
                                ldecLocal161SpecialAccountBalance = ldecLocal161SpecialAccountBalance + Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalancePaid.Rows[0][2].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalancePaid.Rows[0][2]);

                            }

                            //calculating QY for L52 and posting to contribution
                            idecQuarterlyAllocationL52Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal52SpecialAccountBalance, lintQuarter, ref ldecFactor);
                            ldecLocal52SpecialAccountBalance += idecQuarterlyAllocationL52Spl;


                            if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date)
                                {
                                    idecIAPBalanceAsOnAwardedOnDate = ldecIAPBalance;
                                    idtBalanceAsOnAwardedOnDate = ldtIAPBalanceAsOfDate;
                                    idtAwardedOnDateEffectiveDate = idtEffectiveDate;
                                    idecQuarterlyAllocationIAPAsOnAwardedOnDate = idecQuarterlyAllocationIAP;
                                }
                                else if (ldecIAPBalance < idecIAPBalanceAsOnAwardedOnDate)
                                {
                                    ldecIAPBalance = idecIAPBalanceAsOnAwardedOnDate;
                                    ldtIAPBalanceAsOfDate = idtBalanceAsOnAwardedOnDate;
                                    idtEffectiveDate = idtAwardedOnDateEffectiveDate;
                                    idecQuarterlyAllocationIAP = idecQuarterlyAllocationIAPAsOnAwardedOnDate;
                                }
                            }

                            if (lstrFundsType == busConstant.FundTypeLocal52SpecialAccount && idecQuarterlyAllocationL52Spl != 0 && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                  item.icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                  item.icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment += ldecLocal52SpecialAccountBalance;
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                     item.icdoBenefitCalculationDetail.adjustment_l52spl_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_YES;
                                IsAdjustmentDone = true;
                            }


                            //calculating QY for L161 and posting to contribution
                            idecQuarterlyAllocationL161Spl = lobjIAPHelper.CalculateAllocation1Amount(adtGivenDate.Year, ldecLocal161SpecialAccountBalance, lintQuarter, ref ldecFactor);
                            ldecLocal161SpecialAccountBalance += idecQuarterlyAllocationL161Spl;

                            if (lstrFundsType == busConstant.FundTypeLocal161SpecialAccount && idecQuarterlyAllocationL161Spl != 0 && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                   item.icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                   item.icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment = ldecLocal161SpecialAccountBalance;
                                aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                      item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_l161spl_payment_flag = busConstant.FLAG_NO;
                                IsAdjustmentDone = true;
                            }

                            //For MD particpants do not calculate RY allocations
                            bool lblnIsMDParticipant = false;
                            if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ESTIMATE
                                && aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Count > 0)
                            {
                                if (aclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.benefit_subtype_value == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                                {
                                    lblnIsMDParticipant = true;
                                }
                            }

                            //checking eligible for RY allocation
                            //checking eligible for RY allocation
                            if (lblnEligibleForRY
                                    && adecTotalIAPHours >= 400 && !lblnIsMDParticipant)
                            {
                                //calculating RY for iap and posting to contribution
                                idecRYAlloc2 = Math.Round(adecIAPHoursA2 * Convert.ToDecimal(HelperUtil.GetData1ByCodeValue(52, busConstant.IAPAllocation2Factor)), 2, MidpointRounding.AwayFromZero);
                                ldecIAPBalance += idecRYAlloc2;
                                idecRYAlloc4 = adecIAPPercent;
                                ldecIAPBalance += idecRYAlloc4;

                                if (abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                                {
                                    if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date)
                                    {
                                        idecRYIAPBalanceAsOnAwardedOnDate = ldecIAPBalance;
                                        idecRYAlloc2AsOnAwardedOnDate = idecRYAlloc2;
                                        idecRYAlloc4AsOnAwardedOnDate = adecIAPPercent;
                                        idtBalanceAsOnAwardedOnDate = adtGivenDate;
                                    }
                                    else if (ldecIAPBalance < idecRYIAPBalanceAsOnAwardedOnDate)
                                    {
                                        ldecIAPBalance = idecRYIAPBalanceAsOnAwardedOnDate;
                                        idecRYAlloc4 = idecRYAlloc4AsOnAwardedOnDate;
                                        idecRYAlloc2 = idecRYAlloc2AsOnAwardedOnDate;
                                        ldtIAPBalanceAsOfDate = idtBalanceAsOnAwardedOnDate;
                                    }
                                }
                            }
                            if (ldecIAPBalance != 0 && !aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                  item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).IsNullOrEmpty())
                            {
                                if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                                {
                                    if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                    {
                                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                      item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = idtEffectiveDate;

                                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                      item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment += ldecIAPBalance;
                                        aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                              item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_NO;
                                        IsAdjustmentDone = true;
                                    }
                                }
                                else
                                {
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                          item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment += ldecIAPBalance;
                                    aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                          item.icdoBenefitCalculationDetail.adjustment_iap_payment_flag == busConstant.FLAG_YES).FirstOrDefault().icdoBenefitCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_NO;
                                    IsAdjustmentDone = true;
                                }
                            }
                            if (person_account_id != 0 && (ldecIAPBalance > 0 || idecQuarterlyAllocationL52Spl > 0 ||
                                            this.idecQuarterlyAllocationL161Spl > 0))
                            {
                                if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                                {
                                    if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                    {
                                        IsAdjustmentDone = true;
                                    }
                                }
                                else
                                {
                                    IsAdjustmentDone = true;
                                }
                            }
                            if (idecQuarterlyAllocationIAP != 0 || idecQuarterlyAllocationL52Spl != 0 ||
                                            this.idecQuarterlyAllocationL161Spl != 0)//PIR 985
                            {
                                busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                                if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                                {
                                    if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                    {
                                        lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenDate,//idtEffectiveDate,     //rohan06222013
                                        DateTime.Now, ldtIAPBalanceAsOfDate.Year, adecIAPBalanceAmount: idecQuarterlyAllocationIAP, adec52SplAccountBalance: idecQuarterlyAllocationL52Spl,
                                        adec161SplAccountBalance: idecQuarterlyAllocationL161Spl, astrTransactionType: busConstant.TRANSACTION_TYPE_QUARTERLY_ALLOCATION, astrContributionType: busConstant.RCContributionTypeAllocation1,
                                        aintReferenceID: aintReferenceID);
                                    }
                                }
                                else
                                {
                                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenDate,//idtEffectiveDate,         //rohan06222013
                                    DateTime.Now, adtGivenDate.Year, adecIAPBalanceAmount: idecQuarterlyAllocationIAP, adec52SplAccountBalance: idecQuarterlyAllocationL52Spl,
                                    adec161SplAccountBalance: idecQuarterlyAllocationL161Spl, astrTransactionType: busConstant.TRANSACTION_TYPE_QUARTERLY_ALLOCATION, astrContributionType: busConstant.RCContributionTypeAllocation1,
                                    aintReferenceID: aintReferenceID);
                                }
                            }
                        }

                        if (idecRYAlloc2 != 0)//PIR 985
                        {
                            busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                            if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                {
                                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenDate,//idtEffectiveDate,
                                    DateTime.Now, ldtIAPBalanceAsOfDate.Year, adecIAPBalanceAmount: idecRYAlloc2,
                                     astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation2, aintReferenceID: aintReferenceID);

                                }
                            }
                            else
                            {
                                lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenDate,//idtEffectiveDate,
                                    DateTime.Now, adtGivenDate.Year, adecIAPBalanceAmount: idecRYAlloc2,
                                     astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation2, aintReferenceID: aintReferenceID);
                            }
                        }

                        if (idecRYAlloc4 != 0)
                        {
                            busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };

                            if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                            {
                                if (adtGivenDate == abusCalculationHeader.icdoBenefitCalculationHeader.retirement_date)
                                {
                                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenDate,//idtEffectiveDate,
                                    DateTime.Now, ldtIAPBalanceAsOfDate.Year, adecIAPBalanceAmount: idecRYAlloc4,
                                    astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation4, aintReferenceID: aintReferenceID);

                                }
                            }
                            else
                            {
                                lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenDate,//idtEffectiveDate,
                                    DateTime.Now, adtGivenDate.Year, adecIAPBalanceAmount: idecRYAlloc4,
                                     astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation4, aintReferenceID: aintReferenceID);
                            }
                        }


                    }

                    if (person_account_id == 0)
                    {
                        aclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.Update();
                    }
                    #endregion
                }


            }
            if (person_account_id == 0)
            {
                return aclbBenefitCalculationDetail.FirstOrDefault().icdoBenefitCalculationDetail.adjusment_payment;
            }
            else
            {
                if (lstrFundsType == busConstant.FundTypeLocal52SpecialAccount)
                {
                    return ldecLocal52SpecialAccountBalance;
                }
                else if (lstrFundsType == busConstant.FundTypeLocal161SpecialAccount)
                {
                    return ldecLocal161SpecialAccountBalance;
                }
                return ldecIAPBalance;

            }

        }

        public decimal GetIAPAndSpecialAdjustmentBalanceForAlternatePayees(busQdroCalculationHeader abusQdroCalculationHeader,
                                                   int aintPayeeAccountID,
                                                 DateTime adtGivenFromDate, DateTime adtGivenToDate, decimal adecTotalIAPHours, decimal adecIAPHoursA2, decimal adecIAPPercent, int maxYear, string lstrFundsType, out bool IsAdjustmentDone,
                                                  bool ablnExecuteIAPAllocation = true, bool ablnLocal52SpecialAccount = false, bool ablnLocal161SpecialAccount = false)
        {
            //Gets Not Null in option 2 for disability.
            //Gets Not Null in option 2 for disability.
            Collection<busQdroCalculationDetail> aclbQdroCalculationDetail = new Collection<busQdroCalculationDetail>();
            if (abusQdroCalculationHeader.IsNotNull())
            {
                aclbQdroCalculationDetail = abusQdroCalculationHeader.iclbQdroCalculationDetail;
            }
            //if (ibusLatestIAPAllocationSummaryAsofYear == null)
            IsAdjustmentDone = false;
            LoadIAPAllocationSummaryAsofYear(maxYear);
            // Step 1. Fetch the IAP Balance from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION table
            decimal ldecIAPBalance = busConstant.ZERO_DECIMAL, ldecFactor = 0;
            decimal ldecLocal52SpecialAccountBalance = busConstant.ZERO_DECIMAL;
            decimal ldecLocal161SpecialAccountBalance = busConstant.ZERO_DECIMAL;
            decimal ldecAdjustedBalance = decimal.Zero;
            DateTime ldtIAPBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal52SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal161SpecialAccountBalanceAsOfDate = DateTime.MinValue;

            busIAPAllocationHelper lobjIAPHelper = new busIAPAllocationHelper();
            //DataTable ldtbIAPBalance = new DataTable();
            busPersonAccountRetirementContribution lobjContribution = new busPersonAccountRetirementContribution();
            int lintPersonAccountId = 0, aintReferenceID = 0;
            bool lblnGetAdjustments = false;


            //query to get the iap account balance
            if (aclbQdroCalculationDetail.IsNullOrEmpty())
            {
                //Conversion Record No Calculation.
                DataTable ldtbIAPBalance = busBase.Select("cdoPaymentHistoryHeader.GetGrossAmountPaidToPart", new object[1] { aintPayeeAccountID });
                ldecIAPBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][0]);
            }
            else if (aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0 &&
                 aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                //Calculation Exists For Alternate Payee
                lintPersonAccountId = aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.person_account_id;
                ldecIAPBalance = aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.iap_balance_amount;
                ldtIAPBalanceAsOfDate = aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.iap_as_of_date;

            }
            if (ldecIAPBalance > decimal.Zero)
            {
                if (ablnExecuteIAPAllocation)
                {
                    bool iapAllocationYearly = false;
                    #region Code for IAP and Special Account Quaterly Allocations
                    Boolean aboolSpecialCases = false;
                    string astrGoliveDate = HelperUtil.GetData1ByCodeValue(52, "GLDT");
                    if (astrGoliveDate.IsNotNullOrEmpty())
                    {
                        DateTime adtGoLiveDate = new DateTime();
                        adtGoLiveDate = Convert.ToDateTime(astrGoliveDate);
                        if (aclbQdroCalculationDetail.IsNullOrEmpty() && adtGoLiveDate.Year > adtGivenToDate.Year)
                        {
                            aboolSpecialCases = true;
                        }
                    }
                    //if the latest allocation year in one year prior to the given date then, participant is eligible for QY and RY
                    if ((ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year + 1) == adtGivenToDate.Year || aboolSpecialCases)
                    {
                        //quarterly allocation
                        int lintQuarter = 0;
                        bool lblnEligibleForRY = false;

                        //determining the eligible quarter
                        if (adtGivenToDate.Month == 3 && aboolSpecialCases != true)
                        {
                            lintQuarter = 1;
                            idtEffectiveDate = new DateTime(adtGivenToDate.Year, 3, DateTime.DaysInMonth(adtGivenToDate.Year, 3));
                        }
                        else if (adtGivenToDate.Month == 6 && aboolSpecialCases != true)
                        {
                            lintQuarter = 2;
                            idtEffectiveDate = new DateTime(adtGivenToDate.Year, 6, DateTime.DaysInMonth(adtGivenToDate.Year, 6));
                        }
                        else if (adtGivenToDate.Month == 9 && aboolSpecialCases != true)
                        {
                            lintQuarter = 3;
                            idtEffectiveDate = new DateTime(adtGivenToDate.Year, 9, DateTime.DaysInMonth(adtGivenToDate.Year, 9));
                        }
                        else
                        {
                            lintQuarter = 4;
                        }

                        //checking eligible for RY allocation
                        if ((lblnEligibleForRY || (adtGivenToDate.Month == 1 || adtGivenToDate.Month == 2 || adtGivenToDate.Month == 3))
                         && adecTotalIAPHours >= 400)
                        {
                            //calculating RY for iap and posting to contribution
                            idecRYAlloc2 = Math.Round(adecIAPHoursA2 * Convert.ToDecimal(HelperUtil.GetData1ByCodeValue(52, busConstant.IAPAllocation2Factor)), 2, MidpointRounding.AwayFromZero);
                            ldecIAPBalance += idecRYAlloc2;
                            idecRYAlloc4 = adecIAPPercent;
                            ldecIAPBalance += idecRYAlloc4;
                        }
                        if (ldecAdjustedBalance > decimal.Zero)
                        {
                            IsAdjustmentDone = true;
                        }

                        for (int lintStartYear = adtGivenFromDate.Year; lintStartYear <= adtGivenToDate.Year; lintStartYear++)
                        {
                            busQdroIapAllocationDetail lbusQdroIapAllocationDetail = new busQdroIapAllocationDetail();

                            if (lintStartYear == adtGivenToDate.Year)
                            {
                                idecQuarterlyAllocationIAP = lobjIAPHelper.CalculateAllocation1Amount(lintStartYear, ldecIAPBalance, lintQuarter, ref ldecFactor);
                                ldecAdjustedBalance += idecQuarterlyAllocationIAP;
                                if (idecQuarterlyAllocationIAP > decimal.Zero)
                                {
                                    lblnEligibleForRY = true;
                                }
                            }
                            else
                            {
                                ldecAdjustedBalance += lobjIAPHelper.CalculateAllocation1Amount(lintStartYear, ldecIAPBalance, 4, ref ldecFactor);
                            }
                            ldecIAPBalance += ldecAdjustedBalance;

                        }
                        // PIR 764: RC posting for QDRO
                        if (ldecIAPBalance != decimal.Zero)//PIR 985
                        {
                            busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                            if (abusQdroCalculationHeader.IsNotNull())
                            {
                                lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, adtGivenToDate,//idtEffectiveDate,     //rohan06222013
                                DateTime.Now, ldtIAPBalanceAsOfDate.Year, adecIAPBalanceAmount: ldecAdjustedBalance, adec52SplAccountBalance: idecQuarterlyAllocationL52Spl,
                                adec161SplAccountBalance: idecQuarterlyAllocationL161Spl, astrTransactionType: busConstant.TRANSACTION_TYPE_QUARTERLY_ALLOCATION, astrContributionType: busConstant.RCContributionTypeAllocation1,
                                aintReferenceID: aintReferenceID);
                            }
                        }
                    }

                    if (!aclbQdroCalculationDetail.IsNullOrEmpty() && IsAdjustmentDone)
                    {
                        aclbQdroCalculationDetail.FirstOrDefault().icdoQdroCalculationDetail.adjustment_iap_payment_flag = busConstant.FLAG_NO;
                        aclbQdroCalculationDetail.FirstOrDefault().icdoQdroCalculationDetail.Update();
                    }
                    #endregion
                }
            }
            return ldecAdjustedBalance;
        }

        public bool CheckIfFactorAvailableForIapAllocation(busBenefitCalculationHeader abusBenefitCalculationHeader)
        {
            bool lblnFactorPresent = false;
            busIAPAllocationHelper lobjIAPHelper = new busIAPAllocationHelper();
            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                int lintQuarterAsOfAwrdedOnDate = 0; bool lblnFactorAwardedOndate = true; decimal ldecFactorAsOfAwardedOnDate = decimal.Zero;
                //151767
                busDisabiltyBenefitCalculation abusDisabiltyBenefitCalculation = (busDisabiltyBenefitCalculation)abusBenefitCalculationHeader;
                if (!abusDisabiltyBenefitCalculation.IsOnlyOnePlanAllowed())
                    lintQuarterAsOfAwrdedOnDate = GetPreviousQuarter(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date);

                int lintQuarterAsOfRetirementDate = 0; bool lblnFactorRetirementDate = true; decimal ldecFactorAsOfRetirementDate = decimal.Zero;
                lintQuarterAsOfRetirementDate = GetPreviousQuarter(abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date);
                if (lintQuarterAsOfAwrdedOnDate != 0)
                {
                    lblnFactorAwardedOndate = false;
                    lobjIAPHelper.CalculateAllocation1Amount(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date.Year, decimal.Zero, lintQuarterAsOfAwrdedOnDate, ref ldecFactorAsOfAwardedOnDate);
                    //if (ldecFactorAsOfAwardedOnDate > decimal.Zero)
                    if (ldecFactorAsOfAwardedOnDate != decimal.Zero) // Peod PIR 580, As for some years Factors are negative 
                    {
                        lblnFactorAwardedOndate = true;
                    }
                }
                if (lintQuarterAsOfRetirementDate != 0)
                {
                    lblnFactorRetirementDate = false;
                    lobjIAPHelper.CalculateAllocation1Amount(abusBenefitCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date.Year, decimal.Zero, lintQuarterAsOfRetirementDate, ref ldecFactorAsOfRetirementDate);
                    //if (ldecFactorAsOfRetirementDate > decimal.Zero)
                    if (ldecFactorAsOfRetirementDate != decimal.Zero) // Peod PIR 580, As for some years Factors are negative //580 Fixed wrong variable ldecFactorAsOfAwardedOnDate was used.
                    {
                        lblnFactorRetirementDate = true;
                    }
                }
                if (lblnFactorAwardedOndate && lblnFactorRetirementDate)
                {
                    lblnFactorPresent = true;
                }

            }
            return lblnFactorPresent;
        }

        public int GetPreviousQuarter(DateTime adtAsOfDate)
        {
            int lintQuarter = 0;

            if (adtAsOfDate != DateTime.MinValue)
            {
                if (adtAsOfDate.Month >= 4 && adtAsOfDate.Month <= 6)
                {
                    lintQuarter = 1;
                }
                else if (adtAsOfDate.Month >= 7 && adtAsOfDate.Month <= 9)
                {
                    lintQuarter = 2;
                }
                else if (adtAsOfDate.Month >= 10 && adtAsOfDate.Month <= 12)
                {
                    lintQuarter = 3;
                }
            }

            return lintQuarter;
        }

        public void LoadIapBalanceForReEmployedParticipants(busBenefitCalculationHeader abusCalculationHeader)
        {

            abusCalculationHeader.iblnCalculateIAPBenefit = true;
            ibusLatestIAPAllocationSummaryAsofYear = new busIapAllocationSummary();
            ibusLatestIAPAllocationSummaryAsofYear.LoadLatestAllocationSummary();

            //Gets Not Null in option 2 for disability.
            if (abusCalculationHeader.iclbBenefitCalculationDetail != null && abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.istrPlanCode = busConstant.IAP;
            }

            // Step 1. Fetch the IAP Balance from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION table
            decimal ldecIAPBalance = busConstant.ZERO_DECIMAL, ldecFactor = 0;
            DateTime ldtIAPBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal52SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            DateTime ldtLocal161SpecialAccountBalanceAsOfDate = DateTime.MinValue;
            busIAPAllocationHelper lobjIAPHelper = new busIAPAllocationHelper();
            DataTable ldtbIAPBalance = new DataTable();
            busPersonAccountRetirementContribution lobjContribution = new busPersonAccountRetirementContribution();
            int lintPersonAccountID = 0;

            //query to get the iap account balance
            if (abusCalculationHeader.iclbBenefitCalculationDetail != null && abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {
                lintPersonAccountID = abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
                ldtbIAPBalance = busBase.Select("cdoPersonAccountRetirementContribution.GetIAPBalanceAsofYear",
                    new object[2] { abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id,
                                    ibusLatestIAPAllocationSummaryAsofYear.icdoIapAllocationSummary.computation_year});
            }

            if (ldtbIAPBalance.IsNotNull() && ldtbIAPBalance.Rows.Count > 0)
            {
                ldecIAPBalance = Convert.ToDecimal(Convert.ToBoolean(ldtbIAPBalance.Rows[0][0].IsDBNull()) ? busConstant.ZERO_DECIMAL : ldtbIAPBalance.Rows[0][0]);
                ldtIAPBalanceAsOfDate = Convert.ToDateTime(Convert.ToBoolean(ldtbIAPBalance.Rows[0][3].IsDBNull()) ? DateTime.MinValue : ldtbIAPBalance.Rows[0][3]);



                #region DISABILITY
                if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                {
                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateIAPBenefit)
                    {

                        if (abusCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value == busConstant.BenefitCalculation.CALCULATION_TYPE_FINAL)
                        {

                            abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() &&
                                                                       item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = idecPrevIapBalance;

                            abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID &&
                                                                       item.icdoBenefitCalculationDetail.l52_spl_acc_flag.IsNullOrEmpty() &&
                                                                       item.icdoBenefitCalculationDetail.l161_spl_acc_flag.IsNullOrEmpty() && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = idtPrevBalanceAsOfYear;
                        }
                        else
                        {
                            abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = idecPrevIapBalance;
                            abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID && item.icdoBenefitCalculationDetail.retirement_date == abusCalculationHeader.ibusBenefitApplication.icdoBenefitApplication.retirement_date).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = idtPrevBalanceAsOfYear;
                        }

                    }


                }
                #endregion

                #region RETR
                if (abusCalculationHeader != null && abusCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_RETIREMENT)
                {
                    if (abusCalculationHeader.IsNotNull() && abusCalculationHeader.iblnCalculateIAPBenefit)
                    {
                        abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.iap_balance_amount = idecPrevIapBalance;
                        abusCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date = idtPrevBalanceAsOfYear;
                    }


                }

                #endregion
            }

            //if (ablnIsQdroCalculation == busConstant.BOOL_TRUE && aclbQdroCalculationDetail != null && aclbQdroCalculationDetail.Count > 0 &&
            //    aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            //{
            //    lbusBenefitCalculationDetail.i = aclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoQdroCalculationDetail.person_account_id;
            //  //  aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;
            //}
            //else if (aclbBenefitCalculationDetail != null && aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            //{
            //    lintPersonAccountID = aclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.person_account_id;

            //}
        }


        //Method to negate the QY and RY allocations created by final calculation
        public void NegateAllocationsCreatedByCalculation(int aintCalculationID)
        {
            DataTable ldtAllocations = Select("cdoPersonAccountRetirementContribution.GetIAPRetirementContributionToNegateQYAndRY", new object[1] { aintCalculationID });
            busPersonAccountRetirementContribution lbusContribution = new busPersonAccountRetirementContribution();

            foreach (DataRow ldrContrb in ldtAllocations.Rows)
            {
                if (ldrContrb["alloc1"] != DBNull.Value && Convert.ToDecimal(ldrContrb["alloc1"]) != busConstant.ZERO_DECIMAL)
                {
                    lbusContribution = new busPersonAccountRetirementContribution();
                    lbusContribution.InsertPersonAccountRetirementContirbution(Convert.ToInt32(ldrContrb["person_account_id"]),
                                                                                Convert.ToDateTime(ldrContrb["effective_date"]),
                                                                                DateTime.Now,
                                                                                Convert.ToInt32(ldrContrb["computational_year"]),
                                                                                adecIAPBalanceAmount: busConstant.ZERO_DECIMAL - Convert.ToDecimal(ldrContrb["alloc1"]),
                                                                                //astrTransactionType: busConstant.RCTransactionTypeCancelledCalc,
                                                                                astrTransactionType:Convert.ToString(ldrContrb["Transaction_type_value"]),
                                                                                astrContributionType: busConstant.RCContributionTypeAllocation1);
                }

                if (ldrContrb["alloc2"] != DBNull.Value && Convert.ToDecimal(ldrContrb["alloc2"]) != busConstant.ZERO_DECIMAL)
                {
                    lbusContribution = new busPersonAccountRetirementContribution();
                    lbusContribution.InsertPersonAccountRetirementContirbution(Convert.ToInt32(ldrContrb["person_account_id"]),
                                                                                Convert.ToDateTime(ldrContrb["effective_date"]),
                                                                                DateTime.Now,
                                                                                Convert.ToInt32(ldrContrb["computational_year"]),
                                                                                adecIAPBalanceAmount: busConstant.ZERO_DECIMAL - Convert.ToDecimal(ldrContrb["alloc2"]),
                                                                              //  astrTransactionType: busConstant.RCTransactionTypeCancelledCalc,
                                                                              astrTransactionType: Convert.ToString(ldrContrb["Transaction_type_value"]),
                                                                                astrContributionType: busConstant.RCContributionTypeAllocation2);
                }
                if (ldrContrb["alloc4"] != DBNull.Value && Convert.ToDecimal(ldrContrb["alloc4"]) != busConstant.ZERO_DECIMAL)
                {
                    lbusContribution = new busPersonAccountRetirementContribution();
                    lbusContribution.InsertPersonAccountRetirementContirbution(Convert.ToInt32(ldrContrb["person_account_id"]),
                                                                                Convert.ToDateTime(ldrContrb["effective_date"]),
                                                                                DateTime.Now,
                                                                                Convert.ToInt32(ldrContrb["computational_year"]),
                                                                                adecIAPBalanceAmount: busConstant.ZERO_DECIMAL - Convert.ToDecimal(ldrContrb["alloc4"]),
                                                                               // astrTransactionType: busConstant.RCTransactionTypeCancelledCalc,
                                                                               astrTransactionType: Convert.ToString(ldrContrb["Transaction_type_value"]),
                                                                                astrContributionType: busConstant.RCContributionTypeAllocation4);
                }
                if (ldrContrb["L52ALLOC1"] != DBNull.Value && Convert.ToDecimal(ldrContrb["L52ALLOC1"]) != busConstant.ZERO_DECIMAL)
                {
                    lbusContribution = new busPersonAccountRetirementContribution();
                    lbusContribution.InsertPersonAccountRetirementContirbution(Convert.ToInt32(ldrContrb["person_account_id"]),
                                                                                Convert.ToDateTime(ldrContrb["effective_date"]),
                                                                                DateTime.Now,
                                                                                Convert.ToInt32(ldrContrb["computational_year"]),
                                                                                adec52SplAccountBalance: busConstant.ZERO_DECIMAL - Convert.ToDecimal(ldrContrb["L52ALLOC1"]),
                                                                              //  astrTransactionType: busConstant.RCTransactionTypeCancelledCalc,
                                                                              astrTransactionType: Convert.ToString(ldrContrb["Transaction_type_value"]),
                                                                                astrContributionType: busConstant.RCContributionTypeAllocation1);
                }

                if (ldrContrb["L161ALLOC1"] != DBNull.Value && Convert.ToDecimal(ldrContrb["L161ALLOC1"]) != busConstant.ZERO_DECIMAL)
                {
                    lbusContribution = new busPersonAccountRetirementContribution();
                    lbusContribution.InsertPersonAccountRetirementContirbution(Convert.ToInt32(ldrContrb["person_account_id"]),
                                                                                Convert.ToDateTime(ldrContrb["effective_date"]),
                                                                                DateTime.Now,
                                                                                Convert.ToInt32(ldrContrb["computational_year"]),
                                                                                adec161SplAccountBalance: busConstant.ZERO_DECIMAL - Convert.ToDecimal(ldrContrb["L161ALLOC1"]),
                                                                              // astrTransactionType: busConstant.RCTransactionTypeCancelledCalc,
                                                                              astrTransactionType: Convert.ToString(ldrContrb["Transaction_type_value"]),
                                                                                astrContributionType: busConstant.RCContributionTypeAllocation1);
                }
            }
        }




        public decimal GetProratedHoursBetweenTwoDates(DateTime adtFromDate, DateTime adtToDate, Collection<cdoDummyWorkData> aclbWorkHistory, string astrPlanCode, DateTime adtForfeitureDate, string astrSSN, int aintPlanID)
        {
            int lintFromYear = adtFromDate.Year;
            int lintToYear = adtToDate.Year;
            decimal lintTotalHoursBetweenTwoDates = decimal.Zero;
            decimal ldecPerYearHours = Decimal.Zero;

            foreach (cdoDummyWorkData lcdoDummyWorkData in aclbWorkHistory)
            {
                if (lcdoDummyWorkData.year >= lintFromYear && lcdoDummyWorkData.year <= lintToYear)
                {
                    //150637
                    switch (astrPlanCode)
                    {
                        case busConstant.IAP:
                            ldecPerYearHours = lcdoDummyWorkData.qualified_hours;
                            break;
                        //Ticket#68161
                        case busConstant.MPIPP:
                            ldecPerYearHours = lcdoDummyWorkData.idecQdroHours;
                            break;
                        case busConstant.Local_52:
                            ldecPerYearHours = lcdoDummyWorkData.idecQdroHours;
                            break;
                        case busConstant.Local_161:
                            ldecPerYearHours = lcdoDummyWorkData.idecQdroHours;
                            break;
                        case busConstant.Local_600:
                            ldecPerYearHours = lcdoDummyWorkData.idecQdroHours;
                            break;
                        case busConstant.Local_666:
                            ldecPerYearHours = lcdoDummyWorkData.idecQdroHours;
                            break;
                        case busConstant.LOCAL_700:

                            {
                                ldecPerYearHours = lcdoDummyWorkData.idecQdroHours;
                                break;
                            }

                    }
                    if (ldecPerYearHours > decimal.Zero)
                    {
                        if (lcdoDummyWorkData.year == lintFromYear)
                        {
                            DateTime ldtFromDate = busGlobalFunctions.GetFirstDateOfComputationYear(lintFromYear);
                            DateTime ldtTodate = busGlobalFunctions.GetLastDateOfComputationYear(lintFromYear);
                            decimal lintTotalNoOfDaysInYear = (ldtTodate - ldtFromDate).Days;
                            decimal lintDaysAfterFromDate = (ldtTodate - adtFromDate).Days;

                            decimal ldecRatio = (lintDaysAfterFromDate + 1) / (lintTotalNoOfDaysInYear + 1);
                            if ((lcdoDummyWorkData.qualified_years_count > 20 || ldecPerYearHours >= 400) && astrPlanCode != busConstant.IAP)
                            {
                                lintTotalHoursBetweenTwoDates += Math.Round(ldecRatio * ldecPerYearHours, 1);
                            }
                            else if (astrPlanCode == busConstant.IAP && ((ldecPerYearHours >= 400 && lcdoDummyWorkData.year > 1979) || lcdoDummyWorkData.year <= 1979))
                            {
                                lintTotalHoursBetweenTwoDates += Math.Round(ldecRatio * ldecPerYearHours, 1);
                                if (lcdoDummyWorkData.year == 1979)
                                {
                                    lintTotalHoursBetweenTwoDates += Math.Round(ldecRatio * ldecPerYearHours, 1);
                                }
                            }


                        }
                        else if (lcdoDummyWorkData.year == lintToYear)
                        {
                            DateTime ldtFromDate = busGlobalFunctions.GetFirstDateOfComputationYear(lintToYear);
                            DateTime ldtTodate = busGlobalFunctions.GetLastDateOfComputationYear(lintToYear);
                            decimal lintTotalNoOfDaysInYear = (ldtTodate - ldtFromDate).Days;
                            decimal lintDaysBeforeToadateInYear = (adtToDate - ldtFromDate).Days;

                            decimal ldecRatio = (lintDaysBeforeToadateInYear + 1) / (lintTotalNoOfDaysInYear + 1);

                            if ((lcdoDummyWorkData.qualified_years_count > 20 || ldecPerYearHours >= 400) && astrPlanCode != busConstant.IAP)
                            {
                                lintTotalHoursBetweenTwoDates += Math.Round(ldecRatio * ldecPerYearHours, 1);
                            }
                            else if (astrPlanCode == busConstant.IAP && ((ldecPerYearHours >= 400 && lcdoDummyWorkData.year > 1979) || lcdoDummyWorkData.year <= 1979))
                            {
                                lintTotalHoursBetweenTwoDates += Math.Round(ldecRatio * ldecPerYearHours, 1);
                                if (lcdoDummyWorkData.year == 1979)
                                {
                                    lintTotalHoursBetweenTwoDates += Math.Round(ldecRatio * ldecPerYearHours, 1);
                                }

                            }

                        }
                        else
                        {
                            if ((lcdoDummyWorkData.qualified_years_count > 20 || ldecPerYearHours >= 400) && astrPlanCode != busConstant.IAP)
                            {
                                lintTotalHoursBetweenTwoDates += ldecPerYearHours;
                            }
                            else if (astrPlanCode == busConstant.IAP && ((ldecPerYearHours >= 400 && lcdoDummyWorkData.year > 1979) || lcdoDummyWorkData.year <= 1979))
                            {
                                lintTotalHoursBetweenTwoDates += ldecPerYearHours;
                                if (lcdoDummyWorkData.year == 1979)
                                {
                                    lintTotalHoursBetweenTwoDates += ldecPerYearHours;
                                }
                            }

                        }
                    }

                }

            }

            //lintTotalHoursBetweenTwoDates = Math.Round(lintTotalHoursBetweenTwoDates, 1);
            return lintTotalHoursBetweenTwoDates;
        }

        public decimal GetProratedHoursForYear(DateTime adtCalcDate, cdoDummyWorkData acdoDummyWorkData, string astrPlanCode)
        {
            decimal ldecTotalHoursBetweenTwoDates = Decimal.Zero;

            DateTime ldtFromDate = busGlobalFunctions.GetFirstDateOfComputationYear(adtCalcDate.Year);
            DateTime ldtTodate = busGlobalFunctions.GetLastDateOfComputationYear(adtCalcDate.Year);
            decimal lintTotalNoOfDaysInYear = (ldtTodate - ldtFromDate).Days;
            decimal lintDaysAfterFromDate = (adtCalcDate - ldtFromDate).Days;

            decimal ldecRatio = lintDaysAfterFromDate / lintTotalNoOfDaysInYear;

            switch (astrPlanCode)
            {
                case busConstant.IAP:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.qualified_hours;
                    break;

                case busConstant.MPIPP:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.qualified_hours;
                    break;

                case busConstant.Local_52:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.L52_Hours;
                    break;

                case busConstant.Local_161:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.L161_Hours;
                    break;

                case busConstant.Local_600:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.L600_Hours;
                    break;

                case busConstant.Local_666:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.L600_Hours;
                    break;

                case busConstant.LOCAL_700:
                    ldecTotalHoursBetweenTwoDates = ldecRatio * acdoDummyWorkData.L700_Hours;
                    break;
            }
            return ldecTotalHoursBetweenTwoDates;

        }


        public decimal GetBenefitProvisionBenefitOptionFactor(int aintBenefitProvisionId, string astrBenefitAccountTypeValue, int aintPlanBenefitId, int aintParticipantAge, int aintParticipantMonth, int aintBeneficiaryAge, int aintBeneficiaryMonth)
        {
            DataTable ldtbBenefitOptionFactor = new DataTable();

            int lLowerBoundParticipant = aintParticipantAge;
            int lUpperBoundParticipant = aintParticipantAge + 1;
            int lLowerBoundBenefeciary = aintBeneficiaryAge;
            int lUpperBoundBenefeciary = aintBeneficiaryAge + 1;

            if ((aintParticipantAge.IsNotNull() && aintParticipantAge != 0) && (aintBeneficiaryAge.IsNotNull() && aintBeneficiaryAge != 0))
            {
                ldtbBenefitOptionFactor = busMPIPHPBase.Select("cdoBenefitProvisionBenefitOptionFactor.GetBenefitOptionFactorOnAgeCombination", new object[] { aintBenefitProvisionId, astrBenefitAccountTypeValue, aintPlanBenefitId, lLowerBoundParticipant, lUpperBoundParticipant, lLowerBoundBenefeciary, lUpperBoundBenefeciary });
            }
            if (ldtbBenefitOptionFactor.Rows.Count > 0 && ldtbBenefitOptionFactor.IsNotNull())
            {
                decimal ldecFactor1 = (from DataRow dtRow in ldtbBenefitOptionFactor.Rows
                                       where (decimal)dtRow["PARTICIPANT_AGE"] == lLowerBoundParticipant && (decimal)dtRow["SPOUSE_AGE"] == lLowerBoundBenefeciary
                                       select (decimal)dtRow["BENEFIT_OPTION_FACTOR"]).FirstOrDefault();

                decimal ldecFactor2 = (from DataRow dtRow in ldtbBenefitOptionFactor.Rows
                                       where (decimal)dtRow["PARTICIPANT_AGE"] == lLowerBoundParticipant && (decimal)dtRow["SPOUSE_AGE"] == lUpperBoundBenefeciary
                                       select (decimal)dtRow["BENEFIT_OPTION_FACTOR"]).FirstOrDefault();

                decimal ldecFactor3 = (from DataRow dtRow in ldtbBenefitOptionFactor.Rows
                                       where (decimal)dtRow["PARTICIPANT_AGE"] == lUpperBoundParticipant && (decimal)dtRow["SPOUSE_AGE"] == lLowerBoundBenefeciary
                                       select (decimal)dtRow["BENEFIT_OPTION_FACTOR"]).FirstOrDefault();

                decimal ldecFactor4 = (from DataRow dtRow in ldtbBenefitOptionFactor.Rows
                                       where (decimal)dtRow["PARTICIPANT_AGE"] == lUpperBoundParticipant && (decimal)dtRow["SPOUSE_AGE"] == lUpperBoundBenefeciary
                                       select (decimal)dtRow["BENEFIT_OPTION_FACTOR"]).FirstOrDefault();

                return Math.Round(((ldecFactor1 * (12 - aintParticipantMonth) + ldecFactor3 * aintParticipantMonth) * (12 - aintBeneficiaryMonth) + (ldecFactor2 * (12 - aintParticipantMonth) + ldecFactor4 * aintParticipantMonth) * aintBeneficiaryMonth) / (12 * 12), 3);
                //=ROUND(((B12*(12-C2)+B13*C2)*(12-C6)+(C12*(12-C2)+C13*C2)*C6)/(12*12),3)
            }
            return 1;
        }

        /// <summary>
        /// This method sums up and returns the EE Contributions and EE Interest Amount upto the Plan Year
        /// </summary>
        /// <param name="aclbPersonAccountRetirementContribution"> Collection of PersonAccountRetirementContribution </param>
        /// <param name="aintPlanYear"> PlanYear </param>
        /// <param name="aintPersonAccountId"> PersonAccountId</param>
        /// <param name="adecEEContributionAmount"> Out Parameter - EE Contribution Amount </param>
        /// <param name="adecEEInterestAmount"> Out Parameter - EE Interest Amount </param>
        public void GetEEContributionsUptoPlanYear(Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, busPersonAccount abusPersonAccount,
                                                    int aintPlanYear, DateTime adtForfietureDate, out decimal adecEEContributionAmount, out decimal adecEEInterestAmount, out DateTime adtEEContributionAsOfDate)
        {
            adecEEContributionAmount = 0.0M;
            adecEEInterestAmount = 0.0M;
            adtEEContributionAsOfDate = DateTime.MinValue;

            if (!aclbPersonAccountRetirementContribution.IsNullOrEmpty())
            {
                if (adtForfietureDate != DateTime.MinValue &&
                    (!aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                               && item.icdoPersonAccountRetirementContribution.computational_year > adtForfietureDate.Year
                                               && item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).IsNullOrEmpty()))
                {
                    adecEEContributionAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                               && item.icdoPersonAccountRetirementContribution.computational_year > adtForfietureDate.Year
                                               && item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item => item.icdoPersonAccountRetirementContribution.ee_contribution_amount);

                    adecEEInterestAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                            && item.icdoPersonAccountRetirementContribution.computational_year > adtForfietureDate.Year
                                            && item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item => item.icdoPersonAccountRetirementContribution.ee_int_amount);

                    adtEEContributionAsOfDate = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                             && item.icdoPersonAccountRetirementContribution.computational_year > adtForfietureDate.Year
                                             && item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Max(item => item.icdoPersonAccountRetirementContribution.effective_date);
                }
                else
                {
                    if (!aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                        item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).IsNullOrEmpty())
                    {
                        adecEEContributionAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                            item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item => item.icdoPersonAccountRetirementContribution.ee_contribution_amount);

                        adecEEInterestAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                            item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item => item.icdoPersonAccountRetirementContribution.ee_int_amount);

                        adtEEContributionAsOfDate = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                            item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Max(item => item.icdoPersonAccountRetirementContribution.effective_date);
                    }
                }
            }
        }


        /// <summary>
        /// This method sums up and returns the EE Contributions and EE Interest Amount upto the Effective End Date
        /// </summary>
        /// <param name="aclbPersonAccountRetirementContribution"> Collection of PersonAccountRetirementContribution </param>
        /// <param name="aintPersonAccountId"> Person Account Id </param>
        /// <param name="aintPlanYear"> Plan Year </param>
        /// <param name="adtEffectiveEndDate"> Effective End Date </param>
        /// <returns> EE Contribution Amount </returns>
        public void GetEEContributionUptoEffectiveDate(Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, busPersonAccount abusPersonAccount,
                                                        int aintPlanYear, DateTime adtForfietureDate, DateTime adtEffectiveEndDate, out decimal adecEEContributionAmount, out decimal adecEEInterestAmount)
        {
            if (adtForfietureDate != DateTime.MinValue)
            {
                adecEEContributionAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                           && item.icdoPersonAccountRetirementContribution.computational_year > adtForfietureDate.Year
                                           && item.icdoPersonAccountRetirementContribution.computational_year < aintPlanYear
                                           && item.icdoPersonAccountRetirementContribution.effective_date < adtEffectiveEndDate && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item => item.icdoPersonAccountRetirementContribution.ee_contribution_amount);

                adecEEInterestAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id
                                       && item.icdoPersonAccountRetirementContribution.computational_year > adtForfietureDate.Year
                                       && item.icdoPersonAccountRetirementContribution.computational_year < aintPlanYear
                                       && item.icdoPersonAccountRetirementContribution.effective_date < adtEffectiveEndDate && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item => item.icdoPersonAccountRetirementContribution.ee_int_amount);
            }
            else
            {
                adecEEContributionAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                        item.icdoPersonAccountRetirementContribution.computational_year < aintPlanYear && item.icdoPersonAccountRetirementContribution.effective_date < adtEffectiveEndDate && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item =>
                        item.icdoPersonAccountRetirementContribution.ee_contribution_amount);
                //PIR 616: Below modified from(< to <=) "item.icdoPersonAccountRetirementContribution.computational_year < aintPlanYear"
                adecEEInterestAmount = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == abusPersonAccount.icdoPersonAccount.person_account_id &&
                        item.icdoPersonAccountRetirementContribution.computational_year <= aintPlanYear && item.icdoPersonAccountRetirementContribution.effective_date <= adtEffectiveEndDate && item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED).Sum(item =>
                        item.icdoPersonAccountRetirementContribution.ee_int_amount);
            }
        }


        public decimal CalculateRateOfInterest(int aintComputationalYear)
        {
            decimal ldecRateOfInterest = 0;
            DataTable ldtbInterestRateInformation = busBase.Select<cdoBenefitInterestRate>(
                   new string[1] { enmBenefitInterestRate.year.ToString() },
                   new object[1] { aintComputationalYear },
                   null, null);

            if (ldtbInterestRateInformation.Rows.Count > 0)
            {
                return ldecRateOfInterest = Convert.ToDecimal(ldtbInterestRateInformation.Rows[0][enmBenefitInterestRate.rate_of_interest.ToString()]);
            }

            return 0;
        }

        //Prod PIR 10
        public decimal GetAccruedBenefitTillWithdrawalDate(Collection<cdoDummyWorkData> aclbDummyWorkData, busPerson abusPerson, busPersonAccountRetirementContribution lbusPersonAccountRetCont, int adtForfeitureDateYear)
        {
            decimal ldecAccruedAtWithdrawal = decimal.Zero;

            if (!aclbDummyWorkData.IsNullOrEmpty())
            {
                ldecAccruedAtWithdrawal = aclbDummyWorkData.Where(item => item.year <=
                                                            lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution.effective_date.Year && item.year > adtForfeitureDateYear).Sum(item => item.idecBenefitAmount);

                if (!aclbDummyWorkData.Where(item => item.year == lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution.effective_date.Year).IsNullOrEmpty())
                {
                    ldecAccruedAtWithdrawal = ldecAccruedAtWithdrawal - CalculateBenefitAmountForWithdrawalYear(abusPerson.icdoPerson.ssn, busConstant.MPIPP_PLAN_ID, lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution.effective_date, aclbDummyWorkData.Where(item => item.year == lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution.effective_date.Year).FirstOrDefault());
                }
            }
            return ldecAccruedAtWithdrawal;
        }

        //Prod PIR 10
        public decimal CalculateEEDerivedTillWithdrawalDate(decimal ldecEEContribution, decimal ldecEEInterest,
                                                    decimal adecAge, DateTime adtCalculationDate)
        {
            decimal ldecEEDerivedAmount = new decimal();
            decimal ldecTableBfactor = decimal.One;
            decimal ldecBenefitInterestRate = decimal.Zero;

            # region To confirm the data : To check whether we need to add this or not.
            /*
            if (aclbPersonAccountRetirementContribution.Count() > 0)
            {
                
                    ldecEEContribution = (from item in aclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < adtCalculationDate.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= adtCalculationDate &&
                                              item.icdoPersonAccountRetirementContribution.computational_year > adtForfeitureDateYear &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();

                    ldecEEInterest = (from item in aclbPersonAccountRetirementContribution
                                      where
                                          item.icdoPersonAccountRetirementContribution.computational_year < adtCalculationDate.Year &&
                                          item.icdoPersonAccountRetirementContribution.effective_date <= adtCalculationDate &&
                                          item.icdoPersonAccountRetirementContribution.computational_year > adtForfeitureDateYear &&
                                          item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                
                }

                object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] {
                                                        adtCalculationDate.Year },
                                                    iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                if (lobjBenefitInterestRate.IsNotNull())
                {
                    ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                }
                decimal ldecEEPartialInterestAmount = decimal.Zero;

                ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (adtCalculationDate.Month - 1), 2);
                ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;

            */
            #endregion


            decimal ldecTableAfactor = this.GetTableAFactor(adecAge, busConstant.MPIPP_PLAN_ID, adtCalculationDate.Year);
            ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                           adecAge, adtCalculationDate.Year < 1988 ? 1988 : adtCalculationDate.Year);
            ldecEEDerivedAmount = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);



            return ldecEEDerivedAmount;
        }


        //Prod PIR 10
        public decimal CalculateAccruedBenefitForPersonWithWithdrawal(string astrRetirementSubType, DateTime adtVestedDate, decimal adecAccruedBenefit, busPerson abusPerson, Collection<busPersonAccount> aclbPersonAccount,
                                                     DateTime adtRetirementDate, Collection<cdoDummyWorkData> aclbDummyWorkData,
                                                     Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, int adtForfeitureDateYear, ref Collection<cdoPersonAccountRetirementContribution> aclbWithdrawalCollection)
        {
            if (!aclbPersonAccountRetirementContribution.IsNullOrEmpty())
            {
                decimal ldecEEDerivedTillRetirementDate = 0;
                DateTime ldtDate = new DateTime(1976, 01, 01);
                decimal ldecAge = 0;
                Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetirementContribution =
                                            new Collection<busPersonAccountRetirementContribution>();
                busPersonAccountRetirementContribution lbusPersonAccountRetCont = null;
                if (aclbPersonAccount.IsNullOrEmpty())
                    return adecAccruedBenefit;
                int lintPersonAccountID = aclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoPersonAccount.person_account_id;
                lclbPersonAccountRetirementContribution = aclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountID).ToList().ToCollection();
                Collection<busPersonAccountRetirementContribution> lclbRetContributionTiedToWithdrawal = null;

                if (lclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.transaction_type_value == "PMNT" && item.icdoPersonAccountRetirementContribution.contribution_type_value == "EE").Count() > 0)
                {
                    lclbRetContributionTiedToWithdrawal = lclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.transaction_type_value == "PMNT" && item.icdoPersonAccountRetirementContribution.contribution_type_value == "EE")
                        .OrderByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date.Year)
                        .ThenByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date).ToList().ToCollection(); //PIR 1052

                    if (!lclbRetContributionTiedToWithdrawal.IsNullOrEmpty())
                    {
                        if (lclbRetContributionTiedToWithdrawal.FirstOrDefault().icdoPersonAccountRetirementContribution.effective_date < adtVestedDate)
                        {
                            #region Non Vested At Latest Withdrawal
                            lbusPersonAccountRetCont = new busPersonAccountRetirementContribution { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                            lbusPersonAccountRetCont = lclbRetContributionTiedToWithdrawal.FirstOrDefault();
                            if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                            {
                                aclbWithdrawalCollection.Add(lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution);
                            }
                            else if (aclbDummyWorkData != null)
                            {
                                adecAccruedBenefit = adecAccruedBenefit - GetAccruedBenefitTillWithdrawalDate(aclbDummyWorkData, abusPerson, lbusPersonAccountRetCont, adtForfeitureDateYear);
                            }
                            #endregion
                        }
                        else
                        {
                            if (lclbRetContributionTiedToWithdrawal.Where(item => item.icdoPersonAccountRetirementContribution.effective_date < adtVestedDate).Count() > 0)
                            {
                                Collection<busPersonAccountRetirementContribution> lclbRetContributionBeforeVesting = lclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.transaction_type_value == "PMNT" && item.icdoPersonAccountRetirementContribution.contribution_type_value == "EE" &&
                                     item.icdoPersonAccountRetirementContribution.effective_date < adtVestedDate).OrderByDescending(item => item.icdoPersonAccountRetirementContribution.effective_date.Year).ToList().ToCollection();
                                if (lclbRetContributionBeforeVesting.FirstOrDefault().icdoPersonAccountRetirementContribution.effective_date.Year >= 1976)
                                {
                                    lbusPersonAccountRetCont = new busPersonAccountRetirementContribution { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                                    lbusPersonAccountRetCont = lclbRetContributionBeforeVesting.FirstOrDefault();
                                    if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                                    {
                                        aclbWithdrawalCollection.Add(lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution);
                                    }
                                    else
                                    {
                                        adecAccruedBenefit = adecAccruedBenefit - GetAccruedBenefitTillWithdrawalDate(aclbDummyWorkData, abusPerson, lbusPersonAccountRetCont, adtForfeitureDateYear);
                                    }
                                }
                                else if (lclbRetContributionTiedToWithdrawal.Where(item => item.icdoPersonAccountRetirementContribution.effective_date >= adtVestedDate && item.icdoPersonAccountRetirementContribution.effective_date.Year < 1976).Count() == 0)
                                {
                                    lbusPersonAccountRetCont = new busPersonAccountRetirementContribution { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                                    lbusPersonAccountRetCont = lclbRetContributionBeforeVesting.FirstOrDefault();
                                    if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                                    {
                                        aclbWithdrawalCollection.Add(lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution);
                                    }
                                    else
                                    {
                                        adecAccruedBenefit = adecAccruedBenefit - GetAccruedBenefitTillWithdrawalDate(aclbDummyWorkData, abusPerson, lbusPersonAccountRetCont, adtForfeitureDateYear);
                                    }
                                }
                            }
                            if (lclbRetContributionTiedToWithdrawal.Where(item => item.icdoPersonAccountRetirementContribution.effective_date >= adtVestedDate).Count() > 0)
                            {
                                #region Get Withdrawals Before 1976 : Rule 3
                                if (lclbRetContributionTiedToWithdrawal.Where(item => item.icdoPersonAccountRetirementContribution.effective_date >= adtVestedDate && item.icdoPersonAccountRetirementContribution.effective_date.Year < 1976).Count() > 0)
                                {
                                    lbusPersonAccountRetCont = new busPersonAccountRetirementContribution { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                                    lbusPersonAccountRetCont = lclbRetContributionTiedToWithdrawal.Where(item => item.icdoPersonAccountRetirementContribution.effective_date >= adtVestedDate && item.icdoPersonAccountRetirementContribution.effective_date.Year < 1976).OrderByDescending(
                                        item => item.icdoPersonAccountRetirementContribution.effective_date).FirstOrDefault();
                                    if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                                    {
                                        aclbWithdrawalCollection.Add(lbusPersonAccountRetCont.icdoPersonAccountRetirementContribution);
                                    }
                                    else
                                    {
                                        adecAccruedBenefit = adecAccruedBenefit - GetAccruedBenefitTillWithdrawalDate(aclbDummyWorkData, abusPerson, lbusPersonAccountRetCont, adtForfeitureDateYear);
                                    }
                                }
                                #endregion

                                #region Reduce EE DErived
                                decimal ldecEEDerivedAtWithdrawal = decimal.Zero;
                                Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetContAfter1976 = lclbRetContributionTiedToWithdrawal.Where(item => item.icdoPersonAccountRetirementContribution.effective_date >= adtVestedDate && item.icdoPersonAccountRetirementContribution.effective_date.Year >= 1976).OrderBy(item => item.icdoPersonAccountRetirementContribution.effective_date.Year).ToList().ToCollection();

                                Collection<cdoPersonAccountRetirementContribution> lclbEffectiveYear = (from obj in lclbPersonAccountRetContAfter1976
                                                                                                        group obj by new
                                                                                                        {
                                                                                                            year = obj.icdoPersonAccountRetirementContribution.effective_date.Year,
                                                                                                        } into objgp
                                                                                                        select new cdoPersonAccountRetirementContribution
                                                                                                        {
                                                                                                            computational_year = objgp.Key.year,
                                                                                                            ee_contribution_amount = objgp.Sum(i => i.icdoPersonAccountRetirementContribution.ee_contribution_amount),
                                                                                                            ee_int_amount = objgp.Sum(i => i.icdoPersonAccountRetirementContribution.ee_int_amount),
                                                                                                            effective_date = objgp.Max(i => i.icdoPersonAccountRetirementContribution.effective_date)
                                                                                                        }).ToList().ToCollection<cdoPersonAccountRetirementContribution>();



                                foreach (cdoPersonAccountRetirementContribution lbusPersonAccountContAfter1976 in lclbEffectiveYear)
                                {
                                    ldecAge = busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.date_of_birth,
                                                     lbusPersonAccountContAfter1976.effective_date);
                                    lbusPersonAccountContAfter1976.iblnWithdrawalDateAfterVesting = true;
                                    lbusPersonAccountContAfter1976.idecEEDerivedBenefitForYear = CalculateEEDerivedTillWithdrawalDate(Math.Abs(lbusPersonAccountContAfter1976.ee_contribution_amount), Math.Abs(lbusPersonAccountContAfter1976.ee_int_amount),
                                         ldecAge, lbusPersonAccountContAfter1976.effective_date);
                                    ldecEEDerivedAtWithdrawal += lbusPersonAccountContAfter1976.idecEEDerivedBenefitForYear;
                                    if (astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION)
                                    {
                                        aclbWithdrawalCollection.Add(lbusPersonAccountContAfter1976);
                                    }
                                }
                                if (!(astrRetirementSubType == busConstant.RETIREMENT_TYPE_LATE || astrRetirementSubType == busConstant.RETIREMENT_TYPE_MINIMUM_DISTRIBUTION))
                                {
                                    adecAccruedBenefit = adecAccruedBenefit - ldecEEDerivedAtWithdrawal;
                                }
                                #endregion

                            }

                        }

                    }
                }
                if (adecAccruedBenefit < decimal.Zero)
                {
                    adecAccruedBenefit = decimal.Zero;
                }

            }
            return adecAccruedBenefit;
        }

        /*
        public decimal CalculateAccruedBenefitForPersonWithWithdrawal(DateTime adtVestedDate, decimal adecAccruedBenefit, busPerson abusPerson, Collection<busPersonAccount> aclbPersonAccount,
                                                                     DateTime adtRetirementDate, Collection<cdoDummyWorkData> aclbDummyWorkData,
                                                                     Collection<busPersonAccountRetirementContribution> aclbPersonAccountRetirementContribution, int adtForfeitureDateYear)
        {
            decimal ldecEEDerivedTillWithdrawalDate = 0;
            decimal ldecEEDerivedTillRetirementDate = 0;
            decimal ldecTotalAccruedBenefitTillWithdrawalDate = 0;
            DateTime ldtDate = new DateTime(1976, 01, 01);
            DateTime ldtWithdrawalCapYear = new DateTime(1975, 01, 01);
            decimal ldecAge = 0;
            busBenefitApplication lbusBenefitApplication = new busBenefitApplication { icdoBenefitApplication = new cdoBenefitApplication() };
            Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetirementContribution =
                                        new Collection<busPersonAccountRetirementContribution>();
            bool lblnWithdrawalExistsBefore1976 = false;


            lbusBenefitApplication = lbusBenefitApplication.LoadWithdrawalDataByPersonIdBefore1976(abusPerson.icdoPerson.person_id);
            if (lbusBenefitApplication != null)
            {
                lblnWithdrawalExistsBefore1976 = true;

                ldecAge = busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.date_of_birth,
                              lbusBenefitApplication.icdoBenefitApplication.withdrawal_date);
                lbusBenefitApplication.ibusPerson = abusPerson;
                lbusBenefitApplication.ibusPerson.iclbPersonAccount = aclbPersonAccount;
                lclbPersonAccountRetirementContribution = aclbPersonAccountRetirementContribution;

                decimal ldecAccruedBenefitTillYearPriorToWithdrawal = 0, ldecAccruedBenefitAtWithdrawal = 0;

                if (aclbDummyWorkData != null)
                {
                    ldecAccruedBenefitTillYearPriorToWithdrawal = aclbDummyWorkData.Where(item => item.year <
                                            lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year && item.year > adtForfeitureDateYear).Sum(item => item.idecBenefitAmount);

                    if (!aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year).IsNullOrEmpty())
                    {
                        ldecAccruedBenefitAtWithdrawal = CalculateAccruedBenefitForWithdrawalYear(lbusBenefitApplication.ibusPerson.icdoPerson.ssn, lbusBenefitApplication.icdoBenefitApplication.withdrawal_date,
                                                         aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year).FirstOrDefault(),
                                                         aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year - 1).FirstOrDefault().vested_years_count,
                                                         aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year).FirstOrDefault().vested_hours);
                    }
                }

                ldecTotalAccruedBenefitTillWithdrawalDate = ldecAccruedBenefitTillYearPriorToWithdrawal + ldecAccruedBenefitAtWithdrawal;
                adecAccruedBenefit = adecAccruedBenefit - ldecTotalAccruedBenefitTillWithdrawalDate;
            }
            else
                lblnWithdrawalExistsBefore1976 = false;

            if (lbusBenefitApplication == null)
                lbusBenefitApplication = new busBenefitApplication { icdoBenefitApplication = new cdoBenefitApplication() };
            lbusBenefitApplication = lbusBenefitApplication.LoadWithdrawalDataByPersonId(abusPerson.icdoPerson.person_id);


            if (lbusBenefitApplication != null)
            {
                ldecAge = busGlobalFunctions.CalculatePersonAgeInDec(abusPerson.icdoPerson.date_of_birth,
                           lbusBenefitApplication.icdoBenefitApplication.withdrawal_date);
                lbusBenefitApplication.ibusPerson = abusPerson;
                lbusBenefitApplication.ibusPerson.iclbPersonAccount = aclbPersonAccount;
                lclbPersonAccountRetirementContribution = aclbPersonAccountRetirementContribution;
                ldecEEDerivedTillWithdrawalDate = CalculateEEDerivedBenefitTillDate(lclbPersonAccountRetirementContribution, ldecAge,
                                                  lbusBenefitApplication.icdoBenefitApplication.withdrawal_date, adtForfeitureDateYear, lblnWithdrawalExistsBefore1976);

                decimal ldecAccruedBenefitTillYearPriorToWithdrawal = 0, ldecAccruedBenefitAtWithdrawal = 0;

                if (aclbDummyWorkData != null)
                {
                    ldecAccruedBenefitTillYearPriorToWithdrawal = aclbDummyWorkData.Where(item => item.year <
                                            lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year && item.year > adtForfeitureDateYear).Sum(item => item.idecBenefitAmount);

                    if (!aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year).IsNullOrEmpty())
                    {
                        ldecAccruedBenefitAtWithdrawal = CalculateAccruedBenefitForWithdrawalYear(lbusBenefitApplication.ibusPerson.icdoPerson.ssn, lbusBenefitApplication.icdoBenefitApplication.withdrawal_date,
                                                         aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year).FirstOrDefault(),
                                                         aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year - 1).FirstOrDefault().vested_years_count,
                                                         aclbDummyWorkData.Where(item => item.year == lbusBenefitApplication.icdoBenefitApplication.withdrawal_date.Year).FirstOrDefault().vested_hours);
                    }
                }

                ldecTotalAccruedBenefitTillWithdrawalDate = ldecAccruedBenefitTillYearPriorToWithdrawal + ldecAccruedBenefitAtWithdrawal;

            }



            if (lbusBenefitApplication != null && adtVestedDate <= lbusBenefitApplication.icdoBenefitApplication.withdrawal_date) //vested scenario
            {
                if (ldecEEDerivedTillRetirementDate > adecAccruedBenefit)
                {
                    adecAccruedBenefit = 0;
                }
                else
                {
                    //if (adtVestedDate >= ldtDate)
                    //{
                    adecAccruedBenefit = adecAccruedBenefit - ldecEEDerivedTillWithdrawalDate;
                }
                //else
                //{
                //  adecAccruedBenefit = adecAccruedBenefit - ldecTotalAccruedBenefitTillWithdrawalDate;
                //}

            }
            else if (lbusBenefitApplication != null && adtVestedDate > lbusBenefitApplication.icdoBenefitApplication.withdrawal_date) //non vested scenario
            {
                adecAccruedBenefit = adecAccruedBenefit - ldecTotalAccruedBenefitTillWithdrawalDate;
            }
            else if (lbusBenefitApplication == null)
            {
                ldecEEDerivedTillRetirementDate = CalculateEEDerivedBenefitTillDate(lclbPersonAccountRetirementContribution, ldecAge, adtRetirementDate, adtForfeitureDateYear, lblnWithdrawalExistsBefore1976);
                if (ldecEEDerivedTillRetirementDate > adecAccruedBenefit)
                {
                    adecAccruedBenefit = ldecEEDerivedTillRetirementDate;
                }
            }

            return adecAccruedBenefit;
        }
        */
        public decimal CalculateAccruedBenefitForWithdrawalYear(string astrSSn, DateTime aintWithdrawalDate,
                                                                 cdoDummyWorkData acdoDummyWorkData, int aintVestedYearCount, decimal aintTotalHours)
        {
            decimal ldecHoursAtWithdrawalDate = 0, ldecAccuredBenefitatBreak = 0;
            Hashtable lhstMonthlyHours = new Hashtable();
            lhstMonthlyHours = GetMonthlyHoursForPlanYear(astrSSn, aintWithdrawalDate.Year, busConstant.MPIPP_PLAN_ID);

            IDictionaryEnumerator denum = lhstMonthlyHours.GetEnumerator();
            DictionaryEntry dentry;
            denum.Reset();
            while (denum.MoveNext() != false)
            {
                dentry = (DictionaryEntry)denum.Current;
                if ((int)dentry.Key < aintWithdrawalDate.Month)
                {
                    ldecHoursAtWithdrawalDate = ldecHoursAtWithdrawalDate + (decimal)dentry.Value;
                }
            }

            if (ldecHoursAtWithdrawalDate > 0)
            {
                aintVestedYearCount++;
            }

            if (aintTotalHours >= 400 || aintVestedYearCount > 20)
            {
                ldecAccuredBenefitatBreak = ldecHoursAtWithdrawalDate * acdoDummyWorkData.idecBenefitRate;
            }
            else
            {
                ldecAccuredBenefitatBreak = Decimal.Zero;
            }

            return ldecAccuredBenefitatBreak;
        }

        public void CalculateAndCreateRetireeIncreasePayeeAccount(busBenefitCalculationOptions abusBenefitCalculationOptions, busQdroCalculationOptions abusQdroCalculationOptions,
                                                        busActiveRetireeIncreaseContract abusActiveRetireeIncreaseContract,
                                                            int aintRetirementYear, int aintBenefitCalculationHeaderId, int aintQdroCalculationHeaderId,
                                                        decimal adecLocal700GuarenteedAmt, decimal adecIncPercent, string astrBenefitType, busBenefitCalculationHeader abusBenefitCalculationHeader = null)
        {
            DateTime ldtRetirementIncDate = new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 11, 01);

            busDisabilityRetireeIncrease lbusDisabilityRetireeIncrease = new busDisabilityRetireeIncrease();
            busBenefitCalculationDetail lbusBenefitCalculationDetail = null;
            decimal ldecBenefitAmount = decimal.Zero;
            bool lblnCreateRIEntry = false;


            busPerson lbusPerson = new busPerson { icdoPerson = new cdoPerson() };
            busPayeeAccount lbusPayeeAccount = new busPayeeAccount { icdoPayeeAccount = new cdoPayeeAccount() };
            int lintPayementCount = 0;
            int lintNonSuspendibleMonth = 0;
            decimal ldecGrossAmount = 0;
            DataRow dtPayeeAccountrow = null;

            if (abusBenefitCalculationHeader.IsNull())
            {
                abusBenefitCalculationHeader = new busBenefitCalculationHeader { icdoBenefitCalculationHeader = new cdoBenefitCalculationHeader() };
                abusBenefitCalculationHeader.FindBenefitCalculationHeader(aintBenefitCalculationHeaderId);
            }

            if (abusBenefitCalculationOptions != null)
            {
                //PIR - 1036
                DataTable dtPayeeAccount = busBase.Select("cdoPayeeAccount.GetPayeeAccountIDByBenefitCalculationID", new object[1] { aintBenefitCalculationHeaderId });

                if (dtPayeeAccount != null && dtPayeeAccount.Rows.Count > 0)
                {
                    dtPayeeAccountrow = dtPayeeAccount.Rows[0];

                    LoadDataForRetireeIncreasePayeeAccount(lbusPerson, lbusPayeeAccount, dtPayeeAccountrow, abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, ref lintPayementCount, ref lintNonSuspendibleMonth, ref ldecGrossAmount);

                    if ((lbusPayeeAccount.icdoPayeeAccount.review_payee_acc_for_retiree_inc_form == busConstant.FLAG_NO ||
                         lbusPayeeAccount.icdoPayeeAccount.review_payee_acc_for_retiree_inc_form.IsNullOrEmpty()) &&
                        (dtPayeeAccountrow["STATUS_VALUE"].ToString() == busConstant.PAYEE_ACCOUNT_STATUS_RECEIVING ||
                        (dtPayeeAccountrow["STATUS_VALUE"].ToString() == busConstant.PAYEE_ACCOUNT_STATUS_APPROVED
                        ) ||
                        (dtPayeeAccountrow["STATUS_VALUE"].ToString() == busConstant.PAYEE_ACCOUNT_STATUS_SUSPENDED
                        ) ||
                        (dtPayeeAccountrow["STATUS_VALUE"].ToString() == busConstant.PAYEE_ACCOUNT_STATUS_REVIEW
                        ))
                        &&
                        ((lintNonSuspendibleMonth >= 1 || lbusPayeeAccount.icdoPayeeAccount.istrMDAge == busConstant.FLAG_YES) && lbusPerson.icdoPerson.date_of_death == DateTime.MinValue) && ldecGrossAmount != 0) //RID 53296
                    {
                        lblnCreateRIEntry = true;
                    }
                }
                //RID 65237
                else
                {
                    int lintPlanId = 0;
                    string lstrMDAge = string.Empty;
                    DateTime ldtPayeeDOD = DateTime.MinValue;

                    lbusPerson.FindPerson(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.person_id);
                    ldtPayeeDOD = lbusPerson.icdoPerson.date_of_death;

                    busPerson lbusPayee = new busPerson { icdoPerson = new cdoPerson() };
                    if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_POST_RETIREMENT || astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
                    {
                        if (lbusPayee.FindPerson(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.beneficiary_person_id))
                        {
                            ldtPayeeDOD = lbusPayee.icdoPerson.date_of_death;
                        }
                    }

                    DataTable ldtCalc = busBase.Select("cdoPayeeAccount.GetAgeAndPlanFrmCalcId", new object[1] { aintBenefitCalculationHeaderId });
                    if (ldtCalc != null && ldtCalc.Rows.Count > 0)
                    {
                        if (Convert.ToString(ldtCalc.Rows[0][enmPlan.plan_id.ToString().ToUpper()]).IsNotNullOrEmpty())
                            lintPlanId = Convert.ToInt32(ldtCalc.Rows[0][enmPlan.plan_id.ToString().ToUpper()]);

                        if (Convert.ToString(ldtCalc.Rows[0]["MDAge"]).IsNotNullOrEmpty())
                            lstrMDAge = Convert.ToString(ldtCalc.Rows[0]["MDAge"]);


                        DateTime ldtStartDate = new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 01, 01);
                        DateTime ldtendDate = new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 09, 30);

                        lintNonSuspendibleMonth = GetNonSuspendibleMonths(lbusPerson.icdoPerson.ssn, lbusPerson,
                               abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, lintPlanId, null, ldtStartDate, ldtendDate, false);

                        if ((lintNonSuspendibleMonth >= 1 || lstrMDAge == busConstant.FLAG_YES) && ldtPayeeDOD == DateTime.MinValue)
                        {
                            lblnCreateRIEntry = true;
                        }
                    }
                }

                if (lblnCreateRIEntry)
                {
                    decimal idecBenefitAmt = 0.0M; //PIR 607
                    if (astrBenefitType == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        //RequestID: 72091
                        if (lbusPayeeAccount.icdoPayeeAccount.istrBenefitOptionValue == busConstant.LIFE && lbusPayeeAccount.icdoPayeeAccount.istrOriginalBenefitOptionValue.IsNotNullOrEmpty()
                                && new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 11, 01) < lbusPayeeAccount.icdoPayeeAccount.idtSpouseDateOfDeath)
                            ldecBenefitAmount = abusBenefitCalculationOptions.icdoBenefitCalculationOptions.pop_up_benefit_amount;
                        else
                            ldecBenefitAmount = abusBenefitCalculationOptions.icdoBenefitCalculationOptions.participant_amount;


                        if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
                        {
                            lbusBenefitCalculationDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault();

                            if (!lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
                            {
                                if (lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() > 0)
                                {
                                    DateTime ldtParticipantTurns65 = abusBenefitCalculationHeader.ibusPerson.icdoPerson.date_of_birth.AddYears(65);
                                    if (ldtParticipantTurns65.Day != 1)
                                    {
                                        ldtParticipantTurns65 = ldtParticipantTurns65.GetLastDayofMonth().AddDays(1);
                                    }
                                    bool lblnGetAmountForReemployment = false;

                                    if (ldtRetirementIncDate >= ldtParticipantTurns65)
                                    {
                                        lblnGetAmountForReemployment = true;
                                    }
                                    //PIR 607
                                    //RequestID: 72091
                                    if (abusBenefitCalculationOptions.icdoBenefitCalculationOptions.pop_up_benefit_amount != 0M)
                                        idecBenefitAmt = GetBenefitAmountOfParticipantFromYearlyDetail(abusBenefitCalculationHeader, lbusBenefitCalculationDetail, ldtRetirementIncDate.Year, ablnGetAmountForReemployment: lblnGetAmountForReemployment, ldtPaymentDate: new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 11, 01));
                                    else
                                        idecBenefitAmt = GetBenefitAmountOfParticipantFromYearlyDetail(abusBenefitCalculationHeader, lbusBenefitCalculationDetail, ldtRetirementIncDate.Year, ablnGetAmountForReemployment: lblnGetAmountForReemployment);

                                    if (idecBenefitAmt > 0)
                                        ldecBenefitAmount = idecBenefitAmt;
                                }
                            }
                        }

                        lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(aintBenefitCalculationHeaderId, 0,
                         ((ldecBenefitAmount) * adecIncPercent) / 100,
                         ldtRetirementIncDate);

                        if (adecLocal700GuarenteedAmt != 0)
                        {
                            lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(aintBenefitCalculationHeaderId, 0, (adecLocal700GuarenteedAmt * adecIncPercent) / 100,
                                                                                                    ldtRetirementIncDate);
                        }
                    }
                    else if (astrBenefitType == busConstant.BENEFIT_TYPE_RETIREMENT || astrBenefitType == busConstant.BENEFIT_TYPE_WITHDRAWAL)
                    {
                        //PIR 894
                        if (lbusPayeeAccount.icdoPayeeAccount.istrBenefitOptionValue == busConstant.LIFE && lbusPayeeAccount.icdoPayeeAccount.istrOriginalBenefitOptionValue.IsNotNullOrEmpty()
                            && new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 11, 01) < lbusPayeeAccount.icdoPayeeAccount.idtSpouseDateOfDeath)
                        {
                            ldecBenefitAmount = abusBenefitCalculationOptions.icdoBenefitCalculationOptions.pop_up_benefit_amount;
                        }
                        else
                        {
                            ldecBenefitAmount = abusBenefitCalculationOptions.icdoBenefitCalculationOptions.benefit_amount;
                        }
                        if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
                        {
                            lbusBenefitCalculationDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.FirstOrDefault();

                            if (!lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
                            {
                                if (lbusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() > 0)
                                {
                                    DateTime ldtParticipantTurns65 = abusBenefitCalculationHeader.ibusPerson.icdoPerson.date_of_birth.AddYears(65);
                                    if (ldtParticipantTurns65.Day != 1)
                                    {
                                        ldtParticipantTurns65 = ldtParticipantTurns65.GetLastDayofMonth().AddDays(1);
                                    }
                                    bool lblnGetAmountForReemployment = false;

                                    if (ldtRetirementIncDate >= ldtParticipantTurns65)
                                    {
                                        lblnGetAmountForReemployment = true;
                                    }
                                    //PIR 607
                                    //PIR 894
                                    if (abusBenefitCalculationOptions.icdoBenefitCalculationOptions.pop_up_benefit_amount != 0M)
                                        idecBenefitAmt = GetBenefitAmountOfParticipantFromYearlyDetail(abusBenefitCalculationHeader, lbusBenefitCalculationDetail, ldtRetirementIncDate.Year, ablnGetAmountForReemployment: lblnGetAmountForReemployment, ldtPaymentDate: new DateTime(abusActiveRetireeIncreaseContract.icdoActiveRetireeIncreaseContract.plan_year, 11, 01));
                                    else
                                        idecBenefitAmt = GetBenefitAmountOfParticipantFromYearlyDetail(abusBenefitCalculationHeader, lbusBenefitCalculationDetail, ldtRetirementIncDate.Year, ablnGetAmountForReemployment: lblnGetAmountForReemployment);

                                    if (idecBenefitAmt > 0)
                                        ldecBenefitAmount = idecBenefitAmt;
                                }
                            }
                        }

                        lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(aintBenefitCalculationHeaderId, 0,
                       ((ldecBenefitAmount) * adecIncPercent) / 100,
                       ldtRetirementIncDate);

                        if (adecLocal700GuarenteedAmt != 0)
                            lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(aintBenefitCalculationHeaderId, 0, (adecLocal700GuarenteedAmt * adecIncPercent) / 100,
                                                                                            ldtRetirementIncDate);
                    }
                    else if (astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT || astrBenefitType == busConstant.BENEFIT_TYPE_DEATH_POST_RETIREMENT)
                    {
                        lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(aintBenefitCalculationHeaderId, 0,
                       ((abusBenefitCalculationOptions.icdoBenefitCalculationOptions.survivor_amount) * adecIncPercent) / 100,
                       ldtRetirementIncDate);

                        if (adecLocal700GuarenteedAmt != 0)
                            lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(aintBenefitCalculationHeaderId, 0, (adecLocal700GuarenteedAmt * adecIncPercent) / 100,
                                                                                                 ldtRetirementIncDate);
                    }
                }
            }
            else
            {
                lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(0, aintQdroCalculationHeaderId,
                            ((abusQdroCalculationOptions.icdoQdroCalculationOptions.alt_payee_benefit_amount) *
                            adecIncPercent) / 100, ldtRetirementIncDate);

                if (adecLocal700GuarenteedAmt != 0)
                    lbusDisabilityRetireeIncrease.InsertValuesInDisabiltyRetireeIncrease(0, aintQdroCalculationHeaderId, (adecLocal700GuarenteedAmt * adecIncPercent) / 100, ldtRetirementIncDate);
            }
        }

        public void CreatePayeeAccountForRetireeIncrease(int aintBenefitAccountID, string astrFamilyRelationshipValue, decimal adecNonTaxableBeginningBalance,
                                                            DateTime adtNextPaymentDate, int aintExistingPayeeAccount,
                                                            Collection<busDisabilityRetireeIncrease> aclbDisabilityRetireeIncrease, busBenefitCalculationHeader abusBenefitCalculationHeader,
                                                            busQdroCalculationHeader abusQdroCalculationHeader, Collection<busBenefitCalculationDetail> aclbenefitCalculationDetail,
                                                            Collection<busQdroCalculationDetail> aclbQdroCalculationDetail)
        {
            busPayeeAccount lbusPayeeAccount = new busPayeeAccount { icdoPayeeAccount = new cdoPayeeAccount() };
            Collection<busPayeeAccount> lclbExistingRetireeIncPayeeAccount = new Collection<busPayeeAccount>();
            int lintPayeeAccountID = 0, lintPlanBenefitId = 0;

            lclbExistingRetireeIncPayeeAccount = lbusPayeeAccount.LoadRetireeIncFromAppDetail(aintExistingPayeeAccount);

            foreach (busDisabilityRetireeIncrease lbusDisabilityRetireeIncrease in aclbDisabilityRetireeIncrease)
            {
                busPlanBenefitXr lbusPlanBenefitXr = new busPlanBenefitXr();
                decimal ldecAdjustedRetireeIncAmt = 0;
                int lintExistingRetireeIncreaseAmount = 0;

                if (lclbExistingRetireeIncPayeeAccount != null && (!lclbExistingRetireeIncPayeeAccount.Where(item => item.icdoPayeeAccount.benefit_begin_date.Year ==
                                                lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Year).IsNullOrEmpty()))
                {
                    //PIR 607
                    continue;
                }
                //PIR 607
                DateTime ldtStartDate = new DateTime(lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Year, 01, 01);
                DateTime ldtendDate = new DateTime(lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Year, 11, 30);
                Dictionary<int, Dictionary<int, decimal>> ldictHoursAfterRetirement = new Dictionary<int, Dictionary<int, decimal>>();
                DateTime ldtLastWorkingDate = new DateTime();
                string lstrEmpName = string.Empty;
                int lintReemployedYear = 0;
                int lintNonSuspendibleMonth = 0;

                if (abusBenefitCalculationHeader != null)
                {
                    ldictHoursAfterRetirement = LoadMPIHoursAfterRetirementDate(abusBenefitCalculationHeader.ibusPerson.icdoPerson.ssn,
                    ldtStartDate.AddMonths(-1), busConstant.MPIPP_PLAN_ID, ref ldtLastWorkingDate, ref lstrEmpName, lintReemployedYear);

                    abusBenefitCalculationHeader.ibusPerson.LoadPersonSuspendibleMonth();
                    lintNonSuspendibleMonth = 11 - (GetSuspendibleMonthsBetweenTwoDates(ldictHoursAfterRetirement, abusBenefitCalculationHeader.ibusPerson.iclbPersonSuspendibleMonth, ldtStartDate, ldtendDate));
                }
                //if (lintNonSuspendibleMonth > 0)
                //{
                ldecAdjustedRetireeIncAmt = lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_amount - lintExistingRetireeIncreaseAmount;

                if (ldecAdjustedRetireeIncAmt > 0)
                {
                    if (abusBenefitCalculationHeader != null && lintNonSuspendibleMonth > 0)
                    {
                        lintPlanBenefitId = lbusPlanBenefitXr.GetPlanBenefitId(aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.plan_id, busConstant.LUMP_SUM);
                        lintPayeeAccountID = lbusPayeeAccount.ManagePayeeAccount(0, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.person_id, 0,
                                                                                          aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.benefit_application_detail_id,
                                                                                          aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.benefit_calculation_detail_id,
                                                                                          0, 0, aintBenefitAccountID, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value,
                                                                                          abusBenefitCalculationHeader.icdoBenefitCalculationHeader.istrRetirementType,
                                                                                          lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date,
                                                                                          DateTime.MinValue, busConstant.BenefitCalculation.ACCOUNT_RELATIONSHIP_MEMBER, astrFamilyRelationshipValue,
                                                                                          aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.minimum_guarantee_amount,
                                                                                          adecNonTaxableBeginningBalance, lintPlanBenefitId,
                                                                                          DateTime.MinValue, busConstant.FLAG_YES, busConstant.FLAG_NO, false, aintExistingPayeeAccount); //PIR 607
                    }
                    else if (abusQdroCalculationHeader != null)
                    {
                        //lintPlanBenefitId = lbusPlanBenefitXr.GetPlanBenefitId(aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.plan_id, busConstant.LUMP_SUM);
                        //lintPayeeAccountID = lbusPayeeAccount.ManagePayeeAccount(0, abusQdroCalculationHeader.icdoQdroCalculationHeader.person_id, 0,
                        //                                         aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.qdro_application_detail_id,
                        //                                         aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.qdro_calculation_detail_id,
                        //                                         0, 0, aintBenefitAccountID, busConstant.BENEFIT_TYPE_QDRO,
                        //                                         abusQdroCalculationHeader.icdoQdroCalculationHeader.istrRetirementType,
                        //                                         lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date,
                        //                                         DateTime.MinValue, busConstant.BenefitCalculation.ACCOUNT_RELATIONSHIP_MEMBER, astrFamilyRelationshipValue,
                        //                                         aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.minimum_guarantee_amount,
                        //                                         adecNonTaxableBeginningBalance, lintPlanBenefitId,
                        //                                         DateTime.MinValue, busConstant.FLAG_YES, busConstant.FLAG_NO, false, aintExistingPayeeAccount); //PIR 607

                        lintPlanBenefitId = lbusPlanBenefitXr.GetPlanBenefitId(aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.plan_id, busConstant.LUMP_SUM);
                        lintPayeeAccountID = lbusPayeeAccount.ManagePayeeAccount(0, abusQdroCalculationHeader.icdoQdroCalculationHeader.alternate_payee_id, 0,
                                                                 0, 0,
                                                                 aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.qdro_application_detail_id,
                                                                 aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.qdro_calculation_detail_id,
                                                                 aintBenefitAccountID, busConstant.BENEFIT_TYPE_QDRO,
                                                                 abusQdroCalculationHeader.icdoQdroCalculationHeader.istrRetirementType,
                                                                 lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date,
                                                                 DateTime.MinValue, busConstant.BenefitCalculation.ACCOUNT_RELATIONSHIP_ALTERNATE_PAYEE, astrFamilyRelationshipValue,
                                                                 aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.minimum_guarantee_amount,
                                                                 adecNonTaxableBeginningBalance, lintPlanBenefitId,
                                                                 DateTime.MinValue, busConstant.FLAG_YES, busConstant.FLAG_NO, false, aintExistingPayeeAccount);

                    }


                    lbusPayeeAccount.CreatePayeeAccountPaymentItemType(busConstant.ITEM48, ldecAdjustedRetireeIncAmt, "0", 0,
                                                                          adtNextPaymentDate, DateTime.MinValue, "N", false);

                    //Create Payee Account in Review
                    lbusPayeeAccount.CreateReviewPayeeAccountStatus();

                    #region Calculate Fedral tax
                    busPayeeAccountTaxWithholding lbusPayeeAccountTaxWithholding = new busPayeeAccountTaxWithholding();
                    if (ldecAdjustedRetireeIncAmt >= 750)
                    {

                        //2022 FDRL tax withholding not giving option of flat percentage in monthly distribution, but for retiree increase still need to hold flat 20 percent.
                        lbusPayeeAccountTaxWithholding.InsertValuesInTaxWithHolding(lbusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.FEDRAL_STATE_TAX,
                        busConstant.Benefit_Distribution_Type_LumpSum, adtNextPaymentDate, DateTime.MinValue, busConstant.FLAT_PERCENT, 0, "MQ", 0, 20);

                        //if (lbusPayeeAccount.icdoPayeeAccount.benefit_account_type_value != busConstant.BENEFIT_TYPE_QDRO)
                        //{
                        //    lbusPayeeAccountTaxWithholding.InsertValuesInTaxWithHolding(lbusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.FEDRAL_STATE_TAX,
                        //        busConstant.Benefit_Distribution_Type_Monthly_Benefit, adtNextPaymentDate, DateTime.MinValue, busConstant.FLAT_PERCENT, 0, "M", 0, 20);
                        //}
                        //else
                        //{
                        //    lbusPayeeAccountTaxWithholding.InsertValuesInTaxWithHolding(lbusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.FEDRAL_STATE_TAX,
                        //        busConstant.Benefit_Distribution_Type_Monthly_Benefit, adtNextPaymentDate, DateTime.MinValue, busConstant.FLAT_PERCENT, 0, "M", 0, 10);
                        //}
                    }
                    else
                    {
                        //Load existing fedral tax data
                        lbusPayeeAccountTaxWithholding =
                            lbusPayeeAccountTaxWithholding.LoadTaxWithHoldingByPayeeAccountIdAndTaxType(lbusPayeeAccount.icdoPayeeAccount.reference_id, busConstant.FEDRAL_STATE_TAX);

                        if (lbusPayeeAccountTaxWithholding != null)
                        {
                            lbusPayeeAccountTaxWithholding.icdoPayeeAccountTaxWithholding.Insert();
                        }
                    }

                    #endregion

                    if (ldecAdjustedRetireeIncAmt >= 750)
                    {
                        if (lbusPayeeAccount.idtNextBenefitPaymentDate == DateTime.MinValue)
                            lbusPayeeAccount.idtNextBenefitPaymentDate = adtNextPaymentDate;
                        lbusPayeeAccount.ProcessTaxWithHoldingDetails(true);
                    }
                }
                //}
            }
        }

        public void CreatePayeeAccountForRetireeIncrease(int aintBenefitAccountID, string astrFamilyRelationshipValue, decimal adecNonTaxableBeginningBalance,
                                                    DateTime adtNextPaymentDate, int aintExistingPayeeAccount,
                                                    Collection<busDisabilityRetireeIncrease> aclbDisabilityRetireeIncrease, busBenefitCalculationHeader abusBenefitCalculationHeader,
                                                    busQdroCalculationHeader abusQdroCalculationHeader, Collection<busBenefitCalculationDetail> aclbenefitCalculationDetail,
                                                    Collection<busQdroCalculationDetail> aclbQdroCalculationDetail, busPayeeAccount abusPayeeAccount)
        {
            busPayeeAccount lbusPayeeAccount = new busPayeeAccount { icdoPayeeAccount = new cdoPayeeAccount() };
            Collection<busPayeeAccount> lclbExistingRetireeIncPayeeAccount = new Collection<busPayeeAccount>();
            decimal ldecAdjustedRetireeIncAmt = 0;
            busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType = null;
            int lintPayeeAccountID = 0, lintPlanBenefitId = 0;

            lclbExistingRetireeIncPayeeAccount = lbusPayeeAccount.LoadRetireeIncFromAppDetail(aintExistingPayeeAccount);

            foreach (busDisabilityRetireeIncrease lbusDisabilityRetireeIncrease in aclbDisabilityRetireeIncrease)
            {
                int lintExistingRetireeIncreaseAmount = 0;

                if (lclbExistingRetireeIncPayeeAccount != null && (!lclbExistingRetireeIncPayeeAccount.Where(item => item.icdoPayeeAccount.benefit_begin_date.Year ==
                                                lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Year).IsNullOrEmpty()))
                {
                    lbusPayeeAccountPaymentItemType = new busPayeeAccountPaymentItemType();

                    lintExistingRetireeIncreaseAmount = lbusPayeeAccountPaymentItemType.LoadAmountItemTypeIdAndPayeeAccountId(lclbExistingRetireeIncPayeeAccount.Where(item => item.icdoPayeeAccount.benefit_begin_date ==
                                            lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date).FirstOrDefault().icdoPayeeAccount.payee_account_id);
                }

                ldecAdjustedRetireeIncAmt += lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_amount - lintExistingRetireeIncreaseAmount;

            }
            if (ldecAdjustedRetireeIncAmt > 0)
            {
                busPlanBenefitXr lbusPlanBenefitXr = new busPlanBenefitXr();
                /*
                if (abusBenefitCalculationHeader != null)
                {
                    lintPlanBenefitId = lbusPlanBenefitXr.GetPlanBenefitId(aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.plan_id, busConstant.LUMP_SUM);
                    lintPayeeAccountID = lbusPayeeAccount.ManagePayeeAccount(lintPayeeAccountID, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.person_id, 0,
                                                                                      aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.benefit_application_detail_id,
                                                                                      aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.benefit_calculation_detail_id,
                                                                                      0, 0, aintBenefitAccountID, aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.benefit_subtype_value,
                                                                                      abusBenefitCalculationHeader.icdoBenefitCalculationHeader.istrRetirementType,
                                                                                      lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date,
                                                                                      DateTime.MinValue, busConstant.BenefitCalculation.ACCOUNT_RELATIONSHIP_MEMBER, astrFamilyRelationshipValue,
                                                                                      aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.minimum_guarantee_amount,
                                                                                      adecNonTaxableBeginningBalance, lintPlanBenefitId,
                                                                                      DateTime.MinValue, busConstant.FLAG_YES, busConstant.FLAG_NO, false, aintExistingPayeeAccount);
                }
                else if (abusQdroCalculationHeader != null)
                {
                    lintPlanBenefitId = lbusPlanBenefitXr.GetPlanBenefitId(aclbenefitCalculationDetail.First().icdoBenefitCalculationDetail.plan_id, busConstant.LUMP_SUM);
                    lintPayeeAccountID = lbusPayeeAccount.ManagePayeeAccount(0, abusQdroCalculationHeader.icdoQdroCalculationHeader.person_id, 0,
                                                                                     aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.qdro_application_detail_id,
                                                                                     aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.qdro_calculation_detail_id,
                                                                                     0, 0, aintBenefitAccountID, aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.benefit_subtype_value,
                                                                                     abusQdroCalculationHeader.icdoQdroCalculationHeader.istrRetirementType,
                                                                                     lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date,
                                                                                     DateTime.MinValue, busConstant.BenefitCalculation.ACCOUNT_RELATIONSHIP_MEMBER, astrFamilyRelationshipValue,
                                                                                     aclbQdroCalculationDetail.First().icdoQdroCalculationDetail.minimum_guarantee_amount,
                                                                                     adecNonTaxableBeginningBalance, lintPlanBenefitId,
                                                                                     DateTime.MinValue, busConstant.FLAG_YES, busConstant.FLAG_NO, false, aintExistingPayeeAccount);
                }*/


                lbusPayeeAccount.CreatePayeeAccountPaymentItemType(busConstant.ITEM48, ldecAdjustedRetireeIncAmt, "0", 0,
                                                                      adtNextPaymentDate, DateTime.MinValue, "N", false);

                //Create Payee Account in Review
                lbusPayeeAccount.CreateReviewPayeeAccountStatus();

                #region Calculate Fedral tax
                busPayeeAccountTaxWithholding lbusPayeeAccountTaxWithholding = new busPayeeAccountTaxWithholding();
                if (ldecAdjustedRetireeIncAmt >= 750)
                {
                    //2022 FDRL tax withholding not giving option of flat percentage in monthly distribution, but for retiree increase still need to hold flat 20 percent.
                    lbusPayeeAccountTaxWithholding.InsertValuesInTaxWithHolding(lbusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.FEDRAL_STATE_TAX,
                        busConstant.Benefit_Distribution_Type_LumpSum, adtNextPaymentDate, DateTime.MinValue, busConstant.FLAT_PERCENT, 0, "MQ", 0, 20);

                    //if (lbusPayeeAccount.icdoPayeeAccount.benefit_account_type_value != busConstant.BENEFIT_TYPE_QDRO)
                    //{
                    //    lbusPayeeAccountTaxWithholding.InsertValuesInTaxWithHolding(lbusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.FEDRAL_STATE_TAX,
                    //        busConstant.Benefit_Distribution_Type_Monthly_Benefit, adtNextPaymentDate, DateTime.MinValue, busConstant.FLAT_PERCENT, 0, "M", 0, 20);

                    //}
                    //else
                    //{
                    //    lbusPayeeAccountTaxWithholding.InsertValuesInTaxWithHolding(lbusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.FEDRAL_STATE_TAX,
                    //        busConstant.Benefit_Distribution_Type_Monthly_Benefit, adtNextPaymentDate, DateTime.MinValue, busConstant.FLAT_PERCENT, 0, "M", 0, 10);
                    //}
                }
                else
                {
                    //Load existing fedral tax data
                    lbusPayeeAccountTaxWithholding =
                        lbusPayeeAccountTaxWithholding.LoadTaxWithHoldingByPayeeAccountIdAndTaxType(lbusPayeeAccount.icdoPayeeAccount.reference_id, busConstant.FEDRAL_STATE_TAX);

                    if (lbusPayeeAccountTaxWithholding != null)
                    {
                        lbusPayeeAccountTaxWithholding.icdoPayeeAccountTaxWithholding.Insert();
                    }
                }

                #endregion

                if (ldecAdjustedRetireeIncAmt >= 750)
                {
                    if (lbusPayeeAccount.idtNextBenefitPaymentDate == DateTime.MinValue)
                        lbusPayeeAccount.idtNextBenefitPaymentDate = adtNextPaymentDate;
                    lbusPayeeAccount.ProcessTaxWithHoldingDetails(true);
                }
            }
        }


        public decimal GetLocal700GuarentedAmt(int aintPersonaccountID)
        {
            decimal ldecAmount = 0;

            DataTable ldtbList = busBase.Select("cdoLocal700GuaranteedAmount.GetGuaranteedAmtByPersonAccountID", new object[] { aintPersonaccountID });

            if (ldtbList.Rows.Count > 0)
            {
                ldecAmount = Convert.ToInt32(ldtbList.Rows[0][enmLocal700GuaranteedAmount.guaranteed_amount.ToString()]);
            }

            return ldecAmount;
        }

        public Hashtable LoadHoursAfterRetirementDate(DataTable adtGetHoursAfterRetirementDate, DateTime adtFromDate)
        {
            Hashtable lhstYearlyHours = new Hashtable();
            if (adtGetHoursAfterRetirementDate.Rows.Count > 0)
            {

                var distinctRows = (from DataRow dRow in adtGetHoursAfterRetirementDate.Rows
                                    select new { col1 = dRow["ComputationYear"] }).Distinct();
                foreach (var ldtRow in distinctRows)
                {
                    int lintCompYear = Convert.ToInt32(ldtRow.col1.ToString());

                    Hashtable lhstMonthlyHours = new Hashtable();
                    for (int i = 12; i >= 1; i--)
                    {
                        lhstMonthlyHours.Add(i, busConstant.ZERO_DECIMAL);
                    }

                    foreach (DataRow ldrWeeklyHours in adtGetHoursAfterRetirementDate.Rows)
                    {
                        if (Convert.ToInt32(ldrWeeklyHours["ComputationYear"].ToString()) == lintCompYear)
                        {
                            DateTime ldtFromDate = Convert.ToDateTime(ldrWeeklyHours["FromDate"]);
                            decimal ldecHours = 1M;
                            int lintPayrollMonth = 1;

                            if (Convert.ToInt32(ldrWeeklyHours["Weeks"]) > 0)
                            {
                                ldecHours = Convert.ToDecimal(ldrWeeklyHours["PensionHours"]) / Convert.ToInt32(ldrWeeklyHours["Weeks"]);
                            }
                            else
                            {
                                ldecHours = Convert.ToDecimal(ldrWeeklyHours["PensionHours"]);
                            }

                            while (ldtFromDate <= Convert.ToDateTime(ldrWeeklyHours["ToDate"]))
                            {
                                if (ldtFromDate >= adtFromDate)
                                {
                                    lintPayrollMonth = busGlobalFunctions.GetPayrollMonth(ldtFromDate);
                                    lhstMonthlyHours[lintPayrollMonth] = (decimal)lhstMonthlyHours[lintPayrollMonth] + ldecHours;
                                }
                                ldtFromDate = ldtFromDate.AddDays(7);
                            }
                        }
                    }

                    lhstYearlyHours.Add(lintCompYear, lhstMonthlyHours);

                }
            }
            return lhstYearlyHours;

        }

        public decimal FillYearlyDetailSetBenefitAmountForEachYear(busBenefitCalculationHeader abusBenefitCalculationHeader, busBenefitCalculationDetail abusBenefitCalculationDetail)
        {
            decimal adecBenefitAmount = decimal.Zero;
            DateTime ldtMDdt;
            if (abusBenefitCalculationDetail != null)
            {
                decimal ldecAnnualMaxAmount = decimal.Zero;
                decimal ldecReducedBenefit = decimal.Zero;
                decimal ldecFactor = decimal.Zero;
                decimal ldecERF = decimal.Zero;
                //PIR - 930
                decimal ldecMax_EE_Derv_Amount = decimal.Zero;
                decimal ldecER_Derv_Amount = decimal.Zero;
                decimal ldecER_Act_Incr_Amount = decimal.Zero;

                if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
                {
                    abusBenefitCalculationDetail.LoadBenefitCalculationYearlyDetails();
                }
                if (abusBenefitCalculationDetail.iclbBenefitCalculationOptions.IsNullOrEmpty())
                {
                    abusBenefitCalculationDetail.LoadBenefitCalculationOptionss();
                }
                //PIR - 930
                if (!abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty() &&
                    !abusBenefitCalculationDetail.iclbBenefitCalculationOptions.IsNullOrEmpty())
                {
                    //RMD72Project
                    //Added bellow code to determine md date
                    int lintPersonId = abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.icdoPerson.person_id;
                    DateTime ldtDOB = abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.icdoPerson.date_of_birth;
                    DateTime ldtRetirementDate;
                    if (abusBenefitCalculationHeader.ibusBenefitApplication.idtRetirementDate != DateTime.MinValue)
                    {
                        ldtRetirementDate = abusBenefitCalculationHeader.ibusBenefitApplication.idtRetirementDate;
                    }
                    else
                    {
                        ldtRetirementDate = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date;
                    }
                    DateTime ldtVestedDate = busGlobalFunctions.GetVestedDate(lintPersonId, abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id);
                    DateTime ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(lintPersonId, ldtVestedDate);  //calculate MD Date based on participant MD age option
                    // RID# 153935 
                    //DateTime ldt72MinDate = busGlobalFunctions.Get72MinDistributionDate(ldtDOB, ldtVestedDate); //calculate MD date based on age 70.5
                    //If participant had age 72 option but retireed before 72MD date, business asked to use 70.5 instead of if participant age 72 MD date.
                    //if (ldtMinDistributionDate == ldt72MinDate && ldtRetirementDate < ldtMinDistributionDate)
                    //{
                    //    ldtMinDistributionDate = busGlobalFunctions.GetMinDistributionDate(ldtDOB, ldtVestedDate); //calculate MD date based on age 70.5
                    //}
                    ldtMDdt = ldtMinDistributionDate;
                    //ldtMDdt = new DateTime(abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.icdoPerson.date_of_birth.AddYears(70).AddMonths(6).Year + 1, 04, 01);

                    busBenefitCalculationOptions lbusBenefitCalculationOptions = abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault();

                    busBenefitCalculationYearlyDetail lbusbenefitYearofRetirement = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).FirstOrDefault();

                    ldecFactor = lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.benefit_option_factor;

                    //PIR - 930
                    ldecMax_EE_Derv_Amount = lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt;
                    ldecER_Derv_Amount = lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.er_derived_amount;
                    ldecER_Act_Incr_Amount = lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.er_act_inc_amt;
					ldecAnnualMaxAmount = lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount;

					Collection<busBenefitCalculationYearlyDetail> lclbReemployedWorkHistory = new Collection<busBenefitCalculationYearlyDetail>();

                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_RETIREMENT)
                    {
                        if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.benefit_subtype_value == busConstant.RETIREMENT_TYPE_LATE)
                        {
                            ldecReducedBenefit = Math.Round(abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount, 2);//PIR 627 10292015
                        }
                        else
                        {
                            ldecReducedBenefit = Math.Round(abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount, 2);//PIR 627 10292015
                        }

                        if (lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.benefit_option_factor != decimal.Zero)
                        {
                            adecBenefitAmount = Math.Round(ldecReducedBenefit * lbusbenefitYearofRetirement.icdoBenefitCalculationYearlyDetail.benefit_option_factor, 2);
                        }
                        else
                        {
                            adecBenefitAmount = Math.Round(ldecReducedBenefit * lbusBenefitCalculationOptions.icdoBenefitCalculationOptions.benefit_option_factor, 2);
                        }
                    }
                    else
                    {
                        //Right now keeping the values as of retirement date.
                        if (lbusBenefitCalculationOptions.icdoBenefitCalculationOptions.disability_amount > lbusBenefitCalculationOptions.icdoBenefitCalculationOptions.benefit_amount)
                        {
                            adecBenefitAmount = lbusBenefitCalculationOptions.icdoBenefitCalculationOptions.disability_amount;
                        }
                        else
                        {
                            adecBenefitAmount = lbusBenefitCalculationOptions.icdoBenefitCalculationOptions.benefit_amount;
                        }
                    }

                    //Ticket - 151464
                    //Ticket-154388
                    decimal lbenefitOptionFactor = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).FirstOrDefault().icdoBenefitCalculationYearlyDetail.benefit_option_factor;
                    abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).FirstOrDefault().icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount = ldecAnnualMaxAmount * lbenefitOptionFactor;

                    if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() > 0)
                    {
                        lclbReemployedWorkHistory = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderBy(item => item.icdoBenefitCalculationYearlyDetail.plan_year)
                            .Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).ToList().ToCollection();
                        if (!lclbReemployedWorkHistory.IsNullOrEmpty())
                        {
                            foreach (busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail in lclbReemployedWorkHistory)
                            {
                                //PIR 627 10292015
                                if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_RETIREMENT)
                                {
                                    //PIR - 930
                                    if (lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.plan_year < ldtMDdt.Year)
                                        lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                             lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.total_accrued_benefit;
                                    else
                                        lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                         lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date;

                                    //PIR - 930
                                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.max_ee_derv_amt = ldecMax_EE_Derv_Amount;
                                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_derived_amount = ldecER_Derv_Amount;
                                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.er_act_inc_amt = ldecER_Act_Incr_Amount;
                                }
                                else
                                {
                                    ldecFactor = decimal.Zero;
                                    ldecFactor = lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_option_factor;
                                    //PIR 627 10292015
                                    if (lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.vested_hours >= 870)
                                        adecBenefitAmount += Math.Round(lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_option_factor *
                                            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.accrued_benefit_amount, 3); //Mailed issue - Taxable Amt to be paid+ Non-Taxable Amt to be paid not equals Benefit Amt
                                    lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount = adecBenefitAmount;
                                }

                            }
                        }
                    }
                }

            }

            return adecBenefitAmount;
        }

        //Will be used to get accrued benefit after retirement for each year[asit would different]
        //Calling in Disability if hours after retirement date.
        //Reemployment.
        //anlnGetAmountForReemployment : Only be true If payment is grreater than or equal to when part turns 65 : Kunal
        public decimal GetBenefitAmountOfParticipantFromYearlyDetail(busBenefitCalculationHeader abusBenefitCalculationHeader, busBenefitCalculationDetail abusBenefitCalculationDetail, int aintYear, bool ablnGetAmountForReemployment = false, bool ablnMDReEvaluation = false, bool ablnReemployedAfterMD = false, DateTime ldtPaymentDate = default(DateTime))
        {
            decimal adecBenefitAmount = decimal.Zero;
            DateTime ldtPopupJointAnnuitantDOD = DateTime.MinValue; //PIR 894

            if (abusBenefitCalculationDetail != null)
            {
                decimal ldecAccruedBenefit = decimal.Zero;

                if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty())
                {
                    abusBenefitCalculationDetail.LoadBenefitCalculationYearlyDetails();
                }
                if (abusBenefitCalculationDetail.iclbBenefitCalculationOptions.IsNullOrEmpty())
                {
                    abusBenefitCalculationDetail.LoadBenefitCalculationOptionss();
                }

                if (!abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty() &&
                    !abusBenefitCalculationDetail.iclbBenefitCalculationOptions.IsNullOrEmpty())
                {
                    busBenefitCalculationYearlyDetail lbusBenefitCalculationPrevYearlyDetail = null;

                    //PIR 894
                    if (abusBenefitCalculationDetail.iclbBenefitCalculationOptions.OrderByDescending(t => t.icdoBenefitCalculationOptions.benefit_calculation_option_id).Where(item => item.icdoBenefitCalculationOptions.pop_up_benefit_amount != 0).Count() > 0)
                    {
                        busPerson lbusSurvivourInfo = new busPerson();
                        if (lbusSurvivourInfo.FindPerson(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.beneficiary_person_id))
                        {
                            ldtPopupJointAnnuitantDOD = lbusSurvivourInfo.icdoPerson.date_of_death;
                        }
                    }

                    if (!ablnMDReEvaluation)
                    {
                        #region Disability           
                        if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                        {
                            if (aintYear == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year || !ablnGetAmountForReemployment)
                            {
                                //10 Percent
                                if (lbusBenefitCalculationPrevYearlyDetail == null)
                                    lbusBenefitCalculationPrevYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };


                                if (aintYear == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year || !ablnGetAmountForReemployment)
                                {
                                    if (ablnGetAmountForReemployment && abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail != null && abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES
                                      && item.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit > 0).Count() > 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).
                                            Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES
                                        && item.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit > 0).FirstOrDefault();
                                    }
                                    else if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount > 0 && abusBenefitCalculationDetail.iclbBenefitCalculationOptions != null
                                         && abusBenefitCalculationDetail.iclbBenefitCalculationOptions.Count > 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount
                                                * abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.benefit_option_factor;
                                    }
                                    //RID 61301
                                    else if (abusBenefitCalculationDetail.iclbBenefitCalculationOptions != null
                                         && abusBenefitCalculationDetail.iclbBenefitCalculationOptions.Count > 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                            abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.benefit_amount >
                                            abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.disability_amount ?
                                            abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.benefit_amount
                                            :
                                            abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.disability_amount;
                                    }

                                }

                                //RequestID: 72091
                                if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.plan_year == 0)
                                {
                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear).FirstOrDefault();

                                    if (lbusBenefitCalculationPrevYearlyDetail.IsNull())
                                        lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault();
                                }
                            }
                            else
                            {
                                if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES &&
                                     item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear - 1).Count() > 0)
                                {
                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES &&
                                         item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear - 1).FirstOrDefault();
                                }
                                else if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES &&
                                     item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).Count() > 0)
                                {
                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES &&
                                         item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault();

                                }
                                else
                                {

                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).FirstOrDefault();
                                }

                            }


                            //RID 61301
                            if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID ||
                               abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID)
                            {
                                adecBenefitAmount = Convert.ToDecimal(Math.Ceiling((lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount) / 0.5M) * 0.5M);
                            }
                            else
                            {
                                //10 Percent
                                //RequestID: 72091
                                if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && ldtPaymentDate != DateTime.MinValue && ldtPaymentDate > ldtPopupJointAnnuitantDOD)
                                {
                                    //RequestID: 72091
                                    if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount.IsNotNull() && lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount != 0)
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount;
                                    else
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount;
                                }
                                else if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && ldtPaymentDate != DateTime.MinValue && ldtPaymentDate < ldtPopupJointAnnuitantDOD)
                                {
                                    //RequestID: 72091
                                    if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date.IsNotNull() && lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date != 0)
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date;
                                    else
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount;

                                }
                                else
                                    adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount;
                            }
                        }
                        #endregion Disability

                        #region Retirement
                        else if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_RETIREMENT)
                        {
                            //10 Percent
                            if (lbusBenefitCalculationPrevYearlyDetail == null)
                                lbusBenefitCalculationPrevYearlyDetail = new busBenefitCalculationYearlyDetail { icdoBenefitCalculationYearlyDetail = new cdoBenefitCalculationYearlyDetail() };


                            //PIR 930
                            decimal ldecBenefitOptionFactor = 0M;
                            if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)
                               && item.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year && item.icdoBenefitCalculationYearlyDetail.benefit_option_factor != 0).Count() > 0)
                            {
                                ldecBenefitOptionFactor = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)
                              && item.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year).FirstOrDefault().icdoBenefitCalculationYearlyDetail.benefit_option_factor;
                            }
                            else
                            {
                                ldecBenefitOptionFactor = abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.benefit_option_factor;
                            }

                            //PIR 930
                            if (aintYear == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year || !ablnGetAmountForReemployment)
                            {
                                if (ablnReemployedAfterMD && ablnGetAmountForReemployment && abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail != null
                                    && abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail
                                    .Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year
                                    && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).Count() > 0)
                                {
                                    lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                        abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail
                                    .Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year
                                    && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).FirstOrDefault().icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date;

                                    //Ticket - 87971
                                    if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount == decimal.Zero
                                        && abusBenefitCalculationDetail.iclbBenefitCalculationOptions.Count() > 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                              abusBenefitCalculationDetail.iclbBenefitCalculationOptions[0].icdoBenefitCalculationOptions.benefit_amount;
                                    }
                                }
                                //Ticket - 151464
                                else if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail != null
                                        && abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail
                                        .Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear
                                        && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).Count() > 0)
                                {

                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail
                                        .Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear
                                        && !(item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES)).LastOrDefault();

                                    if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount> 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                           lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount
                                         * ldecBenefitOptionFactor;

                                    }
                                    else if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date > 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                          lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date
                                         * ldecBenefitOptionFactor;

                                    }
                                    else 
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                         (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount == decimal.Zero &&
                                         abusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount != decimal.Zero ?
                                         abusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount :
                                         abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount)
                                         * ldecBenefitOptionFactor;


                                    }
                                }

                                else if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount > 0 && abusBenefitCalculationDetail.iclbBenefitCalculationOptions != null
                                     && abusBenefitCalculationDetail.iclbBenefitCalculationOptions.Count > 0)
                                {
                                    ////PIR 894
                                    //if(aintYear <= ldtPopupJointAnnuitantDOD.Year)
                                    //    lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                    //             abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount
                                    //            * abusBenefitCalculationDetail.iclbBenefitCalculationOptions.FirstOrDefault().icdoBenefitCalculationOptions.pop_up_option_factor;
                                    //else
                                    lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount
                                        * ldecBenefitOptionFactor;
                                }
                                else
                                {
                                    //RID 61301 
                                    lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                        (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount == decimal.Zero &&
                                        abusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount != decimal.Zero ?
                                        abusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount :
                                        abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount)
                                        * ldecBenefitOptionFactor;

                                }

                                //PIR 894
                                if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.plan_year == 0)
                                {
                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear).FirstOrDefault();

                                    //RequestID: 72091
                                    if (lbusBenefitCalculationPrevYearlyDetail.IsNull())
                                        lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault();
                                }
                            }
                            else
                            {
                                if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES).Count() > 0)
                                {
                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.reemployed_flag == busConstant.FLAG_YES &&
                                         item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault(); //PIR 627 10292015
                                    if (lbusBenefitCalculationPrevYearlyDetail.IsNull())
                                    {
                                        //PIR 627 10292015
                                        lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault();

                                    }
                                }
                                else
                                {
                                    //PIR 627 10292015
                                    lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).ThenByDescending(item => item.icdoBenefitCalculationYearlyDetail.total_accrued_benefit).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault();

                                    if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount > 0 && abusBenefitCalculationDetail.iclbBenefitCalculationOptions != null
                                     && abusBenefitCalculationDetail.iclbBenefitCalculationOptions.Count > 0)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                             abusBenefitCalculationDetail.icdoBenefitCalculationDetail.actuarial_accrued_benefit_amount
                                            * ldecBenefitOptionFactor;
                                    }
                                    else
                                    {
                                        //RID 61301 
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                            (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount == decimal.Zero &&
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount != decimal.Zero ?
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.unreduced_benefit_amount :
                                            abusBenefitCalculationDetail.icdoBenefitCalculationDetail.early_reduced_benefit_amount)
                                            * ldecBenefitOptionFactor;
                                    }

                                    //PIR 930
                                    if (ablnReemployedAfterMD)
                                    {
                                        lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                            abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(item => item.icdoBenefitCalculationYearlyDetail.plan_year).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year < aintYear).FirstOrDefault().icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date;

                                        //Ticket - 87971
                                        if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount == decimal.Zero
                                            && abusBenefitCalculationDetail.iclbBenefitCalculationOptions.Count() > 0)
                                        {
                                            lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount =
                                                  abusBenefitCalculationDetail.iclbBenefitCalculationOptions[0].icdoBenefitCalculationOptions.benefit_amount;
                                        }
                                    }
                                }
                            }

                            if (abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_666_PLAN_ID ||
                                abusBenefitCalculationDetail.icdoBenefitCalculationDetail.plan_id == busConstant.LOCAL_700_PLAN_ID)
                            {
                                adecBenefitAmount = Convert.ToDecimal(Math.Ceiling((lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount) / 0.5M) * 0.5M);
                            }
                            else
                            {
                                //10 Percent
                                //PIR 894
                                if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && ldtPaymentDate != DateTime.MinValue && ldtPaymentDate > ldtPopupJointAnnuitantDOD)
                                {
                                    //RequestID: 72091
                                    if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount.IsNotNull() && lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount != 0)
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount;
                                    else
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount;
                                }
                                else if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && ldtPaymentDate != DateTime.MinValue && ldtPaymentDate < ldtPopupJointAnnuitantDOD)
                                {
                                    //RequestID: 72091
                                    if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date.IsNotNull() && lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date != 0)
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_as_of_det_date;
                                    else
                                        adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount;

                                }
                                else
                                    adecBenefitAmount = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.idecTotalBenefitAmount;
                            }


                        }
                        #endregion Retirement
                    }
                    else if (ablnMDReEvaluation)
                    {

                        if (abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear - 1).Count() > 0)
                        {
                            lbusBenefitCalculationPrevYearlyDetail = abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.OrderByDescending(t => t.icdoBenefitCalculationYearlyDetail.benefit_calculation_yearly_detail_id).Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == aintYear - 1).FirstOrDefault();

                            //RID 60954
                            if (lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_option_factor == decimal.Zero)
                            {
                                lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_option_factor = 1M;

                                if (!abusBenefitCalculationDetail.iclbBenefitCalculationYearlyDetail.IsNullOrEmpty() &&
                                    !abusBenefitCalculationDetail.iclbBenefitCalculationOptions.IsNullOrEmpty())
                                {
                                    lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_option_factor
                                        = abusBenefitCalculationDetail.iclbBenefitCalculationOptions[0].icdoBenefitCalculationOptions.benefit_option_factor;
                                }
                            }

                            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year - 1 == aintYear - 1)
                            {

                                ldecAccruedBenefit = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.actuarial_equivalent_amount * lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.benefit_option_factor;
                            }
                            else
                            {   //PIR 894
                                if (ldtPopupJointAnnuitantDOD != DateTime.MinValue && (aintYear > ldtPopupJointAnnuitantDOD.Year || ldtPaymentDate > ldtPopupJointAnnuitantDOD))
                                    ldecAccruedBenefit = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.popup_to_life_amount;
                                else
                                    ldecAccruedBenefit = lbusBenefitCalculationPrevYearlyDetail.icdoBenefitCalculationYearlyDetail.annual_adjustment_amount;
                            }

                            if (ldecAccruedBenefit > 0)
                            {
                                ldecAccruedBenefit = ldecAccruedBenefit - abusBenefitCalculationDetail.icdoBenefitCalculationDetail.qdro_offset;
                            }
                            adecBenefitAmount = ldecAccruedBenefit;
                        }
                    }
                }
            }
            return adecBenefitAmount;
        }

        //PIR RID 66354
        public bool CheckQuaterlyAlreadyPosted(int aintPersonAccountID, DateTime adtEffectiveDate, decimal adecIAPBalanceAmount = 0.00M,
    decimal adec52SplAccountBalance = 0.00M, decimal adec161SplAccountBalance = 0.00M, string astrTransactionType = null)
        {
            bool lblnAllocationExists = false;
            DataTable ldtbList = busBase.Select("cdoPersonAccountRetirementContribution.CheckQuaterlyAllocation", new object[5] { aintPersonAccountID, adtEffectiveDate, adecIAPBalanceAmount, adec52SplAccountBalance, adec161SplAccountBalance });
            if (ldtbList.Rows.Count > 0)
            {
                if (ldtbList.Rows[0][0].IsNotNull() && Convert.ToInt32(ldtbList.Rows[0][0]) > 0)
                {
                    lblnAllocationExists = true;
                }
            }
            return lblnAllocationExists;
        }

        public bool CheckIFMonthIsASuspendibleMonth(int aintPersonId, int aintPlanId, string astrSuspendibleMonth)
        {
            bool lblnIsSuspendible = false;
            DataTable ldtbList = busBase.Select("cdoPersonSuspendibleMonth.CheckIfSuspendibleMonth", new object[] { aintPersonId, aintPlanId, astrSuspendibleMonth });
            if (ldtbList.Rows.Count > 0)
            {
                if (ldtbList.Rows[0][0].IsNotNull() && Convert.ToInt32(ldtbList.Rows[0][0]) > 0)
                {
                    lblnIsSuspendible = true;
                }
            }
            return lblnIsSuspendible;
        }

        public Dictionary<int, Dictionary<int, decimal>> LoadMPIHoursAfterRetirementDate(string astrSSN, DateTime adtRetirementDate, int aintPlanID, ref DateTime adtLastReportedHourMonth, ref string astrEmployerName, int aintPlanYear = 0)
        {
            DateTime ldtHoursFromDate = adtRetirementDate;
            //Hours after end of the week of retirement date.
            ldtHoursFromDate = adtRetirementDate.AddDays(6 - Convert.ToInt32(adtRetirementDate.DayOfWeek));
            string lstrPlanHours = "PensionHours";
            if (aintPlanID == busConstant.IAP_PLAN_ID)
            {
                lstrPlanHours = "IAPHours";
            }
            Dictionary<int, Dictionary<int, decimal>> ldictYears = new Dictionary<int, Dictionary<int, decimal>>();

            utlConnection utlLegacyDBConnetion = HelperFunction.GetDBConnectionProperties("Legacy");
            string lstrLegacyDBConnetion = utlLegacyDBConnetion.istrConnectionString;

            SqlParameter[] lsqlParameters = new SqlParameter[2];
            SqlParameter param1 = new SqlParameter("@SSN", DbType.String);
            SqlParameter param2 = new SqlParameter("@RETIREMENT_DATE", DbType.DateTime);

            param1.Value = astrSSN;
            lsqlParameters[0] = param1;

            param2.Value = adtRetirementDate;
            lsqlParameters[1] = param2;
            astrEmployerName = string.Empty;

            DataTable ldtGetHoursAfterRetirementDate = busGlobalFunctions.ExecuteSPtoGetDataTable("usp_GetWorkDataAfterRetirement", lstrLegacyDBConnetion, null, lsqlParameters);
            if (ldtGetHoursAfterRetirementDate.Rows.Count > 0)
            {
                if (!string.IsNullOrEmpty(Convert.ToString(ldtGetHoursAfterRetirementDate.Compute("MAX(ToDate)", null))))
                {
                    adtLastReportedHourMonth = Convert.ToDateTime(ldtGetHoursAfterRetirementDate.Compute("MAX(ToDate)", null)); ;
                }
                var distinctRows = (from DataRow dRow in ldtGetHoursAfterRetirementDate.Rows
                                    select new { col1 = dRow["ComputationYear"] }).Distinct();
                foreach (var ldtRow in distinctRows)
                {
                    int lintCompYear = Convert.ToInt32(ldtRow.col1.ToString());

                    Dictionary<int, decimal> ldictMonths = new Dictionary<int, decimal>();
                    for (int i = 12; i >= 1; i--)
                    {
                        ldictMonths.Add(i, busConstant.ZERO_DECIMAL);
                    }

                    foreach (DataRow ldrWeeklyHours in ldtGetHoursAfterRetirementDate.Rows)
                    {

                        if (Convert.ToInt32(ldrWeeklyHours["ComputationYear"].ToString()) == lintCompYear)
                        {
                            if (lintCompYear == aintPlanYear && aintPlanYear != 0)
                            {
                                if (!string.IsNullOrEmpty(Convert.ToString(ldrWeeklyHours["EmployerName"])))
                                {
                                    if (!astrEmployerName.Contains(Convert.ToString(ldrWeeklyHours["EmployerName"])))
                                    {
                                        if (!string.IsNullOrEmpty(astrEmployerName))
                                        {
                                            astrEmployerName += "/";
                                        }
                                        astrEmployerName += Convert.ToString(ldrWeeklyHours["EmployerName"]);
                                    }
                                }
                            }
                            DateTime ldtFromDate = Convert.ToDateTime(ldrWeeklyHours["FromDate"]);
                            decimal ldecHours = 1M;
                            int lintPayrollMonth = 1;

                            if (Convert.ToInt32(ldrWeeklyHours["Weeks"]) > 1)
                            {
                                ldecHours = Convert.ToDecimal(ldrWeeklyHours[lstrPlanHours]) / Convert.ToInt32(ldrWeeklyHours["Weeks"]);
                                while (ldtFromDate <= Convert.ToDateTime(ldrWeeklyHours["ToDate"]))
                                {
                                    if (ldtFromDate > ldtHoursFromDate)
                                    {
                                        if (lintCompYear < 2004)
                                        {
                                            lintPayrollMonth = ldtFromDate.Month;
                                        }
                                        else
                                        {
                                            lintPayrollMonth = busGlobalFunctions.GetPayrollMonth(ldtFromDate);
                                        }
                                        ldictMonths[lintPayrollMonth] = (decimal)ldictMonths[lintPayrollMonth] + ldecHours;
                                    }
                                    ldtFromDate = ldtFromDate.AddDays(7);
                                }
                            }
                            else
                            {
                                ldecHours = Convert.ToDecimal(ldrWeeklyHours[lstrPlanHours]);
                                if (ldtFromDate > ldtHoursFromDate)
                                {
                                    if (lintCompYear < 2004)
                                    {
                                        lintPayrollMonth = ldtFromDate.Month;
                                    }
                                    else
                                    {
                                        lintPayrollMonth = busGlobalFunctions.GetPayrollMonth(ldtFromDate);
                                    }

                                    ldictMonths[lintPayrollMonth] = (decimal)ldictMonths[lintPayrollMonth] + ldecHours;
                                }
                            }


                        }
                    }

                    ldictYears.Add(lintCompYear, ldictMonths);

                }
            }
            return ldictYears;

        }

        //Using this Only In case of ReEmployment
        public DataTable LoadHoursBetweenTwoDates(string astrSSN, DateTime adtFromDate, DateTime adtToDate, string astrPlanCode)
        {
            utlConnection utlLegacyDBConnetion = HelperFunction.GetDBConnectionProperties("Legacy");
            string lstrLegacyDBConnetion = utlLegacyDBConnetion.istrConnectionString;

            SqlParameter[] lsqlParameters = new SqlParameter[4];
            SqlParameter param1 = new SqlParameter("@SSN", DbType.String);
            SqlParameter param2 = new SqlParameter("@FROM_DATE", DbType.DateTime);
            SqlParameter param3 = new SqlParameter("@TO_DATE", DbType.DateTime);
            SqlParameter param4 = new SqlParameter("@PLANCODE", DbType.String);

            param1.Value = astrSSN;
            lsqlParameters[0] = param1;

            param2.Value = adtFromDate;
            lsqlParameters[1] = param2;

            param3.Value = adtToDate;
            lsqlParameters[2] = param3;

            param4.Value = astrPlanCode;
            lsqlParameters[3] = param4;

            DataTable ldtGetHoursForLastComputationYear = busGlobalFunctions.ExecuteSPtoGetDataTable("usp_GetWorkDataBetweenTwoDates", lstrLegacyDBConnetion, null, lsqlParameters);
            if (ldtGetHoursForLastComputationYear.Rows.Count > 0)
            {
                if (ldtGetHoursForLastComputationYear.AsEnumerable().Where(datarow => datarow["QUALIFIED_HOURS"] != DBNull.Value && Convert.ToDecimal(datarow["QUALIFIED_HOURS"]) >= 870).Count() > 0)
                {

                    return ldtGetHoursForLastComputationYear;
                }
            }

            return null;
        }


        //Payment Adjustments - ROhan
        public void CreateOverpaymentUnderPayment(busPayeeAccount abusPayeeAccount, Collection<busBenefitMonthwiseAdjustmentDetail> aclbBenefitMonthwiseAdjustmentDetail, string astrRetroPaymentType, decimal adecRetroAmountTaxablePaid = decimal.Zero
    , decimal adecRetroAmountNonTaxablePaid = decimal.Zero, Collection<busPayeeAccountRetroPayment> aclbbusPayeeAccountRetroPayment = null, bool ablnPostDeath = false)
        {
            decimal ldecNonTaxableAmountPaid = 0;
            decimal ldecNonTaxableAmountShouldHavePaid = 0;

            decimal ldecTaxableAmountPaid = 0;
            decimal ldecTaxableAmountShouldHavePaid = 0;

            bool lblnIsOverPayment = false;
            decimal ldecAmountPaid = 0;
            decimal ldecAmountShouldHavePaid = 0;
            int lintPayeeAccountRetroPaymentId = 0;

            bool lblnIsActiveReemploymentRetro = false;

            //PIR 853
            if (abusPayeeAccount.ibusPayee.IsNull())
            {
                abusPayeeAccount.ibusPayee = new busPerson { icdoPerson = new cdoPerson() };
                abusPayeeAccount.ibusPayee.FindPerson(abusPayeeAccount.icdoPayeeAccount.person_id);
            }

            if (abusPayeeAccount.iclbPayeeAccountStatus == null)
            {
                abusPayeeAccount.LoadPayeeAccountStatuss();
            }

            if (abusPayeeAccount.ibusPayee.icdoPerson.date_of_death != DateTime.MinValue && abusPayeeAccount.iclbPayeeAccountStatus != null && abusPayeeAccount.iclbPayeeAccountStatus.Count > 0
                && abusPayeeAccount.iclbPayeeAccountStatus.OrderByDescending(t => t.icdoPayeeAccountStatus.status_effective_date)
                .FirstOrDefault().icdoPayeeAccountStatus.status_value == busConstant.PAYEE_ACCOUNT_STATUS_COMPLETED)
            {
                if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0)
                {
                    aclbBenefitMonthwiseAdjustmentDetail = aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date <= abusPayeeAccount.ibusPayee.icdoPerson.date_of_death).ToList().ToCollection();
                }
            }

            #region Get Amounts Paid and Amount Should have Paid
            if (abusPayeeAccount.idtNextBenefitPaymentDate == DateTime.MinValue)
                abusPayeeAccount.LoadNextBenefitPaymentDate();

            abusPayeeAccount.LoadBenefitDetails();

            if (aclbBenefitMonthwiseAdjustmentDetail.Count > 0)
            {
                aclbBenefitMonthwiseAdjustmentDetail = aclbBenefitMonthwiseAdjustmentDetail.OrderBy(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date).ToList().ToCollection();
                ldecNonTaxableAmountPaid = aclbBenefitMonthwiseAdjustmentDetail.Sum(item => item.icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_paid);
                ldecTaxableAmountPaid = aclbBenefitMonthwiseAdjustmentDetail.Sum(item => item.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_paid);
                ldecAmountPaid = ldecNonTaxableAmountPaid + ldecTaxableAmountPaid;

                if (aclbbusPayeeAccountRetroPayment.IsNullOrEmpty())
                {
                    //10 Percent Increase
                    ldecNonTaxableAmountShouldHavePaid = aclbBenefitMonthwiseAdjustmentDetail.Sum(item => Math.Round(item.icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_to_be_paid, 2));
                    ldecTaxableAmountShouldHavePaid = aclbBenefitMonthwiseAdjustmentDetail.Sum(item => Math.Round(item.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_to_be_paid, 2));
                }
                else
                {
                    foreach (busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail in aclbBenefitMonthwiseAdjustmentDetail)
                    {
                        if (lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.override_flag == busConstant.FLAG_YES)
                        {
                            ldecNonTaxableAmountShouldHavePaid += lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.overriden_non_taxable_amount;
                        }
                        else
                        {
                            //10 Percent Increase
                            ldecNonTaxableAmountShouldHavePaid += Math.Round(lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_to_be_paid, 2);
                        }

                        if (lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.override_flag == busConstant.FLAG_YES)
                        {
                            ldecTaxableAmountShouldHavePaid += lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.overriden_taxable_amount;
                        }
                        else
                        {
                            //10 Percent Increase
                            ldecTaxableAmountShouldHavePaid += Math.Round(lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_to_be_paid, 2);
                        }
                    }
                }
                ldecAmountShouldHavePaid = ldecNonTaxableAmountShouldHavePaid + ldecTaxableAmountShouldHavePaid;

                if (adecRetroAmountTaxablePaid > decimal.Zero)
                {
                    ldecTaxableAmountPaid += adecRetroAmountTaxablePaid;
                    ldecNonTaxableAmountPaid += adecRetroAmountNonTaxablePaid;
                    ldecAmountPaid += adecRetroAmountTaxablePaid + adecRetroAmountNonTaxablePaid;
                }

                //PIR 853
                if (ablnPostDeath)
                {
                    ldecAmountPaid = ldecAmountPaid - aclbBenefitMonthwiseAdjustmentDetail.Sum(item => Math.Round(item.icdoBenefitMonthwiseAdjustmentDetail.amount_repaid, 2));
                    ldecTaxableAmountPaid = ldecTaxableAmountPaid - aclbBenefitMonthwiseAdjustmentDetail.Sum(item => Math.Round(item.icdoBenefitMonthwiseAdjustmentDetail.amount_repaid, 2));
                }
            }

            #endregion Get Amounts Paid and Amount Should have Paid

            #region Overlapping Overpayment and Overlapping Underpayment

            Collection<busReimbursementDetails> lclbAllReimbursementDetails = new Collection<busReimbursementDetails>();
            // decimal ldecTotalRepaidAmount = 0M;
            decimal ldecReemploymentUnderpaidTaxableAmount = 0M;
            decimal ldecReemploymentUnderpaidNonTaxableAmount = 0M;
            string lstrRepaymentStatus = string.Empty;
            // int lintRepaymentScheduleId = 0;
            // int lintRepaymentPayeeAccountRetroId =0;

            DataTable ldtblReimbusementAmountPaid = null;
            if ((astrRetroPaymentType == busConstant.RETRO_PAYMENT_ADJUSTMENT_BATCH || astrRetroPaymentType == busConstant.RETRO_PAYMENT_REEMPLOYMENT) &&
                aclbbusPayeeAccountRetroPayment == null)
            {
                #region Check if there is already a Over Payment for Retro type Benefit Adjustment in Pending ,In Progress Or Completed Status
                if (astrRetroPaymentType == busConstant.RETRO_PAYMENT_ADJUSTMENT_BATCH)
                {
                    ldtblReimbusementAmountPaid = Select("cdoPayeeAccountRetroPayment.GetReimbursementAmountPaidForBenefitAdjustment", new object[1] { abusPayeeAccount.icdoPayeeAccount.payee_account_id });

                }
                else if (astrRetroPaymentType == busConstant.RETRO_PAYMENT_REEMPLOYMENT)
                {
                    if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0)
                        ldtblReimbusementAmountPaid = Select("cdoPayeeAccountRetroPayment.GetReinbursementAmntPaidForReemployment", new object[3] { abusPayeeAccount.icdoPayeeAccount.payee_account_id,
                        aclbBenefitMonthwiseAdjustmentDetail.First().icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                        aclbBenefitMonthwiseAdjustmentDetail.Last().icdoBenefitMonthwiseAdjustmentDetail.payment_date });
                }
                if (ldtblReimbusementAmountPaid != null && ldtblReimbusementAmountPaid.Rows.Count > 0 && Convert.ToString(ldtblReimbusementAmountPaid.Rows[0][0]).IsNotNullOrEmpty())
                {
                    //ldecTotalRepaidAmount = Convert.ToDecimal(ldtblReimbusementAmountPaid.Rows[0]["AMOUNT_PAID"]);

                    //if (Convert.ToString(ldtblReimbusementAmountPaid.Rows[0][enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]).IsNotNullOrEmpty())
                    //    lstrRepaymentStatus = Convert.ToString(ldtblReimbusementAmountPaid.Rows[0][enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]);

                    //if (Convert.ToString(ldtblReimbusementAmountPaid.Rows[0][enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNotNullOrEmpty())
                    //    lintRepaymentScheduleId = Convert.ToInt32(ldtblReimbusementAmountPaid.Rows[0][enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]);

                    //if (Convert.ToString(ldtblReimbusementAmountPaid.Rows[0][enmRepaymentSchedule.payee_account_retro_payment_id.ToString().ToUpper()]).IsNotNullOrEmpty())
                    //    lintRepaymentPayeeAccountRetroId = Convert.ToInt32(ldtblReimbusementAmountPaid.Rows[0][enmRepaymentSchedule.payee_account_retro_payment_id.ToString().ToUpper()]);

                    lblnIsOverPayment = true;
                    Collection<busReimbursementDetails> lclbReimbursementDetails = new Collection<busReimbursementDetails>();
                    lclbReimbursementDetails = GetCollection<busReimbursementDetails>(ldtblReimbusementAmountPaid, "icdoReimbursementDetails");

                    foreach (busReimbursementDetails lbusReimbursementDetails in lclbReimbursementDetails)
                    {

                        if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0
                            && aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Month
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Month && item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Year
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Year).Count() > 0)
                        {
                            aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Month
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Month && item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Year
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Year).FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.amount_repaid
                                += lbusReimbursementDetails.icdoReimbursementDetails.amount_paid;
                        }
                        else if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0)
                        {
                            aclbBenefitMonthwiseAdjustmentDetail.LastOrDefault().icdoBenefitMonthwiseAdjustmentDetail.amount_repaid +=
                                lbusReimbursementDetails.icdoReimbursementDetails.amount_paid;
                        }

                        lclbAllReimbursementDetails.Add(lbusReimbursementDetails);
                    }
                }

                #region For Conversion Records with there no Payee Account Retro thn we will fetch Reimbursement Amount based on Posted date column in Reimbursement Details

                DataTable ldtblReimbursementDetails = null;
                if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0)
                    ldtblReimbursementDetails = Select("cdoRepaymentSchedule.GetAmountRepaidFromReimbursementDetails", new object[3]{abusPayeeAccount.icdoPayeeAccount.payee_account_id,
                         aclbBenefitMonthwiseAdjustmentDetail.First().icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                        aclbBenefitMonthwiseAdjustmentDetail.Last().icdoBenefitMonthwiseAdjustmentDetail.payment_date });

                if (ldtblReimbursementDetails != null && ldtblReimbursementDetails.Rows.Count > 0)
                {
                    lblnIsOverPayment = true;
                    Collection<busReimbursementDetails> lclbReimbursementDetails = new Collection<busReimbursementDetails>();
                    lclbReimbursementDetails = GetCollection<busReimbursementDetails>(ldtblReimbursementDetails, "icdoReimbursementDetails");

                    foreach (busReimbursementDetails lbusReimbursementDetails in lclbReimbursementDetails)
                    {

                        if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0
                            && aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Month
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Month && item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Year
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Year).Count() > 0)
                        {
                            aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Month
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Month && item.icdoBenefitMonthwiseAdjustmentDetail.payment_date.Year
                                == lbusReimbursementDetails.icdoReimbursementDetails.posted_date.Year).FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.amount_repaid
                                += lbusReimbursementDetails.icdoReimbursementDetails.amount_paid;
                        }

                        lclbAllReimbursementDetails.Add(lbusReimbursementDetails);
                    }


                }

                if (lblnIsOverPayment)
                {
                    ldecAmountPaid = ldecAmountPaid - aclbBenefitMonthwiseAdjustmentDetail.Sum(item => item.icdoBenefitMonthwiseAdjustmentDetail.amount_repaid);
                    ldecTaxableAmountPaid = ldecTaxableAmountPaid - aclbBenefitMonthwiseAdjustmentDetail.Sum(item => item.icdoBenefitMonthwiseAdjustmentDetail.amount_repaid);
                }

                #endregion For Conversion Records with there no Payee Account Retro thn we will fetch Reimbursement Amount based on Posted date column in Reimbursement Details


                #endregion Check if there is already a Over Payment for Retro type Benefit Adjustment in Pending ,In Progress Or Completed Status

                #region Check if there is already a active under payment for Retro type Benefit Adjustment,if yes delete it

                DataTable ldtblActiveRetroForBenefitAdjustment = null;

                if (astrRetroPaymentType == busConstant.RETRO_PAYMENT_ADJUSTMENT_BATCH)
                {
                    ldtblActiveRetroForBenefitAdjustment = Select("cdoPayeeAccountRetroPayment.GetActiveRetroForBenefitAdjustment", new object[2] { abusPayeeAccount.icdoPayeeAccount.payee_account_id, abusPayeeAccount.idtNextBenefitPaymentDate });
                }
                else if (astrRetroPaymentType == busConstant.RETRO_PAYMENT_REEMPLOYMENT)
                {
                    ldtblActiveRetroForBenefitAdjustment = Select("cdoPayeeAccountRetroPayment.GetActiveRetroForReemployment",
                        new object[4] { abusPayeeAccount.idtNextBenefitPaymentDate, aclbBenefitMonthwiseAdjustmentDetail.First().icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                        aclbBenefitMonthwiseAdjustmentDetail.Last().icdoBenefitMonthwiseAdjustmentDetail.payment_date, abusPayeeAccount.icdoPayeeAccount.payee_account_id });
                }

                if (ldtblActiveRetroForBenefitAdjustment != null && ldtblActiveRetroForBenefitAdjustment.Rows.Count > 0)
                {
                    if (astrRetroPaymentType == busConstant.RETRO_PAYMENT_REEMPLOYMENT)
                    {
                        foreach (DataRow ldrActiveRetroForBenefitAdjustment in ldtblActiveRetroForBenefitAdjustment.Rows)
                        {
                            if (Convert.ToString(ldrActiveRetroForBenefitAdjustment["IS_ACTIVE"]) == busConstant.FLAG_YES)
                            {
                                UpdateRetroPaymentsAndDeleteRelatedPayeeAccountpaymentItemTypes(Convert.ToInt32(ldrActiveRetroForBenefitAdjustment[enmPayeeAccountRetroPayment.payee_account_retro_payment_id.ToString().ToUpper()]));
                                abusPayeeAccount.LoadPayeeAccountPaymentItemType();

                            }
                            else
                            {
                                lblnIsActiveReemploymentRetro = true;

                                if (Convert.ToString(ldrActiveRetroForBenefitAdjustment["TAXABLE_AMOUNT"]).IsNotNullOrEmpty())
                                    ldecReemploymentUnderpaidTaxableAmount = Convert.ToDecimal(ldrActiveRetroForBenefitAdjustment["TAXABLE_AMOUNT"]);

                                if (Convert.ToString(ldrActiveRetroForBenefitAdjustment["NON_TAXABLE_AMOUNT"]).IsNotNullOrEmpty())
                                    ldecReemploymentUnderpaidNonTaxableAmount = Convert.ToDecimal(ldrActiveRetroForBenefitAdjustment["NON_TAXABLE_AMOUNT"]);

                            }
                        }

                        if (lblnIsActiveReemploymentRetro)
                        {
                            ldecNonTaxableAmountPaid += ldecReemploymentUnderpaidNonTaxableAmount;
                            ldecTaxableAmountPaid += ldecReemploymentUnderpaidTaxableAmount;

                            ldecAmountPaid = ldecNonTaxableAmountPaid + ldecTaxableAmountPaid;
                        }
                    }
                    else
                    {
                        UpdateRetroPaymentsAndDeleteRelatedPayeeAccountpaymentItemTypes(Convert.ToInt32(ldtblActiveRetroForBenefitAdjustment.Rows[0][enmPayeeAccountRetroPayment.payee_account_retro_payment_id.ToString().ToUpper()]));
                        abusPayeeAccount.LoadPayeeAccountPaymentItemType();
                    }
                }

                #endregion Check if there is already a active under payment for Retro type Benefit Adjustment,if yes delete it
            }


            #endregion Overlapping Overpayment and Overlapping Underpayment

            // Delete existing underpayment if new under payment of type benefit adjustment is getting created for same period
            //DeleteExistingBenifitForSamePeriod(abusPayeeAccount.icdoPayeeAccount.payee_account_id, abusPayeeAccount.idtNextBenefitPaymentDate, abusPayeeAccount.idtNextBenefitPaymentDate.GetLastDayofMonth(), lstrUnderPayment);

            //PIR 936
            DataTable ldtblExistingRetroOverDetailsforSameDates = busBase.Select("cdoPayeeAccountRetroPayment.GetRetroDetailsforBenefitAdjustment", new object[3]{abusPayeeAccount.icdoPayeeAccount.payee_account_id,abusPayeeAccount.idtNextBenefitPaymentDate,
                                     abusPayeeAccount.idtNextBenefitPaymentDate.GetLastDayofMonth()});


            //UNDER PAYMENT
            if (ldecAmountPaid < ldecAmountShouldHavePaid)
            {
                #region UNDER PAYMENT
                decimal UnderPaidTaxableAmount = ldecTaxableAmountShouldHavePaid - ldecTaxableAmountPaid;
                decimal UnderPaidNonTaxableAmount = ldecNonTaxableAmountShouldHavePaid - ldecNonTaxableAmountPaid;

                //PIR 853
                if (UnderPaidTaxableAmount < 0 || UnderPaidNonTaxableAmount < 0)
                {
                    UnderPaidTaxableAmount = Math.Abs(UnderPaidTaxableAmount + UnderPaidNonTaxableAmount);
                    UnderPaidNonTaxableAmount = decimal.Zero;
                }


                //PIR 936
                if (ldtblExistingRetroOverDetailsforSameDates != null && ldtblExistingRetroOverDetailsforSameDates.Rows.Count > 0)
                {
                    foreach (DataRow dr in ldtblExistingRetroOverDetailsforSameDates.Rows)
                    {
                        if (Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNullOrEmpty()
                            && (string.IsNullOrEmpty(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()].ToString())
                            || (Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                                Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]) == busConstant.FLAG_NO)))
                        {
                            DeleteExistingBenifitForSamePeriod(dr, true);
                        }
                        else if ((Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                            Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]) == busConstant.FLAG_YES
                           &&
                           (
                                (Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNotNullOrEmpty()
                               && (string.IsNullOrEmpty(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()].ToString())
                                      || (Convert.ToString(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]).IsNotNullOrEmpty()
                                      && Convert.ToString(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]) == busConstant.REIMBURSEMENT_STATUS_PENDING))
                               && Convert.ToString(dr[enmReimbursementDetails.reimbursement_details_id.ToString().ToUpper()]).IsNullOrEmpty())
                                ||
                              Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNullOrEmpty()
                           )
                        && Convert.ToString(dr[enmPayeeAccountRetroPayment.retro_payment_type_value.ToString().ToUpper()]) != busConstant.RETRO_PAYMENT_BENEFIT_OVERPAYMENT))
                        {
                            DeleteExistingBenifitForSamePeriod(dr, true);
                        }

                    }
                }

                foreach (busReimbursementDetails lbusReimbursementDetails in lclbAllReimbursementDetails)
                {
                    busRepaymentSchedule lbusRepaymentSchedule = new busRepaymentSchedule { icdoRepaymentSchedule = new cdoRepaymentSchedule() };

                    if (lbusRepaymentSchedule.FindRepaymentSchedule(lbusReimbursementDetails.icdoReimbursementDetails.repayment_schedule_id))
                    {
                        UpdateRetroPaymentsAndDeleteRelatedPayeeAccountpaymentItemTypes(lbusRepaymentSchedule.icdoRepaymentSchedule.payee_account_retro_payment_id, lbusRepaymentSchedule);
                    }
                }

                abusPayeeAccount.LoadPayeeAccountPaymentItemType();
                lintPayeeAccountRetroPaymentId = abusPayeeAccount.CreateRetroPayments(abusPayeeAccount, abusPayeeAccount.idtNextBenefitPaymentDate,
                                aclbBenefitMonthwiseAdjustmentDetail.First().icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                                     aclbBenefitMonthwiseAdjustmentDetail.Last().icdoBenefitMonthwiseAdjustmentDetail.payment_date.GetLastDayofMonth(), UnderPaidTaxableAmount, UnderPaidNonTaxableAmount,
                                     ref aclbBenefitMonthwiseAdjustmentDetail, astrRetroPaymentType, aclbbusPayeeAccountRetroPayment);
                #endregion UNDER PAYMENT
            }
            //OVER PAYMENT
            else if ((ldecAmountPaid > ldecAmountShouldHavePaid)) //10 Percent
            {
                # region OVER PAYMENT
                decimal OverPaidTaxableAmount = ldecTaxableAmountPaid - ldecTaxableAmountShouldHavePaid;
                decimal OverPaidNonTaxableAmount = ldecNonTaxableAmountPaid - ldecNonTaxableAmountShouldHavePaid;
                bool lblnOverlappingOverpayment = false;
                if (ldtblExistingRetroOverDetailsforSameDates != null && ldtblExistingRetroOverDetailsforSameDates.Rows.Count > 0)
                {
                    foreach (DataRow dr in ldtblExistingRetroOverDetailsforSameDates.Rows)
                    {
                        if (Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNullOrEmpty()
                            && (string.IsNullOrEmpty(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()].ToString())
                            || (Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                                Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]) == busConstant.FLAG_NO)))
                        {
                            DeleteExistingBenifitForSamePeriod(dr, true);
                        }
                        else if ((Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                            Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]) == busConstant.FLAG_YES
                           &&
                           (
                                (Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNotNullOrEmpty()
                               && (string.IsNullOrEmpty(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()].ToString())
                                      || (Convert.ToString(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]).IsNotNullOrEmpty()
                                      && Convert.ToString(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]) == busConstant.REIMBURSEMENT_STATUS_PENDING))
                               && Convert.ToString(dr[enmReimbursementDetails.reimbursement_details_id.ToString().ToUpper()]).IsNullOrEmpty())
                                ||
                              Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNullOrEmpty()
                           )
                        && Convert.ToString(dr[enmPayeeAccountRetroPayment.retro_payment_type_value.ToString().ToUpper()]) != busConstant.RETRO_PAYMENT_BENEFIT_OVERPAYMENT))
                        {
                            DeleteExistingBenifitForSamePeriod(dr, true);
                        }
                    }
                }
                ////Edge case scenario create under payment
                //if (((OverPaidTaxableAmount + OverPaidNonTaxableAmount) - ldecTotalRepaidAmount) < 0)
                //{
                //    OverPaidTaxableAmount = ldecTotalRepaidAmount - OverPaidTaxableAmount;

                //    if (OverPaidTaxableAmount > 0)
                //    {
                //        lintPayeeAccountRetroPaymentId = abusPayeeAccount.CreateRetroPayments(abusPayeeAccount, abusPayeeAccount.idtNextBenefitPaymentDate,
                //               aclbBenefitMonthwiseAdjustmentDetail.First().icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                //                    aclbBenefitMonthwiseAdjustmentDetail.Last().icdoBenefitMonthwiseAdjustmentDetail.payment_date.GetLastDayofMonth(), OverPaidTaxableAmount, OverPaidNonTaxableAmount,
                //                    ref aclbBenefitMonthwiseAdjustmentDetail, astrRetroPaymentType, aclbbusPayeeAccountRetroPayment);
                //    }
                //}
                //else
                //{
                #region OverlappingOverpayment
                //if (ldecTotalRepaidAmount > 0)
                //{
                //    OverPaidTaxableAmount = OverPaidTaxableAmount - ldecTotalRepaidAmount;

                //    #region OverlappingOverpayment : If previous Overpayment is in Pending / In progress status
                //    if (lstrRepaymentStatus == busConstant.REIMBURSEMENT_STATUS_PENDING || lstrRepaymentStatus == busConstant.REIMBURSEMENT_STATUS_INPROGRESS)
                //    {
                //        int lintPaymentTypeIdTaxable = abusPayeeAccount.GetPaymentItemTypeIDByItemCode(busConstant.ITEM1);
                //        int lintPaymentTypeIdNonTaxable = abusPayeeAccount.GetPaymentItemTypeIDByItemCode(busConstant.ITEM2);

                //        ProcessOverlappingOverPayments(lstrRepaymentStatus, lintRepaymentScheduleId, lintPaymentTypeIdTaxable, lintPaymentTypeIdNonTaxable, OverPaidTaxableAmount, OverPaidNonTaxableAmount, aclbBenefitMonthwiseAdjustmentDetail);
                //        lintPayeeAccountRetroPaymentId = lintRepaymentPayeeAccountRetroId;
                //        lblnOverlappingOverpayment = true;

                //        busWorkflowHelper.InitializeWorkflowIfNotExists(busConstant.PROCESS_OVERPAYMENT_WORKFLOW, abusPayeeAccount.icdoPayeeAccount.person_id,
                //                        0, abusPayeeAccount.icdoPayeeAccount.payee_account_id, null);
                //    }
                //    #endregion OverlappingOverpayment : If previous Overpayment is in Pending / In progress status
                //}


                foreach (busReimbursementDetails lbusReimbursementDetails in lclbAllReimbursementDetails)
                {
                    busRepaymentSchedule lbusRepaymentSchedule = new busRepaymentSchedule { icdoRepaymentSchedule = new cdoRepaymentSchedule() };

                    if (lbusRepaymentSchedule.FindRepaymentSchedule(lbusReimbursementDetails.icdoReimbursementDetails.repayment_schedule_id))
                    {
                        UpdateRetroPaymentsAndDeleteRelatedPayeeAccountpaymentItemTypes(lbusRepaymentSchedule.icdoRepaymentSchedule.payee_account_retro_payment_id, lbusRepaymentSchedule);
                    }
                }


                #endregion OverlappingOverpayment

                if (aclbBenefitMonthwiseAdjustmentDetail.Count > 0) //&& !lblnOverlappingOverpayment)
                {
                    lintPayeeAccountRetroPaymentId = abusPayeeAccount.CreateOverPayments(abusPayeeAccount, abusPayeeAccount.idtNextBenefitPaymentDate, aclbBenefitMonthwiseAdjustmentDetail.First().icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                                         aclbBenefitMonthwiseAdjustmentDetail.Last().icdoBenefitMonthwiseAdjustmentDetail.payment_date.GetLastDayofMonth(), OverPaidTaxableAmount, OverPaidNonTaxableAmount, astrRetroPaymentType, aclbbusPayeeAccountRetroPayment);

                    if (lintPayeeAccountRetroPaymentId > 0)
                    {
                        busWorkflowHelper.InitializeWorkflowIfNotExists(busConstant.PROCESS_OVERPAYMENT_WORKFLOW, abusPayeeAccount.icdoPayeeAccount.person_id,
                                          0, abusPayeeAccount.icdoPayeeAccount.payee_account_id, null);
                    }
                }
                // }
                #endregion OVER PAYMENT
            }
            //PIR 853
            else
            {

                if (ldtblExistingRetroOverDetailsforSameDates != null && ldtblExistingRetroOverDetailsforSameDates.Rows.Count > 0)
                {
                    foreach (DataRow dr in ldtblExistingRetroOverDetailsforSameDates.Rows)
                    {
                        if (Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNullOrEmpty()
                            && (string.IsNullOrEmpty(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()].ToString())
                            || (Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                                Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]) == busConstant.FLAG_NO)))
                        {
                            DeleteExistingBenifitForSamePeriod(dr, true);
                        }
                        else if ((Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]).IsNotNullOrEmpty() &&
                            Convert.ToString(dr[enmPayeeAccountRetroPayment.is_overpayment_flag.ToString().ToUpper()]) == busConstant.FLAG_YES
                           &&
                           (
                                (Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNotNullOrEmpty()
                               && (string.IsNullOrEmpty(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()].ToString())
                                      || (Convert.ToString(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]).IsNotNullOrEmpty()
                                      && Convert.ToString(dr[enmRepaymentSchedule.reimbursement_status_value.ToString().ToUpper()]) == busConstant.REIMBURSEMENT_STATUS_PENDING))
                               && Convert.ToString(dr[enmReimbursementDetails.reimbursement_details_id.ToString().ToUpper()]).IsNullOrEmpty())
                                ||
                              Convert.ToString(dr[enmRepaymentSchedule.repayment_schedule_id.ToString().ToUpper()]).IsNullOrEmpty()
                           )
                        && Convert.ToString(dr[enmPayeeAccountRetroPayment.retro_payment_type_value.ToString().ToUpper()]) != busConstant.RETRO_PAYMENT_BENEFIT_OVERPAYMENT))
                        {
                            DeleteExistingBenifitForSamePeriod(dr, true);
                        }
                    }
                }
            }

            #region Insert into Benefit Monthwise Adjustment Detail
            foreach (busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail in aclbBenefitMonthwiseAdjustmentDetail)
            {
                if (lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.benefit_monthwise_adjustment_detail_id == 0)
                {
                    if (lintPayeeAccountRetroPaymentId > 0)
                    {
                        lbusBenefitMonthwiseAdjustmentDetail.CreateMonthwiseAdjustmentDetail(lintPayeeAccountRetroPaymentId, lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.payment_date,
                            lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_to_be_paid, lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_to_be_paid,
                            lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_paid, lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_paid, lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.hours,
                            lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.suspended_flag, lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.payment_history_header_id, lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.amount_repaid);

                    }
                }
                else
                {
                    lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.Update();
                }

            }
            #endregion Insert into Benefit Monthwise Adjustment Detail

            abusPayeeAccount.LoadPayeeAccountRetroPayments();
            abusPayeeAccount.ProcessTaxWithHoldingDetails();
        }

        public void DeleteExistingBenifitForSamePeriod(DataRow adrExistingREtroDetailsforSameDates, bool ablnDelete)
        {
            busPayeeAccountRetroPayment lobjPayeeAccountRetroPayment = new busPayeeAccountRetroPayment { icdoPayeeAccountRetroPayment = new cdoPayeeAccountRetroPayment() };

            busRepaymentSchedule lbusRepaymentSchedule = new busRepaymentSchedule { icdoRepaymentSchedule = new cdoRepaymentSchedule() };
            lobjPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.LoadData(adrExistingREtroDetailsforSameDates);
            lbusRepaymentSchedule.icdoRepaymentSchedule.LoadData(adrExistingREtroDetailsforSameDates);

            if (ablnDelete)
            {
                if (lobjPayeeAccountRetroPayment.FindPayeeAccountRetroPayment(lobjPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.payee_account_retro_payment_id))
                {
                    lobjPayeeAccountRetroPayment.LoadPayeeAccountRetroPaymentDetails();
                    lobjPayeeAccountRetroPayment.LoadBenefitMonthwiseAdjustmentDetails();

                    if (lobjPayeeAccountRetroPayment.iclbBenefitMonthwiseAdjustmentDetail != null && lobjPayeeAccountRetroPayment.iclbBenefitMonthwiseAdjustmentDetail.Count > 0)
                    {
                        foreach (busBenefitMonthwiseAdjustmentDetail lobjBenefitMonthwiseAdjustmentDetail in lobjPayeeAccountRetroPayment.iclbBenefitMonthwiseAdjustmentDetail)
                        {
                            lobjBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.Delete();
                        }
                    }

                    if (lobjPayeeAccountRetroPayment.iclbPayeeAccountRetroPaymentDetail != null && lobjPayeeAccountRetroPayment.iclbPayeeAccountRetroPaymentDetail.Count > 0)
                    {
                        foreach (busPayeeAccountRetroPaymentDetail lobjPayeeAccountRetroPaymentDetail in lobjPayeeAccountRetroPayment.iclbPayeeAccountRetroPaymentDetail)
                        {
                            lobjPayeeAccountRetroPayment.ibusPayeeAccountPaymentItemType = new busPayeeAccountPaymentItemType();

                            if (lobjPayeeAccountRetroPayment.ibusPayeeAccountPaymentItemType.FindPayeeAccountPaymentItemType(lobjPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.payee_account_payment_item_type_id))
                            {
                                lobjPayeeAccountRetroPayment.ibusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.Delete();
                            }
                            lobjPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.Delete();
                        }
                    }

                    if (lbusRepaymentSchedule != null && lbusRepaymentSchedule.icdoRepaymentSchedule.repayment_schedule_id > 0)
                    {
                        lbusRepaymentSchedule.icdoRepaymentSchedule.Delete();
                    }

                    lobjPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.Delete();
                }
            }

        }
        //Payment Adjustments - Method calculates amount should have been paid right from date of retirement
        public void GetRetireeIncreaseAmountActuallyPaid(busPayeeAccount abusPayeeAccount, ref Collection<busBenefitMonthwiseAdjustmentDetail> aclbBenefitMonthwiseAdjustmentDetail)
        {
            Collection<busPayeeAccount> lclbExistingRetireeIncPayeeAccount = new Collection<busPayeeAccount>();
            decimal ldecGrossAmtAlreadyPaid = 0;
            DateTime ldtLeastPaymentDate = aclbBenefitMonthwiseAdjustmentDetail.OrderBy(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date).FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.payment_date;
            lclbExistingRetireeIncPayeeAccount = abusPayeeAccount.LoadRetireeIncFromAppDetail(abusPayeeAccount.icdoPayeeAccount.payee_account_id);
            if (lclbExistingRetireeIncPayeeAccount != null && lclbExistingRetireeIncPayeeAccount.Count > 0)
            {
                foreach (busPayeeAccount lbusRetireeIncreasePayeeAccount in lclbExistingRetireeIncPayeeAccount)
                {
                    decimal ldecTaxableAmtPaid = 0, ldecNonTaxableAmtPaid = 0;
                    DataTable ldtbAmtAlreadyPaidData;


                    ldtbAmtAlreadyPaidData = Select("cdoPaymentHistoryDistribution.GetGrossAmountForTheRetireeIncreaseParticipant", new object[1] {
                                                lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.payee_account_id });

                    foreach (DataRow ldrRow in ldtbAmtAlreadyPaidData.Rows)
                    {
                        DateTime ldtPaymentDate = new DateTime();
                        int lintPaymentHistoryHeaderId = 0;
                        //Ticket#104885
                        if (!ldrRow[enmPaymentHistoryHeader.payment_date.ToString()].ToString().IsNullOrEmpty())
                        {
                            ldtPaymentDate = Convert.ToDateTime(ldrRow[enmPaymentHistoryHeader.payment_date.ToString()]);
                            //PIR - 1036
                            //if (Convert.ToDateTime(ldrRow[enmPaymentHistoryHeader.payment_date.ToString()]) != lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date)
                            //{
                            //    ldtPaymentDate = lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date;
                            //}
                            //else
                            //{
                            //    ldtPaymentDate = Convert.ToDateTime(ldrRow[enmPaymentHistoryHeader.payment_date.ToString()]);
                            //}

                            //  if (ldtLeastPaymentDate <= ldtPaymentDate)
                            //if (lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date == ldtPaymentDate)
                            //{
                            //Ticket#104885
                            if (lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.retiree_incr_flag == "Y")
                            {
                                ldecTaxableAmtPaid = Convert.ToDecimal(ldrRow["TAXABLE_AMOUNT"]);
                                ldecNonTaxableAmtPaid = Convert.ToDecimal(ldrRow["NON_TAXABLE_AMOUNT"]);
                                ldecGrossAmtAlreadyPaid = ldecGrossAmtAlreadyPaid + ldecTaxableAmtPaid + ldecNonTaxableAmtPaid;

                                if (Convert.ToString(ldrRow["PAYMENT_HISTORY_HEADER_ID"]).IsNotNullOrEmpty())
                                    lintPaymentHistoryHeaderId = Convert.ToInt32(ldrRow["PAYMENT_HISTORY_HEADER_ID"]);


                                //Ticket#88098
                                if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0 &&
                                        aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date).Count() > 0)
                                {

                                    aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date).
                                        FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_paid += ldecTaxableAmtPaid;

                                    aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date).
                                        FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_paid += ldecNonTaxableAmtPaid;
                                }
                                //Ticket#88098
                                //Commented becuase unncessaryly creates new record for  benefitMonthwiseAdjustment details.. Only update the RetireeInc Taxable amount paid and non taxable amount paid.
                                //else
                                //{

                                //    if (lbusRetireeIncreasePayeeAccount.icdoPayeeAccount.benefit_begin_date == ldtPaymentDate)
                                //    {
                                //        busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail = new busBenefitMonthwiseAdjustmentDetail { icdoBenefitMonthwiseAdjustmentDetail = new cdoBenefitMonthwiseAdjustmentDetail() };
                                //        lbusBenefitMonthwiseAdjustmentDetail.FillMonthWiseAdjustmentDetail(ldtPaymentDate, 0,
                                //                                                0, ldecTaxableAmtPaid, ldecNonTaxableAmtPaid, 0, null, lintPaymentHistoryHeaderId);
                                //        aclbBenefitMonthwiseAdjustmentDetail.Add(lbusBenefitMonthwiseAdjustmentDetail);

                                //    }


                                //}

                            }

                            //}
                        }
                    }
                }
            }
        }

        public Collection<busBenefitMonthwiseAdjustmentDetail> GetAmountActuallyPaid(busPayeeAccount abusPayeeAccount, DateTime adtFromDate, DateTime adtToDate,
            bool ablnIsAdjustmentCalculation = false, bool ablnTrueGrossAmount = false)  //ablnTrueGrossAmount flag will exclude retro amounts
        {
            #region Already paid amounts and do the adjustments and insert values in adjustment table
            decimal ldecGrossAmtAlreadyPaid = 0;
            Collection<busBenefitMonthwiseAdjustmentDetail> lclbBenefitMonthwiseAdjustmentDetail = new Collection<busBenefitMonthwiseAdjustmentDetail>();

            //PIR 853
            if (abusPayeeAccount.ibusPayee.IsNull())
            {
                abusPayeeAccount.ibusPayee = new busPerson { icdoPerson = new cdoPerson() };
                abusPayeeAccount.ibusPayee.FindPerson(abusPayeeAccount.icdoPayeeAccount.person_id);
            }

            if (abusPayeeAccount.ibusPayee != null && abusPayeeAccount.ibusPayee.icdoPerson.person_id > 0 &&
                abusPayeeAccount.ibusPayee.icdoPerson.date_of_death != DateTime.MinValue)
            {
                if (adtToDate > abusPayeeAccount.ibusPayee.icdoPerson.date_of_death)
                {
                    if (abusPayeeAccount.ibusPayee.icdoPerson.date_of_death.Day != 1)
                        adtToDate = abusPayeeAccount.ibusPayee.icdoPerson.date_of_death.GetFirstDayofMonth();
                    else
                        adtToDate = abusPayeeAccount.ibusPayee.icdoPerson.date_of_death;
                }
            }

            if (adtFromDate <= adtToDate)
            {


                decimal ldecTaxableAmtPaid = 0, ldecNonTaxableAmtPaid = 0;
                DataTable ldtbAmtAlreadyPaidData;


                if (ablnTrueGrossAmount)
                {

                    ldtbAmtAlreadyPaidData = Select("cdoPaymentHistoryDistribution.GetTrueGrossAmountForTheParticipant", new object[3] {
                                                abusPayeeAccount.icdoPayeeAccount.payee_account_id, adtFromDate, adtToDate });
                }
                else
                {
                    ldtbAmtAlreadyPaidData = Select("cdoPaymentHistoryDistribution.GetGrossAmountForTheParticipant", new object[3] {
                                                abusPayeeAccount.icdoPayeeAccount.payee_account_id, adtFromDate, adtToDate });
                }



                foreach (DataRow ldrRow in ldtbAmtAlreadyPaidData.Rows)
                {
                    DateTime ldtPaymentDate = new DateTime();
                    int lintPaymentHistoryHeaderId = 0;

                    if (!ldrRow[enmPaymentHistoryHeader.payment_date.ToString()].ToString().IsNullOrEmpty())
                    {
                        ldtPaymentDate = Convert.ToDateTime(ldrRow[enmPaymentHistoryHeader.payment_date.ToString()]);
                        ldecTaxableAmtPaid = Convert.ToDecimal(ldrRow["TAXABLE_AMOUNT"]);
                        ldecNonTaxableAmtPaid = Convert.ToDecimal(ldrRow["NON_TAXABLE_AMOUNT"]);
                        ldecGrossAmtAlreadyPaid = ldecGrossAmtAlreadyPaid + ldecTaxableAmtPaid + ldecNonTaxableAmtPaid;

                        if (Convert.ToString(ldrRow["PAYMENT_HISTORY_HEADER_ID"]).IsNotNullOrEmpty())
                            lintPaymentHistoryHeaderId = Convert.ToInt32(ldrRow["PAYMENT_HISTORY_HEADER_ID"]);

                    }

                    busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail = new busBenefitMonthwiseAdjustmentDetail { icdoBenefitMonthwiseAdjustmentDetail = new cdoBenefitMonthwiseAdjustmentDetail() };
                    if (!lclbBenefitMonthwiseAdjustmentDetail.IsNullOrEmpty() &&
                              lclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == ldtPaymentDate).Count() > 0)
                    {
                        lclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == ldtPaymentDate).
                            FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_paid += ldecTaxableAmtPaid;
                        lclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == ldtPaymentDate).
                            FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_paid += ldecNonTaxableAmtPaid;
                    }
                    else
                    {
                        lbusBenefitMonthwiseAdjustmentDetail.FillMonthWiseAdjustmentDetail(ldtPaymentDate, 0, 0, ldecTaxableAmtPaid, ldecNonTaxableAmtPaid, 0, null, lintPaymentHistoryHeaderId);
                        lclbBenefitMonthwiseAdjustmentDetail.Add(lbusBenefitMonthwiseAdjustmentDetail);
                    }
                }

                //Payroll Month Fix - 12052019
                //DateTime ldtPaymentDateFrom = new DateTime(adtFromDate.Year, adtFromDate.Month, 01);// this.GetPayrollDateFromMonth(adtFromDate);
                //DateTime ldtPaymentDateTo = new DateTime(adtToDate.Year, adtToDate.Month, 01);  //this.GetPayrollDateFromMonth(adtToDate);

                //RID#90258 Reverting back Payroll Month selection.
                DateTime ldtPaymentDateFrom = this.GetPayrollDateFromMonth(adtFromDate);
                DateTime ldtPaymentDateTo = this.GetPayrollDateFromMonth(adtToDate);

                busBenefitMonthwiseAdjustmentDetail lMissingbusBenefitMonthwiseAdjustmentDetail = null;
                while (ldtPaymentDateFrom <= ldtPaymentDateTo)
                {
                    if (lclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == ldtPaymentDateFrom).Count() == 0)
                    {
                        lMissingbusBenefitMonthwiseAdjustmentDetail = new busBenefitMonthwiseAdjustmentDetail { icdoBenefitMonthwiseAdjustmentDetail = new cdoBenefitMonthwiseAdjustmentDetail() };
                        lMissingbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.payment_date = ldtPaymentDateFrom;
                        lclbBenefitMonthwiseAdjustmentDetail.Add(lMissingbusBenefitMonthwiseAdjustmentDetail);
                    }
                    ldtPaymentDateFrom = ldtPaymentDateFrom.AddMonths(1);
                }
            }

            if (ablnIsAdjustmentCalculation)
                GetRetireeIncreaseAmountActuallyPaid(abusPayeeAccount, ref lclbBenefitMonthwiseAdjustmentDetail);

            //PIR 1060
            lclbBenefitMonthwiseAdjustmentDetail = lclbBenefitMonthwiseAdjustmentDetail.OrderBy(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date).ToList().ToCollection();

            return lclbBenefitMonthwiseAdjustmentDetail;


            #endregion
        }

        public void ProcessOverlappingOverPayments(string astrRepaymentStatus, int aintRepaymentScheduleId, int aintPaymentTypeIdTaxable, int aintPaymentTypeIdNonTaxable,
             decimal adecOverPaidTaxableAmount, decimal adecOverPaidNonTaxableAmount, Collection<busBenefitMonthwiseAdjustmentDetail> aclbBenefitMonthwiseAdjustmentDetail)
        {

            busRepaymentSchedule lbusRepaymentSchedule = new busRepaymentSchedule { icdoRepaymentSchedule = new cdoRepaymentSchedule() };
            if (lbusRepaymentSchedule.FindRepaymentSchedule(aintRepaymentScheduleId))
            {
                busPayeeAccountRetroPayment lbusPayeeAccountRetroPayment = new busPayeeAccountRetroPayment { icdoPayeeAccountRetroPayment = new cdoPayeeAccountRetroPayment() };
                if (lbusPayeeAccountRetroPayment.FindPayeeAccountRetroPayment(lbusRepaymentSchedule.icdoRepaymentSchedule.payee_account_retro_payment_id))
                {
                    lbusPayeeAccountRetroPayment.LoadPayeeAccountRetroPaymentDetails();

                    foreach (busPayeeAccountRetroPaymentDetail lbusPayeeAccountRetroPaymentDetail in lbusPayeeAccountRetroPayment.iclbPayeeAccountRetroPaymentDetail)
                    {
                        if (lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.payment_item_type_id == aintPaymentTypeIdTaxable)
                        {
                            lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.amount = adecOverPaidTaxableAmount;
                        }
                        else if (lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.payment_item_type_id == aintPaymentTypeIdNonTaxable)
                        {
                            lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.amount = adecOverPaidNonTaxableAmount;
                        }
                        lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.Update();
                    }

                    lbusPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.gross_payment_amount = adecOverPaidTaxableAmount + adecOverPaidNonTaxableAmount;
                    lbusPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.net_payment_amount = adecOverPaidTaxableAmount + adecOverPaidNonTaxableAmount;
                    lbusPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.Update();

                    lbusRepaymentSchedule.icdoRepaymentSchedule.original_reimbursement_amount = lbusRepaymentSchedule.icdoRepaymentSchedule.reimbursement_amount;
                    lbusRepaymentSchedule.icdoRepaymentSchedule.reimbursement_amount = lbusPayeeAccountRetroPayment.icdoPayeeAccountRetroPayment.gross_payment_amount;
                    lbusRepaymentSchedule.icdoRepaymentSchedule.Update();

                    lbusPayeeAccountRetroPayment.iclbBenefitMonthwiseAdjustmentDetail = new Collection<busBenefitMonthwiseAdjustmentDetail>();
                    lbusPayeeAccountRetroPayment.LoadBenefitMonthwiseAdjustmentDetails();

                    foreach (busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail in lbusPayeeAccountRetroPayment.iclbBenefitMonthwiseAdjustmentDetail)
                    {
                        lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.Delete();
                    }
                }


            }
        }

        public void UpdateRetroPaymentsAndDeleteRelatedPayeeAccountpaymentItemTypes(int aintPayeeAccountRetroPaymentId, busRepaymentSchedule lbusRepaymentSchedule = null)
        {
            busPayeeAccountRetroPayment lbusPayeeAccountRetroPayment = new busPayeeAccountRetroPayment { icdoPayeeAccountRetroPayment = new cdoPayeeAccountRetroPayment() };
            lbusPayeeAccountRetroPayment.FindPayeeAccountRetroPayment(aintPayeeAccountRetroPaymentId);

            lbusPayeeAccountRetroPayment.iclbPayeeAccountRetroPaymentDetail = new Collection<busPayeeAccountRetroPaymentDetail>();
            lbusPayeeAccountRetroPayment.LoadPayeeAccountRetroPaymentDetails();

            if (lbusRepaymentSchedule != null)
            {
                //busRepaymentSchedule lbusRepaymentSchedule = new busRepaymentSchedule { icdoRepaymentSchedule = new cdoRepaymentSchedule() };
                //if (lbusRepaymentSchedule.FindRepaymentSchedule(aintRepaymentScheduleId))
                //{
                //pir 130
                if (lbusRepaymentSchedule.icdoRepaymentSchedule.reimbursement_status_value != "CONV")
                {
                    lbusRepaymentSchedule.icdoRepaymentSchedule.reimbursement_status_value = busConstant.REIMBURSEMENT_STATUS_COMPLETED;
                    lbusRepaymentSchedule.icdoRepaymentSchedule.Update();
                }
                //}

                //pir 130
                lbusRepaymentSchedule.ibusOtherPayeeAccount = new busPayeeAccount { icdoPayeeAccount = new cdoPayeeAccount() };
                if (lbusRepaymentSchedule.ibusOtherPayeeAccount.FindPayeeAccount(lbusRepaymentSchedule.icdoRepaymentSchedule.payee_account_id))
                {
                    lbusRepaymentSchedule.ibusOtherPayeeAccount.LoadNextBenefitPaymentDate();
                    lbusRepaymentSchedule.ibusOtherPayeeAccount.LoadPayeeAccountPaymentItemType();

                    lbusRepaymentSchedule.ibusOtherPayeeAccount.iclbPayeeAccountPaymentItemTypeActive = (from item in lbusRepaymentSchedule.ibusOtherPayeeAccount.iclbPayeeAccountPaymentItemType
                                                                                                         where busGlobalFunctions.CheckDateOverlapping(lbusRepaymentSchedule.ibusOtherPayeeAccount.idtNextBenefitPaymentDate,

                                                                                                         item.icdoPayeeAccountPaymentItemType.start_date, item.icdoPayeeAccountPaymentItemType.end_date)

                                                                                                         select item).ToList().ToCollection<busPayeeAccountPaymentItemType>();


                    foreach (busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType in lbusRepaymentSchedule.ibusOtherPayeeAccount.iclbPayeeAccountPaymentItemTypeActive)
                    {
                        if (lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.payment_item_type_id == 53)
                        {
                            lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.end_date = DateTime.Now.AddDays(-1);
                            lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.Update();
                        }
                    }
                }
            }

            foreach (busPayeeAccountRetroPaymentDetail lbusPayeeAccountRetroPaymentDetail in lbusPayeeAccountRetroPayment.iclbPayeeAccountRetroPaymentDetail)
            {
                busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType = new busPayeeAccountPaymentItemType { icdoPayeeAccountPaymentItemType = new cdoPayeeAccountPaymentItemType() };
                if (lbusPayeeAccountPaymentItemType.FindPayeeAccountPaymentItemType(lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.payee_account_payment_item_type_id))
                {
                    lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.payee_account_payment_item_type_id = 0;
                    lbusPayeeAccountRetroPaymentDetail.icdoPayeeAccountRetroPaymentDetail.Update();

                    lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.Delete();
                }
            }

        }

        //Payment Adjustments - Method calculates amount should have been paid right from date of retirement
        public void GetTaxableAndNonTaxableAmountFromPaymentItemTypes(busPayeeAccount abusPayeeAccount, out decimal adecTaxableAmount, out decimal adecNonTaxableAmount)
        {
            adecTaxableAmount = 0;
            adecNonTaxableAmount = 0;

            Collection<busPayeeAccountPaymentItemType> lclbPayeeAccountPaymentItemType = new Collection<busPayeeAccountPaymentItemType>();
            if (abusPayeeAccount.iclbPayeeAccountPaymentItemType.IsNullOrEmpty())
            {
                abusPayeeAccount.LoadPayeeAccountPaymentItemType();
            }
            if (abusPayeeAccount.idtNextBenefitPaymentDate == DateTime.MinValue)
            {
                abusPayeeAccount.idtNextBenefitPaymentDate = busPayeeAccountHelper.GetLastBenefitPaymentDate().AddMonths(1);
            }

            lclbPayeeAccountPaymentItemType = (from item in abusPayeeAccount.iclbPayeeAccountPaymentItemType
                                               where busGlobalFunctions.CheckDateOverlapping(abusPayeeAccount.idtNextBenefitPaymentDate,
                                               item.icdoPayeeAccountPaymentItemType.start_date, item.icdoPayeeAccountPaymentItemType.end_date)
                                               select item).ToList().ToCollection<busPayeeAccountPaymentItemType>();

            #region Get the gross amount to be paid from PayeeAccountPaymentItemType table

            decimal ldecGrossAmtToBePaid = 0;
            foreach (busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType in lclbPayeeAccountPaymentItemType)
            {
                busPaymentItemType lbusPaymentItemType = new busPaymentItemType();
                lbusPaymentItemType.FindPaymentItemType(lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.payment_item_type_id);


                //Need to check --> lbusPaymentItemType.icdoPaymentItemType.receivable_creation_1099r_value == busConstant.RECEIVABLE_CREATION_WITH_OR_WITHOUT_1099R

                if (lbusPaymentItemType.icdoPaymentItemType.item_type_direction == 1 &&
                    lbusPaymentItemType.icdoPaymentItemType.receivable_creation_1099r_value == busConstant.RECEIVABLE_CREATION_WITH_OR_WITHOUT_1099R &&
                    (lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM1 || lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM2 ||
                    lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM22 || lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM21))
                {
                    ldecGrossAmtToBePaid = ldecGrossAmtToBePaid + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;

                    if (lbusPaymentItemType.icdoPaymentItemType.taxable_item_flag == busConstant.FLAG_YES)
                    {
                        adecTaxableAmount = adecTaxableAmount + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;
                    }
                    else
                    {
                        adecNonTaxableAmount = adecNonTaxableAmount + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;
                    }
                }
            }
            #endregion
        }

        public void CalculateRetireeIncreaseAmountShouldHaveBeenPaid(busPayeeAccount abusPayeeAccount, Collection<busDisabilityRetireeIncrease> aclbDisabilityRetireeIncrease, ref Collection<busBenefitMonthwiseAdjustmentDetail> aclbBenefitMonthwiseAdjustmentDetail, Dictionary<int, List<int>> adictYearMonthForWorkHrsAfterRetirement = null) //PIR 638
        {
            if (aclbDisabilityRetireeIncrease != null && aclbDisabilityRetireeIncrease.Count > 0)
            {
                foreach (busDisabilityRetireeIncrease lbusDisabilityRetireeIncrease in aclbDisabilityRetireeIncrease)
                {
                    // PROD PIR 581
                    int lintRetireeincrease = 0;
                    lintRetireeincrease = (int)DBFunction.DBExecuteScalar("cdoPayeeAccountRetroPayment.CheckRetireeIncreasePayment", new object[2] { abusPayeeAccount.icdoPayeeAccount.person_id, lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Year },
                                                                              iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);

                    if (lintRetireeincrease > 0)
                    {

                        if (aclbBenefitMonthwiseAdjustmentDetail != null && aclbBenefitMonthwiseAdjustmentDetail.Count > 0
                         && aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date).Count() > 0)
                        {
                            //PIR 638
                            int lintyear = lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Year;
                            bool lblnReemployedUREDsuspendedFlag = false;
                            if (adictYearMonthForWorkHrsAfterRetirement != null && adictYearMonthForWorkHrsAfterRetirement.Keys.Contains(lintyear)
                                && adictYearMonthForWorkHrsAfterRetirement[lintyear] != null) //PIR 627 10292015
                            {
                                foreach (int lkvphoursinfo in adictYearMonthForWorkHrsAfterRetirement[lintyear])
                                {
                                    if (lkvphoursinfo == lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date.Month)
                                    {
                                        lblnReemployedUREDsuspendedFlag = true;
                                    }
                                }
                            }
                            if (!lblnReemployedUREDsuspendedFlag) //PIR 638
                            {
                                aclbBenefitMonthwiseAdjustmentDetail.Where(item => item.icdoBenefitMonthwiseAdjustmentDetail.payment_date == lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date)
                                    .FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_to_be_paid += lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_amount;
                            }
                        }
                        else
                        {
                            busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail = new busBenefitMonthwiseAdjustmentDetail { icdoBenefitMonthwiseAdjustmentDetail = new cdoBenefitMonthwiseAdjustmentDetail() };
                            lbusBenefitMonthwiseAdjustmentDetail.FillMonthWiseAdjustmentDetail(lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_date, lbusDisabilityRetireeIncrease.icdoDisabilityRetireeIncrease.retiree_increase_amount,
                                                                    0, 0, 0, 0, null, 0);
                            aclbBenefitMonthwiseAdjustmentDetail.Add(lbusBenefitMonthwiseAdjustmentDetail);
                        }
                    }

                }
            }
        }

        public void CalculateAmountShouldHaveBeenPaid(busPayeeAccount abusPayeeAccount, ref Collection<busBenefitMonthwiseAdjustmentDetail> aclbBenefitMonthwiseAdjustmentDetail)
        {
            decimal ldecTaxableAmtTobePaid = 0;
            decimal ldecNonTaxableAmtToBePaid = 0;

            Collection<busPayeeAccountPaymentItemType> lclbPayeeAccountPaymentItemType = new Collection<busPayeeAccountPaymentItemType>();
            abusPayeeAccount.LoadPayeeAccountPaymentItemType();

            lclbPayeeAccountPaymentItemType = (from item in abusPayeeAccount.iclbPayeeAccountPaymentItemType
                                               where busGlobalFunctions.CheckDateOverlapping(abusPayeeAccount.idtNextBenefitPaymentDate,
                                               item.icdoPayeeAccountPaymentItemType.start_date, item.icdoPayeeAccountPaymentItemType.end_date)
                                               select item).ToList().ToCollection<busPayeeAccountPaymentItemType>();


            foreach (busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType in lclbPayeeAccountPaymentItemType)
            {
                busPaymentItemType lbusPaymentItemType = new busPaymentItemType();
                lbusPaymentItemType.FindPaymentItemType(lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.payment_item_type_id);


                //Need to check --> lbusPaymentItemType.icdoPaymentItemType.receivable_creation_1099r_value == busConstant.RECEIVABLE_CREATION_WITH_OR_WITHOUT_1099R

                if (lbusPaymentItemType.icdoPaymentItemType.item_type_direction == 1 &&
                    lbusPaymentItemType.icdoPaymentItemType.receivable_creation_1099r_value == busConstant.RECEIVABLE_CREATION_WITH_OR_WITHOUT_1099R &&
                    (lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM1 || lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM2
                    || lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM21 || lbusPaymentItemType.icdoPaymentItemType.item_type_code == busConstant.ITEM22))
                {

                    if (lbusPaymentItemType.icdoPaymentItemType.taxable_item_flag == busConstant.FLAG_YES)
                    {
                        ldecTaxableAmtTobePaid = ldecTaxableAmtTobePaid + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;
                    }
                    else
                    {
                        ldecNonTaxableAmtToBePaid = ldecNonTaxableAmtToBePaid + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;
                    }
                }
            }


            if (aclbBenefitMonthwiseAdjustmentDetail.Count > 0)
            {
                //decimal ldecNonTaxableBeginningBalanceLeft =
                //                abusPayeeAccount.GetRemainingNonTaxableBeginningBalanaceTillDate(aclbBenefitMonthwiseAdjustmentDetail.FirstOrDefault().icdoBenefitMonthwiseAdjustmentDetail.payment_date);

                foreach (busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail in aclbBenefitMonthwiseAdjustmentDetail)
                {
                    //if (abusPayeeAccount.CheckRemainingNonTaxableBeginningBalOnGivenDate(ref ldecNonTaxableBeginningBalanceLeft, ref ldecNonTaxableAmtToBePaid))
                    //{
                    lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_to_be_paid = ldecTaxableAmtTobePaid;

                    lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.non_taxable_amount_to_be_paid = ldecNonTaxableAmtToBePaid;
                    //}
                    //else
                    //{
                    //    lbusBenefitMonthwiseAdjustmentDetail.icdoBenefitMonthwiseAdjustmentDetail.taxable_amount_to_be_paid = ldecTaxableAmtTobePaid + ldecNonTaxableAmtToBePaid;
                    //}
                }
            }


        }


        //public void CalculateOverPaymentUnderPayment(busPayeeAccount abusPayeeAccount, DateTime adteNextBenefitPaymentDate, DateTime adtRetirementDate,
        //                                             busPayeeAccount abusEarlyRetirementPayeeAccount = null)
        //{
        //    int lintPayeeAccRetroPaymentId = 0;
        //    decimal ldecTaxableAmtTobePaid = 0, ldecNonTaxableAmtToBePaid = 0;

        //    Collection<busPayeeAccountPaymentItemType> lclbPayeeAccountPaymentItemType = new Collection<busPayeeAccountPaymentItemType>();
        //    lclbPayeeAccountPaymentItemType = (from item in abusPayeeAccount.iclbPayeeAccountPaymentItemType
        //                                       where busGlobalFunctions.CheckDateOverlapping(adteNextBenefitPaymentDate,
        //                                       item.icdoPayeeAccountPaymentItemType.start_date, item.icdoPayeeAccountPaymentItemType.end_date)
        //                                       select item).ToList().ToCollection<busPayeeAccountPaymentItemType>();

        //    #region Get the gross amount to be paid from PayeeAccountPaymentItemType table

        //    decimal ldecGrossAmtToBePaid = 0;
        //    foreach (busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType in lclbPayeeAccountPaymentItemType)
        //    {
        //        busPaymentItemType lbusPaymentItemType = new busPaymentItemType();
        //        lbusPaymentItemType.FindPaymentItemType(lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.payment_item_type_id);

        //        if (lbusPaymentItemType.icdoPaymentItemType.item_type_direction == 1 &&
        //            lbusPaymentItemType.icdoPaymentItemType.receivable_creation_1099r_value == busConstant.RECEIVABLE_CREATION_WITH_OR_WITHOUT_1099R)
        //        {
        //            ldecGrossAmtToBePaid = ldecGrossAmtToBePaid + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;

        //            if (lbusPaymentItemType.icdoPaymentItemType.taxable_item_flag == busConstant.FLAG_YES)
        //            {
        //                ldecTaxableAmtTobePaid = ldecTaxableAmtTobePaid + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;
        //            }
        //            else
        //            {
        //                ldecNonTaxableAmtToBePaid = ldecNonTaxableAmtToBePaid + lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount;
        //            }
        //        }
        //    }
        //    #endregion

        //    if (abusEarlyRetirementPayeeAccount == null)
        //    {
        //        #region Get the gross amount already paid from history detail table

        //        decimal ldecGrossAmtAlreadyPaid = 0;

        //        busPaymentHistoryHeader lbusPaymentHistoryHeader = new busPaymentHistoryHeader { icdoPaymentHistoryHeader = new cdoPaymentHistoryHeader() };
        //        busPayeeAccountRetroPayment lbusPayeeAccountRetroPayment = new busPayeeAccountRetroPayment();

        //        int lintPayeeAccountHeaderId = lbusPaymentHistoryHeader.GetPaymentHistoryHeaderId(abusPayeeAccount.icdoPayeeAccount.payee_account_id);
        //        lbusPaymentHistoryHeader.icdoPaymentHistoryHeader.payment_history_header_id = lintPayeeAccountHeaderId;
        //        lbusPaymentHistoryHeader.LoadPaymentHistoryDetails();

        //        foreach (busPaymentHistoryDetail lbusPaymentHistoryDetail in lbusPaymentHistoryHeader.iclbPaymentHistoryDetail)
        //        {
        //            busPaymentItemType lbusPaymentItemType = new busPaymentItemType();
        //            lbusPaymentItemType.FindPaymentItemType(lbusPaymentHistoryDetail.icdoPaymentHistoryDetail.payment_item_type_id);

        //            if (lbusPaymentItemType.icdoPaymentItemType.item_type_direction == 1 &&
        //                lbusPaymentItemType.icdoPaymentItemType.receivable_creation_1099r_value == busConstant.RECEIVABLE_CREATION_WITH_OR_WITHOUT_1099R)
        //            {
        //                ldecGrossAmtAlreadyPaid = ldecGrossAmtAlreadyPaid + lbusPaymentHistoryDetail.icdoPaymentHistoryDetail.amount;
        //            }
        //        }

        //        #endregion

        //        #region Insert Values in Payee Account Retro Payment table

        //        if (ldecGrossAmtToBePaid < ldecGrossAmtAlreadyPaid)//overpayment
        //        {
        //            lintPayeeAccRetroPaymentId = lbusPayeeAccountRetroPayment.CreatePayeeAccountRetroPayment(abusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.RETRO_PAYMENT_BENEFIT_OVERPAYMENT,
        //                                      adtRetirementDate, adteNextBenefitPaymentDate.AddDays(-1), DateTime.MinValue, DateTime.MinValue,
        //                                      busConstant.PAYMENT_OPTION_REGULAR, ldecGrossAmtToBePaid, 0, null, null, busConstant.FLAG_YES);
        //        }
        //        else //underpayment
        //        {

        //            lintPayeeAccRetroPaymentId = lbusPayeeAccountRetroPayment.CreatePayeeAccountRetroPayment(abusPayeeAccount.icdoPayeeAccount.payee_account_id, busConstant.RETRO_PAYMENT_BENEFIT_UNDERPAYMENT,
        //                                       adtRetirementDate, adteNextBenefitPaymentDate.AddDays(-1), adteNextBenefitPaymentDate,
        //                                       busGlobalFunctions.GetLastDayofMonth(adteNextBenefitPaymentDate),
        //                                       busConstant.PAYMENT_OPTION_REGULAR, ldecGrossAmtToBePaid, 0, null, null, null);
        //        }

        //        #endregion

        //        #region Insert values in Retro Payment Detail table

        //        foreach (busPayeeAccountPaymentItemType lbusPayeeAccountPaymentItemType in lclbPayeeAccountPaymentItemType)
        //        {
        //            busPayeeAccountRetroPaymentDetail lbusPayeeAccountRetroPaymentDetail = new busPayeeAccountRetroPaymentDetail();
        //            lbusPayeeAccountRetroPaymentDetail.CreatePayeeAccountRetroPaymentDetail(lintPayeeAccRetroPaymentId,
        //                                                lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.payment_item_type_id,
        //                                                lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.payee_account_payment_item_type_id,
        //                                                lbusPayeeAccountPaymentItemType.icdoPayeeAccountPaymentItemType.amount, 0, 0, null);
        //        }

        //        #endregion
        //    }

        //    #region Loop through Already paid amounts and do the adjustments and insert values in adjustment table

        //    decimal ldecTaxableAmtPaid = 0, ldecNonTaxableAmtPaid = 0;
        //    DataTable ldtbAmtAlreadyPaidData;

        //    if (abusEarlyRetirementPayeeAccount != null)
        //    {
        //        ldtbAmtAlreadyPaidData = Select("cdoPayeeAccountPaymentItemType.GetAmountAlreadyPaid", new object[2] {
        //                                        abusEarlyRetirementPayeeAccount.icdoPayeeAccount.payee_account_id, abusPayeeAccount.icdoPayeeAccount.person_id });
        //    }
        //    else
        //    {
        //        ldtbAmtAlreadyPaidData = Select("cdoPayeeAccountPaymentItemType.GetAmountAlreadyPaid", new object[2] {
        //                                        abusPayeeAccount.icdoPayeeAccount.payee_account_id, abusPayeeAccount.icdoPayeeAccount.person_id });
        //    }


        //    foreach (DataRow ldrRow in ldtbAmtAlreadyPaidData.Rows)
        //    {
        //        DateTime ldtPaymentDate = new DateTime();

        //        if (!ldrRow[enmPaymentHistoryHeader.payment_date.ToString()].ToString().IsNullOrEmpty())
        //        {
        //            ldtPaymentDate = Convert.ToDateTime(ldrRow[enmPaymentHistoryHeader.payment_date.ToString()]);
        //            ldecTaxableAmtPaid = Convert.ToDecimal(ldrRow["TAXABLE_AMOUNT"]);
        //            ldecNonTaxableAmtPaid = Convert.ToDecimal(ldrRow["NON_TAXABLE_AMOUNT"]);
        //        }

        //        busBenefitMonthwiseAdjustmentDetail lbusBenefitMonthwiseAdjustmentDetail = new busBenefitMonthwiseAdjustmentDetail();
        //        lbusBenefitMonthwiseAdjustmentDetail.CreateMonthwiseAdjustmentDetail(lintPayeeAccRetroPaymentId, ldtPaymentDate, ldecTaxableAmtTobePaid,
        //                                                ldecNonTaxableAmtToBePaid, ldecTaxableAmtPaid, ldecNonTaxableAmtPaid, 0, null);
        //    }

        //    #endregion
        //}


        //Rohan -to get date for which disability benefits are greater for IAP from
        //3 dates Awarded On Date,Retirement Date & SSA On Set Date
        public DateTime GetDateForDisabilityBenefits(busBenefitCalculationHeader abusBenefitCalculationHeader)
        {
            DateTime ldtRequiredDate = new DateTime();
            if (abusBenefitCalculationHeader.iclbBenefitCalculationDetail != null &&
                abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Count > 0 &&
                abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).Count() > 0)
            {

                DateTime IAPAsOfDate =
                    abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoBenefitCalculationDetail.iap_as_of_date;
                DateTime ldtAwardedOnDate = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.awarded_on_date;
                DateTime ldtRetirementDate = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date;

                DateTime[] ldtDates = new DateTime[] { new DateTime(ldtAwardedOnDate.Year, ldtAwardedOnDate.Month, ldtAwardedOnDate.Day),
                    new DateTime(ldtRetirementDate.Year, ldtRetirementDate.Month, ldtRetirementDate.Day)
                    };

                // PROD PIR 242
                DateTime ldtEndOfLastQuarter;
                foreach (DateTime ldtDate in ldtDates)
                {
                    if (ldtDate != DateTime.MinValue)
                    {
                        if (ldtDate.Month <= 3)
                        {
                            ldtEndOfLastQuarter = new DateTime(ldtDate.Year - 1, 12, 31);
                            if (ldtEndOfLastQuarter.Year == IAPAsOfDate.Year && ldtEndOfLastQuarter.Month == IAPAsOfDate.Month)
                            {
                                ldtRequiredDate = ldtDate;
                                break;
                            }
                        }
                        else if (ldtDate.Month > 3 && ldtDate.Month <= 6)
                        {
                            ldtEndOfLastQuarter = new DateTime(ldtDate.Year, 03, 31);
                            if (ldtEndOfLastQuarter.Year == IAPAsOfDate.Year && ldtEndOfLastQuarter.Month == IAPAsOfDate.Month)
                            {
                                ldtRequiredDate = ldtDate;
                                break;
                            }
                        }
                        else if (ldtDate.Month > 6 && ldtDate.Month <= 9)
                        {
                            ldtEndOfLastQuarter = new DateTime(ldtDate.Year, 06, 30);
                            if (ldtEndOfLastQuarter.Year == IAPAsOfDate.Year && ldtEndOfLastQuarter.Month == IAPAsOfDate.Month)
                            {
                                ldtRequiredDate = ldtDate;
                                break;
                            }
                        }
                        else if (ldtDate.Month > 9 && ldtDate.Month <= 12)
                        {
                            ldtEndOfLastQuarter = new DateTime(ldtDate.Year, 09, 30);
                            if (ldtEndOfLastQuarter.Year == IAPAsOfDate.Year && ldtEndOfLastQuarter.Month == IAPAsOfDate.Month)
                            {
                                ldtRequiredDate = ldtDate;
                                break;
                            }
                        }
                    }
                }
            }

            return ldtRequiredDate;

        }


        public void InsertIAPQuarterlyAllocations(Collection<busBenefitCalculationDetail> aclbBenefitCalculationDetail, busBenefitCalculationHeader abusBenefitCalculationHeader)
        {
            decimal ldecIAPHours4QtrAlloc = 0.0M;
            decimal ldecIAPHoursA2forQtrAlloc = 0.0M;
            decimal ldecIAPPercent4forQtrAlloc = 0.0M;
            DateTime ldtRetirementDate = new DateTime();

            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                ldtRetirementDate = GetDateForDisabilityBenefits(abusBenefitCalculationHeader);
            }
            else if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
            {
                ldtRetirementDate = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_commencement_date;
            }
            else
            {
                ldtRetirementDate = abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date;
            }


            utlConnection utlLegacyDBConnetion = HelperFunction.GetDBConnectionProperties("Legacy");
            string astrLegacyDBConnetion = utlLegacyDBConnetion.istrConnectionString;

            SqlParameter[] parameters = new SqlParameter[3];
            SqlParameter param1 = new SqlParameter("@SSN", DbType.String);
            SqlParameter param2 = new SqlParameter("@FROMDATE", DbType.DateTime);
            SqlParameter param3 = new SqlParameter("@TODATE", DbType.DateTime);

            param1.Value = abusBenefitCalculationHeader.ibusPerson.icdoPerson.istrSSNNonEncrypted;
            parameters[0] = param1;

            busIapAllocationSummary lbusIapAllocationSummary = new busIapAllocationSummary();
            lbusIapAllocationSummary.LoadLatestAllocationSummary();
            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
            {
                if (lbusIapAllocationSummary.icdoIapAllocationSummary.computation_year >= ldtRetirementDate.Year)
                {
                    param2.Value = busGlobalFunctions.GetLastDateOfComputationYear(ldtRetirementDate.Year - 1);
                }
                else
                {
                    param2.Value = busGlobalFunctions.GetLastDateOfComputationYear(lbusIapAllocationSummary.icdoIapAllocationSummary.computation_year);
                }
            }
            else
            {
                param2.Value = busGlobalFunctions.GetLastDateOfComputationYear(lbusIapAllocationSummary.icdoIapAllocationSummary.computation_year);
            }
            parameters[1] = param2;

            param3.Value = busGlobalFunctions.GetLastDayOfWeek(ldtRetirementDate); //PROD PIR 113
            parameters[2] = param3;

            DataTable ldtbIAPInfo = busGlobalFunctions.ExecuteSPtoGetDataTable("usp_GetIAPHourInfoForQuarterlyAllocation", astrLegacyDBConnetion, null, parameters);
            if (ldtbIAPInfo.Rows.Count > 0)
            {
                //if (ldtbIAPInfo.Rows[0]["IAPHours"] != DBNull.Value)
                //    ldecIAPHours4QtrAlloc = Convert.ToDecimal(ldtbIAPInfo.Rows[0]["IAPHours"]);

                //if (ldtbIAPInfo.Rows[0]["IAPHoursA2"] != DBNull.Value)
                //    ldecIAPHoursA2forQtrAlloc = Convert.ToDecimal(ldtbIAPInfo.Rows[0]["IAPHoursA2"]);

                //if (ldtbIAPInfo.Rows[0]["IAPPercent"] != DBNull.Value)
                //    ldecIAPPercent4forQtrAlloc = Convert.ToDecimal(ldtbIAPInfo.Rows[0]["IAPPercent"]);

                if (ldtbIAPInfo.AsEnumerable().Sum(item => item.Field<decimal>("IAPHours")) > 0)
                    ldecIAPHours4QtrAlloc = Convert.ToDecimal(ldtbIAPInfo.AsEnumerable().Sum(item => item.Field<decimal>("IAPHours")));

                if (ldtbIAPInfo.AsEnumerable().Sum(item => item.Field<decimal>("IAPHoursA2")) > 0)
                    ldecIAPHoursA2forQtrAlloc = Convert.ToDecimal(ldtbIAPInfo.AsEnumerable().Sum(item => item.Field<decimal>("IAPHoursA2")));

                DataTable ldtIAPFiltered;
                busIAPAllocationHelper aobjIAPAllocationHelper = new busIAPAllocationHelper();
                foreach (DataRow ldrIAPPercent in ldtbIAPInfo.Rows)
                {
                    if (ldrIAPPercent["IAPPercent"] != DBNull.Value && Convert.ToString(ldrIAPPercent["IAPPercent"]).IsNotNullOrEmpty() &&
                        Convert.ToDecimal(ldrIAPPercent["IAPPercent"]) > 0)
                    {
                        ldtIAPFiltered = new DataTable();
                        ldtIAPFiltered = ldtbIAPInfo.AsEnumerable().Where(o => o.Field<Int16?>("ComputationYear") == Convert.ToInt16(ldrIAPPercent["ComputationYear"])
                            && o.Field<int?>("EmpAccountNo") == Convert.ToInt32(ldrIAPPercent["EmpAccountNo"])).CopyToDataTable();

                        ldecIAPPercent4forQtrAlloc += aobjIAPAllocationHelper.CalculateAllocation4Amount(Convert.ToInt32(ldrIAPPercent["ComputationYear"]), ldtIAPFiltered);
                    }

                }
            }

            GetIAPAndSpecialAccountBalance(busConstant.BOOL_FALSE, null, aclbBenefitCalculationDetail, abusBenefitCalculationHeader, null, ldtRetirementDate, ldecIAPHours4QtrAlloc, ldecIAPHoursA2forQtrAlloc, ldecIAPPercent4forQtrAlloc);

            int lintPersonAccountId = 0;
            lintPersonAccountId = abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id == busConstant.IAP_PLAN_ID).FirstOrDefault().icdoPersonAccount.person_account_id;

            if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_WITHDRAWAL)
            {
                if (this.idecQuarterlyAllocationIAP != 0 || this.idecQuarterlyAllocationL52Spl != 0 ||
                   this.idecQuarterlyAllocationL161Spl != 0)//PIR 985
                {
                    //PIR RID 66354 added check to verify quarterly allocation is not already posted
                    if (!CheckQuaterlyAlreadyPosted(lintPersonAccountId, ldtRetirementDate, idecQuarterlyAllocationIAP, idecQuarterlyAllocationL52Spl, idecQuarterlyAllocationL161Spl))
                    {

                        busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                        lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,// ldtIAPBalanceAsOfDate,
                            DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecQuarterlyAllocationIAP, adec52SplAccountBalance: this.idecQuarterlyAllocationL52Spl,//PIR 985
                            adec161SplAccountBalance: this.idecQuarterlyAllocationL161Spl, astrTransactionType: busConstant.TRANSACTION_TYPE_QUARTERLY_ALLOCATION, astrContributionType: busConstant.RCContributionTypeAllocation1,
                            aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                    }
                }
            }
            else if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DEATH_PRE_RETIREMENT)
            {
                if (this.idecQuarterlyAllocationIAP != 0 || this.idecQuarterlyAllocationL52Spl != 0 ||
                   this.idecQuarterlyAllocationL161Spl != 0)//PIR 985
                {
                    //PIR RID 66354 added check to verify quarterly allocation is not already posted
                    if (!CheckQuaterlyAlreadyPosted(lintPersonAccountId, ldtRetirementDate, idecQuarterlyAllocationIAP, idecQuarterlyAllocationL52Spl, idecQuarterlyAllocationL161Spl))
                    {

                        busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                        lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,//ldtIAPBalanceAsOfDate,
                            DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecQuarterlyAllocationIAP, adec52SplAccountBalance: this.idecQuarterlyAllocationL52Spl,//PIR 985
                            adec161SplAccountBalance: this.idecQuarterlyAllocationL161Spl, astrTransactionType: busConstant.TRANSACTION_TYPE_QUARTERLY_ALLOCATION, astrContributionType: busConstant.RCContributionTypeAllocation1,
                            aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                    }
                }

                if (this.idecRYAlloc2 != 0)//PIR 985 //Based on Teresa's Request 
                {
                    busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,//ldtIAPBalanceAsOfDate,
                        DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecRYAlloc2,//PIR 985
                         astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation2, aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                }

                if (this.idecRYAlloc4 != 0)//PIR 985  //Based on Teresa's Request 
                {
                    busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,//ldtIAPBalanceAsOfDate,
                        DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecRYAlloc4,//PIR 985
                         astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation4, aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                }
            }
            else
            {
                if (this.idecQuarterlyAllocationIAP != 0)//PIR 985
                {
                    //PIR RID 66354 added check to verify quarterly allocation is not already posted
                    if (!CheckQuaterlyAlreadyPosted(lintPersonAccountId, ldtRetirementDate, idecQuarterlyAllocationIAP, idecQuarterlyAllocationL52Spl, idecQuarterlyAllocationL161Spl))
                    {

                        busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                        lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,//ldtIAPBalanceAsOfDate,
                            DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecQuarterlyAllocationIAP,//PIR 985
                            astrTransactionType: busConstant.TRANSACTION_TYPE_QUARTERLY_ALLOCATION, astrContributionType: busConstant.RCContributionTypeAllocation1,
                            aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                    }
                }

                if (this.idecRYAlloc2 != 0)//PIR 985
                {
                    busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,//ldtIAPBalanceAsOfDate,
                        DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecRYAlloc2,//PIR 985
                         astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation2, aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                }

                if (this.idecRYAlloc4 != 0)//PIR 985
                {
                    busPersonAccountRetirementContribution lbusPersonAccountRetirementContribution = new busPersonAccountRetirementContribution() { icdoPersonAccountRetirementContribution = new cdoPersonAccountRetirementContribution() };
                    lbusPersonAccountRetirementContribution.InsertPersonAccountRetirementContirbution(lintPersonAccountId, ldtRetirementDate,//ldtIAPBalanceAsOfDate,
                        DateTime.Now, ldtRetirementDate.Year, adecIAPBalanceAmount: this.idecRYAlloc4,//PIR 985
                         astrTransactionType: "RETR", astrContributionType: busConstant.RCContributionTypeAllocation4, aintReferenceID: abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_calculation_header_id);
                }
            }

        }
        /// <summary>
        /// Checks in Non Signotory Collection Under busPerson as there could be few participants whose hours are not reported by EADB
        /// </summary>
        /// <param name="abusPerson"></param>
        /// <param name="aintNonSuspendibleMonth"></param>
        /// <param name="aintCalculationPlanYear"></param>
        /// <returns></returns>
        public bool CheckIfMonthIsSuspendibleMonthFromNonSignatory(busPerson abusPerson, int aintNonSuspendibleMonth, int aintCalculationPlanYear)
        {
            bool lblnIsSuspendibleMonth = false;
            if (abusPerson.iclbPersonSuspendibleMonth.IsNullOrEmpty())
            {
                abusPerson.LoadPersonSuspendibleMonth();
            }

            if (abusPerson.iclbPersonSuspendibleMonth.Where(item => item.icdoPersonSuspendibleMonth.person_id == abusPerson.icdoPerson.person_id &&
                item.icdoPersonSuspendibleMonth.plan_year == aintCalculationPlanYear && item.icdoPersonSuspendibleMonth.suspendible_month_value == Convert.ToString(aintNonSuspendibleMonth)).Count() > 0)
            {
                lblnIsSuspendibleMonth = true;
            }

            return lblnIsSuspendibleMonth;
        }



        public DateTime GetPayrollDateFromMonth(DateTime adtGivenDate)
        {
            /*
            DateTime ldtReturnDate = DateTime.MinValue;

            //Payroll Month Fix - 12052019
            ldtReturnDate = busGlobalFunctions.GetLastPayrollDayOfMonthFromEADB(adtGivenDate);

            if (ldtReturnDate == DateTime.MinValue)
                ldtReturnDate = busGlobalFunctions.GetLastPayrollDayOfMonth(adtGivenDate.Year, adtGivenDate.Month);

            return new DateTime(ldtReturnDate.Year, ldtReturnDate.Month, 1);
            */

            //RID#90258 Reverting back Payroll Month selection. 
            DateTime ldtReturnDate = adtGivenDate;
            DateTime ldtLastPayrollDate = busGlobalFunctions.GetLastPayrollDayOfMonth(adtGivenDate.Year, adtGivenDate.Month);
            if (adtGivenDate.Day > ldtLastPayrollDate.Day)
            {
                if (adtGivenDate.Month + 1 > 12)
                {
                    ldtReturnDate = new DateTime(adtGivenDate.Year + 1, 1, 1);
                }
                else
                {
                    ldtReturnDate = new DateTime(adtGivenDate.Year, adtGivenDate.Month + 1, 1);
                }
            }
            else
            {
                ldtReturnDate = new DateTime(adtGivenDate.Year, adtGivenDate.Month, 1);
            }

            return ldtReturnDate;
        }


        public void GetDroForTheParticipant(int aintPersonId)
        {

        }

        public void ResetAuditFields(doBase adoBase)
        {
            adoBase.created_by = null;
            adoBase.created_date = DateTime.MinValue;
            adoBase.modified_by = null;
            adoBase.modified_date = DateTime.MinValue;
            adoBase.update_seq = 0;
        }


        public decimal GetBenefitAmountFromSurvivorAmount(decimal adecSurvivorAmount, string astrBenefitOptionValue)
        {
            decimal adecBenefitAmount = decimal.Zero;
            if (adecSurvivorAmount > 0)
            {

                if (astrBenefitOptionValue == busConstant.JOINT_50_PERCENT_POPUP_ANNUITY || astrBenefitOptionValue == busConstant.JOINT_50_PERCENT_SURVIVOR_ANNUITY)
                {
                    adecBenefitAmount = (adecSurvivorAmount / 50) * 100;//check
                }
                else if (astrBenefitOptionValue == busConstant.JOINT_75_PERCENT_POPUP_ANNUITY || astrBenefitOptionValue == busConstant.JOINT_75_PERCENT_SURVIVOR_ANNUITY)
                {
                    adecBenefitAmount = (adecSurvivorAmount / 75) * 100;//check
                }
                else if (astrBenefitOptionValue == busConstant.JOINT_100_PERCENT_POPUP_ANNUITY || astrBenefitOptionValue == busConstant.JOINT_100_PERCENT_SURVIVOR_ANNUITY)
                {
                    adecBenefitAmount = adecSurvivorAmount;
                }
                else if (astrBenefitOptionValue == busConstant.JOINT_66_2by3_PERCENT_SURVIVOR_ANNUITY)
                {
                    adecBenefitAmount = (adecSurvivorAmount / Convert.ToDecimal(66.67)) * 100;
                }
            }
            return adecBenefitAmount;
        }

        //En PIR 66
        public decimal GetSurvivorAmountFromBenefitAmount(decimal adecBenefitAmount, string astrBenefitOptionValue, DateTime? adtTermCertainEndDate = null, decimal adecSurvivorPercent = 0)
        {
            decimal ldecSurvivorAmount = decimal.Zero;
            if (adecBenefitAmount > 0)
            {

                if (astrBenefitOptionValue == busConstant.JOINT_50_PERCENT_POPUP_ANNUITY || astrBenefitOptionValue == busConstant.JOINT_50_PERCENT_SURVIVOR_ANNUITY)
                {
                    ldecSurvivorAmount = (adecBenefitAmount / 100) * 50;
                }
                else if (astrBenefitOptionValue == busConstant.JOINT_75_PERCENT_POPUP_ANNUITY || astrBenefitOptionValue == busConstant.JOINT_75_PERCENT_SURVIVOR_ANNUITY)
                {
                    ldecSurvivorAmount = (adecBenefitAmount / 100) * 75;
                }
                else if (astrBenefitOptionValue == busConstant.JOINT_100_PERCENT_POPUP_ANNUITY || astrBenefitOptionValue == busConstant.JOINT_100_PERCENT_SURVIVOR_ANNUITY)
                {
                    ldecSurvivorAmount = adecBenefitAmount;
                }
                else if (astrBenefitOptionValue == busConstant.JOINT_66_2by3_PERCENT_SURVIVOR_ANNUITY)
                {
                    ldecSurvivorAmount = (adecBenefitAmount / 100) * Convert.ToDecimal(66.67);
                }
                else if (adtTermCertainEndDate != null && adtTermCertainEndDate != DateTime.MinValue && adecSurvivorPercent > 0)
                {
                    ldecSurvivorAmount = (adecBenefitAmount / 100) * adecSurvivorPercent;
                }
            }
            return ldecSurvivorAmount;
        }

        public DateTime GetLastWorkingDate(string astrSSN)
        {
            DateTime ldtLastWorkingDate = new DateTime();
            IDbConnection lconLegacy = DBFunction.GetDBConnection("Legacy");
            if (lconLegacy != null)
            {
                Collection<IDbDataParameter> lcolParameters = new Collection<IDbDataParameter>();
                IDbDataParameter lobjParameter = DBFunction.GetDBParameter();
                lobjParameter.ParameterName = "@SSN";
                lobjParameter.DbType = DbType.String;
                lobjParameter.Value = astrSSN;
                lcolParameters.Add(lobjParameter); ;
                DataTable ldataTable = new DataTable();

                IDataReader lDataReader = DBFunction.DBExecuteProcedureResult("usp_GetLastWorkingDate", lcolParameters, lconLegacy, null);
                if (lDataReader != null)
                {
                    ldataTable.Load(lDataReader);
                    if (ldataTable.Rows.Count > 0)
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(ldataTable.Rows[0][0])))
                        {
                            ldtLastWorkingDate = Convert.ToDateTime(ldataTable.Rows[0][0]);
                        }
                    }
                }
            }
            return ldtLastWorkingDate;
        }

        public void EndDateWithholding(busPayeeAccount abusPayeeAccount)
        {
            abusPayeeAccount.iclbWithholdingInformation = new Collection<busWithholdingInformation>();
            abusPayeeAccount.LoadWithholdingInformation();

            abusPayeeAccount.LoadNextBenefitPaymentDate();

            foreach (busWithholdingInformation lbusWithholdingInfo in abusPayeeAccount.iclbWithholdingInformation)
            {
                if (lbusWithholdingInfo.icdoWithholdingInformation.withholding_date_to == DateTime.MinValue)
                {
                    if (lbusWithholdingInfo.icdoWithholdingInformation.withholding_date_from > abusPayeeAccount.idtNextBenefitPaymentDate.AddDays(-1))
                    {
                        lbusWithholdingInfo.icdoWithholdingInformation.withholding_date_to = lbusWithholdingInfo.icdoWithholdingInformation.withholding_date_from;
                    }
                    else
                    {
                        lbusWithholdingInfo.icdoWithholdingInformation.withholding_date_to = abusPayeeAccount.idtNextBenefitPaymentDate.AddDays(-1);
                    }

                    lbusWithholdingInfo.icdoWithholdingInformation.Update();
                }
            }
        }

        #region PROD PIR 504 -- for Retirement option 2
        public decimal CalculateEEDerivedBenefitAsOfRetirementDateOptionTwo(busBenefitCalculationHeader abusBenefitCalculationHeader, busQdroCalculationHeader abusQdroCalculationHeader)
        {
            decimal ldecEEDerivedAmount = new decimal();
            decimal ldecEEContribution = busConstant.ZERO_DECIMAL;
            decimal ldecEEInterest = busConstant.ZERO_DECIMAL;
            decimal ldecBenefitInterestRate = 0;
            Collection<busBenefitCalculationYearlyDetail> lclbbusBenefitCalculationYearlyDetail = null;
            Collection<busQdroCalculationYearlyDetail> lclbQdroCalculationYearlyDetail = null;
            int lintPersonAccountId = 0;
            decimal ldecTableBfactor = decimal.One;
            Collection<busPersonAccountRetirementContribution> lclbPersonAccountRetirementContribution = new Collection<busPersonAccountRetirementContribution>();
            busBenefitCalculationYearlyDetail lbusBenefitCalculationYearlyDetail = null;
            busQdroCalculationYearlyDetail lbusQdroCalculationYearlyDetail = null;

            if (abusBenefitCalculationHeader != null)
            {
                lintPersonAccountId = abusBenefitCalculationHeader.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id ==
                                                busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoPersonAccount.person_account_id;

                lclbPersonAccountRetirementContribution =
                abusBenefitCalculationHeader.iclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId).
                OrderBy(item => item.icdoPersonAccountRetirementContribution.computational_year).ToList().ToCollection();
            }
            else if (abusQdroCalculationHeader != null)
            {
                lintPersonAccountId = abusQdroCalculationHeader.ibusBenefitApplication.ibusPerson.iclbPersonAccount.Where(item => item.icdoPersonAccount.plan_id ==
                                                busConstant.MPIPP_PLAN_ID).FirstOrDefault().icdoPersonAccount.person_account_id;

                lclbPersonAccountRetirementContribution =
                abusQdroCalculationHeader.iclbPersonAccountRetirementContribution.Where(item => item.icdoPersonAccountRetirementContribution.person_account_id == lintPersonAccountId).
                OrderBy(item => item.icdoPersonAccountRetirementContribution.computational_year).ToList().ToCollection();
            }

            // To Do : Changes according to Vesting & Non Vesting will be done in Header 
            if (lclbPersonAccountRetirementContribution.Count() > 0)
            {
                if (abusBenefitCalculationHeader != null &&
                    abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id ==
                                                                abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId).Count() > 0)
                {
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.benefit_type_value == busConstant.BENEFIT_TYPE_DISABILITY)
                    {
                        if (abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2).Count() > 0)
                        {
                            lclbbusBenefitCalculationYearlyDetail = abusBenefitCalculationHeader.iclbBenefitCalculationDetail.Where(item => item.icdoBenefitCalculationDetail.plan_id == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.iintPlanId && item.icdoBenefitCalculationDetail.retirement_date == abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2).FirstOrDefault().iclbBenefitCalculationYearlyDetail.ToList().ToCollection();
                            if (lclbbusBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == Convert.ToDecimal(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Year)).Count() > 0)
                            {
                                lbusBenefitCalculationYearlyDetail = lclbbusBenefitCalculationYearlyDetail.Where(item => item.icdoBenefitCalculationYearlyDetail.plan_year == Convert.ToDecimal(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year)).FirstOrDefault();
                            }
                        }
                    }

                    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2 &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year < abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2 &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                    }
                    else
                    {
                        ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                          where
                                              item.icdoPersonAccountRetirementContribution.computational_year <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2 &&
                                              item.icdoPersonAccountRetirementContribution.contribution_subtype_value == busConstant.CONTRIBUTION_SUBTYPE_VESTED
                                          select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();

                    }
                    //}
                    // }

                    object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] { abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year },
                                    iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                    if (lobjBenefitInterestRate.IsNotNull())
                    {
                        ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                    }
                    decimal ldecEEPartialInterestAmount = decimal.Zero;
                    if (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date.Month - 1), 2);
                        ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;
                    }

                    decimal ldecTableAfactor = this.GetTableAFactor(abusBenefitCalculationHeader.icdoBenefitCalculationHeader.age, busConstant.MPIPP_PLAN_ID, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year);
                    ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                                   abusBenefitCalculationHeader.icdoBenefitCalculationHeader.idecParticipantFullAge, abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year < 1988 ? 1988 : abusBenefitCalculationHeader.icdoBenefitCalculationHeader.retirement_date_option_2.Year);
                    ldecEEDerivedAmount = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);

                    if (!abusBenefitCalculationHeader.iclbBenefitCalculationDetail.IsNullOrEmpty())
                    {
                        if (lbusBenefitCalculationYearlyDetail != null)
                        {
                            lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = ldecEEDerivedAmount;
                        }
                    }
                }
                #region QDRO -- Need to confirm
                else if (abusQdroCalculationHeader != null &&
                  abusQdroCalculationHeader.iclbQdroCalculationDetail.Where(item => item.icdoQdroCalculationDetail.plan_id == busConstant.MPIPP_PLAN_ID).Count() > 0)
                {

                    ldecEEContribution = (from item in lclbPersonAccountRetirementContribution
                                          where item.icdoPersonAccountRetirementContribution.computational_year <
                                              abusQdroCalculationHeader.GetRetirementDateforCalculation().Year &&
                                              item.icdoPersonAccountRetirementContribution.effective_date <= abusQdroCalculationHeader.GetRetirementDateforCalculation()
                                          select item.icdoPersonAccountRetirementContribution.ee_contribution_amount).Sum();

                    ldecEEInterest = (from item in lclbPersonAccountRetirementContribution
                                      where item.icdoPersonAccountRetirementContribution.computational_year <
                                          abusQdroCalculationHeader.GetRetirementDateforCalculation().Year &&
                                          item.icdoPersonAccountRetirementContribution.effective_date <= abusQdroCalculationHeader.GetRetirementDateforCalculation()
                                      select item.icdoPersonAccountRetirementContribution.ee_int_amount).Sum();
                    // }

                    object lobjBenefitInterestRate = DBFunction.DBExecuteScalar("cdoBenefitInterestRate.GetBenefitInterestRate", new object[1] {
                                                     abusQdroCalculationHeader.GetRetirementDateforCalculation().Year },
                                    iobjPassInfo.iconFramework, iobjPassInfo.itrnFramework);
                    if (lobjBenefitInterestRate.IsNotNull())
                    {
                        ldecBenefitInterestRate = (Decimal)lobjBenefitInterestRate;
                    }
                    decimal ldecEEPartialInterestAmount = decimal.Zero;

                    if (abusQdroCalculationHeader.icdoQdroCalculationHeader.calculation_type_value != busConstant.BenefitCalculation.CALCULATION_TYPE_ADJUSTMENT)
                    {
                        ldecEEPartialInterestAmount = Math.Round(((ldecEEContribution + ldecEEInterest) * ldecBenefitInterestRate) / 12 * (abusQdroCalculationHeader.GetRetirementDateforCalculation().Month - 1), 2);
                        ldecEEInterest = ldecEEInterest + ldecEEPartialInterestAmount;
                    }

                    decimal ldecTableAfactor = this.GetTableAFactor(abusQdroCalculationHeader.icdoQdroCalculationHeader.age, busConstant.MPIPP_PLAN_ID,
                                                abusQdroCalculationHeader.GetRetirementDateforCalculation().Year);
                    ldecTableBfactor = this.GetTableBFactorForEEDerived(busConstant.BENEFIT_TYPE_RETIREMENT, busConstant.RETIREMENT_TYPE_LATE, 2,
                                                                   abusQdroCalculationHeader.icdoQdroCalculationHeader.iintParticipantAtRetirement, abusQdroCalculationHeader.GetRetirementDateforCalculation().Year < 1988 ? 1988 : abusQdroCalculationHeader.GetRetirementDateforCalculation().Year);
                    ldecEEDerivedAmount = Math.Round((((ldecEEContribution + ldecEEInterest) * ldecTableAfactor) / ldecTableBfactor), 2);


                    if (lbusBenefitCalculationYearlyDetail != null)
                    {
                        lbusBenefitCalculationYearlyDetail.icdoBenefitCalculationYearlyDetail.ee_derived_amount = ldecEEDerivedAmount;
                    }

                }
                #endregion

            }
            return ldecEEDerivedAmount;
        }
        #endregion

        //PIR - 1036

        public void LoadDataForRetireeIncreasePayeeAccount(busPerson abusPerson, busPayeeAccount abusPayeeAccount, DataRow acdoPayeeAccount,
                                                           int aintComputationYear, ref int aintPayementCount, ref int aintNonSuspendibleMonth, ref decimal adecGrossAmount)
        {
            int lintPlanId = Convert.ToInt32(acdoPayeeAccount[enmPlanBenefitXr.plan_id.ToString()]);
            busCalculation lbusCalculation = new busCalculation();

            //abusPerson = new busPerson { icdoPerson = new cdoPerson() };
            abusPerson.icdoPerson.LoadData(acdoPayeeAccount);
            abusPerson.FindPerson(abusPerson.icdoPerson.person_id);

            #region Calculate non suspendible month count

            DateTime ldtStartDate = new DateTime(aintComputationYear, 01, 01);
            DateTime ldtendDate = new DateTime(aintComputationYear, 09, 30);


            #endregion

            abusPayeeAccount.icdoPayeeAccount.LoadData(acdoPayeeAccount);
            abusPayeeAccount.FindPayeeAccount(abusPayeeAccount.icdoPayeeAccount.payee_account_id);
            //SetPayeeAccountInfo(abusPayeeAccount, aintComputationYear, acdoPayeeAccount);
            abusPayeeAccount.LoadPayeeAccountPaymentItemType();
            abusPayeeAccount.LoadGrossAmount();
            adecGrossAmount = abusPayeeAccount.idecGrossAmount;




            if (abusPayeeAccount.ibusParticipant == null)
            {
                abusPayeeAccount.ibusParticipant = new busPerson { icdoPerson = new cdoPerson() };
                abusPayeeAccount.ibusParticipant.FindPerson(abusPayeeAccount.icdoPayeeAccount.person_id);
            }

            if (acdoPayeeAccount["STATUS_VALUE"].ToString() != busConstant.PAYEE_ACCOUNT_STATUS_RECEIVING)
            {

                DataTable ldtbPaymentInfo = busBase.Select("cdoPayeeAccount.GetPaymentCount", new object[2] {
                                    abusPayeeAccount.icdoPayeeAccount.payee_account_id, abusPayeeAccount.icdoPayeeAccount.person_id });

                aintPayementCount = ldtbPaymentInfo.Rows.Count;

            }

            if (abusPayeeAccount.icdoPayeeAccount.reemployed_flag == busConstant.FLAG_YES)
            {
                Dictionary<int, Dictionary<int, decimal>> ldictHoursAfterRetirement = new Dictionary<int, Dictionary<int, decimal>>();
                DateTime ldtLastWorkingDate = new DateTime();
                string lstrEmpName = string.Empty;
                int lintReemployedYear = 0;
                ldictHoursAfterRetirement = lbusCalculation.LoadMPIHoursAfterRetirementDate(abusPerson.icdoPerson.istrSSNNonEncrypted,
                    ldtStartDate.AddMonths(-1), busConstant.MPIPP_PLAN_ID, ref ldtLastWorkingDate, ref lstrEmpName, lintReemployedYear);
                abusPayeeAccount.ibusParticipant.LoadPersonSuspendibleMonth();
                aintNonSuspendibleMonth = 9 - (lbusCalculation.GetSuspendibleMonthsBetweenTwoDates(ldictHoursAfterRetirement, abusPayeeAccount.ibusParticipant.iclbPersonSuspendibleMonth, ldtStartDate, ldtendDate));

                //Get the accrued benefit in case of re-employment If Suspended then directly from payment item types if not (could be getting ee derived) then from payment history.
                if (aintNonSuspendibleMonth > 0)
                {
                    abusPayeeAccount.LoadPayeeAccountStatuss();
                    if (!abusPayeeAccount.iclbPayeeAccountStatus.IsNullOrEmpty())
                    {
                        if (abusPayeeAccount.iclbPayeeAccountStatus.OrderByDescending(item => item.icdoPayeeAccountStatus.status_effective_date).FirstOrDefault().icdoPayeeAccountStatus.status_value != busConstant.PAYEE_ACCOUNT_STATUS_SUSPENDED)
                        {
                            abusPayeeAccount.LoadReemploymentHistorys();
                            if (!abusPayeeAccount.iclcReemploymentHistory.IsNullOrEmpty())
                            {
                                if ((abusPayeeAccount.iclcReemploymentHistory.Where(item => item.reemployed_flag_to_date == DateTime.MinValue)).Count() > 0)
                                {
                                    //DateTime ldtReemployedFromDate = abusPayeeAccount.iclcReemploymentHistory.Where(item => item.reemployed_flag_to_date == DateTime.MinValue).FirstOrDefault().reemployed_flag_from_date;
                                    //ldtReemployedFromDate = new DateTime(ldtReemployedFromDate.Year, ldtReemployedFromDate.Month, 01);
                                    //DataTable ldtGross = busBase.Select("cdoPaymentHistoryDistribution.GetGrossAmountInAMonth", new object[2] { abusPayeeAccount.icdoPayeeAccount.payee_account_id, ldtReemployedFromDate });
                                    //if (ldtGross.Rows.Count > 0)
                                    //{
                                    //    if (Convert.ToString(ldtGross.Rows[0]["Gross_Amount"]).IsNotNullOrEmpty())
                                    //    {
                                    //        adecGrossAmount = Convert.ToDecimal(ldtGross.Rows[0]["Gross_Amount"]);
                                    //    }
                                    //}

                                    if (abusPayeeAccount.icdoPayeeAccount.benefit_calculation_detail_id == 0)
                                    {
                                        DataTable ldtGross = new DataTable();
                                        ArrayList larrPaymentDate = lbusCalculation.GetNonSuspendibleMonthBetweenTwoDates(ldictHoursAfterRetirement, abusPayeeAccount.ibusParticipant.iclbPersonSuspendibleMonth, ldtStartDate, ldtendDate);

                                        if (larrPaymentDate != null && larrPaymentDate.Count > 0)
                                        {
                                            foreach (DateTime ldtPaymentDate in larrPaymentDate)
                                            {
                                                DateTime ldt = new DateTime(ldtPaymentDate.Year, ldtPaymentDate.Month, 01);
                                                ldtGross = busBase.Select("cdoPaymentHistoryDistribution.GetGrossAmountInAMonth", new object[2] { abusPayeeAccount.icdoPayeeAccount.payee_account_id, ldt });
                                                if (ldtGross.Rows.Count > 0)
                                                {
                                                    if (Convert.ToString(ldtGross.Rows[0]["Gross_Amount"]).IsNotNullOrEmpty())
                                                    {
                                                        adecGrossAmount = Convert.ToDecimal(ldtGross.Rows[0]["Gross_Amount"]);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    else
                                    {
                                        DataTable ldtGross = busBase.Select("cdoPaymentHistoryDistribution.GetBenefitAmtFromCalc", new object[1] { abusPayeeAccount.icdoPayeeAccount.payee_account_id });
                                        if (ldtGross.Rows.Count > 0)
                                        {
                                            if (Convert.ToString(ldtGross.Rows[0][0]).IsNotNullOrEmpty())
                                            {
                                                adecGrossAmount = Convert.ToDecimal(ldtGross.Rows[0][0]);
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                }

            }

            else
            {
                aintNonSuspendibleMonth = lbusCalculation.GetNonSuspendibleMonths(abusPerson.icdoPerson.istrSSNNonEncrypted, abusPerson,
                            aintComputationYear, lintPlanId, null, ldtStartDate, ldtendDate, false);

            }
        }

    }


    [Serializable]
    public class busQDROOffsetDetails : busMPIPHPBase
    {
        public cdoQDROOffsetDetails icdoQDROOffsetDetails { get; set; }
        public string istrParticipantMpid { get; set; }
        public string istrAlternatePayeeMpid { get; set; }
        public string istrPlanName { get; set; }
        public int iintQDROCalculationId { get; set; }
        public int iintBenefitCalculationId { get; set; }
        public string istrBenefitTypeValue { get; set; }
        public decimal idecQDROOffset { get; set; }
    }

    [Serializable]
    public class cdoQDROOffsetDetails : doBase
    {

    }

    [Serializable]
    public class busIAPAmountDetails : busMPIPHPBase
    {
        public cdoIAPAmountDetails icdoIAPAmountDetails { get; set; }
        public decimal idecPrevYearEndingBalance { get; set; }
        public int iintQuaterly { get; set; }
        public decimal idecRate { get; set; }
        public decimal idecQuaterlyAllocation { get; set; }
        public decimal idecTotal { get; set; }
    }

    [Serializable]
    public class cdoIAPAmountDetails : doBase
    {

    }

}
