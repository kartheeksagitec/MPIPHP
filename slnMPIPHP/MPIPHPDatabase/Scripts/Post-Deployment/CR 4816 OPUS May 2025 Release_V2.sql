USE [OPUS]
GO

--US 30351 Website Redesign Project - Add EntryId Field and Create Stored Procedure for 1099R
IF NOT EXISTS (SELECT T.NAME TABLE_NAME, C.* FROM SYS.all_columns C INNER JOIN SYS.tables T ON C.object_id = T.object_id
				WHERE T.NAME = 'SGT_PAYMENT_1099R' AND C.name = 'ECM_ENTRY_ID')
BEGIN
	ALTER TABLE DBO.SGT_PAYMENT_1099R ADD ECM_ENTRY_ID INT NULL;
END
--ELSE 
--BEGIN
--	UPDATE SGT_PAYMENT_1099R SET ECM_ENTRY_ID = NULL
--	ALTER TABLE SGT_PAYMENT_1099R
--	ALTER COLUMN ECM_ENTRY_ID INT NULL;
--END 
GO

--@PLAN_NAME Expected values: ECM can pass value from "Payer's TIN" box on 1099R PDF. For IAP Payer's TIN is 950030749 and for Pension Payer's TIN is 951810805.
--@TAX_STATE Expected values: ECM can pass value from box 15 "State/Payer's State no.". For IAP plan PAYER_STATE_NO will have CA/814-2000-2, For Pension plan PAYER_STATE_NO may have Empty String, 'CA/803-3768-6','GA/3608196-HQ','NC/200007477','OR/01875643-7', or 'VA/30-951810805F-001'
--@DISTRIBUTION_CODE Expected values: ECM can pass value from box 7 "Distribution code(s)". Possible values 1 , 2 , 3 , 4 , 4A, 4G, 7 , 7A, G , ZZ
CREATE OR ALTER PROCEDURE [dbo].[usp_Update_1099R_ECMEntryID] (
@MPID VARCHAR(10), 
@PLAN_YEAR INT, 
@PLAN_NAME VARCHAR(25), 
@TAX_STATE VARCHAR(25), 
@DISTRIBUTION_CODE VARCHAR(2),
@ENTRY_ID INT  --This is from ECM
)
AS
BEGIN
    SET NOCOUNT ON;
	IF EXISTS (SELECT 1 FROM SGT_PAYMENT_1099R T1099 INNER JOIN SGT_PERSON_BASE P ON T1099.PERSON_ID = P.PERSON_ID 
				WHERE P.MPI_PERSON_ID = @MPID AND TAX_YEAR = @PLAN_YEAR AND FEDERAL_ID = @PLAN_NAME AND PAYER_STATE_NO = @TAX_STATE AND DISTRIBUTION_CODE = @DISTRIBUTION_CODE)
	BEGIN
		UPDATE T1099 SET ECM_ENTRY_ID = @ENTRY_ID
		FROM SGT_PAYMENT_1099R T1099 INNER JOIN SGT_PERSON_BASE P ON T1099.PERSON_ID = P.PERSON_ID 
		WHERE P.MPI_PERSON_ID = @MPID AND TAX_YEAR = @PLAN_YEAR AND FEDERAL_ID = @PLAN_NAME AND PAYER_STATE_NO = @TAX_STATE AND DISTRIBUTION_CODE = @DISTRIBUTION_CODE
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END

END
GO

--US 29806 Website Redesign Project - List 1099R statements
CREATE OR ALTER PROCEDURE [dbo].[usp_Get_1099R_List] (
@MPID VARCHAR(10)
)
AS
BEGIN
    SET NOCOUNT ON;
	IF EXISTS (SELECT * FROM SGT_PAYMENT_1099R T1099 INNER JOIN SGT_PERSON_BASE P ON T1099.PERSON_ID = P.PERSON_ID 
				WHERE P.MPI_PERSON_ID = @MPID)
	BEGIN
		SELECT MPI_PERSON_ID, DocumentID, PLAN_IDENTIFIER_VALUE, TAX_YEAR, DISTRIBUTION_CODE, PAYER_STATE_NO, ECM_ENTRY_ID
		FROM (
			SELECT P.MPI_PERSON_ID, T1099.PAYMENT_1099R_ID AS DocumentID, PLAN_IDENTIFIER_VALUE, TAX_YEAR, DISTRIBUTION_CODE, PAYER_STATE_NO, ECM_ENTRY_ID, RANK() OVER (PARTITION BY T1099.PERSON_ID, PLAN_IDENTIFIER_VALUE, TAX_YEAR, DISTRIBUTION_CODE, PAYER_STATE_NO
								ORDER BY T1099.PERSON_ID, PLAN_IDENTIFIER_VALUE, TAX_YEAR, DISTRIBUTION_CODE, PAYER_STATE_NO, T1099.MODIFIED_DATE desc) AS RANKID 
			FROM SGT_PAYMENT_1099R T1099 INNER JOIN SGT_PERSON_BASE P ON T1099.PERSON_ID = P.PERSON_ID 
			WHERE P.MPI_PERSON_ID = @MPID 
			) t
		WHERE T.RANKID = 1 

		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END

END
GO

--US 29926 Website Redesign Project - 1099R statement download Before 2024
CREATE OR ALTER PROCEDURE [dbo].[usp_Get_1099R_Data] (
@MPID VARCHAR(10),
@DocumentID INT
)
AS
BEGIN
    SET NOCOUNT ON;
	IF EXISTS (SELECT * FROM SGT_PAYMENT_1099R T1099 INNER JOIN SGT_PERSON_BASE P ON T1099.PERSON_ID = P.PERSON_ID 
				WHERE P.MPI_PERSON_ID = @MPID AND PAYMENT_1099R_ID = @DocumentID)
	BEGIN
		SELECT P.MPI_PERSON_ID, T1099.* FROM SGT_PAYMENT_1099R T1099 INNER JOIN SGT_PERSON_BASE P ON T1099.PERSON_ID = P.PERSON_ID 
		WHERE P.MPI_PERSON_ID = @MPID AND PAYMENT_1099R_ID = @DocumentID

		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END

END
GO

--US 30353 Website Redesign Project - Add EntryId Field and Create Stored Procedure for Annual Statement
IF NOT EXISTS (SELECT T.NAME TABLE_NAME, C.* FROM SYS.all_columns C INNER JOIN SYS.tables T ON C.object_id = T.object_id
				WHERE T.NAME = 'SGT_ANNUAL_STATEMENT_BATCH_DATA' AND C.name = 'ECM_ENTRY_ID')
BEGIN
	ALTER TABLE DBO.SGT_ANNUAL_STATEMENT_BATCH_DATA ADD ECM_ENTRY_ID INT NULL;
END
--ELSE 
--BEGIN
--	UPDATE SGT_ANNUAL_STATEMENT_BATCH_DATA SET ECM_ENTRY_ID = NULL
--	ALTER TABLE SGT_ANNUAL_STATEMENT_BATCH_DATA
--	ALTER COLUMN ECM_ENTRY_ID INT NULL;
--END 
GO

CREATE OR ALTER PROCEDURE [dbo].[usp_Update_AnnualStatement_ECMEntryID] (
@MPID VARCHAR(10), 
@PLAN_YEAR INT, 
@ENTRY_ID INT  --This is from ECM
)
AS
BEGIN
    SET NOCOUNT ON;
	IF EXISTS (SELECT 1 FROM SGT_ANNUAL_STATEMENT_BATCH_DATA TAS INNER JOIN SGT_PERSON_BASE P ON TAS.PERSON_ID = P.PERSON_ID 
				WHERE P.MPI_PERSON_ID = @MPID AND TAS.COMPUTATIONAL_YEAR = @PLAN_YEAR AND ANNUAL_STATEMENT__BATCH_DATA_ID NOT IN (131748,78899,81712,89489,92835,118238,118965,119871))
	BEGIN
		UPDATE TAS SET ECM_ENTRY_ID = @ENTRY_ID
		FROM SGT_ANNUAL_STATEMENT_BATCH_DATA TAS INNER JOIN SGT_PERSON_BASE P ON TAS.PERSON_ID = P.PERSON_ID 
		WHERE P.MPI_PERSON_ID = @MPID AND TAS.COMPUTATIONAL_YEAR = @PLAN_YEAR AND ANNUAL_STATEMENT__BATCH_DATA_ID NOT IN (131748,78899,81712,89489,92835,118238,118965,119871)
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END

END
GO

--US 29807 Website Redesign Project - List Annual Statements
CREATE OR ALTER PROCEDURE [dbo].[usp_Get_AnnualStatements_List] (
@MPID VARCHAR(10)
)
AS
BEGIN
    SET NOCOUNT ON;
	IF EXISTS (SELECT * FROM SGT_ANNUAL_STATEMENT_BATCH_DATA ST INNER JOIN SGT_PERSON_BASE P ON ST.PERSON_ID = P.PERSON_ID 
				WHERE P.MPI_PERSON_ID = @MPID AND ANNUAL_STATEMENT__BATCH_DATA_ID NOT IN (131748,78899,81712,89489,92835,118238,118965,119871))
	BEGIN
		SELECT P.MPI_PERSON_ID, ST.COMPUTATIONAL_YEAR, ST.ANNUAL_STATEMENT__BATCH_DATA_ID AS DocumentID, ST.ECM_ENTRY_ID
		FROM SGT_ANNUAL_STATEMENT_BATCH_DATA ST INNER JOIN SGT_PERSON_BASE P ON ST.PERSON_ID = P.PERSON_ID 
		WHERE P.MPI_PERSON_ID = @MPID  AND ANNUAL_STATEMENT__BATCH_DATA_ID NOT IN (131748,78899,81712,89489,92835,118238,118965,119871)
		ORDER BY P.MPI_PERSON_ID, ST.COMPUTATIONAL_YEAR
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END

END
GO

CREATE OR ALTER PROCEDURE [dbo].[usp_Get_AnnualStatements_Data] (
@MPID VARCHAR(10),
@DocumentID INT
)
AS
BEGIN
    SET NOCOUNT ON;
	IF EXISTS (SELECT * FROM SGT_ANNUAL_STATEMENT_BATCH_DATA ST INNER JOIN SGT_PERSON_BASE P ON ST.PERSON_ID = P.PERSON_ID 
				WHERE P.MPI_PERSON_ID = @MPID AND ANNUAL_STATEMENT__BATCH_DATA_ID = @DocumentID)
	BEGIN
		SELECT P.MPI_PERSON_ID 
		,DATA.[COMPUTATIONAL_YEAR]
		,DATA.[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]
		,DATA.[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]
		,DATA.[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]
		,DATA.[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]
		,DATA.[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]
		,DATA.[MPI_VESTED_YEARS_IN_CUREENT_YEAR]
		,DATA.[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]
		,DATA.[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]
		,DATA.[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]
		,DATA.[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]
		,DATA.[MPI_TOTAL_VESTED_YEARS]
		,DATA.[L600_VESTED_YEARS]
		,DATA.[L600_QUALIFIED_YEARS]
		,DATA.[L600_CREDITED_HOURS]
		,DATA.[L600_FROZEN_BENEFITS]
		,DATA.[L666_VESTED_YEARS]
		,DATA.[L666_QUALIFIED_YEARS]
		,DATA.[L666_CREDITED_HOURS]
		,DATA.[L666_FROZEN_BENEFITS]
		,DATA.[L700_VESTED_YEARS]
		,DATA.[L700_QUALIFIED_YEARS]
		,DATA.[L700_CREDITED_HOURS]
		,DATA.[L700_FROZEN_BENEFITS]
		,DATA.[L52_VESTED_YEARS]
		,DATA.[L52_QUALIFIED_YEARS]
		,DATA.[L52_CREDITED_HOURS]
		,DATA.[L52_FROZEN_BENEFITS]
		,DATA.[L161_VESTED_YEARS]
		,DATA.[L161_QUALIFIED_YEARS]
		,DATA.[L161_CREDITED_HOURS]
		,DATA.[L161_FROZEN_BENEFITS]
		,DATA.[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]
		,DATA.[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]
		,DATA.[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]
		,DATA.[IAP_PRIOR_ADJUSTMENT]
		,DATA.[L52_PRIOR_ADJUSTMENT]
		,DATA.[L161_PRIOR_ADJUSTMENT]
		,DATA.[IAP_NET_INVESTMENT_INCOME]
		,DATA.[L52_NET_INVESTMENT_INCOME]
		,DATA.[L161_NET_INVESTMENT_INCOME]
		,DATA.[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]
		,DATA.[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]
		,DATA.[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]
		,DATA.[IAP_PERCENTAGE_OF_COMPENSATION]
		,DATA.[IAP_PERCENTAGE_OF_COMPENSATION_IALC]
		,DATA.[IAP_PERCENTAGE_OF_COMPENSATION_FALC]
		,DATA.[IAP_PAYOUTS]
		,DATA.[L52_PAYOUTS]
		,DATA.[L161_PAYOUTS]
		,DATA.[IAP_BALANCE_FOR_CURRENT_YEAR]
		,DATA.[L52_BALANCE_FOR_CURRENT_YEAR]
		,DATA.[L161_BALANCE_FOR_CURRENT_YEAR]
		,DATA.[ADDR_CATEGORY_ID]
		,DATA.[ADDR_CATEGORY_VALUE]
		,DATA.[BATCH_ID]
		,DATA.[CREATED_BY]
		,DATA.[CREATED_DATE]
		,DATA.[MODIFIED_BY]
		,DATA.[MODIFIED_DATE]
		,DATA.[UPDATE_SEQ]
		,DATA.[PERSON_NAME]
		,DATA.ADDR_LINE_1
		,DATA.ADDR_LINE_2
		,DATA.ADDR_CITY
		,DATA.ADDR_STATE_ID AS ADDR_STATE_ID
		,DATA.ADDR_STATE_VALUE
		,DATA.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID
		,DATA.ADDR_COUNTRY_VALUE
		,DATA.ADDR_ZIP_CODE
		,DATA.[END_DATE]
		,DATA.[MPI_VESTED_DATE]
		,CASE WHEN DATA.ADDR_COUNTRY_VALUE = '0001' THEN 'USA' ELSE DATA.COUNTRY_DESCRIPTION END AS COUNTRY_DESCRIPTION
		,DATA.[IAP_HOURS_A2]
		,DATA.[CORRECTED_FLAG]
		,DATA.[ELIGIBLE_ACTIVE_INCR_FLAG]
		,DATA.[MD_FLAG]
		,DATA.[RETR_SPECIAL_ACCOUNT_FLAG]
		,DATA.REEMPLOYED_UNDER_65_FLAG 
		,DATA.[MPI_RETIREE_FLAG]
		,DATA.[LOCAL600_RETIREE_FLAG]
		,DATA.[LOCAL666_RETIREE_FLAG]
		,DATA.[LOCAL700_RETIREE_FLAG]
		,DATA.[LOCAL52_RETIREE_FLAG]
		,DATA.[LOCAL161_RETIREE_FLAG]
		,DATA.[IAP_LUMSUM_BALANCE]
		,DATA.[EST_IAP_LIFE_ANNUITY]
		,DATA.[EST_IAP_JS100_ANNUITY]
		,DATA.PENSION_ONLY_FLAG
		, P.DATE_OF_BIRTH AS PERSON_DOB, P.VIP_FLAG 
		, DATA.ANNUAL_STATEMENT__BATCH_DATA_ID AS DocumentID, DATA.ECM_ENTRY_ID
		FROM SGT_ANNUAL_STATEMENT_BATCH_DATA DATA WITH(NOLOCK) INNER JOIN SGT_PERSON_BASE P WITH(NOLOCK) ON P.PERSON_ID = DATA.PERSON_ID
		WHERE P.MPI_PERSON_ID = @MPID  AND ANNUAL_STATEMENT__BATCH_DATA_ID = @DocumentID
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END

END
GO

/* Testing
EXEC [usp_Update_AnnualStatement_ECMEntryID] @MPID = 'M01389904', @PLAN_YEAR = '2023', @ENTRY_ID = 'This is from ECM'
EXEC [usp_Get_AnnualStatements_List] @MPID = 'M01389904'
EXEC [usp_Get_AnnualStatements_Data] @MPID = 'M01389904', @DocumentID = 1557937

SELECT COLUMN_NAME, DATA_TYPE+ CASE 
	WHEN DATA_TYPE IN ('CHAR','VARCHAR') THEN '('+CONVERT(VARCHAR(3),CHARACTER_MAXIMUM_LENGTH)+')' 
	WHEN DATA_TYPE = 'numeric' THEN '('+CONVERT(VARCHAR(3),NUMERIC_PRECISION_RADIX)+','+CONVERT(VARCHAR(3),NUMERIC_SCALE)+')' 
	ELSE ''
	END AS COLUMN_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SGT_ANNUAL_STATEMENT_BATCH_DATA'

EXEC [usp_Update_1099R_ECMEntryID] @MPID = 'M01495983', @PLAN_YEAR = '2023', @PLAN_NAME ='951810805', @TAX_STATE = 'CA/803-3768-6', @DISTRIBUTION_CODE ='7', @ENTRY_ID = 'This is from ECM'
EXEC [usp_Get_1099R_List] @MPID = 'M01495983'
EXEC [usp_Get_1099R_Data] @MPID = 'M01495983', @DocumentID = 465823

SELECT COLUMN_NAME, DATA_TYPE+ CASE 
	WHEN DATA_TYPE IN ('CHAR','VARCHAR') THEN '('+CONVERT(VARCHAR(3),CHARACTER_MAXIMUM_LENGTH)+')' 
	WHEN DATA_TYPE = 'numeric' THEN '('+CONVERT(VARCHAR(3),NUMERIC_PRECISION_RADIX)+','+CONVERT(VARCHAR(3),NUMERIC_SCALE)+')' 
	ELSE ''
	END AS COLUMN_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SGT_PAYMENT_1099R'

SP_HELP SGT_ANNUAL_STATEMENT_BATCH_DATA
SP_HELP SGT_PAYMENT_1099R
SELECT DISTINCT ECM_ENTRY_ID FROM SGT_ANNUAL_STATEMENT_BATCH_DATA
SELECT DISTINCT ECM_ENTRY_ID FROM SGT_PAYMENT_1099R

--UPDATE SGT_ANNUAL_STATEMENT_BATCH_DATA SET ECM_ENTRY_ID = NULL
--UPDATE SGT_PAYMENT_1099R SET ECM_ENTRY_ID = NULL

*/

/*
US 30352 Website Redesign Project - Benefit Estimate
There is a web service method which will be used for this interface.
Information will be provided to Tanu to create IICS API for website.

Email was sent with information about service method, to Chaitanya, Pradeep, Tanushri, and Andy O.
Subject: Benefit Estimate Interface
Hi Chaitanya,
URL and XML with sample param and data for the benefit estimate service method is given below.
http://neonad1/OPUS/OPUSWebService.svc
Method name: GetBenefitCalculationEstimate

*/
