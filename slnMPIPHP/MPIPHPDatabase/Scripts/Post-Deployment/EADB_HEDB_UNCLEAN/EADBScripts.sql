-----------------------------------------------------------------------------------------------
--Name - Vinovin	
--Date - 17th April 2012
--Purpose - Stored Proc usp_PensionInterface4OPUS
-----------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS]    Script Date: 04/25/2012 18:02:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure  [dbo].[usp_PensionInterface4OPUS] (@SSN char(9)=null)
AS
BEGIN
set nocount on
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	mpi_person_id as PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	and hours.SSN = @SSN 
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join opus.dbo.SGT_PERSON p on hours.ssn = p.ssn--OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	mpi_person_id as PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = RGC.RateGroup and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = rgb.rategroup and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join opus.dbo.SGT_PERSON p on HPTransactions.ssn = p.ssn--OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	and HPTransactions.SSN = @SSN

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = convert(char(50),p.Last_Name),
	FirstName = convert(char(50),p.First_Name),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	mpi_person_id as PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join opus.dbo.SGT_PERSON p on cpas.mkey = p.ssn--OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	and cpas.mkey = @SSN

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = convert(char(50),p.LAST_NAME),
	FirstName = convert(char(50),p.FIRST_NAME),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	MPI_PERSON_ID as PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	left outer join opus.dbo.SGT_PERSON p on Pre.ssn = p.ssn--OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where Pre.SSN = @SSN

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END

GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Vinovin
--Created On	:	04/12/2012
--Description	:	Stored Procedure usp_pensioninterface4OPUS_by_dates
------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS_By_Dates]    Script Date: 04/25/2012 18:03:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[usp_PensionInterface4OPUS_By_Dates]
(@Year int, @FromDate smalldatetime = null,@ToDate smalldatetime = null)
AS
BEGIN
set nocount on
	--Declare @FromDate smalldatetime,@ToDate smalldatetime,@Debug int
	--select @Debug = 0
	
	if ((@FromDate is null or @ToDate is null) and @Year is not null)
	begin
		Select  @FromDate = StartDate, @ToDate = EndDate
		From	EADB.dbo.PensionYear	
		where	PensionYear = @Year
	end
			
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	MPI_PERSON_ID AS PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	and report.ProcessDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join eadb.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join opus.dbo.SGT_PERSON p on hours.ssn = p.ssn --OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn)
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	MPI_PERSON_ID AS PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = RGC.RateGroup and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = rgb.rategroup and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join opus.dbo.SGT_PERSON p on HPTransactions.ssn = p.ssn --OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn)
where not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	and HPTransactions.DateReceived between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = convert(char(50),p.LAST_NAME),
	FirstName = convert(char(50),p.FIRST_NAME),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	MPI_PERSON_ID AS PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	inner join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join opus.dbo.SGT_PERSON p on cpas.mkey = p.ssn --OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn)
	where [Plan]=2
	and cpas.PDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = convert(char(50),p.LAST_NAME),
	FirstName = convert(char(50),p.FIRST_NAME),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	MPI_PERSON_ID AS PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	left outer join opus.dbo.SGT_PERSON p on Pre.ssn = p.ssn --OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn)
where 
	Pre.MergeDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END


GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Puneet Punjabi
--Created On	:	04/11/2012
--Description	:	Stored Procedures for Eligibility and Calculations
------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_CheckHoursReportedInGivenInterval]    Script Date: 04/25/2012 18:18:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




------------------------------------------------------------------------------------------------------------------------
--Created By	:	Puneet Punjabi
--Created On	:	04/11/2012
--Description	:	Stored Procedures for Eligibility and Calculations
------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_CheckHoursReportedInGivenInterval]    Script Date: 04/11/2012 12:02:24 ******/
CREATE PROC [dbo].[usp_CheckHoursReportedInGivenInterval] (@SSN char(10),@START_DATE datetime,@END_DATE datetime)
AS
DECLARE @RESULT INT
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @RESULT=0

select @RESULT = COUNT(*) FROM @PensionWorkHistory WHERE ((PensionPlan=2 AND PensionHours > 0) OR  (IAPHours  > 0)) AND
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE))

RETURN @RESULT
END



GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_CheckPersonIsParticipant]    Script Date: 04/25/2012 18:17:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/****** Object:  StoredProcedure [dbo].[usp_CheckPersonIsParticipant]    Script Date: 04/11/2012 12:02:49 ******/
CREATE PROC [dbo].[usp_CheckPersonIsParticipant](@SSN char(10))
AS
DECLARE @COUNT INT 
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
SET @COUNT = 0
select @COUNT = COUNT(*) from @PensionWorkHistory WHERE (PensionHours > 0 OR IAPHours > 0) AND SSN=@SSN

RETURN @COUNT
END


GO



USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetCountForLateHours]    Script Date: 04/25/2012 18:17:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/****** Object:  StoredProcedure [dbo].[usp_GetCountForLateHours]    Script Date: 04/11/2012 12:03:06 ******/
CREATE PROC [dbo].[usp_GetCountForLateHours](@SSN char(10),@EVALUATION_DATE datetime,@VESTING_DATE datetime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT COUNT(*) as Count_Late_Hours FROM @PensionWorkHistory 
where SSN=@SSN and cast(Received as datetime) > @EVALUATION_DATE 
and cast(ToDate as datetime) <= @VESTING_DATE and (LateMonthly='Y' or LateAnnual='Y')

END


GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetHealthWorkData]    Script Date: 04/25/2012 18:16:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/****** Object:  StoredProcedure [dbo].[usp_GetHealthWorkData]    Script Date: 04/11/2012 12:03:28 ******/
CREATE PROC [dbo].[usp_GetHealthWorkData](@SSN char(10))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT ComputationYear AS YEAR,SUM(RetireeHealthHours) AS QUALIFIED_HOURS, SUM(CASE WHEN PENSIONPLAN = 2 THEN PensionHours ELSE 0.0 END) AS  idcPensionHours_healthBatch,
SUM(IAPHours) AS idcIAPHours_healthBatch
FROM @PensionWorkHistory
GROUP BY ComputationYear
ORDER BY ComputationYear

END



GO



/****** Object:  StoredProcedure [dbo].[usp_GetHoursInformationForQDRO]    Script Date: 04/11/2012 12:03:45 ******/
CREATE PROC [dbo].[usp_GetHoursInformationForQDRO] (@SSN char(10),@PLAN_CODE VARCHAR(10),@DATE_OF_MARRIAGE DATETIME,
@DATE_OF_SEPARATION DATETIME,@DATE_OF_DETERMINATION DATETIME,
@NUMERATOR NUMERIC(7,1) OUTPUT,@DENOMINATOR NUMERIC(7,1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[SEQ] [int] IDENTITY(1,1) NOT NULL
) 

DECLARE @COUNT INT
DECLARE @TOTAL_COUNT INT


DECLARE @YEARS INT
DECLARE @COUNT_YEARLY INT
DECLARE @TOTAL_COUNT_YEARLY INT

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @TOTAL_COUNT = @@ROWCOUNT

SET @YEARS= 0
SET @NUMERATOR=0.0
SET @DENOMINATOR=0.0

DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [INT] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	--IF (SELECT QualifiedYearCount FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ=@COUNT_YEARLY) < 20
	--BEGIN
	--	SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.QualifiedHours >= 400.0 
	--	AND PWHY.YearlySEQ=@COUNT_YEARLY 
	--END
	--ELSE
	--BEGIN
	--	SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ=@COUNT_YEARLY 
	--END
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END

-----------------------------------------------------------------------------------------------------------
--FOR DENOMINATOR
DECLARE @COUNT_YEARLY_FOR_DENOMINATOR INT
DECLARE @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR INT


DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) > @DATE_OF_DETERMINATION

DECLARE @PensionWorkHistoryYearDenominator TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [INT] IDENTITY(1,1) NOT NULL
)


INSERT INTO @PensionWorkHistoryYearDenominator
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR =@@ROWCOUNT
SET @COUNT_YEARLY_FOR_DENOMINATOR =1

UPDATE @PensionWorkHistoryYearDenominator SET QualifiedYearCount = 0 WHERE QualifiedHours < 400.0

-----------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------
--FOR NUMERATOR

DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) < @DATE_OF_MARRIAGE OR 
CAST(todate AS DATETIME) > @DATE_OF_SEPARATION

DECLARE @PensionWorkHistoryYearWiseFinal TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [INT] IDENTITY(1,1) NOT NULL
)

INSERT INTO @PensionWorkHistoryYearWiseFinal
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT

UPDATE @PensionWorkHistoryYearWiseFinal SET QualifiedYearCount = 0 WHERE QualifiedHours < 400.0

---------------------------------------------------------------------------------------------------------------------------------------------------
	--FOR NUMERATOR
	SET @COUNT_YEARLY =1 
	WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY 
	BEGIN
		IF (SELECT QualifiedYearCount FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.YearlySEQ=@COUNT_YEARLY) < 20
			BEGIN
				SELECT  @NUMERATOR = @NUMERATOR +  QualifiedHours FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.QualifiedHours >= 400.0 
				AND PWHYF.YearlySEQ=@COUNT_YEARLY 
			END
			ELSE
			BEGIN
				SELECT  @NUMERATOR = @NUMERATOR +  QualifiedHours FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.YearlySEQ=@COUNT_YEARLY 
			END
				SET @COUNT_YEARLY = @COUNT_YEARLY + 1
	END
	
	--FOR DENOMINATOR
	WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
	BEGIN
		IF (SELECT PWHYD.QualifiedYearCount FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR) < 20
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
				AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
			ELSE
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
				SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
	END
END


GO

USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetLateHoursAndContributions]    Script Date: 04/25/2012 18:14:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetLateHoursAndContributions](@FROMDATE DATETIME,@TODATE DATETIME,@ALLOCATIONYEAR INT)
AS
BEGIN
SET NOCOUNT ON

CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO #PensionWorkHistory
EXEC USP_PENSIONINTERFACE4OPUS_BY_DATES @ALLOCATIONYEAR, @FROMDATE, @TODATE

SELECT EmpAccountNo,COMPUTATIONYEAR,VW.SSN,SUM(ISNULL(IAPHOURS,0.0)) LATEIAPHOURS,SUM(ISNULL(IAPHOURSA2,0.0)) LATEIAPHOURSA2,SUM(ISNULL(IAPPERCENT,0.00)) LATEIAPPERCENT INTO #TEMP
FROM #PensionWorkHistory VW
WHERE (LateMonthly = 'Y' OR LateAnnual = 'Y') AND ComputationYear <= @ALLOCATIONYEAR
GROUP BY EmpAccountNo,COMPUTATIONYEAR,VW.SSN

DECLARE @SSN VARCHAR(9)
DECLARE @COMPUTATIONYEAR INT
DECLARE @EMPACCOUNTNO INT
DECLARE @IAPHOURS TABLE(
		[EMPACCOUNTNO] [INT] NULL,
		[ComputationYear] [smallint] NULL,
		[SSN] [char](9) NULL,
		[IAPHours] [numeric](7, 1) NULL,
		[IAPHoursA2] [numeric](7, 1) NULL,
		[IAPPercent] [money] NULL		
	) 
DECLARE WORK_HISTORY CURSOR FOR SELECT EMPACCOUNTNO,SSN,COMPUTATIONYEAR FROM #TEMP
OPEN WORK_HISTORY
FETCH NEXT FROM WORK_HISTORY
INTO @EMPACCOUNTNO,@SSN,@COMPUTATIONYEAR

WHILE @@FETCH_STATUS = 0
BEGIN
	DECLARE @PensionWorkHistory TABLE(
		[ReportID] [varchar](18) NULL,
		[EmpAccountNo] [int] NULL,
		[ComputationYear] [smallint] NULL,
		[FromDate] [smalldatetime] NULL,
		[ToDate] [smalldatetime] NULL,
		[Weeks] [char](2) NULL,
		[Received] [smalldatetime] NULL,
		[Processed] [smalldatetime] NULL,
		[HoursID] [varchar](24) NULL,
		[SSN] [char](9) NULL,
		[LastName] [varchar](50) NULL,
		[FirstName] [varchar](50) NULL,
		[UnionCode] [int] NULL,
		[PensionPlan] [smallint] NULL,
		[PensionCredit] [numeric](7, 3) NULL,
		[L52VestedCredit] [smallint] NULL,
		[PensionHours] [numeric](7, 1) NULL,
		[IAPHours] [numeric](7, 1) NULL,
		[IAPHoursA2] [numeric](7, 1) NULL,
		[IAPPercent] [money] NULL,
		[ActiveHealthHours] [numeric](7, 1) NULL,
		[RetireeHealthHours] [numeric](7, 1) NULL,
		[PersonId] [varchar](15) NULL,
		[RateGroup] [varchar](4) NULL,
		[HoursStatus] [int] NULL,
		[LateMonthly] [varchar](1)  NULL,
		[LateAnnual] [varchar](1)  NULL,
		[UnionMisc] [char](2) NULL,
		[HoursWorked] [numeric](7, 1) NULL,
		[IAPHourlyRate] [money] NULL,
		[Source] [varchar](4) NOT NULL,
		[ToHealthSystem] [int] NULL,
		[ToPensionSystem] [int] NULL,
		[IsActiveHealth] [int] NULL,
		[IsRetireeHealth] [int] NULL,
		[IsPension] [int] NULL,
		[IsIAPHourly] [int] NULL
		, [OldEmployerNum] [varchar](6)
	) 

	INSERT INTO @PensionWorkHistory 
	EXEC usp_PensionInterface4OPUS @SSN
	
	INSERT INTO @IAPHOURS
	SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(ISNULL(IAPHOURS,0.0)) IAPHOURS,SUM(ISNULL(IAPHOURSA2,0.0)) IAPHOURSA2,SUM(ISNULL(IAPPERCENT,0.00)) IAPPERCENT
	FROM @PensionWorkHistory
	WHERE ComputationYear = @COMPUTATIONYEAR 
	AND EmpAccountNo = @EMPACCOUNTNO
	GROUP BY EmpAccountNo,COMPUTATIONYEAR,SSN
	
	FETCH NEXT FROM WORK_HISTORY
	INTO @EMPACCOUNTNO,@SSN,@COMPUTATIONYEAR
END
CLOSE WORK_HISTORY
DEALLOCATE WORK_HISTORY

SELECT A.EMPACCOUNTNO,A.COMPUTATIONYEAR,A.SSN,D.PERSON_ACCOUNT_ID,C.PERSON_ID,B.IAPHours,B.IAPHoursA2,B.IAPPercent,A.LATEIAPHOURS,A.LATEIAPHOURSA2,A.LATEIAPPERCENT
FROM #TEMP A
INNER JOIN opus.dbo.SGT_PERSON C
ON A.SSN = opus.dbo.FN_GET_DECRPTYED_TEXT(C.SSN)
INNER JOIN opus.dbo.SGT_PERSON_ACCOUNT D
ON D.PERSON_ID = C.PERSON_ID AND D.PLAN_ID = 1
LEFT JOIN @IAPHOURS B
ON A.SSN =B.SSN AND A.COMPUTATIONYEAR = B.COMPUTATIONYEAR AND A.EMPACCOUNTNO = B.EMPACCOUNTNO

END

GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate_IAP]    Script Date: 04/25/2012 18:13:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/****** Object:  StoredProcedure [dbo].[usp_GetLateHoursAndContributions]    Script Date: 04/11/2012 12:04:23 ******/
--CREATE PROC [dbo].[usp_GetLateHoursAndContributions](@FROMDATE DATETIME,@TODATE DATETIME,@ALLOCATIONYEAR INT)
--AS
--BEGIN
--SET NOCOUNT ON

--SELECT		COMPUTATIONYEAR,VW.SSN,PERACCT.PERSON_ACCOUNT_ID,PER.PERSON_ID,SUM(ISNULL(IAPHOURS,0.0)) LATEIAPHOURS,SUM(ISNULL(IAPHOURSA2,0.0)) LATEIAPHOURSA2,SUM(ISNULL(IAPPERCENT,0.00)) LATEIAPPERCENT INTO #TEMP
--FROM		VW_PENSIONINTERFACE4OPUS VW
--INNER JOIN	MPIPHP.DBO.SGT_PERSON PER	
--		ON	VW.SSN = DBO.fn_GET_DECRYPTED_TEXT(PER.SSN)
--INNER JOIN	MPIPHP.DBO.SGT_PERSON_ACCOUNT PERACCT
--		ON	PERACCT.PERSON_ID = PER.PERSON_ID
--		AND	PERACCT.PLAN_ID = 1	
--WHERE		PROCESSED BETWEEN @FROMDATE AND @TODATE
--	AND		PENSIONPLAN = 2
--	AND		COMPUTATIONYEAR < @ALLOCATIONYEAR
--	AND		LATEMONTHLY = 'Y' 
--GROUP BY	COMPUTATIONYEAR,VW.SSN,PERACCT.PERSON_ACCOUNT_ID,PER.PERSON_ID

--SELECT		A.COMPUTATIONYEAR,A.SSN,B.PERSON_ACCOUNT_ID,B.PERSON_ID,SUM(ISNULL(IAPHOURS,0.0)) IAPHOURS,SUM(ISNULL(IAPHOURSA2,0.0)) IAPHOURSA2,SUM(ISNULL(IAPPERCENT,0.00)) IAPPERCENT ,
--			B.LATEIAPHOURS, B.LATEIAPHOURSA2,B.LATEIAPPERCENT
--FROM		#TEMP B
--LEFT JOIN	VW_PENSIONINTERFACE4OPUS A
--	ON		B.SSN = A.SSN AND B.COMPUTATIONYEAR = A.COMPUTATIONYEAR
--WHERE		A.PENSIONPLAN = 2
--	AND		A.PROCESSED < @FROMDATE
--	AND		(B.LATEIAPHOURS <> 0 OR B.LATEIAPHOURSA2 <> 0 OR B.LATEIAPPERCENT <> 0)
--GROUP BY	A.COMPUTATIONYEAR,A.SSN,B.LATEIAPHOURS, B.LATEIAPHOURSA2,B.LATEIAPPERCENT,B.PERSON_ACCOUNT_ID,B.PERSON_ID
--ORDER BY	A.SSN,A.COMPUTATIONYEAR

--DROP TABLE	#TEMP

--END

--GO


/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate_IAP]    Script Date: 04/11/2012 12:04:53 ******/
CREATE PROC [dbo].[usp_GetVestingDate1HourAftGivenDate_IAP](@SSN char(10))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @IAPHOURS int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	IAPHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime	
)

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) >= '08/01/2000' order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @IAPHOURS=0
SET @FLAG =0 


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @IAPHOURS = @IAPHOURS +  (select temp.IAPHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @IAPHOURS >= 1.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END

END


GO



USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursAftDateOfBirth]    Script Date: 04/25/2012 18:12:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursAftDateOfBirth]    Script Date: 04/11/2012 12:05:09 ******/

CREATE PROC [dbo].[usp_GetVestingDate40HoursAftDateOfBirth](@SSN char(10),@PLANCODE varchar(20),@YEAR int,@DATE_AT_AGE_65 datetime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN

INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN
 and ComputationYear=@Year and cast(FromDate AS datetime) >= @DATE_AT_AGE_65 AND PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
	WHILE (@COUNT <= @TABLECOUNT)
	Begin
		set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
		if @WorkingHours >= 40.0 
		begin 
			select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
			SET @FLAG=1
			break  
		end
		set @COUNT = @COUNT + 1
	end
	
	IF @FLAG =0
	BEGIN
		select NULL as VESTING_DATE from @Temp temp
	END
END
ELSE
BEGIN
	select NULL as VESTING_DATE from @Temp temp
END
END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear= @Year and cast(FromDate AS datetime) >= @DATE_AT_AGE_65  order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG=1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END

END


GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursInGivenYear]    Script Date: 04/25/2012 18:11:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursInGivenYear]    Script Date: 04/11/2012 12:05:28 ******/

CREATE PROC [dbo].[usp_GetVestingDate40HoursInGivenYear](@SSN char(10),@PLANCODE varchar(20),@YEAR int)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN

INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN
 and ComputationYear=@Year and PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
	WHILE (@COUNT <= @TABLECOUNT)
	Begin
		set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
		if @WorkingHours >= 40.0 
		begin 
			select cast(temp.ToDate as datetime) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
			SET @FLAG=1
			break  
		end
		set @COUNT = @COUNT + 1
	end
	
	IF @FLAG =0
	BEGIN
		select NULL as VESTING_DATE from @Temp temp
	END
END
ELSE
BEGIN
	select NULL as VESTING_DATE from @Temp temp
END
END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear= @Year order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select cast(temp.ToDate as datetime) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG=1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END


END

END


GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursNonAffliate]    Script Date: 04/25/2012 18:10:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursNonAffliate]    Script Date: 04/11/2012 12:05:45 ******/
CREATE PROC [dbo].[usp_GetVestingDate40HoursNonAffliate](@SSN char(10),@PLANCODE varchar(20))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN

INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN 
 and cast(FromDate AS datetime) >= '12/23/1989' and UnionCode in (09,59,79,89,99) and PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE 
BEGIN
select NULL as VESTING_DATE from @Temp temp
END

END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) >='12/23/1989' 
and UnionCode in (09,59,79,89,99) order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select cast(temp.ToDate as datetime) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp 
END
END
ELSE 
BEGIN
select NULL as VESTING_DATE from @Temp temp
END

END

END


GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetWorkInformationForQDRO]    Script Date: 04/25/2012 18:04:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/****** Object:  StoredProcedure [dbo].[usp_GetWorkInformationForQDRO]    Script Date: 04/11/2012 12:06:52 ******/
CREATE PROC [dbo].[usp_GetWorkInformationForQDRO] (@SSN char(10),@PLAN_CODE VARCHAR(10),
@START_DATE datetime,@END_DATE datetime,@RETIREMENT_DATE datetime,@HOURS_BETWEEN_INTERVAL NUMERIC (7, 1) OUTPUT,@TOTAL_HOURS NUMERIC (7, 1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT DISTINCT @HOURS_BETWEEN_INTERVAL= CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=2 AND
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE)))
WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=3 and
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE)))
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=4 and
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE)))
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=6 and
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE)))
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=7 and
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE)))
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=8 and
((CAST(FromDate as datetime) BETWEEN @START_DATE AND @END_DATE OR CAST(ToDate as datetime) BETWEEN @START_DATE AND @END_DATE)))
ELSE NULL END,
@TOTAL_HOURS= CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=2 and CAST(ToDate as datetime) <= @RETIREMENT_DATE)
WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and CAST(ToDate as datetime) <= @RETIREMENT_DATE) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=3 and CAST(ToDate as datetime) <= @RETIREMENT_DATE)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND  PensionPlan=4 and CAST(ToDate as datetime) <= @RETIREMENT_DATE)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=6 and CAST(ToDate as datetime) <= @RETIREMENT_DATE)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=7 and CAST(ToDate as datetime) <= @RETIREMENT_DATE)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN  and PensionPlan=8 and CAST(ToDate as datetime) <= @RETIREMENT_DATE)
ELSE NULL END
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN

END



GO


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDateAft400Hours]    Script Date: 04/25/2012 18:09:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/****** Object:  StoredProcedure [dbo].[usp_GetVestingDateAft400Hours]    Script Date: 04/11/2012 12:06:01 ******/
CREATE PROC [dbo].[usp_GetVestingDateAft400Hours](@SSN char(10),@PLANCODE varchar(20),@YEAR int)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN


INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear=@YEAR and PensionPlan=2 order by FromDate

SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 400.0 
begin 
select CAST(temp.ToDate AS DATETIME) AS VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END
END
ELSE 
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END
END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear =@YEAR order by FromDate asc
--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG =0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select temp.WorkingHours from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 400.0 
begin 
select CAST(temp.ToDate AS DATETIME) AS VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG=1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END
END
ELSE 
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END

END

END


GO



USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetWorkData]    Script Date: 04/25/2012 18:07:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/****** Object:  StoredProcedure [dbo].[usp_GetWorkData]    Script Date: 04/11/2012 12:06:18 ******/
CREATE PROC [dbo].[usp_GetWorkData](@SSN char(10),@PLANCODE varchar(20))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE

BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
ELSE NULL END AS VESTED_HOURS
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
END


GO



/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 04/11/2012 12:06:36 ******/
CREATE PROC [dbo].[usp_GetWorkDataForPersonOverview](@SSN char(9))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [int] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR


END

GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Kunal Arora
--Created On	:	04/12/2012
--Description	:	EADB Store Procedures
------------------------------------------------------------------------------------------------------------------------


USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[sp_VerifyHours]    Script Date: 11/18/2011 08:57:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
ALTER  procedure [dbo].[sp_VerifyHours] (@hoursid int, @debug bit = 0)    
as    
begin    
/*    
---------------------------------------------------------------------------------------------------------------    
- UPDATE HISTORY                                                                                              -    
---------------------------------------------------------------------------------------------------------------    
DATE         TAG       USER   DESCRIPTION    
----------    --------    ---------   -----------------------------------------------------------------------------------------    
11/29/1999   LINK        AMG    Modified to use linked server instead of remote server    
11/30/1999   OPT        AMG    Optimized query of person table for linked server    
12/20/1999   AUDIT1  AMG    Modified to allow entry of Audit Hours    
12/28/1999   TEST     AMG    Testing    
01/07/1999   USER1    AMG    Update AuditUser on hours record after editing    
05/21/2000   DUPERR     SPM    Bug 330 Duplicate errors 6,7 or 6,8    
05/22/2000   ERR14      SPM    Added errorcode 14     
11/22/2000   BUG513 SPM Fixed bug 513    
06/13/2001       RG64  SPM skip agreement checks if rategroup = 64    
08/09/2001 NEGIAP SPM Enhance edit 14 to check for neg IAP    
08/09/2001 EDIT15  SPM Enhanced edit 15 to exclude 0 hours    
09/27/2001 EDIT7  SPM The edit was marked as fixed if any other edit was overriden. This was because the second time around     
     the agreement exist bit was not getting set within the edit6 code.    
12/21/2001  EDIT16  SPM Implemented EDIT 16 which checks for code 99 participants the max hours/week should not exceed 56 hours    
05/08/2002 CODE53 SPM Added productionCode 53    
11/07/2002 CODE59 MM enabled check for code 59/71 (rollback 11/14/02)    
11/07/2002       EDIT16   MM  extended edit 16 on Joyce request 9/20/2002    
11/07/2002 EDIT17  MM  Added edit 17 on Joyce request 9/20/2002    
    
02/25/2003       EDIT5Enhanc    MM --=============================== Edit 5 enhancement code inserted =====    
07/02/2003          MM Now using productioncodes table to check production code.    
    
07/24/2003 EDIT6/ITS#375  LC Modify edit 6, add Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
07/24/2003 EDIT6,8/ITS#376  MM/LC Commented and added new function for allowing 3 month period for effective date. ITS # 376    
    
08/02/2003 EDIT18 SPM Added Edit 18.     
08/03/2003 EDIT19 SPM  Added Edit 19 - RG04 with IAP    
11/10/2003 EDIT5-CHK-AUD  MM  To check SSN merger is actual ssn merge for participant, now checking in Eligibility_Audit table also.    
11/15/2004 ITS#1502 MM Modified edit code 15 to flag only if hours are > 12    
01/07/2005 ITS#1239 MM Modified edit description text in edit 6,7,8, and 9 , Approved in test system by Joyce    
08/15/2005 ITS#1278 MM Added edit code 20    
12/03/2008          HV Commented the edit "Possible Dependent" as per Joyce request.    
12/17/2008          HV Modified the suser_sname() to dbo.fn_GetUserName(suser_sname()) to remove the domain name from the user name.  
08/18/2009 ITS#4226 HV Included new Production Code 98
03/11/2010 ITS#4612 HV Included UnionCode 89 for 56 hr /week verification like unioncode 79
03/12/2010 ITS#3888 HV Included Unioncode 89 under EditCode 18
05/18/2010 ITS#4699 HV Modified Edit 15: Create Edit 15 for negative hours duplicates. Also for positive hours, min of 13 hours should be reported to verify duplicate.
02/09/2011 ITS#5980 MM Added RG19,25,27,42,51,76,77, and 98 in Edit 19 list.

*/    
    
--    
-- declare variables    
declare @errorexists bit,    
    @employerid int,    
    @PayrollEmployerId int,    
    @ssn varchar(9),    
    @lastname varchar(50),    
    @firstname varchar(50),    
    @unioncode int,    
    @reportid int,    
    @batchid int,    
    @productiontitleid int,    
    @lastunioncode int,    
    @ErrList varchar(50),    
    @SSNExists bit,    
    @AgmtExists bit,    
    @AgmtExpired bit,    
    @AgmtNotEffective bit,    
    @ExclusionExists bit,    
    @AgreementId int,    
    @AgmtRateGroup int,    
    @RptFromDate smalldatetime,    
    @RptToDate smalldatetime,    
    @RptRateGroup int,    
    @xtra varchar(400),    
    @orig varchar(100),    
    @HoursEditId int,    
    @OverRideDate smalldatetime,    
    @ExpiredDate smalldatetime,    
    @EffectiveDate smalldatetime,    
    @TerminatedDate smalldatetime,    
    @DateOfDeath smalldatetime,    
    @Now datetime,    
    @Diff int,    
    @CheckEmployerId int,    
    @FromTape bit,    
    @NameDifferent bit,    
    @NewPensSSN varchar(10),    
    @NewEligSSN varchar(10),    
    @NewSSNMergeSSN varchar(10),    
    @PersonLastName varchar(50),    
    @PersonFirstName varchar(50),    
    @AliasLastName varchar(50),    
    @AliasFirstName varchar(50),    
    @HoursWorked numeric(7,1),    
    @IAPValue money,   /*NEGIAP*/    
    @rtn int,    
    @TrueUnion int,    
    @CheckAgreementOf varchar(50),    
    @IsParticipant bit,    
    @FlagEdit4 bit,    
    @UnionGroupCode char(10),    
    @OldPensSSN varchar(9),    
    @OldEligSSN varchar(9),    
    @OldSSNMergeSSN varchar(10),    
    @ProdCode int,    
    @DupReportId int,    
    @Weeks int,    
    @TabledAgmtExists bit    
 
declare @temp table (person_id int, mpid varchar(20),last_name varchar(50), first_name varchar(50), date_of_death datetime)
    
set nocount on    
--    
exec showdebug @debug , 'Starting verify hours procedure'    
--    
-- do not allow hours that have been processed to be verified    
exec showdebug @debug, 'Check for hours that have been processed and release if the status is 0'    
if exists(select 1 from hours where hoursid = @hoursid and (status = 0 or iapstatus = 0))    
   begin    
      return 0    
   end    
    
begin tran    
    
    
    
-- delete HoursValues records    
exec showdebug @debug, 'Delete the hours values'    
delete from hoursvalues where hoursid = @hoursid    
if @@error != 0    
   begin    
      rollback tran     
      raiserror 99999 'Error deleting HoursValues.'    
      return 99999    
   end    
    
    
--    
-- get report header variables    
EXEC showdebug @debug , 'Get the values for the record and put them into local variables.'    
select    
        @reportid = h.reportid,    
        @batchid = r.batchid,    
        @employerid = a.employerid,    
        @unioncode = h.unioncode,    
        @ssn = h.ssn,    
        @firstname = h.firstname,    
        @lastname = h.lastname,    
--        @productiontitleid = h.productiontitleid,    
        @productiontitleid = r.productiontitleid,    
        @RptFromDate = r.FromDate,    
        @RptToDate = r.ToDate,    
        @RptRateGroup = r.RateGroup,    
        @ProdCode=convert(int,coalesce(h.UnionMisc,'17')),    
        @HoursWorked=Hoursworked,   /*EDIT16 and EDIT 14*/    
        @IAPValue = IAPValue   /*EDIT16 and EDIT 14*/    
from    
           hours h,    
           report_vw r,    
           accounts a    
where    
            r.reportid = h.reportid and    
            h.hoursid = @hoursid and             r.empaccountno = a.accountno    
    
insert into @temp exec [OPUS].[dbo].[Check_SSN_Exists] @SSN --get person_id, mpid

-- get the payroll agency's  employer id    
select    
           @PayrollEmployerid = a.employerid    
from    
            hours h,    
            report_vw r,    
            accounts a    
where    
             r.reportid = h.reportid and    
             h.hoursid = @hoursid and    
             r.accountno = a.accountno    
    
    
-- determine if report is from a tape    
select @FromTape = bt.FromTape    
from report r, batch b, batchtype bt    
where r.reportid = @reportid and b.batchid = r.batchid and bt.batchtypecode = b.batchtypecode    
    
if @FromTape=0    
 select @FromTape=1 from fpdb.dbo.FileSumReport where batchid=@batchid    
    
    
-- record original values user entered    
select @orig = '(KEYED -- ' + isnull(@ssn,'') + ' :  ' + isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' + convert(varchar(10),@unioncode) + ')'    
    
exec showdebug @debug, 'Edit check 1, SSN is not in the system'    
    
    
-- 1  SSN is not in system    
select @IsParticipant = 1    
select @SSNExists = 1    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '1'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
 begin    
    if not exists(select 1 from hedb.dbo.participant where ssn = @ssn)    
        begin    
   select @IsParticipant=0    
        end    
--Change to OPUS
    --if not exists(select 1 from opus.dbo.SGT_Person where ssn = @ssn) --no need to compare SSN just see if record in @temp table    
    if not exists(select 1 from @temp)    
        begin    
   select @SSNExists=0    
        end    
    /*else     
        begin    
   select @xtra = 'POSSIBLE DEPENDENT: '    
        end*/ -- Code commented to avoid additional Edit Flag in the System as per Joyce's request 12/03/2008 - Hitesh    
  select @xtra = @xtra + convert(char(4),' -- ') + @orig    
     
    
    if @IsParticipant=0    
        begin    
   --select @SSNExists = 0    
           -- if HoursEdits record alread exists then delete it    
           delete from HoursEdits where HoursEditId = @HoursEditId    
           --    
        -- insert record into hoursedit table'    
           exec @rtn = HoursEdits_ins @editcode = '1', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
           if @rtn != 0    
               begin    
                 rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 1).'    
                 return 99999    
               end    
           select @ErrList = coalesce(@ErrList,'') + '1, '     
   if @SSNExists=0 goto CheckUnion    
        end    
else    
 begin    
 -- if edit was fixed then update the edit record    
 if @HoursEditId is not null    
  begin    
              update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
               if @@error != 0    
                begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
       end    
   end    
    
    
    
exec showdebug @debug, 'Finished edit #1, starting edit check #2, Name is different in the system'    
-- 2 Name in system(s) is different    
    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '2'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
    begin    
       select @NameDifferent = 0    
--Change to OPUS
       --select @PersonLastName = isnull(Last_Name,''), @PersonFirstName = isnull(First_Name,'') from opus.dbo.SGT_Person where ssn = @ssn    --no need to compare SSN, get values from @temp
       select @PersonLastName = isnull(Last_Name,''), @PersonFirstName = isnull(First_Name,'') from @temp 
       if @FromTape = 1    
           begin    
             -- if from tape, check only first letter of first name    
              if not (@PersonLastName = @lastname and left(@PersonFirstName,1) = left(@firstname,1))    
                 begin    
                    select @NameDifferent = 1    
         if exists(select 1 from hedb.dbo.personalias where ssn = @ssn and lastname = @lastname and firstname = @firstname)    
   select @NameDifferent=0    
                 end    
           end    
       else    
           begin    
              -- if not from tape, check the whole name    
    if not (@PersonLastName = @lastname and @PersonFirstName = @firstname)    
                begin    
                   select @NameDifferent = 1    
           if exists(select 1 from hedb.dbo.personalias where ssn = @ssn and lastname = @lastname and firstname = @firstname)    
                    begin    
       select @NameDifferent = 0    
             end     
                end    
         end    
    
       if @NameDifferent = 1 and @SSNExists = 1    
           begin    
              -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId    
              --    
              -- insert record into hoursedit table'    
--Change to OPUS
              select @xtra = isnull(last_name,'') + ', ' + isnull(first_name,'') from @temp --opus.dbo.SGT_Person where ssn = @ssn    
              select @xtra = @xtra + convert(char(4),' -- ') + @orig    
              --    
              exec @rtn = HoursEdits_ins @editcode = '2', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
              if @rtn != 0    
                 begin    
                    rollback tran    
                    raiserror 99999 'Error creating HoursEdits record (Edit 2).'    
                    return 99999    
                 end    
              select @ErrList = coalesce(@ErrList,'') + '2, '    
           end    
 else    
           begin    
           -- if edit was fixed then update the edit record    
           if @HoursEditId is not null    
            begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                     if @@error != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                         end    
                 end    
           end    
    end     
    
    
    
     
     
-- 4  Union code different from last union code processed    
exec showdebug @debug, 'Finished edit 3, starting edit 4:  Union code different from last union code processed'    
    
select @xtra = ''    
select @FlagEdit4=0    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '4'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
begin    
 select top 1 @TrueUnion=TrueUnion from TrueUnion where ssn=@ssn    
-- if @UnionCode in(18,46,53,86,87,96,97)     /*CODE53 */    
-- MM 07/02/2003 commented above line and checking productioncodes table.     
 if exists(select * from productioncodes where productioncode = @UnionCode) or @UnionCode = 80 -- ITS#2261 - 80 is a new production code.    
 begin    
  select @UnionGroupCode = coalesce(UnionGroupCode,'E') from unions where UnionCode=@UnionCode    
  if not exists(select 1 from unions u,TrueUnion tu where tu.trueUnion=u.unioncode and u.UnionGroupCode=@UnionGroupCode and ssn=@ssn) and @TrueUnion is not null    
  begin    
   select @FlagEdit4=1    
   select @xtra='Production Code not in same group as TrueUnion'    
               select @xtra = @xtra + convert(char(4),' -- ') + @orig    
  end    
    
  if  @UnionCode=96     
  begin    
   if  not exists (select 1 from trueunion where trueunion=35 and ssn=@ssn)    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
  if  @UnionCode=80 --Enhancement - ITS#2261 (Production Code 80 Belongs to Basic Craft)    
  begin    
   if  not exists (select 1 from trueunion where (trueunion=35 or trueunion=36) and ssn=@ssn)    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
  if  @UnionCode=86 --Enhancement - ITS#2262 (Production Code 86 Belongs to IA) now it also covers Local 52 (26, and 27)    
  begin    
   --MM ITS#2338 - code 29 is added under 86.    
   if   not ( exists(select 1 from unions u,TrueUnion tu where tu.trueUnion=u.unioncode and u.UnionGroupCode='B' and ssn=@ssn)    
                                                 or exists (select 1 from trueunion where (trueunion=26 or trueunion=27) and ssn=@ssn)     
                                                 or (exists (select 1 from trueunion where trueunion=29 and ssn=@ssn)  and @RptToDate >= '12/01/2005')    
    )  and @TrueUnion is not null    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
  if  @UnionCode=97 or @UnionCode = 98 --Enhancement - ITS#2262 (Production Code 97 Belongs to IA) now it also covers Local 161 (29), ITS#4226    
  begin    
   if   not ( exists(select 1 from unions u,TrueUnion tu where tu.trueUnion=u.unioncode and u.UnionGroupCode='B' and ssn=@ssn)    
                                                or exists (select 1 from trueunion where (trueunion=29) and ssn=@ssn) )    
                                                 and @TrueUnion is not null    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
    
  --Enhancement - ITS#2993 (to NOT flag if hours are reported under production code 18 and true union is 71)    
  if  @UnionCode= 18 and exists (select 1 from trueunion where trueunion=71 and ssn=@ssn)    
  begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
  end    
    
 end    
 else    
 begin    
  if @UnionCode not in(select TrueUnion from TrueUnion where ssn=@ssn)     
  begin    
   select @FlagEdit4=1    
               select @xtra = 'True Union: ' + isnull(convert(varchar(10),@TrueUnion),'N/A')    
               select @xtra = @xtra + convert(char(4),' -- ') + @orig    
  end    
    
 end    
    
 if @FlagEdit4=1    
 begin    
              -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId    
              --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '4', @hoursid = @hoursid,@ExtraData = @xtra, @skipselect = 1    
              if @rtn != 0    
                 begin    
                    rollback tran    
                    raiserror 99999 'Error creating HoursEdits record (Edit 4).'    
                    return 99999    
                 end    
              select @ErrList = coalesce(@ErrList,'') + '4, '    
  end    
 else    
 begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null    
                 begin    
                                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                     if @@error != 0    
                  begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
 end    
end    
    
    
CheckUnion:    
    
exec showdebug @debug, 'Finished edit #2, Union code does not exist in union master.'    
--    
-- 3  Union code does not exist in union master    
    
    
select @xtra = ''    
--    
-- check if edit already exists     
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '3'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if not exists(select 1 from Unions where UnionCode = @UnionCode)    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '3', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1    
            if @rtn != 0    
               begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 3).'    
                  return 99999    
               end    
            select @ErrList = coalesce(@ErrList,'') + '3, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
               update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId     
                  if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end    
               end    
         end    
   end    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 4, starting edit 5:  SSN Change In System'    
-- 5 SSN Change In System    
    
select @xtra = ''    
select @NewEligSSN = ''    
select @NewPensSSN = ''    
select @OldEligSSN = ''    
select @OldPensSSN = ''    
--    
-- check if edit already exists    
--select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '5' --    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode in ('5','5A')    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
          
      -- see if an Eligibility SSN history record exists    
    
       select TOP 1 @NewEligSSN = SSN,@OldEligSSN = SSNOld     
 from hedb.dbo.PersonSSNHistory     
 where (SSN = @SSN or SSNOld = @SSN) and ChangeType =  'E'    
 order by auditdate desc,historyid desc    
          
      -- see if a Pension SSN history record exists    
       select TOP 1 @NewPensSSN = SSN,@OldPensSSN = SSNOld     
 from hedb.dbo.PersonSSNHistory     
 where (SSN = @SSN or SSNOld = @SSN) and ChangeType = 'P'    
 order by auditdate desc,historyid desc    
    
      -- see if a SSN Merge SSN history record exists    
       select TOP 1 @NewSSNMergeSSN = SSN,@OldSSNMergeSSN = SSNOld     
 from hedb.dbo.PersonSSNHistory     
 where (SSN = @SSN or SSNOld = @SSN) and ChangeType = 'n'    
 order by auditdate desc,historyid desc    
    
/*    
--=============================== Commented for Edit 5 enhancement ===============================    
       if @OldEligSSN=@SSN or @OldPensSSN=@SSN or @OldSSNMergeSSN=@SSN    
         begin    
            -- if HoursEdits record already exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
 -- if edit 1 was flagged delete that too    
 delete from HoursEdits where HoursId=@hoursid and editcode='1'    
            -- show Eligibility SSN    
            if @OldEligSSN=@SSN    
             begin    
                  select @xtra = 'New Eligibility SSN: ' + @NewEligSSN + '  '                    
 end    
    
            -- show Pension SSN    
            if @OldPensSSN=@SSN     
               begin    
                  select @xtra = @xtra + 'New Pension SSN: ' + @NewPensSSN    
               end    
    
           -- show SSN Merge SSN    
            if @OldSSNMergeSSN=@SSN     
               begin    
                  select @xtra = @xtra + 'New SSN Merge SSN: ' + @NewSSNMergeSSN    
               end    
    
    
            select @xtra = @xtra + convert(char(4),' -- ') + @orig    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '5', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
            if @rtn != 0    
               begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 5).'    
            return 99999    
               end    
            select @ErrList = coalesce(@ErrList,'') + '5, '    
*/    
--=============================== Edit 5 enhancement code inserted ===============================    
declare @OldSSN varchar(10), @NewSSN varchar(10), @AuditUser varchar(20)    
select @OldSSN = ''    
select @NewSSN = ''    
declare @tempNewSSN table (person_id int, mpid varchar(20),last_name varchar(50), first_name varchar(50), date_of_death datetime )
 
             select TOP 1 @AuditUser = AuditUser    
       from hedb.dbo.PersonSSNHistory     
       where SSNOld = @SSN     
       order by historyid desc    
    
--      if @OldEligSSN=@SSN or @OldPensSSN=@SSN or @OldSSNMergeSSN=@SSN    
      if (@OldEligSSN=@SSN or @OldPensSSN=@SSN or @OldSSNMergeSSN=@SSN) and     
 (exists ( select 1  from hedb.dbo.eligibility_audit where (SSN = @SSN or SSNNew = @SSN) )    
  OR @AuditUser = 'Albert'  OR @AuditUser = 'PBaumberger' OR @AuditUser = 'Pbamberger' )    
      begin          
-- MM: Enhancement of Edit 5 also comparing name if ssn exists in ssn merge history.    
--       select HistoryId, SSN, SSNOld, AuditDate    
       select TOP 1 @NewSSN = SSN,@OldSSN = SSNOld     
       from hedb.dbo.PersonSSNHistory     
       where (SSN = @SSN or SSNOld = @SSN)     
       order by historyid desc    
          
          insert into @tempNewSSN exec opus.dbo.[Check_SSN_Exists] @NewSSN
          
            if @OldSSN = @SSN    
            begin    
                   declare @NameDiffer int    
               select @NameDiffer = 0    
               select @PersonLastName = isnull(Last_Name,''), @PersonFirstName = isnull(First_Name,'')     
--Change to OPUS
                   from  @tempNewSSN --opus.dbo.SGT_Person where ssn = @NewSSN    
-- MM 07/25/2003  commented, to check only last name as per Joyce instruction ITS# 378.    
               if @FromTape = 1    
                     if not (@PersonLastName = @lastname /*and left(@PersonFirstName,1) = left(@firstname,1)*/ )    
                        begin    
                            select @NameDiffer = 1    
                 if exists(select 1 from hedb.dbo.personalias where ssn = @NewSSN and lastname = @lastname and firstname = @firstname)    
                 select @NameDiffer=0    
                        end    
               else    
            if not (@PersonLastName = @lastname /*and @PersonFirstName = @firstname*/ )    
                        begin    
                            select @NameDiffer = 1    
                   if exists(select 1 from hedb.dbo.personalias where ssn = @NewSSN and lastname = @lastname and firstname = @firstname)    
                     select @NameDiffer = 0    
                        end    
            end    
    
            if @NameDiffer = 0    
 begin    
-- EOC Enhancement edit 5, the corresponding end for 'if @NameDifferent = 0' is also added    
                        -- if HoursEdits record already exists then delete it    
                        delete from HoursEdits where HoursEditId = @HoursEditId    
                     -- if edit 1 was flagged delete that too    
                     delete from HoursEdits where HoursId=@hoursid and editcode='1'    
                        -- show Eligibility SSN    
                        if @OldEligSSN=@SSN    
                         begin    
                              select @xtra = 'New Eligibility SSN: ' + @NewEligSSN + '  '                    
                     end    
                
                        -- show Pension SSN    
                        if @OldPensSSN=@SSN     
                           begin    
                              select @xtra = @xtra + 'New Pension SSN: ' + @NewPensSSN    
                           end    
                
                       -- show SSN Merge SSN    
                        if @OldSSNMergeSSN=@SSN     
                           begin    
                              select @xtra = @xtra + 'New SSN Merge SSN: ' + @NewSSNMergeSSN    
                           end    
                
                        select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                        --    
                        -- insert record into hoursedit table    
                        exec @rtn = HoursEdits_ins @editcode = '5', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                        if @rtn != 0    
                           begin    
                              rollback tran    
                              raiserror 99999 'Error creating HoursEdits record (Edit 5).'    
                              return 99999    
                           end    
                        select @ErrList = coalesce(@ErrList,'') + '5, '    
            end    
    
            if @OldSSN = @SSN AND @NameDiffer = 1    
            begin    
                        -- if HoursEdits record already exists then delete it    
                        delete from HoursEdits where HoursEditId = @HoursEditId    
                     -- if edit 1 was flagged delete that too    
                     delete from HoursEdits where HoursId=@hoursid and editcode='1'    
                select @xtra = 'System SSN & Name: '+rtrim(@PersonLastName)+', '+rtrim(@PersonFirstName)+@NewSSN    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                exec @rtn = HoursEdits_ins @editcode = '5A', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                   begin    
                      rollback tran    
                      raiserror 99999 'Error creating HoursEdits record (Edit 5A).'    
                      return 99999    
                   end    
                select @ErrList = coalesce(@ErrList,'') + '5A, '    
 end    
    
--============================ End of Edit 5 enhancement code inserted ===============================    
--========================================    
    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
               update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0                      begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end                end    
         end    
   end     
    
     
    
CheckAgreements:    
select @TabledAgmtExists = 0    
exec showdebug @debug, 'Finished edit 5, starting edit 6:  No agreement for union code'    
    
-- skip agreement checks 6,7,8 if rategroup = 64    
if @rptrategroup = 64 goto CheckRateGroup   /*RG64*/    
    
-- select the actual employer    
select @CheckEmployerId = @EmployerId    
--if @ProdCode in (18,46,53,87,96,97)    
-- MM 07/02/2003 commented above line and checking productioncodes table now.    
if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
 select @UnionCode=@ProdCode    
 -- choose the employer whose agreements will be checked    
if exists(select 1 from Employer where EmployerId = @PayrollEmployerId and EmployerTypeCode = 'PAY')    
   begin    
/*   select @CheckAgreementOf='PAYROLL'    
      -- if the actual employer is non-signatory then check the Payroll Agency's agreements    
      if exists(select 1 from Employer e, EmployerType et where e.EmployerId = @EmployerId and e.EmployerTypeCode = et.EmployerTypeCode and et.signatory = 1)    
         begin    
--            select @CheckEmployerId = @PayrollEmployerId    
    select @CheckAgreementOf=@CheckAgreementOf+'ANDEMPLOYER'    
         end    
   end    
*/    
   select @CheckAgreementOf='PAYROLLANDEMPLOYER'    
   end    
else    
   begin    
   select @CheckAgreementOf='EMPLOYER'    
   end    
    
--=======================================================    
-- MM: This check is disable on Joyce's Request, ref:email dated 5/14/2002 Sub: DISABLE CODE 71/59 ECEPTION TO AGREEMENT EDITS    
-- MM: This check is enabled on Shanda's Request, ref:email dated 10/28/2002  /*CODE59*/    
/*    
if  @UnionCode=59    
 if exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 0     
    and RateGroup = @RptRateGroup    
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
*/    
-- MM: By second code review I found that the exact condition as per shanda's given criterea, the check should be as follows, but the above is     
-- giving simillar behaviour, but only if 71 without exclusion exists, and it has been tested by Joyce so I am not changing it now. 01/15/2003.    
/*    
if  @UnionCode=59    
 if  not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    --and RateGroup = @RptRateGroup    
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
*/    
    
    
--MM added 11/12/2003 added code bellow to cover a scenario.    
-- If 71 Exclusion not exists, do not accept Payroll 59    
if  @UnionCode=59    
 if  not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
    
if  @UnionCode=59    
 if  exists ( -- No 71 exclusion    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
  )    
  OR -- No 71 at all    
  ( not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 0     
    and RateGroup = @RptRateGroup    
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null) )    
   and     
        not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null) )    
   and     
        not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='IA'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 0     
    and RateGroup = @RptRateGroup    
--    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null) )    
  )    
 begin    
  select @CheckAgreementOf='PAYROLLANDEMPLOYER'      
 end    
    
--MM Added to take care new 59 rule.  ITS#2132, also changed fn_AgreementExists.    
if  @UnionCode=59    
 if  exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='59'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
if  @UnionCode=71    
 if  exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
    
--=============================================================    
--check to see if agreement exists for the union code (moved the code out side of Edit 6 code so that the AgmtExist bit can be set for use in Edit 7 & 8 ) /*EDIT7*/    
/*select @AgmtExists=case @CheckAgreementOf when 'EMPLOYER' then dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
      when 'PAYROLL' then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
      when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)=0     
            then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
            else dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
            end    
      else 0    
      end    
*/    
  if  @CheckAgreementOf = 'PAYROLLANDEMPLOYER'     
   begin    
   select  @AgmtExists = dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
    
   if  @AgmtExists = 0     
    if  exists(  select  1     
       from  nonSigAgreement     
       where  EmployerId = @EmployerId     
        and ProductionTitleId =@ProductionTitleId     
        and PayrollCoId = @PayrollEmployerId    
      )    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
   -- MM 7/24/03 Commented and added new function for allowing 3 month period for effective date. ITS # 376    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
    OR exists (    
      select  1     
      from  agreement     
      where  employerid=@Employerid     
       and AgreementTypeCode=convert(varchar(10),'IA')     
       and ExcludeAgmt = 0     
       -- and RateGroup = @RptRategroup    -- as per Joyce we dont need to check RG for employer IA agreement, but we will check RG in payaroll agreement.    
       and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
       and (expiredate>= @RptToDate or expiredate is null)        and (effectivedate<= @RptFromDate or effectivedate is null)    
      )    
     begin    
     select  @AgmtExists = dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
     end    
   end     
  else    
   begin    
   select  @AgmtExists = dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
-- 6  No agreement for Union Code select @AgmtExists = 0    
    
--   --MM ITS#2545    
--   if @AgmtExists = 1 and @UnionCode = 87 and @RptToDate between '07/30/2006' and '09/30/2006'    
--    select @AgmtExists = dbo.fn_IndividualAgreementExists (@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
--MM ITS#2545    
  if @AgmtExists = 1 and @UnionCode = 87 and @RptRategroup = 5 and @RptToDate between '07/30/2006' and '09/30/2006'    
   select @AgmtExists = 0    
    
--MM ITS#1278    
  if @AgmtExists = 1     
   select @TabledAgmtExists = dbo.fn_TabledAgreementExists (@EmployerId,@UnionCode, @RptRateGroup,@ProductionTitleId, @RptFromDate, @RptToDate)    
  if @TabledAgmtExists = 1    
   select @AgmtExists = 0    
    
    
select @ExclusionExists = 0    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '6'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
begin    
--commented the following code as the @AgmtExists bit is being set outside of the Edit 6 code /*EDIT7*/    
/* select @AgmtExists=case @CheckAgreementOf when 'EMPLOYER' then dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
       when 'PAYROLL' then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
       when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)=0     
             then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
             else dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
             end    
       else 0    
       end    
*/    
          if @AgmtExists = 0    
              begin    
               -- if HoursEdits record alread exists then delete it    
                delete from HoursEdits where HoursEditId = @HoursEditId    
                --    
  --ITS#1239 - modifiy following lines for edit 6 ===========================    
  --old    
--                -- insert record into hoursedit table    
--                exec @rtn = HoursEdits_ins @editcode = '6', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1    
      
  --new    
  select @xtra = ''    
  if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
  begin    
--   select @xtra = 'production code. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
--   isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
--   convert(varchar(10),@ProdCode) + ')'    
    
   if @TabledAgmtExists = 1    
    select @xtra = 'Tabled Agreement for production code '+convert(varchar(10),@ProdCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
   else    
    select @xtra = 'production code '+convert(varchar(10),@ProdCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
      
          exec @rtn = HoursEdits_ins @editcode = '6', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
  end    
  else    
  begin    
--   select @xtra = 'union. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +   --   isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
--   convert(varchar(10),@UnionCode) + ')'    
      
   if @TabledAgmtExists = 1    
    select @xtra = 'Tabled Agreement for union code '+convert(varchar(10),@UnionCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
   else    
    select @xtra = 'union code '+convert(varchar(10),@UnionCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
    
          exec @rtn = HoursEdits_ins @editcode = '6', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
  end    
  ----EOC ---------------------------------------------------------------------------------------------    
    
    
                if @rtn != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 6).'    
                       return 99999    
                    end    
                   select @ErrList = coalesce(@ErrList,'') + '6, '    
              end    
 else    
            begin    
                -- if edit was fixed then update the edit record    
                if @HoursEditId is not null    
                    begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                       if @@error != 0    
                           begin    
                             rollback tran    
                             raiserror 99999 'Error Accepting HoursEdit record.'    
                             return 99999    
                           end    
                    end    
              end    
     if @AgmtExists = 0 or @ExclusionExists = 1    
   goto CheckRategroup    
    end    
    
    
    
    
exec showdebug @debug, 'Finished edit 6, starting edit 7:  Agreement for union code has expired'    
-- 7 Agreement for union code has expired    
    
    
    
select @AgmtExpired = 1    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '7'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
    begin    
       if @AgmtExists = 1    /*DUPERR*/    
           begin    
-- MM 11/15/2002 Added on request of Joyce    
  if  @CheckAgreementOf = 'EMPLOYER'     
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if @AgmtExpired=1    
    select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLL'     
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if @AgmtExpired=1    
    select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLLANDEMPLOYER'     
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if  @AgmtExpired = 1     
    if  exists(  select  1     
       from  nonSigAgreement     
       where  EmployerId = @EmployerId     
        and ProductionTitleId =@ProductionTitleId     
        and PayrollCoId = @PayrollEmployerId    
      )    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
    OR exists (    
      select  1     
      from  agreement     
      where  employerid=@Employerid     
       and AgreementTypeCode=convert(varchar(10),'IA')     
       and ExcludeAgmt = 0     
       -- and RateGroup = @RptRategroup    -- as per Joyce we dont need to check RG for employer IA agreement, but we will check RG in payaroll agreement.    
       and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
       and (expiredate>= @RptToDate or expiredate is null)        and (effectivedate<= @RptFromDate or effectivedate is null)    
      )    
     begin    
     select  @AgmtExpired = dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
     if @AgmtExpired=1    
      select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
     end    
    else    
     select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end     
  else    
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if @AgmtExpired=1    
    select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
-- MM 11/15/2002 commented following code and added above code    
/*    
  select @AgmtExpired=case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
         when 'PAYROLL' then dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptToDate)    
         when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)=1     
               then dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptToDate)    
       else dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
               end    
         else 1    
         end    
*/    
      -- get the expiredate   /*BUG513*/    
      if @AgmtExpired=1    
          begin    
/*    
                select  @ExpiredDate =case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
          when 'PAYROLL' then dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
          when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId) is null     
                then dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
                else dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
                end    
          else null    
          end    
*/    
   -- if HoursEdits record alread exists then delete it    
                    delete from HoursEdits where HoursEditId = @HoursEditId    
   --    
   --ITS#1239 - modifiy following lines for edit 7 ===========================    
   --old    
--                    select @xtra = 'Expired:  ' + convert(varchar(30),@ExpiredDate,101)    
--                    select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                    --                     -- insert record into hoursedit table    
--                    exec @rtn = HoursEdits_ins @editcode = '7', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
    
   --new    
   select @xtra = ''    
   if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
   begin    
     select @xtra = 'production code. Expired: ' + convert(varchar(30),@ExpiredDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@ProdCode) + ')'     
       
           exec @rtn = HoursEdits_ins @editcode = '7', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   else    
   begin    
     select @xtra = 'union. Expired: ' + convert(varchar(30),@ExpiredDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@UnionCode) + ')'    
       
           exec @rtn = HoursEdits_ins @editcode = '7', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   -- EOC -----------------------------------------------------------------------------------------------    
    
                if @rtn != 0    
                        begin    
                           rollback tran                                
    raiserror 99999 'Error creating HoursEdits record (Edit 7).'    
                           return 99999    
                        end    
                    select @ErrList = coalesce(@ErrList,'') + '7, '    
                 end    
              else    
                 begin    
                    -- if edit was fixed then update the edit record    
                    if @HoursEditId is not null    
                        begin    
                         update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                           if @@error != 0    
                              begin    
                                 rollback tran     
                                 raiserror 99999 'Error Accepting HoursEdit record.'    
                                 return 99999    
                            end    
   end    
                 end            end    
    end    
    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 7, starting edit 8:  Agreement for unioncode not effective yet.'    
-- 8 Agreement for union code not effective yet    
    
    
select @AgmtNotEffective = 1    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '8'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
    begin    
       if @AgmtExists = 1    /*DUPERR*/    
           begin    
-- MM 11/15/2002 Added on request of Joyce    
  if  @CheckAgreementOf = 'EMPLOYER'     
   begin    
   select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
   if @AgmtNotEffective=1    
    select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLL'     
   begin    
   select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
   if @AgmtNotEffective=1    
    select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLLANDEMPLOYER'     
   begin    
    select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
    if  @AgmtNotEffective = 1     
     if  exists(  select  1     
       from  nonSigAgreement     
       where  EmployerId = @EmployerId     
        and ProductionTitleId =@ProductionTitleId     
        and PayrollCoId = @PayrollEmployerId    
      )    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
    OR exists (    
      select  1     
      from  agreement     
      where  employerid=@Employerid     
       and AgreementTypeCode=convert(varchar(10),'IA')     
       and ExcludeAgmt = 0     
       -- and RateGroup = @RptRategroup    -- as per Joyce we dont need to check RG for employer IA agreement, but we will check RG in payaroll agreement.    
       and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
       and (expiredate>= @RptToDate or expiredate is null)        and (effectivedate<= @RptFromDate or effectivedate is null)    
      )    
     begin    
      select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
      if @AgmtNotEffective=1    
       select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
     end    
     else    
      select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end     
  else    
   begin    
   select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
   if @AgmtNotEffective=1    
    select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
    
-- MM 11/15/2002 commented following code and added above code    
/*    
  select @AgmtNotEffective=case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
         when 'PAYROLL' then dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptFromDate)    
         when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)=1     
               then dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptFromDate)    
               else dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
               end    
         else 1    
         end    
    
              --    
*/    
          if @AgmtNotEffective = 1    
                 begin    
/*    
                select  @EffectiveDate =case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
          when 'PAYROLL' then dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
          when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId) is null     
                then dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
                else dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
                end    
          else null    
          end    
*/    
                    -- if HoursEdits record alread exists then delete it    
                    delete from HoursEdits where HoursEditId = @HoursEditId    
                    --    
   --ITS#1239 - modifiy following lines for edit 8 ===========================    
   --old    
--                    select @xtra = 'Effective:  ' + convert(varchar(30),@EffectiveDate,101)    
--                   select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                    --    
--                    -- insert record into hoursedit table    
--                    exec @rtn = HoursEdits_ins @editcode = '8', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   --new    
   select @xtra = ''    
   if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
   begin    
     select @xtra = 'production code. Effective: ' + convert(varchar(30),@EffectiveDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@ProdCode) + ')'    
       
           exec @rtn = HoursEdits_ins @editcode = '8', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   else    
   begin    
     select @xtra = 'union. Effective: ' + convert(varchar(30),@EffectiveDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@UnionCode) + ')'    
       
           exec @rtn = HoursEdits_ins @editcode = '8', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   -- EOC -----------------------------------------------------------------------------------------------------    
    
                    if @rtn != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error creating HoursEdits record (Edit 8).'    
                           return 99999    
                        end    
                    select @ErrList = coalesce(@ErrList,'') + '8, '    
                 end    
               else     
                 begin    
                    -- if edit was fixed then update the edit record    
                    if @HoursEditId is not null    
                        begin    
                           update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                           if @@error != 0    
                          begin    
                                 rollback tran    
                                 raiserror 99999 'Error Accepting HoursEdit record.'    
                                 return 99999    
                    end    
                        end    
                 end    
           end     end    
    
     
    
    
CheckRateGroup:    
exec showdebug @debug, 'Finished edit 8, starting edit 9:  Rate group error (union code is being reported under the wrong rate group)'    
-- 9 Rate group error (union code is beign reported under the wrong rate group)    
    
    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '9'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if not exists(select 1    
                         from RateContract rc, AgreementContract ac    
                         where rc.rgcontractid = ac.rgcontractid                          and ac.agreementtypecode = convert(varchar(10),@UnionCode)    
                         and rc.fromdate <= @RptFromDate    
                         and rc.todate >= @RptToDate    
                         and rc.rategroup = @RptRateGroup)    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
 --    
 --ITS#1239 - modifiy following lines for edit 9 ===========================    
 --old    
            -- insert record into hoursedit table    
--            exec @rtn = HoursEdits_ins @editcode = '9', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1                 
    
 --new    
 select @xtra = ''    
 if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
 begin    
  select @xtra = 'production code. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
  isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
  convert(varchar(10),@ProdCode) + ')'    
     
         exec @rtn = HoursEdits_ins @editcode = '9', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
 end    
 else    
 begin    
  select @xtra = 'union. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
  isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
  convert(varchar(10),@UnionCode) + ')'    
     
         exec @rtn = HoursEdits_ins @editcode = '9', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
 end    
 -- EOC -------------------------------------------------------------------------------------------------    
    
 if @rtn != 0    
              begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 9).'    
                  return 99999    
               end    
            select @ErrList = coalesce(@ErrList,'') + '9, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0    
                     begin    
                        rollback tran    
   raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999                      end    
               end    
         end    end    
    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 9, starting edit 10:  Employer has been terminated'    
    
    
-- 10 Employer has been terminated    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '10'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if exists(select 1 from Employer where Terminated >= @RptFromDate and employerid = @employerid)    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
            --    
            select @TerminatedDate = Terminated from Employer where Employerid = @EmployerId    
            --    
            select @xtra = 'Terminated:  ' + convert(varchar(30),@TerminatedDate,101)    
            select @xtra = @xtra + convert(char(4),' -- ') + @orig    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '10', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
               if @rtn != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error creating HoursEdits record (Edit 10).'    
                     return 99999    
                  end    
                select @ErrList = coalesce(@ErrList,'') + '10, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
              if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end    
               end    
         end    
   end    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 10, starting edit 11:  Participant is dead.'    
    
-- 11 Participant is Dead    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '11'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
--Change to OPUS
      if exists(select 1 from @temp --opus.dbo.SGT_Person 
					where Date_Of_Death <= @RptToDate and Date_Of_Death is not null) --and ssn = @ssn)    
         begin    
        -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId             --    
--Change to OPUS
             select @DateOfDeath = Date_Of_Death from @temp --opus.dbo.SGT_Person where ssn = @ssn    
            --    
            select @xtra = 'DateOfDeath:  ' + convert(varchar(30),@DateOfDeath,101)    
            select @xtra = @xtra + convert(char(4),' -- ') + @orig    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '11', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
               if @rtn != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error creating HoursEdits record (Edit 11).'    
                     return 99999    
                  end    
            select @ErrList = coalesce(@ErrList,'') + '11, '    
         end       else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end     
               end    
         end    
   end    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 11, starting edit 12:  Missing first name.'    
-- 12 Missing first Name    
    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '12'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if @firstname = '' or @firstname is null    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '12', @hoursid = @hoursid, @skipselect = 1    
            if @rtn != 0    
               begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 12).'    
                  return 99999    
               end     
            select @ErrList = coalesce(@ErrList,'') + '12, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end    
               end    
         end    
   end    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 12, starting edit 13:  Movie of the week'    
-- 13 Movie of the Week    
    
    
    
    
-- end Move of the Week    
    
    
    
    
-- 14  Negative Hours /*ERR14*/    
    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '14'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
--   select @HoursWorked=Hoursworked, @IAPValue = IAPValue from hours where hoursid = @hoursid  /*These variables are populated when the header variables are calculated*/    
   if  (@HoursWorked<0  and not exists( select  1       
      from  hours,report,accounts    
      where  report.reportid=hours.reportid     
       and hours.SSN=@SSN     
       and FromDate=@rptFromDate     
       and todate=@rptToDate     
       and report.empaccountno=accounts.accountno    
       and accounts.employerid=@employerid    
       and hoursworked>=abs(@HoursWorked)))     
 or (@IAPValue < 0 and not exists(  select  1      
      from  hours,report,accounts    
      where  report.reportid=hours.reportid     
       and hours.SSN=@SSN     
       and FromDate=@rptFromDate     
       and todate=@rptToDate     
       and report.empaccountno=accounts.accountno    
       and accounts.employerid=@employerid    
       and IAPValue >=abs(@IAPValue)))   /*NEGIAP*/    
      begin    
         -- if HoursEdits record alread exists then delete it    
         delete from HoursEdits where HoursEditId = @HoursEditId    
         --    
         -- insert record into hoursedit table'    
         exec @rtn = HoursEdits_ins @editcode = '14', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1    
         if @rtn != 0    
            begin    
               rollback tran    
               raiserror 99999 'Error creating HoursEdits record (Edit 14).'    
               return 99999    
            end    
         select @ErrList = coalesce(@ErrList,'') + '14, '             
      end    
   else    
      begin    
         -- if edit was fixed then update the edit record    
         if @HoursEditId is not null    
            begin                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
               if @@error != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error Accepting HoursEdit record.'    
                     return 99999     
                  end    
            end    
      end    
   end    
    
    
-- 15 Duplicate Hours /*ERR15*/    
    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '15'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
    select  top 1 @DupReportId = hours.reportid     
 from  hours,report,accounts    
 where  report.reportid=hours.reportid     
  and hours.SSN=@SSN     
  and FromDate=@rptFromDate     
  and todate=@rptToDate     
  and report.empaccountno=accounts.accountno     
  and accounts.employerid=@employerid    
  and hoursworked=@HoursWorked --and @HoursWorked > 12   -- ITS#1502 , ITS#4699    
  and hoursid<>@hoursid    
  and (hoursworked < 0 or hoursworked > 12)   /*EDIT15*/    
    
 if  @DupReportId is not null    
  begin    
  select @xtra = 'Duplicate Report: '+ltrim(rtrim(str(@DupReportId)))    
  select @xtra = @xtra + convert(char(4),' -- ') + @orig    
           -- if HoursEdits record alread exists then delete it                
  delete from HoursEdits where HoursEditId = @HoursEditId    
           --    
           -- insert record into hoursedit table'    
           exec @rtn = HoursEdits_ins @editcode = '15', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
           if @rtn != 0    
               begin    
                  rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 15).'    
                 return 99999    
               end    
           select @ErrList = coalesce(@ErrList,'') + '15, '             
        end    
   else    
      begin    
         -- if edit was fixed then update the edit record    
         if @HoursEditId is not null    
            begin    
               update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
               if @@error != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error Accepting HoursEdit record.'    
                     return 99999    
                  end    
            end    
      end    end    
    
    
/*EDIT16*/    
exec showdebug @debug, 'Finished edit 15, starting edit 16:   Exceeded 56 hours/week limit.'    
    
-- 16 Exceeded 56 hours/week limit    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '16'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
 set @weeks = 1    
-- set @weeks = 1 + datediff(week,@RptFromDate,dateadd(day,1,@RptToDate))    
 set @weeks =  1+( datediff(day,@RptFromDate,@RptToDate)/7)    
 --if @UnionCode = 99 and (@hoursworked / @weeks >56.0)    
--MM extend edit 16 on Joyce request 9/20/2002    
-- if ( (@UnionCode = 99 or @UnionCode = 09 or @UnionCode = 79) and ((@hoursworked / @weeks) >56.0) )    
--MM: Joyce requested to take out 09 and 99 from edit 16, and add them in edit 17 on  01/31/2003     
 if ( (@UnionCode = 79 or @UnionCode = 99 or @UnionCode = 89) and ((@hoursworked / @weeks) >56.0) )  -- UnionCode 99 is added as per joyce's request ITS#1944 dt 09/03/2005    
--  OR ( @UnionCode = 59 and ((@hoursworked / @weeks) >71.0) )    
           begin    
          -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId             --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '16', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                    begin    
                     rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 16).'    
                       return 99999    
                    end    
              select @ErrList = coalesce(@ErrList,'') + '16, '    
           end           
 else    
           begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null     
                 begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                    if @@error != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
           end    
   end    
    
    
--MM Added edit 17 on Joyce request 9/20/2002    
/*EDIT17*/    
exec showdebug @debug, 'Finished edit 16, starting edit 17:   Exceeded 100 hours/week limit.'    
-- 17 Exceeded 100 hours/week limit    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '17'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
 set @weeks = 1    
-- set @weeks =  datediff(week,@RptFromDate,dateadd(day,1,@RptToDate))    
 set @weeks =  1+( datediff(day,@RptFromDate,@RptToDate)/7)    
    
--MM 02/22/2006 Enhanced edit 17 for Code 35, now checking 35 as a true union also.    
--Code 79 and 99 limit is 56 hours    
--Code 09 has a limit of 112 hours    
--Code 35 or if true union is 35 and reported code 46 or 96 has a limit of 120 hours    
--Code 21 and 62 has No Limit    
--All other codes have limit of 100 hours.    
 if  ( ( @UnionCode <> 79     
   and @UnionCode <> 09   -- please enhance edit 17 to only flag code 09 if hours are greater than 112.0 per week requested by joyce 03/18/03    
  -- and @UnionCode <> 99    -- 09 and 99 will be check for > 100 hours as per joyce request 01/31/2003     
--   and @UnionCode <> 59     -- code 59 used as hourly so remove from edit 16 and flag when hours > 100 requested by Joyce dt.12/21/02    
   and @UnionCode <> 21     
   and @UnionCode <> 35     
   and @UnionCode <> 46     
   and @UnionCode <> 96     
   and @UnionCode <> 62 )     
  and ( (@hoursworked / @weeks) >100.0 ) )  OR    
     ( @UnionCode = 35 and ( (@hoursworked / @weeks) >120.0 ) ) OR    
     ( (@UnionCode = 46 or @UnionCode = 96) and exists(select 1 from TrueUnion where ssn=@ssn and trueunion = 35) and  ( (@hoursworked / @weeks) >120.0 ) ) OR    
     ( (@UnionCode = 46 or @UnionCode = 96) and not exists(select 1 from TrueUnion where ssn=@ssn and trueunion = 35) and  ( (@hoursworked / @weeks) >100.0 ) ) OR    
     ( @UnionCode = 09 and ( (@hoursworked / @weeks) >112.0 ) )    
    
           begin    
          -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId             --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '17', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 17).'    
                       return 99999    
                    end    
              select @ErrList = coalesce(@ErrList,'') + '17, '    
           end           
 else    
           begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null    
                 begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                    if @@error != 0    
                        begin    
                           rollback tran    
               raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
           end    
   end    
    
--  EDIT18 - Possible Non-Affiliate Shareholder    
--  check if edit already exists    
exec  showdebug @debug, 'Finished edit 17, starting edit 18: Possible Non-Affiliate Shareholder.'    
select  @xtra = ''    
    
select  @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '18'    
--  make sure edit hasn't been overriden    
if  @OverRideDate is null    
    begin    
 if (@UnionCode = 59 or @UnionCode = 79)    
  and @SSN in(select SSN from ShareHolder where EmployerId = @EmployerId)    
  and dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)=0    
  begin    
  select  @xtra = ''    
  select  @xtra = @xtra + convert(char(4),' -- ') + @orig    
          --  if HoursEdits record already exists then delete it                
  delete  from HoursEdits where HoursEditId = @HoursEditId    
          --  insert record into hoursedit table'    
         exec  @rtn = HoursEdits_ins @editcode = '18', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
         if  @rtn != 0    
          begin    
            rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 18).'    
                 return 99999    
          end    
          select  @ErrList = coalesce(@ErrList,'') + '18, '             
        end    
    else    
        begin    
          --  if edit was fixed then update the edit record    
          if  @HoursEditId is not null    
              begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                 if  @@error != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
        end        
 end    
    
    
-- EDIT19 - RG04 with IAP    
--  check if edit already exists    
exec  showdebug @debug, 'Finished edit 18, starting edit 19: RG04 with IAP.'    
select  @xtra = ''    
    
select  @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '19'    
--  make sure edit hasn't been overriden    
if  @OverRideDate is null     
    begin     
 if (@RptRateGroup = 04 or    
  @RptRateGroup = 09 or    
  @RptRateGroup = 13 or    
  @RptRateGroup = 14 or    
  @RptRateGroup = 15 or    
  @RptRateGroup = 16 or    
  @RptRateGroup = 17 or    
  @RptRateGroup = 18 or    
  @RptRateGroup = 22 or    
  @RptRateGroup = 23 or    
  @RptRateGroup = 30 or    
  @RptRateGroup = 31 or    
--  @RptRateGroup = 32 or    
  @RptRateGroup = 60 or    
  @RptRateGroup = 61 or    
  @RptRateGroup = 65 or    
  @RptRateGroup = 66 or    
  @RptRateGroup = 67 or    
  @RptRateGroup = 70 or    
  @RptRateGroup = 71 or    
  @RptRateGroup = 73 or    
  @RptRateGroup = 75 or    
  @RptRateGroup = 19 or    
  @RptRateGroup = 25 or    
  @RptRateGroup = 27 or    
  @RptRateGroup = 42 or    
  @RptRateGroup = 51 or    
  @RptRateGroup = 76 or    
  @RptRateGroup = 77 or    
  @RptRateGroup = 98 or    
  @RptRateGroup = 90 or    
  @RptRateGroup = 91 or    
  @RptRateGroup = 92 or    
  @RptRateGroup = 93 or    
  @RptRateGroup = 94 ) and coalesce(@IAPValue,0)<>0    
  begin    
  select  @xtra = ''    
  select  @xtra = @xtra + convert(char(4),' -- ') + @orig    
          --  if HoursEdits record already exists then delete it                
  delete  from HoursEdits where HoursEditId = @HoursEditId    
          --  insert record into hoursedit table'    
         exec  @rtn = HoursEdits_ins @editcode = '19', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
         if  @rtn != 0    
          begin    
            rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 19).'    
                 return 99999    
          end    
          select  @ErrList = coalesce(@ErrList,'') + '19, '             
        end    
    else    
        begin    
          --  if edit was fixed then update the edit record    
          if  @HoursEditId is not null    
              begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                 if  @@error != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
        end        
 end    
    
    
--  EDIT20 - Participant hold    
--  check if edit already exists    
exec  showdebug @debug, 'Finished edit 19, starting edit 20: Participant hold.'    
select  @xtra = ''    
    
select  @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '20'    
--  make sure edit hasn't been overriden    
if  @OverRideDate is null    
    begin    
 if exists(select 1 from ParticipantHold where rtrim(SSN) = @SSN and ReleaseDate is null)    
  begin    
  select  @xtra = ''    
  select  @xtra = @xtra + convert(char(4),' -- ') + @orig    
          --  if HoursEdits record already exists then delete it                
  delete  from HoursEdits where HoursEditId = @HoursEditId    
          --  insert record into hoursedit table'    
         exec  @rtn = HoursEdits_ins @editcode = '20', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
         if  @rtn != 0    
          begin    
            rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 20).'    
                 return 99999    
          end    
          select  @ErrList = coalesce(@ErrList,'') + '20, '             
        end    
    else    
        begin    
          --  if edit was fixed then update the edit record    
          if  @HoursEditId is not null    
              begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                 if  @@error != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
        end        
 end    
--==============================================================    
/*Disabled as per Korelle Cox request.    
/*EDIT21*/    
exec showdebug @debug, 'Finished edit 20, starting edit 21:   Exceeded 60 hours/week limit.'    
    
-- 21 Exceeded 60 hours/week limit    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '21'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
 set @weeks = 1    
 set @weeks =  1+( datediff(day,@RptFromDate,@RptToDate)/7)    
 if ( (@UnionCode = 30) and ((@hoursworked / @weeks) >60.0) )      
           begin    
          -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId             --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '21', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 21).'    
                       return 99999    
                    end    
              select @ErrList = coalesce(@ErrList,'') + '21, '    
           end           
 else    
           begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null     
                 begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                    if @@error != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
           end    
   end    
*/    
    
UpdateStatus:    
    
-- update record status    
if exists (select 1 from HoursEdits where hoursid = @hoursid and overridedate is null and accepteddate is null)    
    begin    
    
          -- update hours status, accepted, and ErrorList    
          exec showdebug @debug, 'Begin update Hours record.'    
    
          update hours    
          set comment = @ErrList    
          , accepted = 0    
          , status = 2    
          , iapstatus = 2    
          , audituser = dbo.fn_GetUserName(suser_sname())   /* USER1 */    
          , auditdate = getdate()  /* USER1 */    
          where hoursid = @hoursid     
    
          if @@error != 0    
             begin    
                rollback tran    
                raiserror 99999 'Error updating hours status.'    
                return 99999    
             end           exec showdebug @debug, 'End update Hours record.'    
    
          -- update the transaction status to 2    
          exec showdebug @debug, 'Begin update ''HOURS'' transaction record'    
    
          update transactions     
          set status = 2    
          where reportid = @reportid and transactiontypecode = 'HOURS'   /* AUDIT1 */ /* AccountCode = '0' */    
    
          if @@error != 0    
             begin    
                rollback tran    
                raiserror 99999 'Error updating HOURS transaction status.'    
                return 99999    
             end    
          exec showdebug @debug, 'End update ''HOURS'' transaction record'    
    
             select @ErrorExists = 1    
              -- return 99998 to indicate that at least one edit was found but no SQL error occurred    
             -- commit tran    
    
        end       else    
        begin    
        -- update the status and accepted flag of the hours record to 1    
        exec showdebug @debug, 'Begin update Hours record'    
    
        update hours     
        set comment = @ErrList    
        , accepted = 1    
        , status = 1    
        , iapstatus = 1          , audituser = dbo.fn_GetUserName(suser_sname())   /* USER1 */    
        , auditdate = getdate()  /* USER1 */    
        where hoursid = @hoursid    
    
        if @@error != 0            begin     
              rollback tran    
              raiserror 99999 'Error updating hours record status.'    
              return 99999    
           end    
        exec showdebug @debug, 'End update Hours record'    
        --    
        select @ErrorExists = 0    
        end    
    
    
     
    
     
-- set hours values    
    
exec showdebug @debug, 'Begin Calculating Hours Value'    
-- set the value of the hour    
exec @rtn = sp_SetHoursValue @hoursid    
if @rtn != 0    
   begin    
      rollback tran    
      raiserror 99999 'Error calculating and updating the hours value.'    
      return 99999    
   end    
exec showdebug @debug, 'End Calculating Hours Value'    
    
    
/*     
exec showdebug @debug, 'Finished calculating the hour value, start calculating the iap399 value'    
exec @rtn = sp_setIAP399Value @hoursid    
if @rtn != 0    
   begin    
      rollback tran    
      raiserror 99999 'Error calculating and updating the IAP399 value.'    
      return 99999    
   end    
*/    
    
    
exec showdebug @debug, 'Begin Calculating CSATF.'    
exec @rtn = sp_setCSATFValue @hoursid    
if @rtn != 0    
   begin    
      rollback tran    
      raiserror 99999 'Error calculating and updating the CSATF values.'    
      return 99999    
   end    
exec showdebug @debug, 'End Calculating CSATF.'    
    
    
CommitTran:    
    
commit tran    
     
exec showdebug @debug, 'Transaction commited, exiting the procedure'    
if @debug = 1    
   begin       select @Diff = DateDiff(ms,@Now,getdate())    
      select @Diff,  @HoursId, 'End Verify Hours'    
   end    
    
if @ErrorExists = 1    
   begin    
   return 99998    
   end    
else    
   begin    
   return 0    
   end    
    
    
end    
GO


USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_Participant_ins]    Script Date: 11/21/2011 09:20:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER procedure [dbo].[usp_Participant_ins] (@SSN varchar(10) = NULL, @LastName varchar(30) = NULL, @FirstName varchar(50) = NULL)
AS
BEGIN
set nocount on
BEGIN TRAN;  
  
BEGIN TRY  
 declare @PersonId varchar(15)  
 declare @LastError int, @LastError1 int  
 SET @LastError = 99999  
 SET @LastError1 = 99998  
  
 --MXIE 4/6/2009  
 declare @Gender varchar(1)  
 declare @DOB smalldatetime --Date of Birth  
 declare @AddressLine1 varchar(60)  
 declare @AddressLine2 varchar(60)  
 declare @City varchar(30)  
 declare @State varchar(2)  
 declare @ZipCode varchar(10)  
 declare @Country varchar(30)
declare @CountryCode varchar(10)
declare @AuditDate smalldatetime
declare @AuditUser varchar(50)  
declare @temp table (person_id int, mpid varchar(20),last_name varchar(50), first_name varchar(50), date_of_death datetime)

insert into @temp exec opus.dbo.[Check_SSN_Exists] @SSN

 set @AuditDate = GetDate()
set @AuditUser = dbo.fn_GetUserName(suser_sname())

if @SSN not like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' or @SSN is NULL  
 begin  
  raiserror @LastError 'Participant SSN is invalid. Error inserting participant record.'  
  return @LastError  
 end  
 --MXIE 4/6/2009  
 select top 1 @Gender = Gender,  
   @DOB = convert(datetime, substring(birthdate, 1, 2) + '/' + substring(birthdate, 3, 2) + '/' + substring(birthdate, 5, 4)),   
   @AddressLine1 = UPPER(AddressLine1),  
   @AddressLine2 = UPPER(AddressLine2),  
   @City = UPPER(City),  
   @State = UPPER(State),  
   @ZipCode = ZipCode,  
   @Country = case
                when Country is null then 'United States'
                when Country = 'USA' then 'United States'
                when len(ltrim(rtrim(Country))) = 0 then 'United States'
                else ltrim(rtrim(Country))
              end
from FPDB.dbo.FileDetail  
 where ssn = @SSN  
 order by FileID DESC, RecordID DESC 

-- set @CountryCode =  isnull(pid.dbo.ufn_CountryCodeByName(@Country),'US')
set @CountryCode =  isnull((select data1 from opus.dbo.SGS_CODE_VALUE where CODE_ID = 151 and DESCRIPTION = @Country),'US') -- Country
-- set @Country = pid.dbo.ufn_CountryByCode(@CountryCode)
set @LastName = UPPER(@LastName)
set @FirstName = UPPER(@FirstName) 
 
 if not exists(select 1 from @temp) --opus.dbo.SGT_PERSON where ssn = @SSN)  
      begin  
      --MXIE 4/6/2009  
            exec @LastError = opus.dbo.INSERT_PERSON_INFO_INTO_OPUS @MPI_PERSON_ID = @PersonId output  
             , @SSN=@SSN   
             , @GENDER_VALUE = @Gender  
             , @First_Name=@FirstName
             , @Middle_Name=NULL
             , @Last_Name= @LastName
             , @Date_Of_Birth = @DOB
             , @Addr_Line_1 = @AddressLine1  
                   , @Addr_Line_2 = @AddressLine2  
                   , @Addr_City = @City  
                   , @STATE = @State
                  , @ZIP = @ZipCode
                 , @Addr_Country_Value = @CountryCode 
                 , @Start_Date = @AuditDate
                 , @Created_By = @AuditUser
                 , @Update = null

        if @LastError <> 0  
              raiserror @LastError 'Error inserting participant record.'  
        else  
        --MXIE 4/6/2009  
        if @LastError1 <> 0  
              raiserror @LastError1 'Error inserting participant address record.'  
        else  
              insert into Participant (SSN, PersonId, FirstName, LastName, CreateDate, CreatedBy)  
              values (@SSN, @PersonId, @FirstName, @LastName, getdate(), dbo.fn_GetUserName(suser_sname()))  
      end  
 else  
      begin  
            if not exists(select 1 from Participant where ssn = @SSN)  
                  begin  
                        select @PersonId = MPI_Person_Id from @temp --opus.dbo.SGT_PERSON where ssn = @SSN  
                           --MXIE 4/6/2009  
                        --   update pid.dbo.person  
                        --   set LastName = case when Rtrim(isnull(@LastName, '')) <> ''and Rtrim(isnull(LastName, '')) = '' then @LastName else LastName end  
                        --    , FirstName = case when Rtrim(isnull(@FirstName, '')) <> ''and Rtrim(isnull(FirstName, '')) = '' then @FirstName else FirstName end  
                        --    , Gender = case when Rtrim(isnull(@Gender, '')) <> ''and Rtrim(isnull(Gender, '')) = '' then @Gender else Gender end  
                        --    , DateOfBirth = case when Rtrim(isnull(@DOB, '')) <> ''and Rtrim(isnull(DateOfBirth, '')) = '' then @DOB else DateOfBirth end  
                        --   where ssn = @SSN  
                        if not exists(select 1 from opus.dbo.SGT_PERSON_ADDRESS where PERSON_ID = (select Person_ID from opus.dbo.sgt_person where MPI_PERSON_ID = @PersonId)  )
                              Begin   
                              --MXIE 4/6/2009
                              if (@AddressLine1 is not null and len(ltrim(rtrim(@AddressLine1))) <> 0) or 
                               (@AddressLine2 is not null and len(ltrim(rtrim(@AddressLine2))) <> 0) or
                              (@City is not null and len(ltrim(rtrim(@City))) <> 0)                 or
                              (@State is not null and len(ltrim(rtrim(@State))) <> 0)   
                                    begin
                                          exec @LastError = opus.dbo.INSERT_PERSON_INFO_INTO_OPUS @MPI_PERSON_ID = @PersonId output  
                                                 , @SSN=@SSN   
                                                 , @GENDER_VALUE = @Gender  
                                                 , @First_Name=@FirstName
                                                , @Middle_Name=NULL
                                                , @Last_Name= @LastName
                                                , @Date_Of_Birth = @DOB
                                                , @Addr_Line_1 = @AddressLine1  
                                                 , @Addr_Line_2 = @AddressLine2  
                                                 , @Addr_City = @City  
                                                 , @STATE = @State
                                                , @ZIP = @ZipCode
                                                , @Addr_Country_Value = @CountryCode 
                                                 , @Start_Date = @AuditDate
                                                , @Created_By = @AuditUser
                                                , @Update = 'I'
                                    end
                              else
                                    begin
                                          set @LastError1 = 0
                                    end
                              if @LastError1 <> 0  
                               raiserror @LastError1 'Error inserting person address record in PID.'  
                        end  
                     --MXIE 4/6/2009 it doesn't make sense to run the following sp when this person exists in PID, so this sp was commented out...  
                     --exec @LastError = pid.dbo.USP_Person_ins_Ext @PersonId = @PersonId output, @SSN=@SSN,@LastName=@LastName,@FirstName=@FirstName  
                     if @PersonId is null or rtrim(@PersonId)=''  
                        raiserror @LastError 'Error inserting participant record in EADB.'  
                     else  
                        insert into Participant (SSN, PersonId, FirstName, LastName, CreateDate, CreatedBy)  
                        values (@SSN, @PersonId, @FirstName, @LastName, getdate(), dbo.fn_getusername(suser_sname()))  
                  end  
  -- update name if firstname = 'NO NAME'  
 end  
  
 --return @LastError  
END TRY  
  
BEGIN CATCH  
 select ERROR_NUMBER() AS ErrorNumber,  
   ERROR_SEVERITY() AS ErrorSeverity,  
   ERROR_STATE() as ErrorState,  
   ERROR_PROCEDURE() as ErrorProcedure,  
   ERROR_LINE() as ErrorLine,  
   ERROR_MESSAGE() as ErrorMessage;  
 IF @@TRANCOUNT > 0  
        ROLLBACK TRAN;  
END CATCH;  
  
 IF @@TRANCOUNT > 0  
        COMMIT TRAN;  
END

GO




ALTER  procedure [dbo].[sp_VerifyHours] (@hoursid int, @debug bit = 0)    
as    
begin    
/*    
---------------------------------------------------------------------------------------------------------------    
- UPDATE HISTORY                                                                                              -    
---------------------------------------------------------------------------------------------------------------    
DATE         TAG       USER   DESCRIPTION    
----------    --------    ---------   -----------------------------------------------------------------------------------------    
11/29/1999   LINK        AMG    Modified to use linked server instead of remote server    
11/30/1999   OPT        AMG    Optimized query of person table for linked server    
12/20/1999   AUDIT1  AMG    Modified to allow entry of Audit Hours    
12/28/1999   TEST     AMG    Testing    
01/07/1999   USER1    AMG    Update AuditUser on hours record after editing    
05/21/2000   DUPERR     SPM    Bug 330 Duplicate errors 6,7 or 6,8    
05/22/2000   ERR14      SPM    Added errorcode 14     
11/22/2000   BUG513 SPM Fixed bug 513    
06/13/2001       RG64  SPM skip agreement checks if rategroup = 64    
08/09/2001 NEGIAP SPM Enhance edit 14 to check for neg IAP    
08/09/2001 EDIT15  SPM Enhanced edit 15 to exclude 0 hours    
09/27/2001 EDIT7  SPM The edit was marked as fixed if any other edit was overriden. This was because the second time around     
     the agreement exist bit was not getting set within the edit6 code.    
12/21/2001  EDIT16  SPM Implemented EDIT 16 which checks for code 99 participants the max hours/week should not exceed 56 hours    
05/08/2002 CODE53 SPM Added productionCode 53    
11/07/2002 CODE59 MM enabled check for code 59/71 (rollback 11/14/02)    
11/07/2002       EDIT16   MM  extended edit 16 on Joyce request 9/20/2002    
11/07/2002 EDIT17  MM  Added edit 17 on Joyce request 9/20/2002    
    
02/25/2003       EDIT5Enhanc    MM --=============================== Edit 5 enhancement code inserted =====    
07/02/2003          MM Now using productioncodes table to check production code.    
    
07/24/2003 EDIT6/ITS#375  LC Modify edit 6, add Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
07/24/2003 EDIT6,8/ITS#376  MM/LC Commented and added new function for allowing 3 month period for effective date. ITS # 376    
    
08/02/2003 EDIT18 SPM Added Edit 18.     
08/03/2003 EDIT19 SPM  Added Edit 19 - RG04 with IAP    
11/10/2003 EDIT5-CHK-AUD  MM  To check SSN merger is actual ssn merge for participant, now checking in Eligibility_Audit table also.    
11/15/2004 ITS#1502 MM Modified edit code 15 to flag only if hours are > 12    
01/07/2005 ITS#1239 MM Modified edit description text in edit 6,7,8, and 9 , Approved in test system by Joyce    
08/15/2005 ITS#1278 MM Added edit code 20    
12/03/2008          HV Commented the edit "Possible Dependent" as per Joyce request.    
12/17/2008          HV Modified the suser_sname() to dbo.fn_GetUserName(suser_sname()) to remove the domain name from the user name.  
08/18/2009 ITS#4226 HV Included new Production Code 98
03/11/2010 ITS#4612 HV Included UnionCode 89 for 56 hr /week verification like unioncode 79
03/12/2010 ITS#3888 HV Included Unioncode 89 under EditCode 18
05/18/2010 ITS#4699 HV Modified Edit 15: Create Edit 15 for negative hours duplicates. Also for positive hours, min of 13 hours should be reported to verify duplicate.
02/09/2011 ITS#5980 MM Added RG19,25,27,42,51,76,77, and 98 in Edit 19 list.

*/    
    
--    
-- declare variables    
declare @errorexists bit,    
    @employerid int,    
    @PayrollEmployerId int,    
    @ssn varchar(9),    
    @lastname varchar(50),    
    @firstname varchar(50),    
    @unioncode int,    
    @reportid int,    
    @batchid int,    
    @productiontitleid int,    
    @lastunioncode int,    
    @ErrList varchar(50),    
    @SSNExists bit,    
    @AgmtExists bit,    
    @AgmtExpired bit,    
    @AgmtNotEffective bit,    
    @ExclusionExists bit,    
    @AgreementId int,    
    @AgmtRateGroup int,    
    @RptFromDate smalldatetime,    
    @RptToDate smalldatetime,    
    @RptRateGroup int,    
    @xtra varchar(400),    
    @orig varchar(100),    
    @HoursEditId int,    
    @OverRideDate smalldatetime,    
    @ExpiredDate smalldatetime,    
    @EffectiveDate smalldatetime,    
    @TerminatedDate smalldatetime,    
    @DateOfDeath smalldatetime,    
    @Now datetime,    
    @Diff int,    
    @CheckEmployerId int,    
    @FromTape bit,    
    @NameDifferent bit,    
    @NewPensSSN varchar(10),    
    @NewEligSSN varchar(10),    
    @NewSSNMergeSSN varchar(10),    
    @PersonLastName varchar(50),    
    @PersonFirstName varchar(50),    
    @AliasLastName varchar(50),    
    @AliasFirstName varchar(50),    
    @HoursWorked numeric(7,1),    
    @IAPValue money,   /*NEGIAP*/    
    @rtn int,    
    @TrueUnion int,    
    @CheckAgreementOf varchar(50),    
    @IsParticipant bit,    
    @FlagEdit4 bit,    
    @UnionGroupCode char(10),    
    @OldPensSSN varchar(9),    
    @OldEligSSN varchar(9),    
    @OldSSNMergeSSN varchar(10),    
    @ProdCode int,    
    @DupReportId int,    
    @Weeks int,    
    @TabledAgmtExists bit    
    declare @temp table (person_id int, mpid varchar(20),last_name varchar(50), first_name varchar(50), date_of_death datetime)
    
set nocount on    
--    
exec showdebug @debug , 'Starting verify hours procedure'    
--    
-- do not allow hours that have been processed to be verified    
exec showdebug @debug, 'Check for hours that have been processed and release if the status is 0'    
if exists(select 1 from hours where hoursid = @hoursid and (status = 0 or iapstatus = 0))    
   begin    
      return 0    
   end    
    
begin tran    
    
    
    
-- delete HoursValues records    
exec showdebug @debug, 'Delete the hours values'    
delete from hoursvalues where hoursid = @hoursid    
if @@error != 0    
   begin    
      rollback tran     
      raiserror 99999 'Error deleting HoursValues.'    
      return 99999    
   end    
    
    
--    
-- get report header variables    
EXEC showdebug @debug , 'Get the values for the record and put them into local variables.'    
select    
        @reportid = h.reportid,    
        @batchid = r.batchid,    
        @employerid = a.employerid,    
        @unioncode = h.unioncode,    
        @ssn = h.ssn,    
        @firstname = h.firstname,    
        @lastname = h.lastname,    
--        @productiontitleid = h.productiontitleid,    
        @productiontitleid = r.productiontitleid,    
        @RptFromDate = r.FromDate,    
        @RptToDate = r.ToDate,    
        @RptRateGroup = r.RateGroup,    
        @ProdCode=convert(int,coalesce(h.UnionMisc,'17')),    
        @HoursWorked=Hoursworked,   /*EDIT16 and EDIT 14*/    
        @IAPValue = IAPValue   /*EDIT16 and EDIT 14*/    
from    
           hours h,    
           report_vw r,    
           accounts a    
where    
            r.reportid = h.reportid and    
            h.hoursid = @hoursid and             r.empaccountno = a.accountno    
    
    
-- get the payroll agency's  employer id    
select    
           @PayrollEmployerid = a.employerid    
from    
            hours h,    
            report_vw r,    
            accounts a    
where    
             r.reportid = h.reportid and    
             h.hoursid = @hoursid and    
             r.accountno = a.accountno    
    
    
-- determine if report is from a tape    
select @FromTape = bt.FromTape    
from report r, batch b, batchtype bt    
where r.reportid = @reportid and b.batchid = r.batchid and bt.batchtypecode = b.batchtypecode    
    
if @FromTape=0    
 select @FromTape=1 from fpdb.dbo.FileSumReport where batchid=@batchid    
    
    
-- record original values user entered    
select @orig = '(KEYED -- ' + isnull(@ssn,'') + ' :  ' + isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' + convert(varchar(10),@unioncode) + ')'    
    
exec showdebug @debug, 'Edit check 1, SSN is not in the system'    
    
    
-- 1  SSN is not in system    
select @IsParticipant = 1    
select @SSNExists = 1    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '1'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
 begin    
    if not exists(select 1 from hedb.dbo.participant where ssn = @ssn)    
        begin    
   select @IsParticipant=0    
        end    
--Change to OPUS
    if not exists(select 1 from @temp)--opus.dbo.SGT_Person where ssn = @ssn)    
        begin    
   select @SSNExists=0    
        end    
    /*else     
        begin    
   select @xtra = 'POSSIBLE DEPENDENT: '    
        end*/ -- Code commented to avoid additional Edit Flag in the System as per Joyce's request 12/03/2008 - Hitesh    
  select @xtra = @xtra + convert(char(4),' -- ') + @orig    
     
    
    if @IsParticipant=0    
        begin    
   --select @SSNExists = 0    
           -- if HoursEdits record alread exists then delete it    
           delete from HoursEdits where HoursEditId = @HoursEditId    
           --    
        -- insert record into hoursedit table'    
           exec @rtn = HoursEdits_ins @editcode = '1', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
           if @rtn != 0    
               begin    
                 rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 1).'    
                 return 99999    
               end    
           select @ErrList = coalesce(@ErrList,'') + '1, '     
   if @SSNExists=0 goto CheckUnion    
        end    
else    
 begin    
 -- if edit was fixed then update the edit record    
 if @HoursEditId is not null    
  begin    
              update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
               if @@error != 0    
                begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
       end    
   end    
    
    
    
exec showdebug @debug, 'Finished edit #1, starting edit check #2, Name is different in the system'    
-- 2 Name in system(s) is different    
    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '2'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
    begin    
       select @NameDifferent = 0    
--Change to OPUS
       select @PersonLastName = isnull(Last_Name,''), @PersonFirstName = isnull(First_Name,'') from @temp --opus.dbo.SGT_Person where ssn = @ssn    
       if @FromTape = 1    
           begin    
             -- if from tape, check only first letter of first name    
              if not (@PersonLastName = @lastname and left(@PersonFirstName,1) = left(@firstname,1))    
                 begin    
                    select @NameDifferent = 1    
         if exists(select 1 from hedb.dbo.personalias where ssn = @ssn and lastname = @lastname and firstname = @firstname)    
   select @NameDifferent=0    
                 end    
           end    
       else    
           begin    
              -- if not from tape, check the whole name    
    if not (@PersonLastName = @lastname and @PersonFirstName = @firstname)    
                begin    
                   select @NameDifferent = 1    
           if exists(select 1 from hedb.dbo.personalias where ssn = @ssn and lastname = @lastname and firstname = @firstname)    
                    begin    
       select @NameDifferent = 0    
             end     
                end    
         end    
    
       if @NameDifferent = 1 and @SSNExists = 1    
           begin    
              -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId    
              --    
              -- insert record into hoursedit table'    
--Change to OPUS
              select @xtra = isnull(last_name,'') + ', ' + isnull(first_name,'') from @temp --opus.dbo.SGT_Person where ssn = @ssn    
              select @xtra = @xtra + convert(char(4),' -- ') + @orig    
              --    
              exec @rtn = HoursEdits_ins @editcode = '2', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
              if @rtn != 0    
                 begin    
                    rollback tran    
                    raiserror 99999 'Error creating HoursEdits record (Edit 2).'    
                    return 99999    
                 end    
              select @ErrList = coalesce(@ErrList,'') + '2, '    
           end    
 else    
           begin    
           -- if edit was fixed then update the edit record    
           if @HoursEditId is not null    
            begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                     if @@error != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                         end    
                 end    
           end    
    end     
    
    
    
     
     
-- 4  Union code different from last union code processed    
exec showdebug @debug, 'Finished edit 3, starting edit 4:  Union code different from last union code processed'    
    
select @xtra = ''    
select @FlagEdit4=0    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '4'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
begin    
 select top 1 @TrueUnion=TrueUnion from TrueUnion where ssn=@ssn    
-- if @UnionCode in(18,46,53,86,87,96,97)     /*CODE53 */    
-- MM 07/02/2003 commented above line and checking productioncodes table.     
 if exists(select * from productioncodes where productioncode = @UnionCode) or @UnionCode = 80 -- ITS#2261 - 80 is a new production code.    
 begin    
  select @UnionGroupCode = coalesce(UnionGroupCode,'E') from unions where UnionCode=@UnionCode    
  if not exists(select 1 from unions u,TrueUnion tu where tu.trueUnion=u.unioncode and u.UnionGroupCode=@UnionGroupCode and ssn=@ssn) and @TrueUnion is not null    
  begin    
   select @FlagEdit4=1    
   select @xtra='Production Code not in same group as TrueUnion'    
               select @xtra = @xtra + convert(char(4),' -- ') + @orig    
  end    
    
  if  @UnionCode=96     
  begin    
   if  not exists (select 1 from trueunion where trueunion=35 and ssn=@ssn)    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
  if  @UnionCode=80 --Enhancement - ITS#2261 (Production Code 80 Belongs to Basic Craft)    
  begin    
   if  not exists (select 1 from trueunion where (trueunion=35 or trueunion=36) and ssn=@ssn)    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
  if  @UnionCode=86 --Enhancement - ITS#2262 (Production Code 86 Belongs to IA) now it also covers Local 52 (26, and 27)    
  begin    
   --MM ITS#2338 - code 29 is added under 86.    
   if   not ( exists(select 1 from unions u,TrueUnion tu where tu.trueUnion=u.unioncode and u.UnionGroupCode='B' and ssn=@ssn)    
                                                 or exists (select 1 from trueunion where (trueunion=26 or trueunion=27) and ssn=@ssn)     
                                                 or (exists (select 1 from trueunion where trueunion=29 and ssn=@ssn)  and @RptToDate >= '12/01/2005')    
    )  and @TrueUnion is not null    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
  if  @UnionCode=97 or @UnionCode = 98 --Enhancement - ITS#2262 (Production Code 97 Belongs to IA) now it also covers Local 161 (29), ITS#4226    
  begin    
   if   not ( exists(select 1 from unions u,TrueUnion tu where tu.trueUnion=u.unioncode and u.UnionGroupCode='B' and ssn=@ssn)    
                                                or exists (select 1 from trueunion where (trueunion=29) and ssn=@ssn) )    
                                                 and @TrueUnion is not null    
   begin    
    select @FlagEdit4=1    
    select @xtra='Production Code not in same group as TrueUnion'    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
   else    
   begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
   end    
  end    
    
  --Enhancement - ITS#2993 (to NOT flag if hours are reported under production code 18 and true union is 71)    
  if  @UnionCode= 18 and exists (select 1 from trueunion where trueunion=71 and ssn=@ssn)    
  begin    
    select @FlagEdit4=0    
    select @xtra=''    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
  end    
    
 end    
 else    
 begin    
  if @UnionCode not in(select TrueUnion from TrueUnion where ssn=@ssn)     
  begin    
   select @FlagEdit4=1    
               select @xtra = 'True Union: ' + isnull(convert(varchar(10),@TrueUnion),'N/A')    
               select @xtra = @xtra + convert(char(4),' -- ') + @orig    
  end    
    
 end    
    
 if @FlagEdit4=1    
 begin    
              -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId    
              --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '4', @hoursid = @hoursid,@ExtraData = @xtra, @skipselect = 1    
              if @rtn != 0    
                 begin    
                    rollback tran    
                    raiserror 99999 'Error creating HoursEdits record (Edit 4).'    
                    return 99999    
                 end    
              select @ErrList = coalesce(@ErrList,'') + '4, '    
  end    
 else    
 begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null    
                 begin    
                                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                     if @@error != 0    
                  begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
 end    
end    
    
    
CheckUnion:    
    
exec showdebug @debug, 'Finished edit #2, Union code does not exist in union master.'    
--    
-- 3  Union code does not exist in union master    
    
    
select @xtra = ''    
--    
-- check if edit already exists     
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '3'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if not exists(select 1 from Unions where UnionCode = @UnionCode)    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '3', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1    
            if @rtn != 0    
               begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 3).'    
                  return 99999    
               end    
            select @ErrList = coalesce(@ErrList,'') + '3, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
               update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId     
                  if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end    
               end    
         end    
   end    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 4, starting edit 5:  SSN Change In System'    
-- 5 SSN Change In System    
    
select @xtra = ''    
select @NewEligSSN = ''    
select @NewPensSSN = ''    
select @OldEligSSN = ''    
select @OldPensSSN = ''    
--    
-- check if edit already exists    
--select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '5' --    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode in ('5','5A')    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
          
      -- see if an Eligibility SSN history record exists    
    
       select TOP 1 @NewEligSSN = SSN,@OldEligSSN = SSNOld     
 from hedb.dbo.PersonSSNHistory     
 where (SSN = @SSN or SSNOld = @SSN) and ChangeType =  'E'    
 order by auditdate desc,historyid desc    
          
      -- see if a Pension SSN history record exists    
       select TOP 1 @NewPensSSN = SSN,@OldPensSSN = SSNOld     
 from hedb.dbo.PersonSSNHistory     
 where (SSN = @SSN or SSNOld = @SSN) and ChangeType = 'P'    
 order by auditdate desc,historyid desc    
    
      -- see if a SSN Merge SSN history record exists    
       select TOP 1 @NewSSNMergeSSN = SSN,@OldSSNMergeSSN = SSNOld     
 from hedb.dbo.PersonSSNHistory     
 where (SSN = @SSN or SSNOld = @SSN) and ChangeType = 'n'    
 order by auditdate desc,historyid desc    
    
/*    
--=============================== Commented for Edit 5 enhancement ===============================    
       if @OldEligSSN=@SSN or @OldPensSSN=@SSN or @OldSSNMergeSSN=@SSN    
         begin    
            -- if HoursEdits record already exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
 -- if edit 1 was flagged delete that too    
 delete from HoursEdits where HoursId=@hoursid and editcode='1'    
            -- show Eligibility SSN    
            if @OldEligSSN=@SSN    
             begin    
                  select @xtra = 'New Eligibility SSN: ' + @NewEligSSN + '  '                    
 end    
    
            -- show Pension SSN    
            if @OldPensSSN=@SSN     
               begin    
                  select @xtra = @xtra + 'New Pension SSN: ' + @NewPensSSN    
               end    
    
           -- show SSN Merge SSN    
            if @OldSSNMergeSSN=@SSN     
               begin    
                  select @xtra = @xtra + 'New SSN Merge SSN: ' + @NewSSNMergeSSN    
               end    
    
    
            select @xtra = @xtra + convert(char(4),' -- ') + @orig    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '5', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
            if @rtn != 0    
               begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 5).'    
            return 99999    
               end    
            select @ErrList = coalesce(@ErrList,'') + '5, '    
*/    
--=============================== Edit 5 enhancement code inserted ===============================    
declare @OldSSN varchar(10), @NewSSN varchar(10), @AuditUser varchar(20)    
select @OldSSN = ''    
select @NewSSN = ''    
declare @tempNewSSN table (person_id int, mpid varchar(20),last_name varchar(50), first_name varchar(50), date_of_death datetime)
        
             select TOP 1 @AuditUser = AuditUser    
       from hedb.dbo.PersonSSNHistory     
       where SSNOld = @SSN     
       order by historyid desc    
    
--      if @OldEligSSN=@SSN or @OldPensSSN=@SSN or @OldSSNMergeSSN=@SSN    
      if (@OldEligSSN=@SSN or @OldPensSSN=@SSN or @OldSSNMergeSSN=@SSN) and     
 (exists ( select 1  from hedb.dbo.eligibility_audit where (SSN = @SSN or SSNNew = @SSN) )    
  OR @AuditUser = 'Albert'  OR @AuditUser = 'PBaumberger' OR @AuditUser = 'Pbamberger' )    
      begin    
-- MM: Enhancement of Edit 5 also comparing name if ssn exists in ssn merge history.    
--       select HistoryId, SSN, SSNOld, AuditDate    
       select TOP 1 @NewSSN = SSN,@OldSSN = SSNOld     
       from hedb.dbo.PersonSSNHistory     
       where (SSN = @SSN or SSNOld = @SSN)     
       order by historyid desc    
          
          insert into @tempNewSSN exec opus.dbo.[Check_SSN_Exists]
          
            if @OldSSN = @SSN    
            begin    
                   declare @NameDiffer int    
               select @NameDiffer = 0    
               select @PersonLastName = isnull(Last_Name,''), @PersonFirstName = isnull(First_Name,'')     
--Change to OPUS
                   from @tempNewSSN --opus.dbo.SGT_Person where ssn = @NewSSN    
-- MM 07/25/2003  commented, to check only last name as per Joyce instruction ITS# 378.    
               if @FromTape = 1    
                     if not (@PersonLastName = @lastname /*and left(@PersonFirstName,1) = left(@firstname,1)*/ )    
                        begin    
                            select @NameDiffer = 1    
                 if exists(select 1 from hedb.dbo.personalias where ssn = @NewSSN and lastname = @lastname and firstname = @firstname)    
                 select @NameDiffer=0    
                        end    
               else    
            if not (@PersonLastName = @lastname /*and @PersonFirstName = @firstname*/ )    
                        begin    
                            select @NameDiffer = 1    
                   if exists(select 1 from hedb.dbo.personalias where ssn = @NewSSN and lastname = @lastname and firstname = @firstname)    
                     select @NameDiffer = 0    
                        end    
            end    
    
            if @NameDiffer = 0    
 begin    
-- EOC Enhancement edit 5, the corresponding end for 'if @NameDifferent = 0' is also added    
                        -- if HoursEdits record already exists then delete it    
                        delete from HoursEdits where HoursEditId = @HoursEditId    
                     -- if edit 1 was flagged delete that too    
                     delete from HoursEdits where HoursId=@hoursid and editcode='1'    
                        -- show Eligibility SSN    
                        if @OldEligSSN=@SSN    
                         begin    
                              select @xtra = 'New Eligibility SSN: ' + @NewEligSSN + '  '                    
                     end    
                
                        -- show Pension SSN    
                        if @OldPensSSN=@SSN     
                           begin    
                              select @xtra = @xtra + 'New Pension SSN: ' + @NewPensSSN    
                           end    
                
                       -- show SSN Merge SSN    
                        if @OldSSNMergeSSN=@SSN     
                           begin    
                              select @xtra = @xtra + 'New SSN Merge SSN: ' + @NewSSNMergeSSN    
                           end    
                
                        select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                        --    
                        -- insert record into hoursedit table    
                        exec @rtn = HoursEdits_ins @editcode = '5', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                        if @rtn != 0    
                           begin    
                              rollback tran    
                              raiserror 99999 'Error creating HoursEdits record (Edit 5).'    
                              return 99999    
                           end    
                        select @ErrList = coalesce(@ErrList,'') + '5, '    
            end    
    
            if @OldSSN = @SSN AND @NameDiffer = 1    
            begin    
                        -- if HoursEdits record already exists then delete it    
                        delete from HoursEdits where HoursEditId = @HoursEditId    
                     -- if edit 1 was flagged delete that too    
                     delete from HoursEdits where HoursId=@hoursid and editcode='1'    
                select @xtra = 'System SSN & Name: '+rtrim(@PersonLastName)+', '+rtrim(@PersonFirstName)+@NewSSN    
                select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                exec @rtn = HoursEdits_ins @editcode = '5A', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                   begin    
                      rollback tran    
                      raiserror 99999 'Error creating HoursEdits record (Edit 5A).'    
                      return 99999    
                   end    
                select @ErrList = coalesce(@ErrList,'') + '5A, '    
 end    
    
--============================ End of Edit 5 enhancement code inserted ===============================    
--========================================    
    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
               update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0                      begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end                end    
         end    
   end     
    
     
    
CheckAgreements:    
select @TabledAgmtExists = 0    
exec showdebug @debug, 'Finished edit 5, starting edit 6:  No agreement for union code'    
    
-- skip agreement checks 6,7,8 if rategroup = 64    
if @rptrategroup = 64 goto CheckRateGroup   /*RG64*/    
    
-- select the actual employer    
select @CheckEmployerId = @EmployerId    
--if @ProdCode in (18,46,53,87,96,97)    
-- MM 07/02/2003 commented above line and checking productioncodes table now.    
if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
 select @UnionCode=@ProdCode    
 -- choose the employer whose agreements will be checked    
if exists(select 1 from Employer where EmployerId = @PayrollEmployerId and EmployerTypeCode = 'PAY')    
   begin    
/*   select @CheckAgreementOf='PAYROLL'    
      -- if the actual employer is non-signatory then check the Payroll Agency's agreements    
      if exists(select 1 from Employer e, EmployerType et where e.EmployerId = @EmployerId and e.EmployerTypeCode = et.EmployerTypeCode and et.signatory = 1)    
         begin    
--            select @CheckEmployerId = @PayrollEmployerId    
    select @CheckAgreementOf=@CheckAgreementOf+'ANDEMPLOYER'    
         end    
   end    
*/    
   select @CheckAgreementOf='PAYROLLANDEMPLOYER'    
   end    
else    
   begin    
   select @CheckAgreementOf='EMPLOYER'    
   end    
    
--=======================================================    
-- MM: This check is disable on Joyce's Request, ref:email dated 5/14/2002 Sub: DISABLE CODE 71/59 ECEPTION TO AGREEMENT EDITS    
-- MM: This check is enabled on Shanda's Request, ref:email dated 10/28/2002  /*CODE59*/    
/*    
if  @UnionCode=59    
 if exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 0     
    and RateGroup = @RptRateGroup    
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
*/    
-- MM: By second code review I found that the exact condition as per shanda's given criterea, the check should be as follows, but the above is     
-- giving simillar behaviour, but only if 71 without exclusion exists, and it has been tested by Joyce so I am not changing it now. 01/15/2003.    
/*    
if  @UnionCode=59    
 if  not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    --and RateGroup = @RptRateGroup    
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
*/    
    
    
--MM added 11/12/2003 added code bellow to cover a scenario.    
-- If 71 Exclusion not exists, do not accept Payroll 59    
if  @UnionCode=59    
 if  not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
    
if  @UnionCode=59    
 if  exists ( -- No 71 exclusion    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
  )    
  OR -- No 71 at all    
  ( not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 0     
    and RateGroup = @RptRateGroup    
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null) )    
   and     
        not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null) )    
   and     
        not exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='IA'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 0     
    and RateGroup = @RptRateGroup    
--    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
    and (expiredate>= @RptToDate or expiredate is null)    
    and (effectivedate<=@RptfromDate or effectivedate is null) )    
  )    
 begin    
  select @CheckAgreementOf='PAYROLLANDEMPLOYER'      
 end    
    
--MM Added to take care new 59 rule.  ITS#2132, also changed fn_AgreementExists.    
if  @UnionCode=59    
 if  exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='59'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
if  @UnionCode=71    
 if  exists (    
   select  1     
   from  agreement     
   where  employerid=@Employerid     
    and AgreementTypeCode='71'--convert(varchar(10),@UnionCode)     
    and ExcludeAgmt = 1     
    and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
   )    
  begin    
  select @CheckAgreementOf='EMPLOYER'       
  end    
    
    
--=============================================================    
--check to see if agreement exists for the union code (moved the code out side of Edit 6 code so that the AgmtExist bit can be set for use in Edit 7 & 8 ) /*EDIT7*/    
/*select @AgmtExists=case @CheckAgreementOf when 'EMPLOYER' then dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
      when 'PAYROLL' then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
      when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)=0     
            then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
            else dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
            end    
      else 0    
      end    
*/    
  if  @CheckAgreementOf = 'PAYROLLANDEMPLOYER'     
   begin    
   select  @AgmtExists = dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
    
   if  @AgmtExists = 0     
    if  exists(  select  1     
       from  nonSigAgreement     
       where  EmployerId = @EmployerId     
        and ProductionTitleId =@ProductionTitleId     
        and PayrollCoId = @PayrollEmployerId    
      )    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
   -- MM 7/24/03 Commented and added new function for allowing 3 month period for effective date. ITS # 376    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
    OR exists (    
      select  1     
      from  agreement     
      where  employerid=@Employerid     
       and AgreementTypeCode=convert(varchar(10),'IA')     
       and ExcludeAgmt = 0     
       -- and RateGroup = @RptRategroup    -- as per Joyce we dont need to check RG for employer IA agreement, but we will check RG in payaroll agreement.    
       and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
       and (expiredate>= @RptToDate or expiredate is null)        and (effectivedate<= @RptFromDate or effectivedate is null)    
      )    
     begin    
     select  @AgmtExists = dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
     end    
   end     
  else    
   begin    
   select  @AgmtExists = dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
-- 6  No agreement for Union Code select @AgmtExists = 0    
    
--   --MM ITS#2545    
--   if @AgmtExists = 1 and @UnionCode = 87 and @RptToDate between '07/30/2006' and '09/30/2006'    
--    select @AgmtExists = dbo.fn_IndividualAgreementExists (@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
--MM ITS#2545    
  if @AgmtExists = 1 and @UnionCode = 87 and @RptRategroup = 5 and @RptToDate between '07/30/2006' and '09/30/2006'    
   select @AgmtExists = 0    
    
--MM ITS#1278    
  if @AgmtExists = 1     
   select @TabledAgmtExists = dbo.fn_TabledAgreementExists (@EmployerId,@UnionCode, @RptRateGroup,@ProductionTitleId, @RptFromDate, @RptToDate)    
  if @TabledAgmtExists = 1    
   select @AgmtExists = 0    
    
    
select @ExclusionExists = 0    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '6'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
begin    
--commented the following code as the @AgmtExists bit is being set outside of the Edit 6 code /*EDIT7*/    
/* select @AgmtExists=case @CheckAgreementOf when 'EMPLOYER' then dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
       when 'PAYROLL' then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
       when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)=0     
             then dbo.fn_AgreementExists(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
             else dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
             end    
       else 0    
       end    
*/    
          if @AgmtExists = 0    
              begin    
               -- if HoursEdits record alread exists then delete it    
                delete from HoursEdits where HoursEditId = @HoursEditId    
                --    
  --ITS#1239 - modifiy following lines for edit 6 ===========================    
  --old    
--                -- insert record into hoursedit table    
--                exec @rtn = HoursEdits_ins @editcode = '6', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1    
      
  --new    
  select @xtra = ''    
  if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
  begin    
--   select @xtra = 'production code. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
--   isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
--   convert(varchar(10),@ProdCode) + ')'    
    
   if @TabledAgmtExists = 1    
    select @xtra = 'Tabled Agreement for production code '+convert(varchar(10),@ProdCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
   else    
    select @xtra = 'production code '+convert(varchar(10),@ProdCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
      
          exec @rtn = HoursEdits_ins @editcode = '6', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
  end    
  else    
  begin    
--   select @xtra = 'union. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +   --   isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
--   convert(varchar(10),@UnionCode) + ')'    
      
   if @TabledAgmtExists = 1    
    select @xtra = 'Tabled Agreement for union code '+convert(varchar(10),@UnionCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
   else    
    select @xtra = 'union code '+convert(varchar(10),@UnionCode)+'. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +  ')'    
    
          exec @rtn = HoursEdits_ins @editcode = '6', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
  end    
  ----EOC ---------------------------------------------------------------------------------------------    
    
    
                if @rtn != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 6).'    
                       return 99999    
                    end    
                   select @ErrList = coalesce(@ErrList,'') + '6, '    
              end    
 else    
            begin    
                -- if edit was fixed then update the edit record    
                if @HoursEditId is not null    
                    begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                       if @@error != 0    
                           begin    
                             rollback tran    
                             raiserror 99999 'Error Accepting HoursEdit record.'    
                             return 99999    
                           end    
                    end    
              end    
     if @AgmtExists = 0 or @ExclusionExists = 1    
   goto CheckRategroup    
    end    
    
    
    
    
exec showdebug @debug, 'Finished edit 6, starting edit 7:  Agreement for union code has expired'    
-- 7 Agreement for union code has expired    
    
    
    
select @AgmtExpired = 1    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '7'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
    begin    
       if @AgmtExists = 1    /*DUPERR*/    
           begin    
-- MM 11/15/2002 Added on request of Joyce    
  if  @CheckAgreementOf = 'EMPLOYER'     
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if @AgmtExpired=1    
    select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLL'     
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if @AgmtExpired=1    
    select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLLANDEMPLOYER'     
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if  @AgmtExpired = 1     
    if  exists(  select  1     
       from  nonSigAgreement     
       where  EmployerId = @EmployerId     
        and ProductionTitleId =@ProductionTitleId     
        and PayrollCoId = @PayrollEmployerId    
      )    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
    OR exists (    
      select  1     
      from  agreement     
      where  employerid=@Employerid     
       and AgreementTypeCode=convert(varchar(10),'IA')     
       and ExcludeAgmt = 0     
       -- and RateGroup = @RptRategroup    -- as per Joyce we dont need to check RG for employer IA agreement, but we will check RG in payaroll agreement.    
       and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
       and (expiredate>= @RptToDate or expiredate is null)        and (effectivedate<= @RptFromDate or effectivedate is null)    
      )    
     begin    
     select  @AgmtExpired = dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
     if @AgmtExpired=1    
      select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
     end    
    else    
     select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end     
  else    
   begin    
   select  @AgmtExpired = dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
   if @AgmtExpired=1    
    select  @ExpiredDate = dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
-- MM 11/15/2002 commented following code and added above code    
/*    
  select @AgmtExpired=case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
         when 'PAYROLL' then dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptToDate)    
         when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)=1     
               then dbo.fn_AgreementExpired(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptToDate)    
       else dbo.fn_AgreementExpired(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptToDate)    
               end    
         else 1    
         end    
*/    
      -- get the expiredate   /*BUG513*/    
      if @AgmtExpired=1    
          begin    
/*    
                select  @ExpiredDate =case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
          when 'PAYROLL' then dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
          when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId) is null     
                then dbo.fn_AgreementExpiredDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
                else dbo.fn_AgreementExpiredDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
                end    
          else null    
          end    
*/    
   -- if HoursEdits record alread exists then delete it    
                    delete from HoursEdits where HoursEditId = @HoursEditId    
   --    
   --ITS#1239 - modifiy following lines for edit 7 ===========================    
   --old    
--                    select @xtra = 'Expired:  ' + convert(varchar(30),@ExpiredDate,101)    
--                    select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                    --                     -- insert record into hoursedit table    
--                    exec @rtn = HoursEdits_ins @editcode = '7', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
    
   --new    
   select @xtra = ''    
   if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
   begin    
     select @xtra = 'production code. Expired: ' + convert(varchar(30),@ExpiredDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@ProdCode) + ')'     
       
           exec @rtn = HoursEdits_ins @editcode = '7', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   else    
   begin    
     select @xtra = 'union. Expired: ' + convert(varchar(30),@ExpiredDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@UnionCode) + ')'    
       
           exec @rtn = HoursEdits_ins @editcode = '7', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   -- EOC -----------------------------------------------------------------------------------------------    
    
                if @rtn != 0    
                        begin    
                           rollback tran                                
    raiserror 99999 'Error creating HoursEdits record (Edit 7).'    
                           return 99999    
                        end    
                    select @ErrList = coalesce(@ErrList,'') + '7, '    
                 end    
              else    
                 begin    
                    -- if edit was fixed then update the edit record    
                    if @HoursEditId is not null    
                        begin    
                         update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                           if @@error != 0    
                              begin    
                                 rollback tran     
                                 raiserror 99999 'Error Accepting HoursEdit record.'    
                                 return 99999    
                            end    
   end    
                 end            end    
    end    
    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 7, starting edit 8:  Agreement for unioncode not effective yet.'    
-- 8 Agreement for union code not effective yet    
    
    
select @AgmtNotEffective = 1    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '8'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
    begin    
       if @AgmtExists = 1    /*DUPERR*/    
           begin    
-- MM 11/15/2002 Added on request of Joyce    
  if  @CheckAgreementOf = 'EMPLOYER'     
   begin    
   select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
   if @AgmtNotEffective=1    
    select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLL'     
   begin    
   select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
   if @AgmtNotEffective=1    
    select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
  if  @CheckAgreementOf = 'PAYROLLANDEMPLOYER'     
   begin    
    select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
    if  @AgmtNotEffective = 1     
     if  exists(  select  1     
       from  nonSigAgreement     
       where  EmployerId = @EmployerId     
        and ProductionTitleId =@ProductionTitleId     
        and PayrollCoId = @PayrollEmployerId    
      )    
   -- LC 7/24/03 Check if IA AgreementTypeCode exist, if exist, flag OK. ITS # 375    
    OR exists (    
      select  1     
      from  agreement     
      where  employerid=@Employerid     
       and AgreementTypeCode=convert(varchar(10),'IA')     
       and ExcludeAgmt = 0     
       -- and RateGroup = @RptRategroup    -- as per Joyce we dont need to check RG for employer IA agreement, but we will check RG in payaroll agreement.    
       and (ProductionTitleId=coalesce(@ProductionTitleId,0) or ProductionTitleId is null)    
       and (expiredate>= @RptToDate or expiredate is null)        and (effectivedate<= @RptFromDate or effectivedate is null)    
      )    
     begin    
      select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
      if @AgmtNotEffective=1    
       select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
     end    
     else    
      select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end     
  else    
   begin    
   select  @AgmtNotEffective = dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
   if @AgmtNotEffective=1    
    select  @EffectiveDate = dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
   end    
    
    
-- MM 11/15/2002 commented following code and added above code    
/*    
  select @AgmtNotEffective=case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
         when 'PAYROLL' then dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptFromDate)    
         when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)=1     
               then dbo.fn_AgreementNotEffective(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId,@RptFromDate)    
               else dbo.fn_AgreementNotEffective(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId,@RptFromDate)    
               end    
         else 1    
         end    
    
              --    
*/    
          if @AgmtNotEffective = 1    
                 begin    
/*    
                select  @EffectiveDate =case @CheckAgreementOf  when 'EMPLOYER' then dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
          when 'PAYROLL' then dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
          when 'PAYROLLANDEMPLOYER' then case  when dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId) is null     
                then dbo.fn_AgreementEffectiveDate(@PayrollEmployerId,@UnionCode,@RptRateGroup,@ProductionTitleId)    
                else dbo.fn_AgreementEffectiveDate(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)    
                end    
          else null    
          end    
*/    
                    -- if HoursEdits record alread exists then delete it    
                    delete from HoursEdits where HoursEditId = @HoursEditId    
                    --    
   --ITS#1239 - modifiy following lines for edit 8 ===========================    
   --old    
--                    select @xtra = 'Effective:  ' + convert(varchar(30),@EffectiveDate,101)    
--                   select @xtra = @xtra + convert(char(4),' -- ') + @orig    
                    --    
--                    -- insert record into hoursedit table    
--                    exec @rtn = HoursEdits_ins @editcode = '8', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   --new    
   select @xtra = ''    
   if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
   begin    
     select @xtra = 'production code. Effective: ' + convert(varchar(30),@EffectiveDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@ProdCode) + ')'    
       
           exec @rtn = HoursEdits_ins @editcode = '8', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   else    
   begin    
     select @xtra = 'union. Effective: ' + convert(varchar(30),@EffectiveDate,101)    
           select @xtra = @xtra + convert(char(4),' -- ')     
    select @xtra = @xtra + '(KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
    isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
    convert(varchar(10),@UnionCode) + ')'    
       
           exec @rtn = HoursEdits_ins @editcode = '8', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
   end    
   -- EOC -----------------------------------------------------------------------------------------------------    
    
                    if @rtn != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error creating HoursEdits record (Edit 8).'    
                           return 99999    
                        end    
                    select @ErrList = coalesce(@ErrList,'') + '8, '    
                 end    
               else     
                 begin    
                    -- if edit was fixed then update the edit record    
                    if @HoursEditId is not null    
                        begin    
                           update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                           if @@error != 0    
                          begin    
                                 rollback tran    
                                 raiserror 99999 'Error Accepting HoursEdit record.'    
                                 return 99999    
                    end    
                        end    
                 end    
           end     end    
    
     
    
    
CheckRateGroup:    
exec showdebug @debug, 'Finished edit 8, starting edit 9:  Rate group error (union code is being reported under the wrong rate group)'    
-- 9 Rate group error (union code is beign reported under the wrong rate group)    
    
    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '9'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if not exists(select 1    
                         from RateContract rc, AgreementContract ac    
                         where rc.rgcontractid = ac.rgcontractid                          and ac.agreementtypecode = convert(varchar(10),@UnionCode)    
                         and rc.fromdate <= @RptFromDate    
                         and rc.todate >= @RptToDate    
                         and rc.rategroup = @RptRateGroup)    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
 --    
 --ITS#1239 - modifiy following lines for edit 9 ===========================    
 --old    
            -- insert record into hoursedit table    
--            exec @rtn = HoursEdits_ins @editcode = '9', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1                 
    
 --new    
 select @xtra = ''    
 if exists(select 1 from ProductionCodes where ProductionCode = @ProdCode)    
 begin    
  select @xtra = 'production code. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
  isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
  convert(varchar(10),@ProdCode) + ')'    
     
         exec @rtn = HoursEdits_ins @editcode = '9', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
 end    
 else    
 begin    
  select @xtra = 'union. (KEYED -- ' + isnull(@ssn,'') + ' :  ' +     
  isnull(rtrim(@lastname),'') + ', ' + isnull(rtrim(@firstname),'') + ' :  ' +     
  convert(varchar(10),@UnionCode) + ')'    
     
         exec @rtn = HoursEdits_ins @editcode = '9', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
 end    
 -- EOC -------------------------------------------------------------------------------------------------    
    
 if @rtn != 0    
              begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 9).'    
                  return 99999    
               end    
            select @ErrList = coalesce(@ErrList,'') + '9, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0    
                     begin    
                        rollback tran    
   raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999                      end    
               end    
         end    end    
    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 9, starting edit 10:  Employer has been terminated'    
    
    
-- 10 Employer has been terminated    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '10'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if exists(select 1 from Employer where Terminated >= @RptFromDate and employerid = @employerid)    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
            --    
            select @TerminatedDate = Terminated from Employer where Employerid = @EmployerId    
            --    
            select @xtra = 'Terminated:  ' + convert(varchar(30),@TerminatedDate,101)    
            select @xtra = @xtra + convert(char(4),' -- ') + @orig    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '10', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
               if @rtn != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error creating HoursEdits record (Edit 10).'    
                     return 99999    
                  end    
                select @ErrList = coalesce(@ErrList,'') + '10, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
              if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end    
               end    
         end    
   end    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 10, starting edit 11:  Participant is dead.'    
    
-- 11 Participant is Dead    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '11'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
--Change to OPUS
      if exists(select 1 from @temp where Date_Of_Death <= @RptToDate and Date_Of_Death is not null) --and ssn = @ssn)    
         begin    
        -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId             --    
--Change to OPUS
             select @DateOfDeath = Date_Of_Death from @temp --opus.dbo.SGT_Person where ssn = @ssn    
            --    
            select @xtra = 'DateOfDeath:  ' + convert(varchar(30),@DateOfDeath,101)    
            select @xtra = @xtra + convert(char(4),' -- ') + @orig    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '11', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
               if @rtn != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error creating HoursEdits record (Edit 11).'    
                     return 99999    
                  end    
            select @ErrList = coalesce(@ErrList,'') + '11, '    
         end       else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end     
               end    
         end    
   end    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 11, starting edit 12:  Missing first name.'    
-- 12 Missing first Name    
    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '12'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
      if @firstname = '' or @firstname is null    
         begin    
            -- if HoursEdits record alread exists then delete it    
            delete from HoursEdits where HoursEditId = @HoursEditId    
            --    
            -- insert record into hoursedit table    
            exec @rtn = HoursEdits_ins @editcode = '12', @hoursid = @hoursid, @skipselect = 1    
            if @rtn != 0    
               begin    
                  rollback tran    
                  raiserror 99999 'Error creating HoursEdits record (Edit 12).'    
                  return 99999    
               end     
            select @ErrList = coalesce(@ErrList,'') + '12, '    
         end    
      else    
         begin    
            -- if edit was fixed then update the edit record    
            if @HoursEditId is not null    
               begin    
                  update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                  if @@error != 0    
                     begin    
                        rollback tran    
                        raiserror 99999 'Error Accepting HoursEdit record.'    
                        return 99999    
                     end    
               end    
         end    
   end    
    
    
    
    
    
    
exec showdebug @debug, 'Finished edit 12, starting edit 13:  Movie of the week'    
-- 13 Movie of the Week    
    
    
    
    
-- end Move of the Week    
    
    
    
    
-- 14  Negative Hours /*ERR14*/    
    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '14'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
--   select @HoursWorked=Hoursworked, @IAPValue = IAPValue from hours where hoursid = @hoursid  /*These variables are populated when the header variables are calculated*/    
   if  (@HoursWorked<0  and not exists( select  1       
      from  hours,report,accounts    
      where  report.reportid=hours.reportid     
       and hours.SSN=@SSN     
       and FromDate=@rptFromDate     
       and todate=@rptToDate     
       and report.empaccountno=accounts.accountno    
       and accounts.employerid=@employerid    
       and hoursworked>=abs(@HoursWorked)))     
 or (@IAPValue < 0 and not exists(  select  1      
      from  hours,report,accounts    
      where  report.reportid=hours.reportid     
       and hours.SSN=@SSN     
       and FromDate=@rptFromDate     
       and todate=@rptToDate     
       and report.empaccountno=accounts.accountno    
       and accounts.employerid=@employerid    
       and IAPValue >=abs(@IAPValue)))   /*NEGIAP*/    
      begin    
         -- if HoursEdits record alread exists then delete it    
         delete from HoursEdits where HoursEditId = @HoursEditId    
         --    
         -- insert record into hoursedit table'    
         exec @rtn = HoursEdits_ins @editcode = '14', @hoursid = @hoursid, @ExtraData = @orig, @skipselect = 1    
         if @rtn != 0    
            begin    
               rollback tran    
               raiserror 99999 'Error creating HoursEdits record (Edit 14).'    
               return 99999    
            end    
         select @ErrList = coalesce(@ErrList,'') + '14, '             
      end    
   else    
      begin    
         -- if edit was fixed then update the edit record    
         if @HoursEditId is not null    
            begin                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
               if @@error != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error Accepting HoursEdit record.'    
                     return 99999     
                  end    
            end    
      end    
   end    
    
    
-- 15 Duplicate Hours /*ERR15*/    
    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '15'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
    select  top 1 @DupReportId = hours.reportid     
 from  hours,report,accounts    
 where  report.reportid=hours.reportid     
  and hours.SSN=@SSN     
  and FromDate=@rptFromDate     
  and todate=@rptToDate     
  and report.empaccountno=accounts.accountno     
  and accounts.employerid=@employerid    
  and hoursworked=@HoursWorked --and @HoursWorked > 12   -- ITS#1502 , ITS#4699    
  and hoursid<>@hoursid    
  and (hoursworked < 0 or hoursworked > 12)   /*EDIT15*/    
    
 if  @DupReportId is not null    
  begin    
  select @xtra = 'Duplicate Report: '+ltrim(rtrim(str(@DupReportId)))    
  select @xtra = @xtra + convert(char(4),' -- ') + @orig    
           -- if HoursEdits record alread exists then delete it                
  delete from HoursEdits where HoursEditId = @HoursEditId    
           --    
           -- insert record into hoursedit table'    
           exec @rtn = HoursEdits_ins @editcode = '15', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
           if @rtn != 0    
               begin    
                  rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 15).'    
                 return 99999    
               end    
           select @ErrList = coalesce(@ErrList,'') + '15, '             
        end    
   else    
      begin    
         -- if edit was fixed then update the edit record    
         if @HoursEditId is not null    
            begin    
               update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
               if @@error != 0    
                  begin    
                     rollback tran    
                     raiserror 99999 'Error Accepting HoursEdit record.'    
                     return 99999    
                  end    
            end    
      end    end    
    
    
/*EDIT16*/    
exec showdebug @debug, 'Finished edit 15, starting edit 16:   Exceeded 56 hours/week limit.'    
    
-- 16 Exceeded 56 hours/week limit    
    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '16'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
 set @weeks = 1    
-- set @weeks = 1 + datediff(week,@RptFromDate,dateadd(day,1,@RptToDate))    
 set @weeks =  1+( datediff(day,@RptFromDate,@RptToDate)/7)    
 --if @UnionCode = 99 and (@hoursworked / @weeks >56.0)    
--MM extend edit 16 on Joyce request 9/20/2002    
-- if ( (@UnionCode = 99 or @UnionCode = 09 or @UnionCode = 79) and ((@hoursworked / @weeks) >56.0) )    
--MM: Joyce requested to take out 09 and 99 from edit 16, and add them in edit 17 on  01/31/2003     
 if ( (@UnionCode = 79 or @UnionCode = 99 or @UnionCode = 89) and ((@hoursworked / @weeks) >56.0) )  -- UnionCode 99 is added as per joyce's request ITS#1944 dt 09/03/2005    
--  OR ( @UnionCode = 59 and ((@hoursworked / @weeks) >71.0) )    
           begin    
          -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId             --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '16', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                    begin    
                     rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 16).'    
                       return 99999    
                    end    
              select @ErrList = coalesce(@ErrList,'') + '16, '    
           end           
 else    
           begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null     
                 begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                    if @@error != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
           end    
   end    
    
    
--MM Added edit 17 on Joyce request 9/20/2002    
/*EDIT17*/    
exec showdebug @debug, 'Finished edit 16, starting edit 17:   Exceeded 100 hours/week limit.'    
-- 17 Exceeded 100 hours/week limit    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '17'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
 set @weeks = 1    
-- set @weeks =  datediff(week,@RptFromDate,dateadd(day,1,@RptToDate))    
 set @weeks =  1+( datediff(day,@RptFromDate,@RptToDate)/7)    
    
--MM 02/22/2006 Enhanced edit 17 for Code 35, now checking 35 as a true union also.    
--Code 79 and 99 limit is 56 hours    
--Code 09 has a limit of 112 hours    
--Code 35 or if true union is 35 and reported code 46 or 96 has a limit of 120 hours    
--Code 21 and 62 has No Limit    
--All other codes have limit of 100 hours.    
 if  ( ( @UnionCode <> 79     
   and @UnionCode <> 09   -- please enhance edit 17 to only flag code 09 if hours are greater than 112.0 per week requested by joyce 03/18/03    
  -- and @UnionCode <> 99    -- 09 and 99 will be check for > 100 hours as per joyce request 01/31/2003     
--   and @UnionCode <> 59     -- code 59 used as hourly so remove from edit 16 and flag when hours > 100 requested by Joyce dt.12/21/02    
   and @UnionCode <> 21     
   and @UnionCode <> 35     
   and @UnionCode <> 46     
   and @UnionCode <> 96     
   and @UnionCode <> 62 )     
  and ( (@hoursworked / @weeks) >100.0 ) )  OR    
     ( @UnionCode = 35 and ( (@hoursworked / @weeks) >120.0 ) ) OR    
     ( (@UnionCode = 46 or @UnionCode = 96) and exists(select 1 from TrueUnion where ssn=@ssn and trueunion = 35) and  ( (@hoursworked / @weeks) >120.0 ) ) OR    
     ( (@UnionCode = 46 or @UnionCode = 96) and not exists(select 1 from TrueUnion where ssn=@ssn and trueunion = 35) and  ( (@hoursworked / @weeks) >100.0 ) ) OR    
     ( @UnionCode = 09 and ( (@hoursworked / @weeks) >112.0 ) )    
    
           begin    
          -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId             --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '17', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 17).'    
                       return 99999    
                    end    
              select @ErrList = coalesce(@ErrList,'') + '17, '    
           end           
 else    
           begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null    
                 begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                    if @@error != 0    
                        begin    
                           rollback tran    
               raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
           end    
   end    
    
--  EDIT18 - Possible Non-Affiliate Shareholder    
--  check if edit already exists    
exec  showdebug @debug, 'Finished edit 17, starting edit 18: Possible Non-Affiliate Shareholder.'    
select  @xtra = ''    
    
select  @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '18'    
--  make sure edit hasn't been overriden    
if  @OverRideDate is null    
    begin    
 if (@UnionCode = 59 or @UnionCode = 79)    
  and @SSN in(select SSN from ShareHolder where EmployerId = @EmployerId)    
  and dbo.fn_AgreementExists(@EmployerId,@UnionCode,@RptRategroup,@ProductionTitleId)=0    
  begin    
  select  @xtra = ''    
  select  @xtra = @xtra + convert(char(4),' -- ') + @orig    
          --  if HoursEdits record already exists then delete it                
  delete  from HoursEdits where HoursEditId = @HoursEditId    
          --  insert record into hoursedit table'    
         exec  @rtn = HoursEdits_ins @editcode = '18', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
         if  @rtn != 0    
          begin    
            rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 18).'    
                 return 99999    
          end    
          select  @ErrList = coalesce(@ErrList,'') + '18, '             
        end    
    else    
        begin    
          --  if edit was fixed then update the edit record    
          if  @HoursEditId is not null    
              begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                 if  @@error != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
        end        
 end    
    
    
-- EDIT19 - RG04 with IAP    
--  check if edit already exists    
exec  showdebug @debug, 'Finished edit 18, starting edit 19: RG04 with IAP.'    
select  @xtra = ''    
    
select  @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '19'    
--  make sure edit hasn't been overriden    
if  @OverRideDate is null     
    begin     
 if (@RptRateGroup = 04 or    
  @RptRateGroup = 09 or    
  @RptRateGroup = 13 or    
  @RptRateGroup = 14 or    
  @RptRateGroup = 15 or    
  @RptRateGroup = 16 or    
  @RptRateGroup = 17 or    
  @RptRateGroup = 18 or    
  @RptRateGroup = 22 or    
  @RptRateGroup = 23 or    
  @RptRateGroup = 30 or    
  @RptRateGroup = 31 or    
--  @RptRateGroup = 32 or    
  @RptRateGroup = 60 or    
  @RptRateGroup = 61 or    
  @RptRateGroup = 65 or    
  @RptRateGroup = 66 or    
  @RptRateGroup = 67 or    
  @RptRateGroup = 70 or    
  @RptRateGroup = 71 or    
  @RptRateGroup = 73 or    
  @RptRateGroup = 75 or    
  @RptRateGroup = 19 or    
  @RptRateGroup = 25 or    
  @RptRateGroup = 27 or    
  @RptRateGroup = 42 or    
  @RptRateGroup = 51 or    
  @RptRateGroup = 76 or    
  @RptRateGroup = 77 or    
  @RptRateGroup = 98 or    
  @RptRateGroup = 90 or    
  @RptRateGroup = 91 or    
  @RptRateGroup = 92 or    
  @RptRateGroup = 93 or    
  @RptRateGroup = 94 ) and coalesce(@IAPValue,0)<>0    
  begin    
  select  @xtra = ''    
  select  @xtra = @xtra + convert(char(4),' -- ') + @orig    
          --  if HoursEdits record already exists then delete it                
  delete  from HoursEdits where HoursEditId = @HoursEditId    
          --  insert record into hoursedit table'    
         exec  @rtn = HoursEdits_ins @editcode = '19', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
         if  @rtn != 0    
          begin    
            rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 19).'    
                 return 99999    
          end    
          select  @ErrList = coalesce(@ErrList,'') + '19, '             
        end    
    else    
        begin    
          --  if edit was fixed then update the edit record    
          if  @HoursEditId is not null    
              begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                 if  @@error != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
        end        
 end    
    
    
--  EDIT20 - Participant hold    
--  check if edit already exists    
exec  showdebug @debug, 'Finished edit 19, starting edit 20: Participant hold.'    
select  @xtra = ''    
    
select  @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '20'    
--  make sure edit hasn't been overriden    
if  @OverRideDate is null    
    begin    
 if exists(select 1 from ParticipantHold where rtrim(SSN) = @SSN and ReleaseDate is null)    
  begin    
  select  @xtra = ''    
  select  @xtra = @xtra + convert(char(4),' -- ') + @orig    
          --  if HoursEdits record already exists then delete it                
  delete  from HoursEdits where HoursEditId = @HoursEditId    
          --  insert record into hoursedit table'    
         exec  @rtn = HoursEdits_ins @editcode = '20', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
         if  @rtn != 0    
          begin    
            rollback tran    
                 raiserror 99999 'Error creating HoursEdits record (Edit 20).'    
                 return 99999    
          end    
          select  @ErrList = coalesce(@ErrList,'') + '20, '             
        end    
    else    
        begin    
          --  if edit was fixed then update the edit record    
          if  @HoursEditId is not null    
              begin    
                 update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                 if  @@error != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error Accepting HoursEdit record.'    
                       return 99999    
                    end    
              end    
        end        
 end    
--==============================================================    
/*Disabled as per Korelle Cox request.    
/*EDIT21*/    
exec showdebug @debug, 'Finished edit 20, starting edit 21:   Exceeded 60 hours/week limit.'    
    
-- 21 Exceeded 60 hours/week limit    
select @xtra = ''    
--    
-- check if edit already exists    
select @HoursEditId = HoursEditId, @OverrideDate = OverRideDate from HoursEdits where hoursid = @hoursid and editcode = '21'    
--    
-- make sure edit hasn't been overriden    
if @OverRideDate is null    
   begin    
 set @weeks = 1    
 set @weeks =  1+( datediff(day,@RptFromDate,@RptToDate)/7)    
 if ( (@UnionCode = 30) and ((@hoursworked / @weeks) >60.0) )      
           begin    
          -- if HoursEdits record alread exists then delete it    
              delete from HoursEdits where HoursEditId = @HoursEditId             --    
              -- insert record into hoursedit table    
              exec @rtn = HoursEdits_ins @editcode = '21', @hoursid = @hoursid, @ExtraData = @xtra, @skipselect = 1    
                if @rtn != 0    
                    begin    
                       rollback tran    
                       raiserror 99999 'Error creating HoursEdits record (Edit 21).'    
                       return 99999    
                    end    
              select @ErrList = coalesce(@ErrList,'') + '21, '    
           end           
 else    
           begin    
              -- if edit was fixed then update the edit record    
              if @HoursEditId is not null     
                 begin    
                    update HoursEdits set accepteddate = getdate(), auditdate = getdate(), accepteduser = dbo.fn_GetUserName(suser_sname()), audituser = dbo.fn_GetUserName(suser_sname()) where HoursEditId = @HoursEditId    
                    if @@error != 0    
                        begin    
                           rollback tran    
                           raiserror 99999 'Error Accepting HoursEdit record.'    
                           return 99999    
                        end    
                 end    
           end    
   end    
*/    
    
UpdateStatus:    
    
-- update record status    
if exists (select 1 from HoursEdits where hoursid = @hoursid and overridedate is null and accepteddate is null)    
    begin    
    
          -- update hours status, accepted, and ErrorList    
          exec showdebug @debug, 'Begin update Hours record.'    
    
          update hours    
          set comment = @ErrList    
          , accepted = 0    
          , status = 2    
          , iapstatus = 2    
          , audituser = dbo.fn_GetUserName(suser_sname())   /* USER1 */    
          , auditdate = getdate()  /* USER1 */    
          where hoursid = @hoursid     
    
          if @@error != 0    
             begin    
                rollback tran    
                raiserror 99999 'Error updating hours status.'    
                return 99999    
             end           exec showdebug @debug, 'End update Hours record.'    
    
          -- update the transaction status to 2    
          exec showdebug @debug, 'Begin update ''HOURS'' transaction record'    
    
          update transactions     
          set status = 2    
          where reportid = @reportid and transactiontypecode = 'HOURS'   /* AUDIT1 */ /* AccountCode = '0' */    
    
          if @@error != 0    
             begin    
                rollback tran    
                raiserror 99999 'Error updating HOURS transaction status.'    
                return 99999    
             end    
          exec showdebug @debug, 'End update ''HOURS'' transaction record'    
    
             select @ErrorExists = 1    
              -- return 99998 to indicate that at least one edit was found but no SQL error occurred    
             -- commit tran    
    
        end       else    
        begin    
        -- update the status and accepted flag of the hours record to 1    
        exec showdebug @debug, 'Begin update Hours record'    
    
        update hours     
        set comment = @ErrList    
        , accepted = 1    
        , status = 1    
        , iapstatus = 1          , audituser = dbo.fn_GetUserName(suser_sname())   /* USER1 */    
        , auditdate = getdate()  /* USER1 */    
        where hoursid = @hoursid    
    
        if @@error != 0            begin     
              rollback tran    
              raiserror 99999 'Error updating hours record status.'    
              return 99999    
           end    
        exec showdebug @debug, 'End update Hours record'    
        --    
        select @ErrorExists = 0    
        end    
    
    
     
    
     
-- set hours values    
    
exec showdebug @debug, 'Begin Calculating Hours Value'    
-- set the value of the hour    
exec @rtn = sp_SetHoursValue @hoursid    
if @rtn != 0    
   begin    
      rollback tran    
      raiserror 99999 'Error calculating and updating the hours value.'    
      return 99999    
   end    
exec showdebug @debug, 'End Calculating Hours Value'    
    
    
/*     
exec showdebug @debug, 'Finished calculating the hour value, start calculating the iap399 value'    
exec @rtn = sp_setIAP399Value @hoursid    
if @rtn != 0    
   begin    
      rollback tran    
      raiserror 99999 'Error calculating and updating the IAP399 value.'    
      return 99999    
   end    
*/    
    
    
exec showdebug @debug, 'Begin Calculating CSATF.'    
exec @rtn = sp_setCSATFValue @hoursid    
if @rtn != 0    
   begin    
      rollback tran    
      raiserror 99999 'Error calculating and updating the CSATF values.'    
      return 99999    
   end    
exec showdebug @debug, 'End Calculating CSATF.'    
    
    
CommitTran:    
    
commit tran    
     
exec showdebug @debug, 'Transaction commited, exiting the procedure'    
if @debug = 1    
   begin       select @Diff = DateDiff(ms,@Now,getdate())    
      select @Diff,  @HoursId, 'End Verify Hours'    
   end    
    
if @ErrorExists = 1    
   begin    
   return 99998    
   end    
else    
   begin    
   return 0    
   end    
    
    
end    
GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Puneet Punjabi
--Created On	:	04/12/2012
--Description	:	Stored Proc for Calculation
------------------------------------------------------------------------------------------------------------------------ 

/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPlanYear]    Script Date: 04/25/2012 18:05:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[usp_GetWorkDataForPlanYear](@SSN char(10),@PLANYEAR int, @PLANID int)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.Weeks AS Weeks, VPIO.PensionHours AS PensionHours
FROM @PensionWorkHistory AS VPIO 
where VPIO.SSN=@SSN AND VPIO.ComputationYear = @PLANYEAR AND VPIO.PensionPlan = @PLANID
END



GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Abhishek Sharma
--Created On	:	04/17/2012
--Description	:	Stored Proc for Getting True Union by SSN OLD WAY
------------------------------------------------------------------------------------------------------------------------

CREATE Function [dbo].[fn_GetTrueUnionBy_SSN_N_Date_OldWay](@SSN varchar(9), @FromDate smalldatetime,@ToDate smalldatetime)
returns int
AS
BEGIN
	--Declare @SSN varchar(9), @FromDate smalldatetime,@ToDate smalldatetime
	--Select  @FromDate = '12/27/2009', @ToDate = '12/25/2010'
	--Select @SSN = '367505993'

	declare @Union int, @LastUnion int, @PUnion int, @TrueUnion int, @multipleunion int

	select top 1 @LastUnion = unioncode
	from eadb.dbo.hours h inner join eadb.dbo.report r on h.reportid = r.reportid and r.todate between @FromDate and @Todate 
	and SSN = @SSN and h.status = 0 and unioncode not in (select productioncode from eadb.dbo.productioncodes)
	order by r.reportid desc

	if @LastUnion is null
	begin
		select top 1 @PUnion = unioncode
		from eadb.dbo.hours h inner join eadb.dbo.report r on h.reportid = r.reportid and r.todate between @FromDate and @Todate 
		and SSN = @SSN and h.status = 0 
		order by r.reportid desc
	end
	--Print '1 - '+convert(varchar(3), isnull(@LastUnion,0))+','+convert(varchar(3), isnull(@PUnion,0))+','+convert(varchar(3), isnull(@TrueUnion,0))+','+convert(varchar(3), isnull(@Union,0))
	if @LastUnion is null and @PUnion is null
	begin
		select top 1 @LastUnion = unioncode
		from eadb.dbo.hours h inner join eadb.dbo.report r on h.reportid = r.reportid and r.todate < @FromDate
		and SSN = @SSN and h.status = 0 and unioncode not in (select productioncode from eadb.dbo.productioncodes)
		order by r.reportid desc

		if @LastUnion is null
		begin
			select top 1 @PUnion = unioncode
			from eadb.dbo.hours h inner join eadb.dbo.report r on h.reportid = r.reportid and r.todate < @FromDate
			and SSN = @SSN and h.status = 0 
			order by r.reportid desc
		end
	end
	--Print '2 - '+convert(varchar(3), isnull(@LastUnion,0))+','+convert(varchar(3), isnull(@PUnion,0))+','+convert(varchar(3), isnull(@TrueUnion,0))+','+convert(varchar(3), isnull(@Union,0))
	
	if @LastUnion is null and @PUnion is null
	begin
		select top 1 @LastUnion = h.unioncode
		from eadb.dbo.hptransactions h 
		where h.ssn = @ssn and enddate < @fromdate and reportno <> '0.'
		order by convert(int,reportno) desc	     
	end
	--Print '3 - '+convert(varchar(3), isnull(@LastUnion,0))+','+convert(varchar(3), isnull(@PUnion,0))+','+convert(varchar(3), isnull(@TrueUnion,0))+','+convert(varchar(3), isnull(@Union,0))

	select top 1 @TrueUnion = trueunion from eadb.dbo.trueunion where ssn = @ssn and (auditdate <=@todate or auditdate is null)
	select @multipleunion = (select count(trueunion) from eadb.dbo.trueunion where ssn = @ssn and (auditdate <=@todate or auditdate is null))

	--Print '4 - '+convert(varchar(3), isnull(@LastUnion,0))+','+convert(varchar(3), isnull(@PUnion,0))+','+convert(varchar(3), isnull(@TrueUnion,0))+','+convert(varchar(3), isnull(@Union,0))
	set @union = case
				when @multipleunion > 1 and @LastUnion is not null then @LastUnion
				when @TrueUnion is not null then @TrueUnion
				when @LastUnion is not null then @LastUnion
				else @PUnion
				end
				
	--Print '5 - '+convert(varchar(3), isnull(@LastUnion,0))+','+convert(varchar(3), isnull(@PUnion,0))+','+convert(varchar(3), isnull(@TrueUnion,0))+','+convert(varchar(3), isnull(@Union,0))
	select @union = isnull(@union,0)				
	return @union
END

GO


-----------------------------------------------------------------------------------------------
--Name - Abhishek Sharma	
--Date - 17th April 2012
-- Purpose - Stored Proc to get DATA for Person OverView 
-----------------------------------------------------------------------------------------------
USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 04/25/2012 18:06:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[usp_GetWorkDataForPersonOverview](@SSN char(9))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [int] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR


END


GO
--------------------------------------------------------------
--Name: Mahua Banerjee
--Date: 19/04/2012
--Purpose: Get total hours worked between two dates
----------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GetHoursInformationForQDRO]    Script Date: 04/19/2012 15:55:07 ******/
USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetHoursInformationForQDRO]    Script Date: 04/25/2012 18:15:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[usp_GetHoursInformationForQDRO] (@SSN char(10),@PLAN_CODE VARCHAR(10),@DATE_OF_MARRIAGE DATETIME,
@DATE_OF_SEPARATION DATETIME,@DATE_OF_DETERMINATION DATETIME,
@NUMERATOR NUMERIC(7,1) OUTPUT,@DENOMINATOR NUMERIC(7,1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6),
	[SEQ] [int] IDENTITY(1,1) NOT NULL
) 

DECLARE @COUNT INT
DECLARE @TOTAL_COUNT INT


DECLARE @YEARS INT
DECLARE @COUNT_YEARLY INT
DECLARE @TOTAL_COUNT_YEARLY INT

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @TOTAL_COUNT = @@ROWCOUNT

SET @YEARS= 0
SET @NUMERATOR=0.0
SET @DENOMINATOR=0.0

DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	--IF (SELECT QualifiedYearCount FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ=@COUNT_YEARLY) < 20
	--BEGIN
	--	SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.QualifiedHours >= 400.0 
	--	AND PWHY.YearlySEQ=@COUNT_YEARLY 
	--END
	--ELSE
	--BEGIN
	--	SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ=@COUNT_YEARLY 
	--END
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END

-----------------------------------------------------------------------------------------------------------
--FOR DENOMINATOR
DECLARE @COUNT_YEARLY_FOR_DENOMINATOR INT
DECLARE @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR INT


DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) > @DATE_OF_DETERMINATION

DECLARE @PensionWorkHistoryYearDenominator TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)


INSERT INTO @PensionWorkHistoryYearDenominator
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR =@@ROWCOUNT
SET @COUNT_YEARLY_FOR_DENOMINATOR =1

UPDATE @PensionWorkHistoryYearDenominator SET QualifiedYearCount = 0 WHERE QualifiedHours < 400.0

-----------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------
--FOR NUMERATOR

DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) < @DATE_OF_MARRIAGE OR 
CAST(todate AS DATETIME) > @DATE_OF_SEPARATION



DECLARE @PensionWorkHistoryYearWiseFinal TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)

INSERT INTO @PensionWorkHistoryYearWiseFinal
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT

UPDATE @PensionWorkHistoryYearWiseFinal SET QualifiedYearCount = 0 WHERE QualifiedHours < 400.0

---------------------------------------------------------------------------------------------------------------------------------------------------


	--FOR NUMERATOR
	SET @COUNT_YEARLY =1 
	WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY 
	BEGIN
		IF (SELECT QualifiedYearCount FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.YearlySEQ=@COUNT_YEARLY) < 20
			BEGIN
				SELECT  @NUMERATOR = @NUMERATOR +  QualifiedHours FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.QualifiedHours >= 400.0 
				AND PWHYF.YearlySEQ=@COUNT_YEARLY 
			END
			ELSE
			BEGIN
				SELECT  @NUMERATOR = @NUMERATOR +  QualifiedHours FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.YearlySEQ=@COUNT_YEARLY 
			END
				SET @COUNT_YEARLY = @COUNT_YEARLY + 1
	END
	
	
	
	--FOR DENOMINATOR
	WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
	BEGIN
		IF (SELECT PWHYD.QualifiedYearCount FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR) < 20
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
				AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
			ELSE
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
				SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
	END
	
END



GO


--------------------------------------------------------------
--Name: Vinovin
--Date: 04/26/2012
--Purpose: Get data for IAP Year End Snapshot batch
----------------------------------------------------------------------
USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetIAPSnapShotInfo]    Script Date: 04/27/2012 15:42:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[usp_GetIAPSnapShotInfo](@FROMDATE DATETIME,@TODATE DATETIME, @COMPUTATIONYEAR int, @ORDERBY CHAR(1)) 
AS
BEGIN
SET NOCOUNT ON
--------------------------------------------------------------------------------------------

CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NULL,
	[LateAnnual] [varchar](1) NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 
insert into [#PensionWorkHistory]
exec usp_pensioninterface4opus_by_dates @COMPUTATIONYEAR,@FROMDATE,@TODATE

IF @ORDERBY = 'Y'
BEGIN
	SELECT * FROM
	(
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT, 'N' AS LATE_FLAG
		FROM [#PensionWorkHistory] 
		WHERE ComputationYear = @COMPUTATIONYEAR
		GROUP BY EMPACCOUNTNO,COMPUTATIONYEAR,SSN	
		UNION
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT, 'Y' AS LATE_FLAG
		FROM [#PensionWorkHistory]
		WHERE ComputationYear < @COMPUTATIONYEAR 
		AND PROCESSED BETWEEN @FROMDATE AND @TODATE
		AND (LateMonthly = 'Y' or LateAnnual = 'Y')
		GROUP BY EMPACCOUNTNO,COMPUTATIONYEAR,SSN
	) A
	ORDER BY SSN,COMPUTATIONYEAR DESC,EMPACCOUNTNO
END
ELSE
BEGIN
	SELECT * FROM
	(
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT, 'N' AS LATE_FLAG
		FROM [#PensionWorkHistory] 
		WHERE ComputationYear = @COMPUTATIONYEAR
		GROUP BY EMPACCOUNTNO,COMPUTATIONYEAR,SSN	
		UNION
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT, 'Y' AS LATE_FLAG
		FROM [#PensionWorkHistory]
		WHERE ComputationYear < @COMPUTATIONYEAR 
		AND PROCESSED BETWEEN @FROMDATE AND @TODATE
		AND (LateMonthly = 'Y' or LateAnnual = 'Y')
		GROUP BY EMPACCOUNTNO,COMPUTATIONYEAR,SSN
	) A
	ORDER BY SSN,COMPUTATIONYEAR,EMPACCOUNTNO
END

drop table [#PensionWorkHistory]

END

GO



----------------------------------------------------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
-- Date - 04/26/2012
-- Purpose - CREATE SPs usp_GetLastWorkingDate and usp_CheckWorkingHoursAfterGivenDate
----------------------------------------------------------------------------------------------------------------------------------

CREATE PROC [dbo].[usp_GetLastWorkingDate](@SSN char(10))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT Top 1 VPIO.ToDate AS LAST_WORKING_DATE
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN and VPIO.PensionHours > 0  ORDER BY VPIO.ToDate DESC

END


GO

USE [EADB]
GO


CREATE PROC [dbo].[usp_CheckWorkingHoursAfterGivenDate](@SSN char(10),@DATE DATETIME,@RESULT CHAR(1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT @RESULT = CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
from @PensionWorkHistory WHERE PensionHours > 0.0 AND ToDate > @DATE AND SSN=@SSN

END


GO

----------------------------------------------------------------------------------------------------------------------------------
-- Name - vinovin
-- Date - 04/27/2012
-- Purpose - stored procedure to get the work history prior to allocation year
----------------------------------------------------------------------------------------------------------------------------------
USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_GetWorkhistoryForIAPAllocation]    Script Date: 04/27/2012 15:52:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


----------------------------------------------------------------------------------------------------------------------------------
-- Name - vinovin
-- Date - 04/27/2012
-- Purpose - CREATE SP usp_GetWorkhistoryForIAPAllocation
----------------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetWorkData]    Script Date: 04/11/2012 12:06:18 ******/
CREATE PROC [dbo].[usp_GetWorkhistoryForIAPAllocation](@SSN char(10),@FROMDATE DATETIME, @COMPUTATIONYEAR INT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT EMPACCOUNTNO,SSN,COMPUTATIONYEAR,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT
FROM @PensionWorkHistory
WHERE ComputationYear < @COMPUTATIONYEAR
AND Processed < @FROMDATE
AND PensionPlan = 2
GROUP BY EMPACCOUNTNO,SSN,COMPUTATIONYEAR

END

GO



----------------------------------------------------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
-- Date - 05/02/2012
-- Purpose - CREATE SP usp_GetIAPHourInfoForQuarterlyAllocation
----------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetIAPHourInfoForQuarterlyAllocation](@SSN char(10),@FROMDATE DATETIME,@TODATE DATETIME)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT (CASE WHEN SUM(PWH.IAPHours) IS NULL THEN 0 ELSE SUM(PWH.IAPHours) END) AS IAPHours,
       (CASE WHEN SUM(PWH.IAPHoursA2)IS NULL THEN 0 ELSE SUM(PWH.IAPHoursA2) END)AS IAPHoursA2,
       (CASE WHEN SUM(PWH.IAPPercent)IS NULL THEN 0 ELSE SUM(PWH.IAPPercent) END)AS IAPPercent 
FROM @PensionWorkHistory PWH WHERE PWH.FromDate >= @FROMDATE AND PWH.ToDate <= @TODATE AND PWH.SSN=@SSN

END


GO

----------------------------------------------------------------------------------------------------------------------------------
-- Name - Kunal Arora
-- Date - 05/10/2012
-- Purpose - Alter Last Working Date Script
----------------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_CheckWorkingHoursAfterGivenDate]    Script Date: 05/10/2012 16:08:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_CheckWorkingHoursAfterGivenDate](@SSN char(10),@DATE DATETIME,@RESULT CHAR(1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT @RESULT = CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
from @PensionWorkHistory WHERE PensionHours > 0.0 AND ToDate > @DATE AND SSN=@SSN

END


----------------------------------------------------------------------------------------------------------------------------------
-- Name - ROHAN ADGAONKAR
-- Date - 05/10/2012
-- Purpose - Alter usp_GetWorkData Script
----------------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetWorkData]    Script Date: 05/10/2012 18:43:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[usp_GetWorkData](@SSN char(10),@PLANCODE varchar(20))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_PERCENT
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
ELSE NULL END AS VESTED_HOURS
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
END

----------------------------------------------------------------------------------------------------------------------------------
-- Name - ROHAN ADGAONKAR
-- Date - 05/11/2012
-- Purpose - Scripts to Alter Stored Procedures on EADB 
----------------------------------------------------------------------------------------------------------------------------------



/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate_IAP]    Script Date: 05/11/2012 14:51:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_GetLateHoursAndContributions]    Script Date: 04/11/2012 12:04:23 ******/
--CREATE PROC [dbo].[usp_GetLateHoursAndContributions](@FROMDATE DATETIME,@TODATE DATETIME,@ALLOCATIONYEAR INT)
--AS
--BEGIN
--SET NOCOUNT ON

--SELECT		COMPUTATIONYEAR,VW.SSN,PERACCT.PERSON_ACCOUNT_ID,PER.PERSON_ID,SUM(ISNULL(IAPHOURS,0.0)) LATEIAPHOURS,SUM(ISNULL(IAPHOURSA2,0.0)) LATEIAPHOURSA2,SUM(ISNULL(IAPPERCENT,0.00)) LATEIAPPERCENT INTO #TEMP
--FROM		VW_PENSIONINTERFACE4OPUS VW
--INNER JOIN	MPIPHP.DBO.SGT_PERSON PER	
--		ON	VW.SSN = DBO.fn_GET_DECRYPTED_TEXT(PER.SSN)
--INNER JOIN	MPIPHP.DBO.SGT_PERSON_ACCOUNT PERACCT
--		ON	PERACCT.PERSON_ID = PER.PERSON_ID
--		AND	PERACCT.PLAN_ID = 1	
--WHERE		PROCESSED BETWEEN @FROMDATE AND @TODATE
--	AND		PENSIONPLAN = 2
--	AND		COMPUTATIONYEAR < @ALLOCATIONYEAR
--	AND		LATEMONTHLY = 'Y' 
--GROUP BY	COMPUTATIONYEAR,VW.SSN,PERACCT.PERSON_ACCOUNT_ID,PER.PERSON_ID

--SELECT		A.COMPUTATIONYEAR,A.SSN,B.PERSON_ACCOUNT_ID,B.PERSON_ID,SUM(ISNULL(IAPHOURS,0.0)) IAPHOURS,SUM(ISNULL(IAPHOURSA2,0.0)) IAPHOURSA2,SUM(ISNULL(IAPPERCENT,0.00)) IAPPERCENT ,
--			B.LATEIAPHOURS, B.LATEIAPHOURSA2,B.LATEIAPPERCENT
--FROM		#TEMP B
--LEFT JOIN	VW_PENSIONINTERFACE4OPUS A
--	ON		B.SSN = A.SSN AND B.COMPUTATIONYEAR = A.COMPUTATIONYEAR
--WHERE		A.PENSIONPLAN = 2
--	AND		A.PROCESSED < @FROMDATE
--	AND		(B.LATEIAPHOURS <> 0 OR B.LATEIAPHOURSA2 <> 0 OR B.LATEIAPPERCENT <> 0)
--GROUP BY	A.COMPUTATIONYEAR,A.SSN,B.LATEIAPHOURS, B.LATEIAPHOURSA2,B.LATEIAPPERCENT,B.PERSON_ACCOUNT_ID,B.PERSON_ID
--ORDER BY	A.SSN,A.COMPUTATIONYEAR

--DROP TABLE	#TEMP

--END

--GO


/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate_IAP]    Script Date: 04/11/2012 12:04:53 ******/
ALTER PROC [dbo].[usp_GetVestingDate1HourAftGivenDate_IAP](@SSN char(10))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @IAPHOURS int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	IAPHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime	
)

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) >= '08/01/2000' order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @IAPHOURS=0
SET @FLAG =0 


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @IAPHOURS = @IAPHOURS +  (select case when temp.IAPHours is null then 0 else temp.IAPHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @IAPHOURS >= 1.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END

END
-------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursAftDateOfBirth]    Script Date: 05/11/2012 14:52:48 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursAftDateOfBirth]    Script Date: 04/11/2012 12:05:09 ******/

ALTER PROC [dbo].[usp_GetVestingDate40HoursAftDateOfBirth](@SSN char(10),@PLANCODE varchar(20),@YEAR int,@DATE_AT_AGE_65 datetime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN

INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN
 and ComputationYear=@Year and cast(FromDate AS datetime) >= @DATE_AT_AGE_65 AND PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
	WHILE (@COUNT <= @TABLECOUNT)
	Begin
		set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
		if @WorkingHours >= 40.0 
		begin 
			select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
			SET @FLAG=1
			break  
		end
		set @COUNT = @COUNT + 1
	end
	
	IF @FLAG =0
	BEGIN
		select NULL as VESTING_DATE from @Temp temp
	END
END
ELSE
BEGIN
	select NULL as VESTING_DATE from @Temp temp
END
END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear= @Year and cast(FromDate AS datetime) >= @DATE_AT_AGE_65  order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG=1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END

END

------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursInGivenYear]    Script Date: 05/11/2012 14:55:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursInGivenYear]    Script Date: 04/11/2012 12:05:28 ******/

ALTER PROC [dbo].[usp_GetVestingDate40HoursInGivenYear](@SSN char(10),@PLANCODE varchar(20),@YEAR int)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN

INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN
 and ComputationYear=@Year and PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
	WHILE (@COUNT <= @TABLECOUNT)
	Begin
		set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
		if @WorkingHours >= 40.0 
		begin 
			select cast(temp.ToDate as datetime) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
			SET @FLAG=1
			break  
		end
		set @COUNT = @COUNT + 1
	end
	
	IF @FLAG =0
	BEGIN
		select NULL as VESTING_DATE from @Temp temp
	END
END
ELSE
BEGIN
	select NULL as VESTING_DATE from @Temp temp
END
END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear= @Year order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select cast(temp.ToDate as datetime) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG=1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END


END

END

---------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursNonAffliate]    Script Date: 05/11/2012 15:00:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate40HoursNonAffliate]    Script Date: 04/11/2012 12:05:45 ******/
ALTER PROC [dbo].[usp_GetVestingDate40HoursNonAffliate](@SSN char(10),@PLANCODE varchar(20))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN

INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN 
 and cast(FromDate AS datetime) >= '12/23/1989' and UnionCode in (09,59,79,89,99) and PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE 
BEGIN
select NULL as VESTING_DATE from @Temp temp
END

END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) >='12/23/1989' 
and UnionCode in (09,59,79,89,99) order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 40.0 
begin 
select cast(temp.ToDate as datetime) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp 
END
END
ELSE 
BEGIN
select NULL as VESTING_DATE from @Temp temp
END

END

END

----------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDateAft400Hours]    Script Date: 05/11/2012 15:01:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_GetVestingDateAft400Hours]    Script Date: 04/11/2012 12:06:01 ******/
ALTER PROC [dbo].[usp_GetVestingDateAft400Hours](@SSN char(10),@PLANCODE varchar(20),@YEAR int)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime
)

IF @PLANCODE='MPIPP' 
 BEGIN


INSERT INTO @Temp
SELECT PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear=@YEAR AND 
	(PensionPlan = 2 OR PensionPlan =3 OR PensionPlan =4 OR PensionPlan =6 OR PensionPlan =7 OR PensionPlan =8) order by FromDate

SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 400.0 
BEGIN 
select CAST(temp.ToDate AS DATETIME) AS VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end
IF @FLAG =0
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END
END
ELSE 
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END
END

ELSE IF @PLANCODE='IAP'
BEGIN

INSERT INTO @Temp
SELECT IAPHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and ComputationYear =@YEAR order by FromDate asc
--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG =0

IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @WorkingHours >= 400.0 
begin 
select CAST(temp.ToDate AS DATETIME) AS VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG=1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END
END
ELSE 
BEGIN
select NULL AS VESTING_DATE from @Temp temp
END

END

END

GO

-----------------------------------------------------------------------------------------------
--Name - Puneet	
--Date - 11th May 2012
--Purpose - Alter Stored Proc usp_PensionInterface4OPUS
-----------------------------------------------------------------------------------------------
 
USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS]    Script Date: 05/10/2012 15:02:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER Procedure [dbo].[usp_PensionInterface4OPUS] (@SSN char(9)=null)
AS
BEGIN
set nocount on
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL AS PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on hours.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL AS PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on HPTransactions.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join opus.dbo.SGT_Person p on cpas.mkey = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL AS PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on Pre.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
GO



------------------------------------------------------------------------------------------------------------------------
--Created By	:	Puneet
--Created On	:	11th May 2012
--Description	:	Alter Stored Procedure usp_pensioninterface4OPUS_by_dates
------------------------------------------------------------------------------------------------------------------------


USE [EADB]
GO

/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS_By_Dates]    Script Date: 05/10/2012 15:03:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER Procedure [dbo].[usp_PensionInterface4OPUS_By_Dates]
(@Year int, @FromDate smalldatetime = null,@ToDate smalldatetime = null)
AS
BEGIN
set nocount on
	--Declare @FromDate smalldatetime,@ToDate smalldatetime,@Debug int
	--select @Debug = 0
	
	if ((@FromDate is null or @ToDate is null) and @Year is not null)
	begin
		Select  @FromDate = StartDate, @ToDate = EndDate
		From	EADB.dbo.PensionYear	
		where	PensionYear = @Year
	end

		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on hours.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on HPTransactions.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join opus.dbo.SGT_Person p on cpas.mkey = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on Pre.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
GO


------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	17th May 2012
--Description	:	Create Stored Procedure usp_GetWorkDataTillGivenDate
------------------------------------------------------------------------------------------------------------------------

CREATE PROC [dbo].[usp_GetWorkDataTillGivenDate](@SSN char(10),@PLANCODE varchar(20),@DATE DATETIME)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN


IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @DATE)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @DATE) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @DATE) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @DATE) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @DATE) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @DATE) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @DATE) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @DATE) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @DATE) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @DATE) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @DATE) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @DATE) AS L161_PensionCredits
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @DATE ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @DATE) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @DATE) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @DATE) AS IAP_PERCENT
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @DATE ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @DATE)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @DATE)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @DATE)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @DATE)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @DATE)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear  and ToDate <= @DATE) 
ELSE NULL END AS VESTED_HOURS
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @DATE ORDER BY YEAR
END
END





GO




------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	18th May 2012
--Description	:	Create Stored Procedure usp_GetWorkDataTillGivenDate
------------------------------------------------------------------------------------------------------------------------



/****** Object:  StoredProcedure [dbo].[usp_GetCommunityServiceHours]    Script Date: 05/18/2012 21:04:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetCommunityServiceHours](@SSN char(10),@PLANCODE varchar(20),@DATE_OF_MARRIAGE DATETIME,
@END_OF_DATE_OF_MARRIAGE_COMP_YEAR DATETIME,@DATE_OF_SEPARATION DATETIME,@START_OF_DATE_OF_SEPARATION_COMP_YEAR DATETIME)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='MPIPP' THEN

(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2 
		and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2 
		and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)END)

WHEN @PLANCODE='IAP' THEN

(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear 
		and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear 
		and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear)END)


WHEN @PLANCODE='Local600' THEN
(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 
		and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 
		and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)END)

WHEN @PLANCODE='Local666' THEN
(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4
		 and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4
		 and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)END)


WHEN @PLANCODE='Local700' THEN
(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 
		and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6
		 and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)END)


WHEN @PLANCODE='Local52' THEN
(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7
		 and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7
		 and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)END)


WHEN @PLANCODE='Local161' THEN
(CASE WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_MARRIAGE) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 
		and FromDate >= @DATE_OF_MARRIAGE and ToDate <= @END_OF_DATE_OF_MARRIAGE_COMP_YEAR)
WHEN cast(VPIO.ComputationYear as int) = DATEPART(YEAR,@DATE_OF_SEPARATION) THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8
		 and ToDate <= @DATE_OF_SEPARATION and FromDate >= @START_OF_DATE_OF_SEPARATION_COMP_YEAR)
ELSE
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)END)


ELSE NULL END AS QDRO_HOURS
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @DATE_OF_MARRIAGE
AND VPIO.ToDate <=@DATE_OF_SEPARATION ORDER BY YEAR
END


GO



------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	24th May 2012
--Description	:	Create Stored Procedure usp_GetWorkData
------------------------------------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetWorkData]    Script Date: 04/11/2012 12:06:18 ******/
ALTER PROC [dbo].[usp_GetWorkData](@SSN char(10),@PLANCODE varchar(20))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_PERCENT
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
ELSE NULL END AS VESTED_HOURS
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
END

GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	29th May 2012
--Description	:	Create Stored Procedure usp_GetWorkDataTillGivenDate
------------------------------------------------------------------------------------------------------------------------

ALTER PROC [dbo].[usp_GetWorkDataTillGivenDate](@SSN char(10),@PLANCODE varchar(20),@RETIREMENT_DATE DATETIME=null)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

IF @RETIREMENT_DATE = '01/01/1753'
BEGIN
	SET @RETIREMENT_DATE=NULL
END

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
 
IF @RETIREMENT_DATE <> NULL OR @RETIREMENT_DATE <> '' OR @RETIREMENT_DATE <> '01/01/1753'
BEGIN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @RETIREMENT_DATE)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @RETIREMENT_DATE) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_PERCENT,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear  and ToDate <= @RETIREMENT_DATE) 
ELSE NULL END AS VESTED_HOURS,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR
END
END

ELSE 
BEGIN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_PERCENT,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
ELSE NULL END AS VESTED_HOURS,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

END

END
go 



------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	30th May 2012
--Description	:	Create Stored Procedure usp_GetHoursInformationForQDRO
------------------------------------------------------------------------------------------------------------------------

ALTER PROC [dbo].[usp_GetHoursInformationForQDRO] (@SSN char(10),@PLAN_CODE VARCHAR(10),@DATE_OF_MARRIAGE DATETIME,
@DATE_OF_SEPARATION DATETIME,@DATE_OF_DETERMINATION DATETIME,
@NUMERATOR NUMERIC(7,1) OUTPUT,@DENOMINATOR NUMERIC(7,1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6),
	[SEQ] [int] IDENTITY(1,1) NOT NULL
) 

DECLARE @COUNT INT
DECLARE @TOTAL_COUNT INT


DECLARE @YEARS INT
DECLARE @COUNT_YEARLY INT
DECLARE @TOTAL_COUNT_YEARLY INT

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @TOTAL_COUNT = @@ROWCOUNT

SET @YEARS= 0
SET @NUMERATOR=0.0
SET @DENOMINATOR=0.0

DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	ELSE
	BEGIN
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	--IF (SELECT QualifiedYearCount FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ=@COUNT_YEARLY) < 20
	--BEGIN
	--	SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.QualifiedHours >= 400.0 
	--	AND PWHY.YearlySEQ=@COUNT_YEARLY 
	--END
	--ELSE
	--BEGIN
	--	SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ=@COUNT_YEARLY 
	--END
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END


-----------------------------------------------------------------------------------------------------------
--FOR DENOMINATOR
DECLARE @COUNT_YEARLY_FOR_DENOMINATOR INT
DECLARE @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR INT


DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) > @DATE_OF_DETERMINATION

DECLARE @PensionWorkHistoryYearDenominator TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)


INSERT INTO @PensionWorkHistoryYearDenominator
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR =@@ROWCOUNT
SET @COUNT_YEARLY_FOR_DENOMINATOR =1

--UPDATE @PensionWorkHistoryYearDenominator SET QualifiedYearCount = 0 WHERE QualifiedHours < 400.0

SELECT * FROM @PensionWorkHistoryYearDenominator
PRINT @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR


-----------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------
--FOR NUMERATOR

DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) < @DATE_OF_MARRIAGE OR 
CAST(todate AS DATETIME) > @DATE_OF_SEPARATION



DECLARE @PensionWorkHistoryYearWiseFinal TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)

INSERT INTO @PensionWorkHistoryYearWiseFinal
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT

--UPDATE @PensionWorkHistoryYearWiseFinal SET QualifiedYearCount = 0 WHERE QualifiedHours < 400.0

---------------------------------------------------------------------------------------------------------------------------------------------------


	--FOR NUMERATOR
	SET @COUNT_YEARLY =1 
	WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY 
	BEGIN
		IF (SELECT QualifiedYearCount FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.YearlySEQ=@COUNT_YEARLY) < 20
			BEGIN
				SELECT  @NUMERATOR = @NUMERATOR +  QualifiedHours FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.QualifiedHours >= 400.0 
				AND PWHYF.YearlySEQ=@COUNT_YEARLY 
			END
			ELSE
			BEGIN
				SELECT  @NUMERATOR = @NUMERATOR +  QualifiedHours FROM @PensionWorkHistoryYearWiseFinal PWHYF WHERE PWHYF.YearlySEQ=@COUNT_YEARLY 
			END
				SET @COUNT_YEARLY = @COUNT_YEARLY + 1
	END
	
	
	
	--FOR DENOMINATOR
	WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
	BEGIN
		IF (SELECT PWHYD.QualifiedYearCount FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR) < 20
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
				AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
			ELSE
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
				SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
	END
	
END

GO


------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	08th June 2012
--Description	:	Create Stored Procedure usp_GetQDROHoursTillDate
------------------------------------------------------------------------------------------------------------------------

CREaTE PROC [dbo].[usp_GetQDROHoursTillDate] (@SSN char(10),@PLAN_CODE VARCHAR(10),@DATE_OF_DETERMINATION DATETIME,@DENOMINATOR NUMERIC(7,1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6),
	[SEQ] [int] IDENTITY(1,1) NOT NULL
) 

DECLARE @COUNT INT
DECLARE @TOTAL_COUNT INT


DECLARE @YEARS INT
DECLARE @COUNT_YEARLY INT
DECLARE @TOTAL_COUNT_YEARLY INT

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @TOTAL_COUNT = @@ROWCOUNT

SET @YEARS= 0
SET @DENOMINATOR=0.0

DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	ELSE
	BEGIN
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END


-----------------------------------------------------------------------------------------------------------
--FOR DENOMINATOR
DECLARE @COUNT_YEARLY_FOR_DENOMINATOR INT
DECLARE @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR INT


DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) > @DATE_OF_DETERMINATION

DECLARE @PensionWorkHistoryYearDenominator TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)


INSERT INTO @PensionWorkHistoryYearDenominator
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR =@@ROWCOUNT
SET @COUNT_YEARLY_FOR_DENOMINATOR =1



PRINT @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR

	
	
	--FOR DENOMINATOR
	WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
	BEGIN
		IF (SELECT PWHYD.QualifiedYearCount FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR) < 20
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
				AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
			ELSE
			BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
			END
				SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
	END
	
END


GO

------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	14th June 2012
--Description	:	Create Stored Procedure usp_GetQDROHoursTillDate
------------------------------------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[usp_GetQDROHoursTillDate]    Script Date: 06/14/2012 12:59:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetQDROHoursTillDate] (@SSN char(10),@PLAN_CODE VARCHAR(10),@DATE_OF_DETERMINATION DATETIME,@DENOMINATOR NUMERIC(7,1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6),
	[SEQ] [int] IDENTITY(1,1) NOT NULL
) 

DECLARE @COUNT INT
DECLARE @TOTAL_COUNT INT


DECLARE @YEARS INT
DECLARE @COUNT_YEARLY INT
DECLARE @TOTAL_COUNT_YEARLY INT

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @TOTAL_COUNT = @@ROWCOUNT

SET @YEARS= 0
SET @DENOMINATOR=0.0

DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	ELSE
	BEGIN
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END


-----------------------------------------------------------------------------------------------------------
--FOR DENOMINATOR
DECLARE @COUNT_YEARLY_FOR_DENOMINATOR INT
DECLARE @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR INT


DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) > @DATE_OF_DETERMINATION

DECLARE @PensionWorkHistoryYearDenominator TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)


INSERT INTO @PensionWorkHistoryYearDenominator
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR =@@ROWCOUNT
SET @COUNT_YEARLY_FOR_DENOMINATOR =1



PRINT @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR

	
	
	--FOR DENOMINATOR
	IF @PLAN_CODE = 'IAP'
	BEGIN
		WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
		BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
					AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
					SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
		END
	END
	ELSE
	BEGIN
		WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
		BEGIN
			IF (SELECT PWHYD.QualifiedYearCount FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR) < 20
				BEGIN
					SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
					AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
				END
				ELSE
				BEGIN
					SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
				END
					SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
		END
	END
	
END
GO




------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	29th June 2012
--Description	:	Create Stored Procedure usp_GetWorkData
------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GetWorkData]    Script Date: 04/11/2012 12:06:18 ******/
CREATE PROC [dbo].[usp_GetWorkHistory](@SSN char(10),@RETIREMENT_DATE DATETIME=null)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

IF @RETIREMENT_DATE = '01/01/1753'
BEGIN
	SET @RETIREMENT_DATE=NULL
END

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
 
IF @RETIREMENT_DATE <> NULL OR @RETIREMENT_DATE <> '' OR @RETIREMENT_DATE <> '01/01/1753'
BEGIN

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @RETIREMENT_DATE)  AS MPIPP_QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @RETIREMENT_DATE) AS MPIPP_VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE) AS L161_PensionCredits,

(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_PERCENT,

(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR

END

ELSE 
BEGIN 
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS MPIPP_QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS MPIPP_VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits,

(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_PERCENT,

(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR


END
END

go



------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	16th July 2012
--Description	:	Create Stored Procedure usp_GetVestingDate1HourAftGivenDate and
--					Drop SP usp_GetVestingDate1HourAftGivenDate_IAP
------------------------------------------------------------------------------------------------------------------------

DROP PROC usp_GetVestingDate1HourAftGivenDate_IAP
go

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate]    Script Date: 04/11/2012 12:04:53 ******/
CREATE PROC [dbo].[usp_GetVestingDate1HourAftGivenDate](@SSN char(10),@PlanCode varchar(20))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @IAPHOURS int
declare @PENSIONHOURS int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	IAPHours numeric(18,1),
	PensionHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime	
)

if @PlanCode = 'IAP'
begin
INSERT INTO @Temp
SELECT IAPHours,0,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) >= '08/01/2000' order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @IAPHOURS=0
SET @FLAG =0 


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @IAPHOURS = @IAPHOURS +  (select case when temp.IAPHours is null then 0 else temp.IAPHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @IAPHOURS >= 1.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
end
-----For MPIPP
ELSE
BEGIN
INSERT INTO @Temp
SELECT 0,PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) > '12/25/1999' and PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @PENSIONHOURS=0
SET @FLAG =0 


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @PENSIONHOURS = @PENSIONHOURS +  (select case when temp.PensionHours is null then 0 else temp.PensionHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @PENSIONHOURS >= 1.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END



END

END
go


------------------------------------------------------------------------------------------------------------------------
--Created By	:	Rohan Adgaonkar
--Created On	:	17th July 2012
--Description	:	Scripts for creation of View vwRateGroupBreakdown_all
------------------------------------------------------------------------------------------------------------------------

CREATE View [dbo].[vwRateGroupBreakdown_all]  
AS  
--All contracts
--Summarized contract, collaps all consecutive contract period to show only one entry per rate
--Assumption is, for each RateGroup and composit rate, all periods are cosiquetive or within, no break.  
Select RateGroup, Composite, LastContract = max(LastContract),FromDate = min(FROMDATE),ToDate = max(TODATE)
, Medical, Dental, Vision, PensionEmployee
, PensionEmployer, Individual, NewIAP, HWRetMedical, HWRetDental, HWRetVision
, CSATF1, CSATF2
From(
 SELECT TMP.RateGroup, TMP.Composite, LastContract = TMP.RGCONTRACTID, TMP.FromDate, TMP.ToDate,  
  Medical = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 0),0),  
  Dental = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 1),0),  
  Vision = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 2),0),  
  PensionEmployee = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 3),0),  
  PensionEmployer = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 4),0),  
  Individual = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 5),0),  
  NewIAP = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 6),0),  
  HWRETMEDICAL = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 7),0),  
  HWRETDENTAL = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 8),0),  
  HWRETVISION = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 9),0),  
  CSATF1 = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 10),0),  
  CSATF2 = isnull((select amount from eadb.dbo.RateItems where RGContractID = TMP.RGContractId and RateItemTypeId = 11),0)
  FROM eadb.dbo.Ratecontract TMP
  WHERE Composite <>0 and RGContractID not in (860, 1129, 915, 948, 978, 979)  
)X
  group by RateGroup, Composite, Medical, Dental, Vision, PensionEmployee
, PensionEmployer, Individual, NewIAP, HWRetMedical, HWRetDental, HWRetVision
, CSATF1, CSATF2
--  order by rategroup, fromdate
 
GO
 
CREATE View [dbo].[vwRateGroupClassification_all]  
AS  
 SELECT distinct RateGroup, Composite, FromDate, ToDate,  
  ToHealthSystem  = case when Medical > 0 or Dental > 0 or Vision > 0 then 1 else 0 end,  
  ToPensionSystem = case when PensionEmployee > 0 or PensionEmployer > 0 or Individual > 0 or NewIAP > 0 then 1 else 0 end,  
  ActiveHealth  = case when Medical > 0 or Dental > 0 or Vision > 0 then 1 else 0 end,  
  Pension = case when PensionEmployee > 0 or PensionEmployer > 0 then 1 else 0 end,  
  IAP = case when Individual > 0 then 1 else 0 end,  
  IAPPercent = case when NewIAP > 0 then 1 else 0 end,  
  RetireeHealth = case when HWRETMEDICAL > 0 or HWRETDENTAL > 0 or HWRETVISION > 0 then 1 else 0 end,  
  CSATF = case when CSATF1 > 0 or CSATF2 > 0 then 1 else 0 end  
 from vwRateGroupBreakdown_all  
GO




------------------------------------------------------------------------------------------------------------------------
--Created By	:	Puneet Punjabi
--Created On	:	18 July 2012
--Description	:	Scripts for creation of View vw_PensionInterface4OPUS
------------------------------------------------------------------------------------------------------------------------


USE [EADB]
GO

/****** Object:  View [dbo].[vw_PensionInterface4OPUS]    Script Date: 07/18/2012 10:39:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

Create VIEW [dbo].[vw_PensionInterface4OPUS]
AS
/*******************************************************************************
**		Change History
*******************************************************************************
**		Date:		Author:				Description:
**		--------  -------------------	-----------------------
**		10/31/2011 Mazher Mian			This is a test interface for OPUS based
**										on Ajays suggestion.
**		11/01/2011 Mazher Mian			Enhanced to identify late hours by month or by year.
**		11/02/2011 Mazher Mian			Change view to use new view vwRateGroupClassification_all
**										instead of vwRateGroupClassification. This will take care
**										of historical rate groups where one rate group can have multiple 
**										combination or Pension, IAP, and retiree health. E.g. 61 and 71.
**		11/25/2011 Mazher Mian			This view gives all EA hours
**										both C/S and HPTransactions.
		12/05/2011	Mazher Mian			Updated column order and schema.
-- IAPHours column is same as PensionHours in order to calculate IAP allocation
	Special rules apply to RG 66 (which has 60 pension hrs only, and IAP .305 is being paid by RG08)
	and RG 42 which is not paying either IAP hoursly or IAP percent.
		12/06/2011	Mazher Mian			Added CPAS and PreMerger table also.
-- For PreMerger view
	--Selecting union code for Local Pre-Merger hours.
	-- L52=26; L161=29; L600=16; L666=17; L700=40
	--Selecting Employer id for Locals Pre-Merger hours.
	-- L161=14002; L52=13363; L600=3596; L666=3597; L700=12904
-------Current data selection:-------------------------------------------------------------------------------
From EA client server:
	All the data except data entered for Local per-merger
	based on Employer Id used to enter pre-merger date. EmpAccountNo not in (14002,13363,3596,3597,12904)
From HPTransactions table:
	All the data from plan year 1995 onward.
	Condition = where not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
From CPAS table:
	All the Pre-1995 data.
	where TDate <= '12/24/1994' and PDate <= '02/21/1995'
	Condition = Where {Plan] = 2 (only MPI Hours)
From Pre-Merger table:
	All the Pre-Merger data is comming from a seperate source (and Excel sheet which is imported in SQL
	table Pension_PreMerger_Annual_History
-----------------------------------------------------------------------------------------------------------
Note:- Some Rate Group information are missing and need to be updated in 
	CPAS data table
	PreMerger table 
	HPTransactions table	
**	
*******************************************************************************/
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join eadb.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join pid.dbo.Person p on hours.ssn = p.ssn
where EmpAccountNo not in (14002,13363,3596,3597,12904)	
union
select	
	ReportID = HPTransactions.Ber,
	EmpAccountNo = convert(int, HPTransactions.Employer),
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
from eadb.dbo.HPTransactions HPTransactions
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = RGC.RateGroup and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = rgb.rategroup and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
where not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
UNION
--CPAS View
select	
	ReportID = left(cpas.erractid,18),
	EmpAccountNo = convert(int, cpas.ERKey),
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = convert(char(50),p.LastName),
	FirstName = convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	from eadb.dbo.CPASPre95_11222011 cpas
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	where [Plan]=2
UNION	
--PreMerger View.
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = convert(char(50),p.LastName),
	FirstName = convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), --(L52=26; L161=29; L600=16; L666=17; L700=40)
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
from eadb.dbo.Pension_PreMerger_Annual_History Pre
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	left outer join pid.dbo.Person p on Pre.ssn = p.ssn

GO

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_PensionLateHours]    Script Date: 08/15/2012 23:57:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Hitesh Vibhakar
-- Create date: 08/13/2012
-- Description:	Late Hours Reported
-- =============================================
CREATE PROCEDURE [dbo].[usp_PensionLateHours]
	@BatchRunDate smalldatetime
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime
BEGIN
	SET NOCOUNT ON;
    
    SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
    SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
	
	
     	    select  
					P.PersonID MPID,
					P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
					REPORT.FROMDATE PAYPERIODSTARTDATE,
					REPORT.TODATE PAYPERIODENDDATE,
					REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
									when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
									else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
					IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
					IAPPercent = Hours.IAPValue,
					REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end        
									
			from	eadb.dbo.Report report
            inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
			inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)			
			left outer join pid.dbo.Person p on hours.ssn = p.ssn
			where EmpAccountNo not in (14002,13363,3596,3597,12904)	and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE 
   
END



/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataAfterRetirement]    Script Date: 08/31/2012 19:11:31 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROC [dbo].[usp_GetWorkDataAfterRetirement](@SSN char(10),@RETIREMENT_DATE DateTime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent
FROM @PensionWorkHistory AS VPIO 
where VPIO.SSN=@SSN AND VPIO.FromDate > @RETIREMENT_DATE
END



GO



/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataBetweenTwoDates]    Script Date: 08/31/2012 19:12:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROC [dbo].[usp_GetWorkDataBetweenTwoDates](@SSN char(10),@FROM_DATE datetime,@TO_DATE datetime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent
FROM @PensionWorkHistory AS VPIO 
where VPIO.SSN=@SSN AND VPIO.FromDate > @FROM_DATE and VPIO.ToDate <= @TO_DATE
END
GO



/****** Object:  StoredProcedure [dbo].[Get_PreviousMonths_LateHours_And_Contributions]    Script Date: 09/04/2012 14:49:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================================
-- Author:		Rohan Adgaonkar
-- Create date: 08/21/2012
-- Update date: 09/04/2012
-- Description:	Get Previous Months LateHours And Contributions
-- =============================================================
ALTER PROC [dbo].[Get_PreviousMonths_LateHours_And_Contributions] (@BATCH_RUN_DATE DATETIME)
AS
BEGIN
SET NOCOUNT ON

DECLARE @PENSION_LATE_HOURS TABLE
(
	[SEQ_NO] INT IDENTITY(1,1) NOT NULL, 
	MPID NVARCHAR(20),
	SSN FLOAT,
	PAY_PERIOD_START_DATE SMALLDATETIME,
	PAY_PERIOD_END_DATE SMALLDATETIME,
	PROCESSED_DATE SMALLDATETIME,
	PENSION_HOURS FLOAT,
	IAPHOURS FLOAT,
	IAPHOURSA2 FLOAT,
	IAPPERCENT FLOAT,
	REPORT_STATUS CHAR(1)
)

DECLARE @ENDDATE DATETIME
DECLARE @BEGINDATE DATETIME

SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BATCH_RUN_DATE)),@BATCH_RUN_DATE),101))
SET @BEGINDATE = (SELECT CONVERT(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BATCH_RUN_DATE) - 1) ,DATEADD(mm,-1,@BATCH_RUN_DATE)),101))

SELECT DISTINCT 
		SP.PERSON_ID ,SP.MPI_PERSON_ID, 0 as UVHP_AMOUNT,0 as COMPUTATIONAL_YEAR,SPA.PAYEE_ACCOUNT_ID,SBCH.RETIREMENT_DATE,SBCH.MODIFIED_DATE, REPORTSTATUS = 'L'
FROM 
		SGT_PERSON SP 
		INNER JOIN SGT_BENEFIT_CALCULATION_HEADER SBCH ON SP.PERSON_ID = SBCH.PERSON_ID
		INNER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBCD.BENEFIT_CALCULATION_HEADER_ID
		INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.BENEFIT_CALCULATION_DETAIL_ID = SBCD.BENEFIT_CALCULATION_DETAIL_ID
		INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID
		AND SPAS.STATUS_ID =(SELECT TOP 1 Q.STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.MODIFIED_DATE DESC)
		
WHERE 
	((SBCD.PLAN_ID = 1 AND SPAS.STATUS_VALUE IN ('APRD','REVW','CMPL')) OR (SBCD.PLAN_ID <> 1 AND SPAS.STATUS_VALUE NOT IN ('CNCL')))
	AND SBCH.STATUS_VALUE = 'APPR'
		
UNION

SELECT DISTINCT
	  SPA.PERSON_ID,SP.MPI_PERSON_ID, SUM(UVHP_AMOUNT) AS UVHP_AMOUNT, cast(SPARC.COMPUTATIONAL_YEAR as int), PAYEE_ACCOUNT_ID,NULL AS RETIREMENT_DATE,NULL AS MODIFIED_DATE, REPORTSTATUS = 'R'
FROM
	 SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC
	 join SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID
	 join SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID
	 join SGT_BENEFIT_APPLICATION SBA on SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE = 'RTMT'
	  LEFT JOIN SGT_PAYEE_ACCOUNT SPAE ON SPAE.PERSON_ID = SP.PERSON_ID AND SPAE.BENEFIT_ACCOUNT_TYPE_VALUE='WDRL'
WHERE
	SPARC.TRANSACTION_DATE >=  @BEGINDATE AND 
	       SPARC.TRANSACTION_DATE <= @ENDDATE 
	        AND exists (select * from SGT_BENEFIT_APPLICATION SBA where SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE = 'RTMT' and SBA.APPLICATION_STATUS_VALUE = 'APPR'
	        and SPARC.EFFECTIVE_DATE <= SBA.RETIREMENT_DATE)
	       group by COMPUTATIONAL_YEAR, SPAE.PAYEE_ACCOUNT_ID,SP.MPI_PERSON_ID, SPA.PERSON_ID having SUM(SPARC.UVHP_AMOUNT)!= 0
	       
END







/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataBetweenTwoDates]    Script Date: 09/11/2012 17:06:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================================
-- Author:		Rohan Adgaonkar
-- Create date: 08/21/2012
-- Update date: 09/11/2012
-- Description:	Get WorkData Between Two Dates
-- =============================================================

ALTER PROC [dbo].[usp_GetWorkDataBetweenTwoDates](@SSN char(10),@PLANCODE varchar(20),@FROM_DATE datetime,@TO_DATE datetime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 


INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN


IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @FROM_DATE and VPIO.ToDate <= @TO_DATE ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS IAP_PERCENT,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @FROM_DATE and VPIO.ToDate <= @TO_DATE ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear  and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) 
ELSE NULL END AS VESTED_HOURS,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @FROM_DATE and VPIO.ToDate <= @TO_DATE ORDER BY YEAR
END
END



-- =============================================================
-- Author:		Rashmi Sheri
-- Update date: 09/20/2012
-- Description:	IAP Hours Between Two Dates
-- =============================================================


/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataAfterRetirement]    Script Date: 09/20/2012 14:19:32 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




ALTER PROC [dbo].[usp_GetWorkDataAfterRetirement](@SSN char(10),@RETIREMENT_DATE DateTime,@TO_DATE DateTime=NULL)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks
FROM @PensionWorkHistory AS VPIO 
where VPIO.SSN=@SSN AND VPIO.FromDate > @RETIREMENT_DATE AND (VPIO.ToDate <=@TO_DATE OR @TO_DATE IS NULL)
END
GO



-- =============================================================
-- Author:		Rashmi Sheri
-- Update date: 09/26/2012
-- Description:	Modified usp_GetWorkDataAfterRetirement to get OldEmployerAddress
-- =============================================================



/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataAfterRetirement]    Script Date: 09/26/2012 06:44:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



ALTER PROC [dbo].[usp_GetWorkDataAfterRetirement](@SSN char(10),@RETIREMENT_DATE DateTime,@TO_DATE DateTime=NULL)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks,VPIO.OldEmployerNum,EMPR.EmployerName,EMPR.Address1,EMPR.City,EMPR.Address2,EMPR.State,EMPR.Contact1,EMPR.PostalCode,EMPR.Contact2
FROM @PensionWorkHistory AS VPIO INNER JOIN Employer EMPR ON VPIO.OldEmployerNum = EMPR.OldEmployerNum
where VPIO.SSN=@SSN AND VPIO.FromDate > @RETIREMENT_DATE AND (VPIO.ToDate <=@TO_DATE OR @TO_DATE IS NULL)
END
go



/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataBetweenTwoDates]    Script Date: 10/05/2012 17:35:22 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================================
-- Author:		Rohan Adgaonkar
-- Create date: 08/21/2012
-- Update date: 10/05/2012
-- Description:	Get WorkData Between Two Dates
-- =============================================================

ALTER PROC [dbo].[usp_GetWorkDataBetweenTwoDates](@SSN char(10),@PLANCODE varchar(20),@FROM_DATE datetime,@TO_DATE datetime
,@PROCESSED_FROM_DATE DATETIME = null,@PROCESSED_TO_DATE DATETIME = null)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 


INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN


IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @FROM_DATE and VPIO.ToDate <= @TO_DATE ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) AS IAP_PERCENT,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @FROM_DATE and VPIO.ToDate <= @TO_DATE ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and FromDate >= @FROM_DATE and ToDate <= @TO_DATE)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear  and FromDate >= @FROM_DATE and ToDate <= @TO_DATE) 
ELSE NULL END AS VESTED_HOURS,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.FromDate >= @FROM_DATE and VPIO.ToDate <= @TO_DATE ORDER BY YEAR
END

IF @PROCESSED_FROM_DATE IS NOT NULL AND @PROCESSED_TO_DATE IS NOT NULL AND
 EXISTS (SELECT * FROM @PensionWorkHistory WHERE LateAnnual = 'Y' AND Processed BETWEEN @PROCESSED_FROM_DATE AND @PROCESSED_TO_DATE)
RETURN 1
ELSE
RETURN 0

END
Go
-- =============================================================
-- Modified By:	Mahua Banerjee
-- Modified Date: 10/19/2012
-- Description:	Get WorkData Between Two Dates
-- =============================================================

ALTER PROC [dbo].[usp_GetHealthWorkData](@SSN char(10),@BATCH_RUN_DATE DATETIME)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT ComputationYear AS YEAR,SUM(RetireeHealthHours) AS QUALIFIED_HOURS, SUM(CASE WHEN PENSIONPLAN = 2 THEN PensionHours ELSE 0.0 END) AS  idcPensionHours_healthBatch,
SUM(IAPHours) AS idcIAPHours_healthBatch
FROM @PensionWorkHistory 
where ToDate <= @BATCH_RUN_DATE
GROUP BY ComputationYear
ORDER BY ComputationYear

END


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================================
-- CREATED By:	Mahua Banerjee
-- Modified Date: 10/25/2012
-- Description:	Get Work History of the participants
-- =============================================================
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATA]    Script Date: 10/25/2012 22:42:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL	
	) 

INSERT INTO @temp  
EXEC opus.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

INSERT INTO OPUS_AnnualStmt_Participant_List
select * from  @temp 

declare @year int
select  @year = PensionYear from @temp

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on hours.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on HPTransactions.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join opus.dbo.SGT_Person p on cpas.mkey = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join opus.dbo.SGT_Person p on Pre.ssn = opus.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName    
from     
(    
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed    
 from [#PensionWorkHistory] v    
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid     
)a    
group by ssn,computationyear,unioncode,empaccountno,employername 
end
GO

-- =============================================================
-- CREATED By:	Kunal Arora
-- Modified Date: 11/16/2012
-- Description:	updated stored procedure to Date > retirementDate
-- =============================================================
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataAfterRetirement]    Script Date: 11/16/2012 01:47:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[usp_GetWorkDataAfterRetirement](@SSN char(10),@RETIREMENT_DATE DateTime,@TO_DATE DateTime=NULL)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks,VPIO.OldEmployerNum,EMPR.EmployerName,EMPR.Address1,EMPR.City,EMPR.Address2,EMPR.State,EMPR.Contact1,EMPR.PostalCode,EMPR.Contact2
FROM @PensionWorkHistory AS VPIO INNER JOIN Employer EMPR ON VPIO.OldEmployerNum = EMPR.OldEmployerNum
where VPIO.SSN=@SSN AND  VPIO.ToDate>@RETIREMENT_DATE AND (VPIO.ToDate <=@TO_DATE OR @TO_DATE IS NULL)
END
go




-- ==========================================================================
-- CREATED By:	Rohan Adgaonkar
-- Modified Date: 11/30/2012
-- Description:	Created stored procedure usp_GetHoursProcessedPreviousDay
-- ==========================================================================

CREATE PROC usp_GetHoursProcessedPreviousDay
as begin
select h.SSN,r.fromdate,r.todate,h.hoursworked,convert(varchar(12),r.processdate,101)Processdate 
from EADB.dbo.hours h 
inner join EADB.dbo.report r on r.reportid = h.reportid and r.status = 0 and 
convert(varchar(12),r.processdate,101) = convert(varchar(12),getdate()-1,101)
end

go



-- ==========================================================================
-- CREATED By:	Rohan Adgaonkar
-- Modified Date: 11/30/2012
-- Description:	Created stored procedure usp_HoursAfterRetirement
-- ==========================================================================

/****** Object:  StoredProcedure [dbo].[usp_HoursAfterRetirement]    Script Date: 04/11/2012 12:03:06 ******/
CREATE PROC [dbo].[usp_HoursAfterRetirement](@SSN char(10),@RETIREMENT_DATE datetime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT ComputationYear AS ComputationYear, FromDate AS FromDate, ToDate ToDate, Processed AS ProcessedDate,
PensionHours AS PensionHours,IAPHours,IAPHoursA2,IAPPercent,Weeks,PensionPlan AS PensionPlan,OldEmployerNum FROM @PensionWorkHistory 
where SSN=@SSN and cast(Processed as datetime) > @RETIREMENT_DATE 
and (LateMonthly='Y' or LateAnnual='Y')

END


GO




-- =============================================================
-- Modified By: Aarti Shinde
-- Create date: 12/07/2012
-- Description:	New Procedure usp_GetWorkDataForSSNMerge
-- =============================================================



/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForSSNMerge]    Script Date: 12/07/2012 15:22:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetWorkDataForSSNMerge](@SSN char(10)) 
AS
BEGIN
SET NOCOUNT ON;

   DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks,VPIO.OldEmployerNum,EMPR.EmployerName,EMPR.Address1,EMPR.City,EMPR.Address2,EMPR.State,EMPR.Contact1,EMPR.PostalCode,EMPR.Contact2
FROM @PensionWorkHistory AS VPIO left JOIN Employer EMPR ON VPIO.OldEmployerNum = EMPR.OldEmployerNum
where VPIO.SSN=@SSN 
END


GO

-- =============================================================
-- Created By: WASIM PATHAN
-- Create date: 12/11/2012
-- Description:	New Procedure usp_GetOccupationByUnionName
-- =============================================================
CREATE PROC [dbo].[usp_GetOccupationBasebOnUnion](@SSN char(9))
AS
BEGIN
SET NOCOUNT ON
SELECT MAX(r.ToDate), u.Description FROM dbo.Hours h WITH (NOLOCK)
inner join EADB.dbo.report r WITH (NOLOCK) on r.reportid = h.reportid
LEFT OUTER JOIN dbo.Unions u WITH (NOLOCK) on u.UnionCode = h.UnionCode
WHERE SSN = @SSN 
GROUP BY u.Description
END

--=============================================================================
--Modified By: Mahua Banerjee
--Modified On: 12/18/2012
--Purpose: Added Union code in select query
--=============================================================================
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForSSNMerge]    Script Date: 12/18/2012 14:38:54 ******/

/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForSSNMerge]    Script Date: 12/18/2012 14:38:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[usp_GetWorkDataForSSNMerge](@SSN char(10)) 
AS
BEGIN
SET NOCOUNT ON;

   DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT top(1) VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks,VPIO.OldEmployerNum,
EMPR.EmployerName,EMPR.Address1,EMPR.City,EMPR.Address2,
EMPR.State,EMPR.Contact1,EMPR.PostalCode,EMPR.Contact2,VPIO.UnionCode
FROM @PensionWorkHistory AS VPIO left JOIN Employer EMPR ON VPIO.OldEmployerNum = EMPR.OldEmployerNum
where VPIO.SSN=@SSN and EMPR.EmployerName is not null and VPIO.ToDate is not null
order by VPIO.ToDate desc
END
GO


-----------------------------------------------------------------------------------------------
--Name - Rashmi Sheri
--Date - 12/27/2012
--Purpose - modified Stored Proc usp_GETYEARENDEXTRACTIONDATA.
-----------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATA]    Script Date: 12/26/2012 21:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL	
	) 

INSERT INTO @temp  
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

declare @year int
select  @year = PensionYear from @temp

delete from OPUS_AnnualStmt_Participant_List where PensionYear = @year

INSERT INTO OPUS_AnnualStmt_Participant_List
select * from  @temp 

--declare @year int
--set select top(1) @year = PensionYear from @temp

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName    
from     
(    
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed    
 from [#PensionWorkHistory] v    
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid     
)a    
group by ssn,computationyear,unioncode,empaccountno,employername 
end
go


USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_Participant_ins]    Script Date: 12/26/2012 13:13:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-----------------------------------------------------------------------------------------------
--Name -Rohan Adgaonkar
--Date - 12/27/2012
--Purpose - modified Stored Proc usp_Participant_ins.
-----------------------------------------------------------------------------------------------
ALTER procedure [dbo].[usp_Participant_ins] (@SSN varchar(10) = NULL, @LastName varchar(30) = NULL, @FirstName varchar(50) = NULL)
AS
BEGIN
set nocount on
BEGIN TRAN;  
  
BEGIN TRY  
 declare @PersonId varchar(15)  
 declare @LastError int, @LastError1 int  
 SET @LastError = 99999  
 SET @LastError1 = 99998  
  
 --MXIE 4/6/2009  
 declare @Gender varchar(1)  
 declare @DOB smalldatetime --Date of Birth  
 declare @AddressLine1 varchar(60)  
 declare @AddressLine2 varchar(60)  
 declare @City varchar(30)  
 declare @State varchar(2)  
 declare @ZipCode varchar(10)  
 declare @Country varchar(30)
declare @CountryCode varchar(10)
declare @AuditDate smalldatetime
declare @AuditUser varchar(50)  
  
 set @AuditDate = GetDate()
set @AuditUser = dbo.fn_GetUserName(suser_sname())

if @SSN not like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' or @SSN is NULL  
 begin  
  raiserror @LastError 'Participant SSN is invalid. Error inserting participant record.'  
  return @LastError  
 end  
 --MXIE 4/6/2009  
 select top 1 @Gender = Gender,  
   @DOB = convert(datetime, substring(birthdate, 1, 2) + '/' + substring(birthdate, 3, 2) + '/' + substring(birthdate, 5, 4)),   
   @AddressLine1 = UPPER(AddressLine1),  
   @AddressLine2 = UPPER(AddressLine2),  
   @City = UPPER(City),  
   @State = UPPER(State),  
   @ZipCode = ZipCode,  
   @Country = case
                when Country is null then 'United States'
                when Country = 'USA' then 'United States'
                when len(ltrim(rtrim(Country))) = 0 then 'United States'
                else ltrim(rtrim(Country))
              end
from FPDB.dbo.FileDetail  
 where ssn = @SSN  
 order by FileID DESC, RecordID DESC 

-- set @CountryCode =  isnull(pid.dbo.ufn_CountryCodeByName(@Country),'US')
set @CountryCode =  isnull((select data1 from OPUS.dbo.SGS_CODE_VALUE where CODE_ID = 151 and DESCRIPTION = @Country),'US') -- Country
-- set @Country = pid.dbo.ufn_CountryByCode(@CountryCode)
set @LastName = UPPER(@LastName)
set @FirstName = UPPER(@FirstName) 
 
 if not exists(select 1 from OPUS.DBO.SGT_PERSON where OPUS.dbo.fn_GET_DECRYPTED_TEXT(ssn) = @SSN)  
      begin  
      --MXIE 4/6/2009  
            exec @LastError = OPUS.dbo.INSERT_PERSON_INFO_INTO_OPUS @MPI_PERSON_ID = @PersonId output  
             , @SSN=@SSN   
             , @GENDER_VALUE = @Gender  
             , @First_Name=@FirstName
             , @Middle_Name=NULL
             , @Last_Name= @LastName
             , @Date_Of_Birth = @DOB
             , @Addr_Line_1 = @AddressLine1  
                   , @Addr_Line_2 = @AddressLine2  
                   , @Addr_City = @City  
                   , @STATE = @State
                  , @ZIP = @ZipCode
                 , @Addr_Country_Value = @CountryCode 
                 , @Start_Date = @AuditDate
                 , @Created_By = @AuditUser
                 , @Update = null

        if @LastError <> 0  
              raiserror @LastError 'Error inserting participant record.'  
        --Sid Jain - @LastError1 not needed as OPUS will insert address and participant through the same above stored procedure.
        --else  
        ----MXIE 4/6/2009  
        --if @LastError1 <> 0  
        --      raiserror @LastError1 'Error inserting participant address record.'  
        else  
              insert into Participant (SSN, PersonId, FirstName, LastName, CreateDate, CreatedBy)  
              values (@SSN, @PersonId, @FirstName, @LastName, getdate(), dbo.fn_GetUserName(suser_sname()))  
      end  
 else  
      begin  
            if not exists(select 1 from Participant where ssn = @SSN)  
                  begin  
                        select @PersonId = MPI_Person_Id from OPUS.dbo.SGT_PERSON where ssn = @SSN  
                           --MXIE 4/6/2009  
                        --   update pid.dbo.person  
                        --   set LastName = case when Rtrim(isnull(@LastName, '')) <> ''and Rtrim(isnull(LastName, '')) = '' then @LastName else LastName end  
                        --    , FirstName = case when Rtrim(isnull(@FirstName, '')) <> ''and Rtrim(isnull(FirstName, '')) = '' then @FirstName else FirstName end  
                        --    , Gender = case when Rtrim(isnull(@Gender, '')) <> ''and Rtrim(isnull(Gender, '')) = '' then @Gender else Gender end  
                        --    , DateOfBirth = case when Rtrim(isnull(@DOB, '')) <> ''and Rtrim(isnull(DateOfBirth, '')) = '' then @DOB else DateOfBirth end  
                        --   where ssn = @SSN  
                        if not exists(select 1 from OPUS.dbo.SGT_PERSON_ADDRESS where PERSON_ID = (select Person_ID from OPUS.dbo.sgt_person where MPI_PERSON_ID = @PersonId)  )
                              Begin   
                              --MXIE 4/6/2009
                              if (@AddressLine1 is not null and len(ltrim(rtrim(@AddressLine1))) <> 0) or 
                               (@AddressLine2 is not null and len(ltrim(rtrim(@AddressLine2))) <> 0) or
                              (@City is not null and len(ltrim(rtrim(@City))) <> 0)                 or
                              (@State is not null and len(ltrim(rtrim(@State))) <> 0)   
                                    begin
                                          exec @LastError = OPUS.dbo.INSERT_PERSON_INFO_INTO_OPUS @MPI_PERSON_ID = @PersonId output  
                                                 , @SSN=@SSN   
                                                 , @GENDER_VALUE = @Gender  
                                                 , @First_Name=@FirstName
                                                , @Middle_Name=NULL
                                                , @Last_Name= @LastName
                                                , @Date_Of_Birth = @DOB
                                                , @Addr_Line_1 = @AddressLine1  
                                                 , @Addr_Line_2 = @AddressLine2  
                                                 , @Addr_City = @City  
                                                 , @STATE = @State
                                                , @ZIP = @ZipCode
                                                , @Addr_Country_Value = @CountryCode 
                                                 , @Start_Date = @AuditDate
                                                , @Created_By = @AuditUser
                                                , @Update = 'I'
                                                  

                                    end
                              else
                                    begin
                                          set @LastError1 = 0
                                    end
                              if @LastError1 <> 0  
                               raiserror @LastError1 'Error inserting person address record in PID.'  
                        end  
                     --MXIE 4/6/2009 it doesn't make sense to run the following sp when this person exists in PID, so this sp was commented out...  
                     --exec @LastError = pid.dbo.USP_Person_ins_Ext @PersonId = @PersonId output, @SSN=@SSN,@LastName=@LastName,@FirstName=@FirstName  
                     if @PersonId is null or rtrim(@PersonId)=''  
                        raiserror @LastError 'Error inserting participant record in EADB.'  
                     else  
                        insert into Participant (SSN, PersonId, FirstName, LastName, CreateDate, CreatedBy)  
                        values (@SSN, @PersonId, @FirstName, @LastName, getdate(), dbo.fn_getusername(suser_sname()))  
                  end  
  -- update name if firstname = 'NO NAME'  
 end  

 --return @LastError  
END TRY  
  
BEGIN CATCH  
 select ERROR_NUMBER() AS ErrorNumber,  
   ERROR_SEVERITY() AS ErrorSeverity,  
   ERROR_STATE() as ErrorState,  
   ERROR_PROCEDURE() as ErrorProcedure,  
   ERROR_LINE() as ErrorLine,  
   ERROR_MESSAGE() as ErrorMessage;  
 IF @@TRANCOUNT > 0  
        ROLLBACK TRAN;  
END CATCH;  
  
 IF @@TRANCOUNT > 0  
        
        COMMIT TRAN;  
END



COMMIT
go


-----------------------------------------------------------------------------------------------
--Name -Mahua Banerjee
--Date - 01/03/2013
--Purpose - Added procedure to update SSN on EADB
-----------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[USP_PID_Merge]    Script Date: 01/02/2013 23:15:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		Mazher
-- Create date: 07/17/2008
-- Description:	SP to call for PID Merge in Employer Account
--
--Modification History
--
-- =============================================
CREATE PROCEDURE [dbo].[USP_PID_Merge]
		@OldPID			varchar(15),
		@OldSSN			varchar(10),
		@NewPID			varchar(15),
		@NewSSN			varchar(10),
		@debug bit = 0

AS
BEGIN
set nocount on

	declare @newold char(1), @rtn int
	set @newold = 'e'

	if exists (select 1 from Participant WHERE SSN = @OldSSN)
	begin
		-- Check what to perform merging existing participants or changing participants SSN
		if not exists (select 1 from Participant where SSN = @NewSSN)
		begin
			set @newold = 'n'
			Update Participant Set PersonId = @NewPID, SSN = @NewSSN where ssn = @oldssn and PersonId = @OldPid
			update Shareholder set PersonId = @NewPID, ssn = @newssn, AccountNO = @newssn where ssn = @oldssn and PersonId = @OldPid	
		end
		else
		begin
			delete from Participant where ssn = @oldssn and PersonId = @OldPid
		end

		--Merge Hours, Also Merge EA Notes
--		exec @rtn =  eadb.dbo.MergeHours @OldSSN, @NewSSN, @NewOld ,@debug     
--		if @rtn != 0
--		begin
--			raiserror 99999 'An error has occurred merging hours from the EA Hours table.'
--			return 99999
--		end 
	end

	if exists (select 1 from Shareholder WHERE SSN = @OldSSN)
	begin
		update Shareholder set PersonId = @NewPID, ssn = @newssn, AccountNO = @newssn where ssn = @oldssn and PersonId = @OldPid	
	end

--	-- If either of the PIDs exist
--	if exists (select 1 from Participant WHERE PersonId = @OldPID)
--	or exists (select 1 from Participant WHERE PersonId = @NewPID)
--	Begin
--		if not exists (select 1 from Participant WHERE PersonId = @OldPID)
--		begin
--			return 0
--		end
--
--		if not exists (select 1 from Participant WHERE PersonId = @NewPID)
--		begin
--			Update Participant Set PersonId = @NewPID, SSN = @NewSSN where ssn = @oldssn and PersonId = @OldPid
--		end
--
--		if  exists (select 1 from Participant WHERE PersonId = @OldPID)
--		and exists (select 1 from Participant WHERE PersonId = @NewPID)
--		Begin	
--			delete from Participant where PersonId = @OldPID
--		End 
--
--		if not exists (select 1 from shareholder WHERE PersonId = @NewPID)
--		begin
--			update Shareholder set PersonId = @NewPID, ssn = @newssn, AccountNO = @newssn where ssn = @oldssn and PersonId = @OldPid	
--		end
--	End
		
return 0
END


GO


-----------------------------------------------------------------------------------------------
--Name - Abhishek Sharma
--Date - 01/04/2013
--Purpose - Added scripts for create table [OPUS_Participant_List]
-----------------------------------------------------------------------------------------------

/****** Object:  Table [dbo].[OPUS_Participant_List]    Script Date: 01/03/2013 14:32:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [dbo].[OPUS_Participant_List](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SSN] [varchar](9) NULL
 CONSTRAINT [PK_OPUS_Participant_List] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO


---------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
                [SSN] [varchar](9) NULL                
                ) 

INSERT INTO @temp  
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]

delete from OPUS_Participant_List 

INSERT INTO OPUS_Participant_List
select * from  @temp 

                                
CREATE TABLE [#PensionWorkHistory](
                [ReportID] [varchar](18) NULL,
                [EmpAccountNo] [int] NULL,
                [ComputationYear] [smallint] NULL,
                [FromDate] [smalldatetime] NULL,
                [ToDate] [smalldatetime] NULL,
                [Weeks] [char](2) NULL,
                [Received] [smalldatetime] NULL,
                [Processed] [smalldatetime] NULL,
                [HoursID] [varchar](24) NULL,
                [SSN] [char](9) NULL,
                [LastName] [varchar](50) NULL,
                [FirstName] [varchar](50) NULL,
                [UnionCode] [int] NULL,
                [PensionPlan] [smallint] NULL,
                [PensionCredit] [numeric](7, 3) NULL,
                [L52VestedCredit] [smallint] NULL,
                [PensionHours] [numeric](7, 1) NULL,
                [IAPHours] [numeric](7, 1) NULL,
                [IAPHoursA2] [numeric](7, 1) NULL,
                [IAPPercent] [money] NULL,
                [ActiveHealthHours] [numeric](7, 1) NULL,
                [RetireeHealthHours] [numeric](7, 1) NULL,
                [PersonId] [varchar](15) NULL,
                [RateGroup] [varchar](4) NULL,
                [HoursStatus] [int] NULL,
                [LateMonthly] [varchar](1) NOT NULL,
                [LateAnnual] [varchar](1) NOT NULL,
                [UnionMisc] [char](2) NULL,
                [HoursWorked] [numeric](7, 1) NULL,
                [IAPHourlyRate] [money] NULL,
                [Source] [varchar](4) NOT NULL,
                [ToHealthSystem] [int] NULL,
                [ToPensionSystem] [int] NULL,
                [IsActiveHealth] [int] NULL,
                [IsRetireeHealth] [int] NULL,
                [IsPension] [int] NULL,
                [IsIAPHourly] [int] NULL
                , [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
                EmpAccountNo = E.EmployerId,
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
                Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
                SSN = convert(char(9),Hours.SSN),
                LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
                FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
                UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
                IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
                IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
                ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
                RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
                NULL PersonId, --varchar(15) no change
                RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
                HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
                LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
                LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = Hours.UnionMisc, --New field. char(2)
                HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
                                                                                                                                --It is required because for those records where we do not have any rate group info
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
                IAPHourlyRate = rgb.Individual  --New field. money
                , Source = 'C/S '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = e.OldEmployerNum
from OPUS_Participant_List list 
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
                inner join eadb.dbo.Report report on report.reportid = hours.reportid 
                --and hours.SSN = @SSN 
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
                --and report.ToDate between @FromDate and @ToDate             
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select    
                ReportID = HPTransactions.Ber,
                --EmpAccountNo = convert(int, HPTransactions.Employer),
                EmpAccountNo = E.EmployerId,
                PensionYear = PY.PensionYear,
                FromDate = convert(smalldatetime, HPTransactions.StartDate),
                ToDate = convert(smalldatetime, HPTransactions.EndDate),
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),               
                Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
                Received = convert(smalldatetime, HPTransactions.DateReceived),
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
                Processed = convert(smalldatetime,hb.Updated),
                HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
                SSN = convert(char(9),HPTransactions.SSN),
                LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
                FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
                UnionCode = convert(int,HPTransactions.UnionCode),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
                IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
                IAPPercent = convert(money,HPTransactions.IAPDollars),
                ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
                RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
                NULL PersonId,
                RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
                HoursStatus = 0,
                LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = HPTransactions.UNMisc,
                HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'H/P '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , e.OldEmployerNum
from OPUS_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP            
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
                not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
                --and HPTransactions.SSN = @SSN
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
                --and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select    
                ReportID = left(cpas.erractid,18),
                --EmpAccountNo = convert(int, cpas.ERKey),
                EmpAccountNo = E.EmployerId,
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
                FromDate = convert(smalldatetime, cpas.FDate),
                ToDate = convert(smalldatetime, cpas.TDate),
                Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
                Received = convert(smalldatetime, cpas.PDate),
                Processed = convert(smalldatetime, cpas.PDate),
                HoursId = convert(varchar(24),cpas.erractid),
                SSN = convert(char(9),cpas.MKey),
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,cpas.LOC_NO),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
                IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
                IAPPercent = convert(money,cpas.PanOnEarn),
                ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
                RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
                NULL PersonId,
                RateGroup = convert(varchar(4),cpas.RateGroup),
                HoursStatus = 0, --all the hours comming from CPAS are processed.
                LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
                LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
                ---------------------------------------------------------------------
                UnionMisc = null,
                HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
                IAPHourlyRate = rgb.Individual
                , Source = 'CPAS'
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , E.OldEmployerNum
                from OPUS_Participant_List list 
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                where [Plan]=2
                --and cpas.mkey = @SSN
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
                --and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
                EmpAccountNo = convert(int, Pre.EmployerId), 
                ComputationYear = Pre.Plan_Year,
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
                ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
                Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
                Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
                HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
                SSN = convert(char(9),Pre.SSN), 
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,Pre.UnionCode), 
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)
                                                                                                when [Local]='L666' then convert(smallint, 4)
                                                                                                when [Local]='L700' then convert(smallint, 6)
                                                                                                when [Local]='L52' then convert(smallint, 7)
                                                                                                when [Local]='L161' then convert(smallint, 8)
                                                                                                else null end, 
                PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
                L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHours = convert(numeric(7, 1), 0),
                IAPHoursA2 = convert(numeric(7, 1), 0), 
                IAPPercent = convert(money, 0), 
                ActiveHealthHours = convert(numeric(7, 1), 0), 
                RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
                NULL PersonId,
                RateGroup = Pre.RateGroup,--?
                HoursStatus = convert(int, 0),
                LateMonthly = '', 
                LateAnnual = '' ,
                -------------------------------------------------------------------
                UnionMisc = convert(char(2),''),
                HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'PM  '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = Pre.EmployerId
from OPUS_Participant_List list 
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
                --Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate
--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,VPIO.SSN,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS

FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN
end
GO
-----------------------------------------------------------------------------------------------
--Name -Mahua Banerjee
--Date - 01/04/2013
--Purpose - Modified Procedure to fecth only MPI Plan Work Info
-----------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATA]    Script Date: 01/03/2013 22:49:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL	
	) 

INSERT INTO @temp  
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

declare @year int
select  @year = PensionYear from @temp

delete from OPUS_AnnualStmt_Participant_List

INSERT INTO OPUS_AnnualStmt_Participant_List
select * from  @temp 

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName    
from     
(    
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed    
 from [#PensionWorkHistory] v    
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid
  where v.PensionPlan = 2       
)a    
group by ssn,computationyear,unioncode,empaccountno,employername 
end
go


-----------------------------------------------------------------------------------------------
--Name -Rohan Adgaonkar
--Date - 01/10/2013
--Purpose - Modified Procedure usp_PensionInterface4OPUS_By_Dates
-----------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS_By_Dates]    Script Date: 01/09/2013 10:24:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER Procedure [dbo].[usp_PensionInterface4OPUS_By_Dates]
(@Year int, @FromDate smalldatetime = null,@ToDate smalldatetime = null)
AS
BEGIN
set nocount on
	--Declare @FromDate smalldatetime,@ToDate smalldatetime,@Debug int
	--select @Debug = 0
	
	if ((@FromDate is null or @ToDate is null) and @Year is not null)
	begin
		Select  @FromDate = StartDate, @ToDate = EndDate
		From	EADB.dbo.PensionYear	
		where	PensionYear = @Year
	end

		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
go

-----------------------------------------------------------------------------------------------
--Name -Rohan Adgaonkar
--Date - 01/10/2013
--Purpose - Modified Procedure usp_PensionInterface4OPUS
-----------------------------------------------------------------------------------------------
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS]    Script Date: 01/09/2013 10:23:46 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER Procedure [dbo].[usp_PensionInterface4OPUS] (@SSN char(9)=null)
AS
BEGIN
set nocount on
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL AS PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL AS PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL AS PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
go

-----------------------------------------------------------------------------------------------
--Name - Rohan Adgaonkar
--Date - 01/11/2013
--Purpose - usp_GETYEARENDEXTRACTIONDATA
-----------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATA]    Script Date: 01/03/2013 22:49:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL	
	) 

INSERT INTO @temp  
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

declare @year int
select  @year = PensionYear from @temp

delete from OPUS_AnnualStmt_Participant_List

INSERT INTO OPUS_AnnualStmt_Participant_List
select * from  @temp 

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName    
from     
(    
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed    
 from [#PensionWorkHistory] v    
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid
  where v.PensionPlan = 2       
)a    
group by ssn,computationyear,unioncode,empaccountno,employername 
end
go

-----------------------------------------------------------------------------------------------
--Name -Rohan Adgaonkar
--Date - 01/10/2013
--Purpose - Modified Procedure usp_GetWorkHistoryForAllMpippParticipant
-----------------------------------------------------------------------------------------------
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 01/10/2013 16:56:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant]
AS
BEGIN
SET NOCOUNT ON
--DECLARE @OPUS_AnnualStmt_Participant_List TABLE(
--	[ID] [int] NOT NULL,
--	[SSN] [varchar](9) NULL,
--	[PensionYear] [int] NULL	
--	) 

INSERT INTO OPUS_AnnualStmt_Participant_List  
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

declare @year int
set @year = 2011

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
    --we are not checking rate item to identify hours for Pension, Health, or IAP
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
    IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
    IAPPercent = convert(money,cpas.PanOnEarn),
    --MM 12/26/12
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
    ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
    RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,VPIO.SSN,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN
end
go


-----------------------------------------------------------------------------------------------
--Name - Rohan Adgaonkar
--Date - 01/11/2013
--Purpose - ALTER usp_GetWorkHistoryForAllMpippParticipant
-----------------------------------------------------------------------------------------------

ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
                [SSN] [varchar](9) NULL                
                ) 

INSERT INTO @temp  
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]

delete from OPUS_Participant_List 

INSERT INTO OPUS_Participant_List
select * from  @temp 

                                
CREATE TABLE [#PensionWorkHistory](
                [ReportID] [varchar](18) NULL,
                [EmpAccountNo] [int] NULL,
                [ComputationYear] [smallint] NULL,
                [FromDate] [smalldatetime] NULL,
                [ToDate] [smalldatetime] NULL,
                [Weeks] [char](2) NULL,
                [Received] [smalldatetime] NULL,
                [Processed] [smalldatetime] NULL,
                [HoursID] [varchar](24) NULL,
                [SSN] [char](9) NULL,
                [LastName] [varchar](50) NULL,
                [FirstName] [varchar](50) NULL,
                [UnionCode] [int] NULL,
                [PensionPlan] [smallint] NULL,
                [PensionCredit] [numeric](7, 3) NULL,
                [L52VestedCredit] [smallint] NULL,
                [PensionHours] [numeric](7, 1) NULL,
                [IAPHours] [numeric](7, 1) NULL,
                [IAPHoursA2] [numeric](7, 1) NULL,
                [IAPPercent] [money] NULL,
                [ActiveHealthHours] [numeric](7, 1) NULL,
                [RetireeHealthHours] [numeric](7, 1) NULL,
                [PersonId] [varchar](15) NULL,
                [RateGroup] [varchar](4) NULL,
                [HoursStatus] [int] NULL,
                [LateMonthly] [varchar](1) NOT NULL,
                [LateAnnual] [varchar](1) NOT NULL,
                [UnionMisc] [char](2) NULL,
                [HoursWorked] [numeric](7, 1) NULL,
                [IAPHourlyRate] [money] NULL,
                [Source] [varchar](4) NOT NULL,
                [ToHealthSystem] [int] NULL,
                [ToPensionSystem] [int] NULL,
                [IsActiveHealth] [int] NULL,
                [IsRetireeHealth] [int] NULL,
                [IsPension] [int] NULL,
                [IsIAPHourly] [int] NULL
                , [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
                EmpAccountNo = E.EmployerId,
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
                Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
                SSN = convert(char(9),Hours.SSN),
                LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
                FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
                UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
                IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
                IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
                ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
                RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
                NULL PersonId, --varchar(15) no change
                RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
                HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
                LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
                LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = Hours.UnionMisc, --New field. char(2)
                HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
                                                                                                                                --It is required because for those records where we do not have any rate group info
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
                IAPHourlyRate = rgb.Individual  --New field. money
                , Source = 'C/S '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = e.OldEmployerNum
from OPUS_Participant_List list 
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
                inner join eadb.dbo.Report report on report.reportid = hours.reportid 
                --and hours.SSN = @SSN 
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
                --and report.ToDate between @FromDate and @ToDate             
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select    
                ReportID = HPTransactions.Ber,
                --EmpAccountNo = convert(int, HPTransactions.Employer),
                EmpAccountNo = E.EmployerId,
                PensionYear = PY.PensionYear,
                FromDate = convert(smalldatetime, HPTransactions.StartDate),
                ToDate = convert(smalldatetime, HPTransactions.EndDate),
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),               
                Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
                Received = convert(smalldatetime, HPTransactions.DateReceived),
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
                Processed = convert(smalldatetime,hb.Updated),
                HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
                SSN = convert(char(9),HPTransactions.SSN),
                LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
                FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
                UnionCode = convert(int,HPTransactions.UnionCode),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
                IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
                IAPPercent = convert(money,HPTransactions.IAPDollars),
                ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
                RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
                NULL PersonId,
                RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
                HoursStatus = 0,
                LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = HPTransactions.UNMisc,
                HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'H/P '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , e.OldEmployerNum
from OPUS_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP            
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
                not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
                --and HPTransactions.SSN = @SSN
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
                --and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select    
                ReportID = left(cpas.erractid,18),
                --EmpAccountNo = convert(int, cpas.ERKey),
                EmpAccountNo = E.EmployerId,
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
                FromDate = convert(smalldatetime, cpas.FDate),
                ToDate = convert(smalldatetime, cpas.TDate),
                Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
                Received = convert(smalldatetime, cpas.PDate),
                Processed = convert(smalldatetime, cpas.PDate),
                HoursId = convert(varchar(24),cpas.erractid),
                SSN = convert(char(9),cpas.MKey),
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,cpas.LOC_NO),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
				--we are not checking rate item to identify hours for Pension, Health, or IAP
				--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
				IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
				IAPPercent = convert(money,cpas.PanOnEarn),
				--MM 12/26/12
				--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
				--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
				ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
				RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
                NULL PersonId,
                RateGroup = convert(varchar(4),cpas.RateGroup),
                HoursStatus = 0, --all the hours comming from CPAS are processed.
                LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
                LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
                ---------------------------------------------------------------------
                UnionMisc = null,
                HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
                IAPHourlyRate = rgb.Individual
                , Source = 'CPAS'
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , E.OldEmployerNum
                from OPUS_Participant_List list 
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                where [Plan]=2
                --and cpas.mkey = @SSN
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
                --and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
                EmpAccountNo = convert(int, Pre.EmployerId), 
                ComputationYear = Pre.Plan_Year,
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
                ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
                Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
                Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
                HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
                SSN = convert(char(9),Pre.SSN), 
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,Pre.UnionCode), 
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)
                                                                                                when [Local]='L666' then convert(smallint, 4)
                                                                                                when [Local]='L700' then convert(smallint, 6)
                                                                                                when [Local]='L52' then convert(smallint, 7)
                                                                                                when [Local]='L161' then convert(smallint, 8)
                                                                                                else null end, 
                PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
                L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHours = convert(numeric(7, 1), 0),
                IAPHoursA2 = convert(numeric(7, 1), 0), 
                IAPPercent = convert(money, 0), 
                ActiveHealthHours = convert(numeric(7, 1), 0), 
                RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
                NULL PersonId,
                RateGroup = Pre.RateGroup,--?
                HoursStatus = convert(int, 0),
                LateMonthly = '', 
                LateAnnual = '' ,
                -------------------------------------------------------------------
                UnionMisc = convert(char(2),''),
                HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'PM  '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = Pre.EmployerId
from OPUS_Participant_List list 
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
                --Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate
--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,VPIO.SSN,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS

FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN
end
GO


-----------------------------------------------------------------------------------------------
--Name - Abhishek Sharma
--Date - 01/17/2013
--Purpose - create proc [usp_GetHealthWorkHistoryForAllMpippParticipant]
-----------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetHealthWorkHistoryForAllMpippParticipant]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
                [SSN] [varchar](9) NULL                
                ) 

INSERT INTO @temp  
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]

delete from OPUS_Participant_List 

INSERT INTO OPUS_Participant_List
select * from  @temp 

                                
CREATE TABLE [#PensionWorkHistory](
                [ReportID] [varchar](18) NULL,
                [EmpAccountNo] [int] NULL,
                [ComputationYear] [smallint] NULL,
                [FromDate] [smalldatetime] NULL,
                [ToDate] [smalldatetime] NULL,
                [Weeks] [char](2) NULL,
                [Received] [smalldatetime] NULL,
                [Processed] [smalldatetime] NULL,
                [HoursID] [varchar](24) NULL,
                [SSN] [char](9) NULL,
                [LastName] [varchar](50) NULL,
                [FirstName] [varchar](50) NULL,
                [UnionCode] [int] NULL,
                [PensionPlan] [smallint] NULL,
                [PensionCredit] [numeric](7, 3) NULL,
                [L52VestedCredit] [smallint] NULL,
                [PensionHours] [numeric](7, 1) NULL,
                [IAPHours] [numeric](7, 1) NULL,
                [IAPHoursA2] [numeric](7, 1) NULL,
                [IAPPercent] [money] NULL,
                [ActiveHealthHours] [numeric](7, 1) NULL,
                [RetireeHealthHours] [numeric](7, 1) NULL,
                [PersonId] [varchar](15) NULL,
                [RateGroup] [varchar](4) NULL,
                [HoursStatus] [int] NULL,
                [LateMonthly] [varchar](1) NOT NULL,
                [LateAnnual] [varchar](1) NOT NULL,
                [UnionMisc] [char](2) NULL,
                [HoursWorked] [numeric](7, 1) NULL,
                [IAPHourlyRate] [money] NULL,
                [Source] [varchar](4) NOT NULL,
                [ToHealthSystem] [int] NULL,
                [ToPensionSystem] [int] NULL,
                [IsActiveHealth] [int] NULL,
                [IsRetireeHealth] [int] NULL,
                [IsPension] [int] NULL,
                [IsIAPHourly] [int] NULL
                , [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
                EmpAccountNo = E.EmployerId,
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
                Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
                SSN = convert(char(9),Hours.SSN),
                LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
                FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
                UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
                IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
                IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
                ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
                RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
                NULL PersonId, --varchar(15) no change
                RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
                HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
                LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
                LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = Hours.UnionMisc, --New field. char(2)
                HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
                                                                                                                                --It is required because for those records where we do not have any rate group info
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
                IAPHourlyRate = rgb.Individual  --New field. money
                , Source = 'C/S '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = e.OldEmployerNum
from OPUS_Participant_List list 
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
                inner join eadb.dbo.Report report on report.reportid = hours.reportid 
                --and hours.SSN = @SSN 
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
                --and report.ToDate between @FromDate and @ToDate             
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select    
                ReportID = HPTransactions.Ber,
                --EmpAccountNo = convert(int, HPTransactions.Employer),
                EmpAccountNo = E.EmployerId,
                PensionYear = PY.PensionYear,
                FromDate = convert(smalldatetime, HPTransactions.StartDate),
                ToDate = convert(smalldatetime, HPTransactions.EndDate),
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),               
                Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
                Received = convert(smalldatetime, HPTransactions.DateReceived),
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
                Processed = convert(smalldatetime,hb.Updated),
                HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
                SSN = convert(char(9),HPTransactions.SSN),
                LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
                FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
                UnionCode = convert(int,HPTransactions.UnionCode),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
                IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
                IAPPercent = convert(money,HPTransactions.IAPDollars),
                ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
                RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
                NULL PersonId,
                RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
                HoursStatus = 0,
                LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = HPTransactions.UNMisc,
                HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'H/P '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , e.OldEmployerNum
from OPUS_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP            
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
                not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
                --and HPTransactions.SSN = @SSN
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
                --and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select    
                ReportID = left(cpas.erractid,18),
                --EmpAccountNo = convert(int, cpas.ERKey),
                EmpAccountNo = E.EmployerId,
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
                FromDate = convert(smalldatetime, cpas.FDate),
                ToDate = convert(smalldatetime, cpas.TDate),
                Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
                Received = convert(smalldatetime, cpas.PDate),
                Processed = convert(smalldatetime, cpas.PDate),
                HoursId = convert(varchar(24),cpas.erractid),
                SSN = convert(char(9),cpas.MKey),
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,cpas.LOC_NO),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
				--we are not checking rate item to identify hours for Pension, Health, or IAP
				--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
				IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
				IAPPercent = convert(money,cpas.PanOnEarn),
				--MM 12/26/12
				--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
				--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
				ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
				RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
                NULL PersonId,
                RateGroup = convert(varchar(4),cpas.RateGroup),
                HoursStatus = 0, --all the hours comming from CPAS are processed.
                LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
                LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
                ---------------------------------------------------------------------
                UnionMisc = null,
                HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
                IAPHourlyRate = rgb.Individual
                , Source = 'CPAS'
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , E.OldEmployerNum
                from OPUS_Participant_List list 
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                where [Plan]=2
                --and cpas.mkey = @SSN
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
                --and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
                EmpAccountNo = convert(int, Pre.EmployerId), 
                ComputationYear = Pre.Plan_Year,
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
                ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
                Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
                Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
                HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
                SSN = convert(char(9),Pre.SSN), 
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,Pre.UnionCode), 
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)
                                                                                                when [Local]='L666' then convert(smallint, 4)
                                                                                                when [Local]='L700' then convert(smallint, 6)
                                                                                                when [Local]='L52' then convert(smallint, 7)
                                                                                                when [Local]='L161' then convert(smallint, 8)
                                                                                                else null end, 
                PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
                L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHours = convert(numeric(7, 1), 0),
                IAPHoursA2 = convert(numeric(7, 1), 0), 
                IAPPercent = convert(money, 0), 
                ActiveHealthHours = convert(numeric(7, 1), 0), 
                RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
                NULL PersonId,
                RateGroup = Pre.RateGroup,--?
                HoursStatus = convert(int, 0),
                LateMonthly = '', 
                LateAnnual = '' ,
                -------------------------------------------------------------------
                UnionMisc = convert(char(2),''),
                HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'PM  '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = Pre.EmployerId
from OPUS_Participant_List list 
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
                --Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate
--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,VPIO.SSN,
(SELECT SUM(RetireeHealthHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS idecTotalHealthHours,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS idcPensionHours_healthBatch,
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS idcIAPHours_healthBatch

FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN
end


-----------------------------------------------------------------------------------------------
--Name - Abhishek Sharma
--Date - 01/17/2013
--Purpose - create proc [usp_GetHealthWorkData]
-----------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[usp_GetHealthWorkData]    Script Date: 01/17/2013 17:57:38 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_GetHealthWorkData]    Script Date: 04/11/2012 12:03:28 ******/
ALTER PROC [dbo].[usp_GetHealthWorkData](@SSN char(10))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT ComputationYear AS YEAR,SUM(RetireeHealthHours) AS idecTotalHealthHours, SUM(CASE WHEN PENSIONPLAN = 2 THEN PensionHours ELSE 0.0 END) AS  idcPensionHours_healthBatch,
SUM(IAPHours) AS idcIAPHours_healthBatch
FROM @PensionWorkHistory
GROUP BY ComputationYear
ORDER BY ComputationYear

END

-----------------------------------------------------------------------------------------------
--Name - Kunal Arora
--Date - 01/17/2013
--Purpose - alter iap snapshot proc for reemployment need weekly hours
-----------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetIAPSnapShotInfo](@FROMDATE DATETIME,@TODATE DATETIME, @COMPUTATIONYEAR int, @ORDERBY CHAR(1)) 
AS
BEGIN
SET NOCOUNT ON
--------------------------------------------------------------------------------------------

CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NULL,
	[LateAnnual] [varchar](1) NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 
insert into [#PensionWorkHistory]
exec usp_pensioninterface4opus_by_dates @COMPUTATIONYEAR,@FROMDATE,@TODATE

IF @ORDERBY = 'Y'
BEGIN
	SELECT * FROM
	(
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,IAPHOURS , IAPHOURSA2, IAPPERCENT, 'N' AS LATE_FLAG,FromDate,ToDate,Weeks
		FROM [#PensionWorkHistory] 
		WHERE ComputationYear = @COMPUTATIONYEAR
		UNION
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN, IAPHOURS, IAPHOURSA2, IAPPERCENT, 'Y' AS LATE_FLAG,FromDate,ToDate,Weeks
		FROM [#PensionWorkHistory]
		WHERE ComputationYear < @COMPUTATIONYEAR 
		AND PROCESSED BETWEEN @FROMDATE AND @TODATE
		AND (LateMonthly = 'Y' or LateAnnual = 'Y')
	) A
	ORDER BY SSN,COMPUTATIONYEAR DESC,EMPACCOUNTNO
END
ELSE
BEGIN
	SELECT * FROM
	(
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT, 'N' AS LATE_FLAG
		FROM [#PensionWorkHistory] 
		WHERE ComputationYear = @COMPUTATIONYEAR
		GROUP BY EMPACCOUNTNO,COMPUTATIONYEAR,SSN	
		UNION
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,SUM(IAPHOURS) IAPHOURS,SUM(IAPHOURSA2) IAPHOURSA2,SUM(IAPPERCENT) IAPPERCENT, 'Y' AS LATE_FLAG
		FROM [#PensionWorkHistory]
		WHERE ComputationYear < @COMPUTATIONYEAR 
		AND PROCESSED BETWEEN @FROMDATE AND @TODATE
		AND (LateMonthly = 'Y' or LateAnnual = 'Y')
		GROUP BY EMPACCOUNTNO,COMPUTATIONYEAR,SSN
	) A
	ORDER BY SSN,COMPUTATIONYEAR,EMPACCOUNTNO
END

drop table [#PensionWorkHistory]

END
go

-----------------------------------------------------------------------------------------------
--Name - Mahua Banerjee
--Date - 01/31/2013
--Purpose - Modified Procedure to include cutoff date
-----------------------------------------------------------------------------------------------

ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL	
	) 

INSERT INTO @temp  
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

declare @year int
select  @year = PensionYear from @temp

delete from OPUS_AnnualStmt_Participant_List

INSERT INTO OPUS_AnnualStmt_Participant_List
select * from  @temp 

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904) and
Report.RecDate <= @CutOffDate
	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName    
from     
(    
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed    
 from [#PensionWorkHistory] v    
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid
  where v.PensionPlan = 2       
)a    
group by ssn,computationyear,unioncode,empaccountno,employername 
end
go




--------------------------------------------------------------------------------------------------------------
--Name - Rashmi Sheri
--Date - 02/01/2013
--Purpose - Modified Store Procedure.(put 1 condition->> Report.RecDate <= isnull(@CutOffDate,Report.RecDate))
--------------------------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATA]    Script Date: 01/31/2013 23:24:22 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL	
	) 

INSERT INTO @temp  
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO

declare @year int
select  @year = PensionYear from @temp

delete from OPUS_AnnualStmt_Participant_List

INSERT INTO OPUS_AnnualStmt_Participant_List
select * from  @temp 

declare @PlanStartDate datetime
declare @PlanEndDate datetime
declare @CutOffDate datetime
	select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list	
	inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
	inner join eadb.dbo.Report report on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate	
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904) and
Report.RecDate <= isnull(@CutOffDate,Report.RecDate)
	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from OPUS_AnnualStmt_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP	
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName    
from     
(    
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed    
 from [#PensionWorkHistory] v    
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid
  where v.PensionPlan = 2       
)a    
group by ssn,computationyear,unioncode,empaccountno,employername 
end

--------------------------------------------------------------------------------------------------------------
--Name - Wasim Pathan
--Date - 02/13/2013
--Purpose - Modifying [usp_GetOccupationBasebOnUnion]
--------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetOccupationBasebOnUnion](@SSN char(9))
AS
BEGIN
SET NOCOUNT ON
SELECT MAX(r.ToDate), u.Name FROM dbo.Hours h WITH (NOLOCK)
inner join EADB.dbo.report r WITH (NOLOCK) on r.reportid = h.reportid
LEFT OUTER JOIN dbo.Unions u WITH (NOLOCK) on u.UnionCode = h.UnionCode
WHERE SSN = @SSN 
GROUP BY u.Name
END
go


--------------------------------------------------------------------------------------------------------------
--Name - Rohan Adgaonkar
--Date - 02/20/2013
--Purpose - Modifying [usp_PensionInterface4OPUS_By_Dates]
--------------------------------------------------------------------------------------------------------------

ALTER Procedure [dbo].[usp_PensionInterface4OPUS_By_Dates]
(@Year int, @FromDate smalldatetime = null,@ToDate smalldatetime = null)
AS
BEGIN
set nocount on
	--Declare @FromDate smalldatetime,@ToDate smalldatetime,@Debug int
	--select @Debug = 0
	
	if ((@FromDate is null or @ToDate is null) and @Year is not null)
	begin
		Select  @FromDate = StartDate, @ToDate = EndDate
		From	EADB.dbo.PensionYear	
		where	PensionYear = @Year
	end
    
    declare @CutOffDate datetime 
	select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @ToDate

		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)
and Report.RecDate<=isnull(@Cutoffdate,Report.RecDate)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
	--and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
	--left outer join pid.dbo.Person p on Pre.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
go


--------------------------------------------------------------------------------------------------------------------
--Name - Abhishek Sharma
--Purpose - GetWorkHistory in one shot for BIS batch related changes. (We need to check vesting only if its required
--Date - 02/24/2013
--------------------------------------------------------------------------------------------------------------------
ALTER TABLE OPUS_Participant_List ADD VESTING_DATE DATETIME NULL
ALTER TABLE OPUS_Participant_List ADD RECALCULATE_VESTING VARCHAR(1) NULL



  
-----------------------------------------------------------------------------------------------  
--Name - Abhishek Sharma  
--Date - 02/24/2013  
--Purpose - ALTER usp_GetWorkHistoryForAllMpippParticipant  
-----------------------------------------------------------------------------------------------  
 
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 02/21/2013 16:15:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                [ReportID] [varchar](18) NULL,  
                [EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                [FromDate] [smalldatetime] NULL,  
                [ToDate] [smalldatetime] NULL,  
                [Weeks] [char](2) NULL,  
                [Received] [smalldatetime] NULL,  
                [Processed] [smalldatetime] NULL,  
                [HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                [LastName] [varchar](50) NULL,  
                [FirstName] [varchar](50) NULL,  
                [UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                [PensionCredit] [numeric](7, 3) NULL,  
                [L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                [IAPHoursA2] [numeric](7, 1) NULL,  
                [IAPPercent] [money] NULL,  
                [ActiveHealthHours] [numeric](7, 1) NULL,  
                [RetireeHealthHours] [numeric](7, 1) NULL,  
                [PersonId] [varchar](15) NULL,  
                [RateGroup] [varchar](4) NULL,  
                [HoursStatus] [int] NULL,  
                [LateMonthly] [varchar](1) NOT NULL,  
                [LateAnnual] [varchar](1) NOT NULL,  
                [UnionMisc] [char](2) NULL,  
                [HoursWorked] [numeric](7, 1) NULL,  
                [IAPHourlyRate] [money] NULL,  
                [Source] [varchar](4) NOT NULL,  
                [ToHealthSystem] [int] NULL,  
                [ToPensionSystem] [int] NULL,  
                [IsActiveHealth] [int] NULL,  
                [IsRetireeHealth] [int] NULL,  
                [IsPension] [int] NULL,  
                [IsIAPHourly] [int] NULL, 
                [OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                PensionCredit = convert(numeric(7, 3),0),  
                L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                NULL PersonId, --varchar(15) no change  
                RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                UnionMisc = Hours.UnionMisc, --New field. char(2)  
                HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                IAPHourlyRate = rgb.Individual  --New field. money  
                , Source = 'C/S '  
                , rgc.ToHealthSystem  
                , rgc.ToPensionSystem  
                , IsActiveHealth = rgc.ActiveHealth  
                , IsRetireeHealth = rgc.RetireeHealth  
                , IsPension = rgc.Pension  
                , IsIAPHourly = rgc.IAP  
                , OldEmployerNum = e.OldEmployerNum 
                , [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                EmpAccountNo = E.EmployerId,  
                PensionYear = PY.PensionYear,  
                FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                Processed = convert(smalldatetime,hb.Updated),  
                HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                PensionCredit = convert(numeric(7, 3),0),  
                L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                IAPPercent = convert(money,HPTransactions.IAPDollars),  
                ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                NULL PersonId,  
                RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                HoursStatus = 0,  
                LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                UnionMisc = HPTransactions.UNMisc,  
                HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                IAPHourlyRate = rgb.Individual  
                , Source = 'H/P '  
                , rgc.ToHealthSystem  
                , rgc.ToPensionSystem  
                , IsActiveHealth = rgc.ActiveHealth  
                , IsRetireeHealth = rgc.RetireeHealth  
                , IsPension = rgc.Pension  
                , IsIAPHourly = rgc.IAP  
                , e.OldEmployerNum  
                , [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')  
                not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')  
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                FromDate = convert(smalldatetime, cpas.FDate),  
                ToDate = convert(smalldatetime, cpas.TDate),  
                Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                Received = convert(smalldatetime, cpas.PDate),  
                Processed = convert(smalldatetime, cpas.PDate),  
                HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                LastName = NULL, --convert(char(50),p.LastName),  
                FirstName = NULL, --convert(char(50),p.FirstName),  
                UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                PensionCredit = convert(numeric(7, 3),0),  
                L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                NULL PersonId,  
                RateGroup = convert(varchar(4),cpas.RateGroup),  
                HoursStatus = 0, --all the hours comming from CPAS are processed.  
                LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                UnionMisc = null,  
                HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                IAPHourlyRate = rgb.Individual  
                , Source = 'CPAS'  
                , rgc.ToHealthSystem  
                , rgc.ToPensionSystem  
                , IsActiveHealth = rgc.ActiveHealth  
                , IsRetireeHealth = rgc.RetireeHealth  
                , IsPension = rgc.Pension  
                , IsIAPHourly = rgc.IAP  
                , E.OldEmployerNum  
                , [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                LastName = NULL, --convert(char(50),p.LastName),  
                FirstName = NULL, --convert(char(50),p.FirstName),  
                UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                IAPHoursA2 = convert(numeric(7, 1), 0),   
                IAPPercent = convert(money, 0),   
                ActiveHealthHours = convert(numeric(7, 1), 0),   
                RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                NULL PersonId,  
                RateGroup = Pre.RateGroup,--?  
                HoursStatus = convert(int, 0),  
                LateMonthly = '',   
                LateAnnual = '' ,  
                -------------------------------------------------------------------  
                UnionMisc = convert(char(2),''),  
                HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHourlyRate = rgb.Individual  
                , Source = 'PM  '  
                , rgc.ToHealthSystem  
                , rgc.ToPensionSystem  
                , IsActiveHealth = rgc.ActiveHealth  
                , IsRetireeHealth = rgc.RetireeHealth  
                , IsPension = rgc.Pension  
                , IsIAPHourly = rgc.IAP  
                , OldEmployerNum = Pre.EmployerId  
                , [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  
end  


--------------------------------------------------------------------------------------------------------------
--Name - Wasim Pathan
--Date - 03/04/2013
--Purpose - Modifying [usp_GetOccupationBasebOnUnion]
--------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetOccupationBasebOnUnion](@SSN char(9))
AS
BEGIN
SET NOCOUNT ON
SELECT MAX(r.ToDate), u.Name, u.UnionCode FROM dbo.Hours h WITH (NOLOCK)
inner join EADB.dbo.report r WITH (NOLOCK) on r.reportid = h.reportid
LEFT OUTER JOIN dbo.Unions u WITH (NOLOCK) on u.UnionCode = h.UnionCode
WHERE SSN = @SSN 
GROUP BY u.Name, u.UnionCode
END
GO



-----------------------------------------------------------------------------------------------  
--Name - Abhishek Sharma  
--Date - 03/04/2013  
--Purpose - ALTER usp_GetWorkHistoryForAllMpippParticipant  
-----------------------------------------------------------------------------------------------  

/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 03/02/2013 08:38:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                --[FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                --FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                --FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')  
                not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')  
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                --FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                --FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

DROP TABLE [#PensionWorkHistory]

END  



-----------------------------------------------------------------------------------------------  
--Name - Checked In on Behalf of Vinovin Thomas (Abhishek Sharma)
--Date - 03/04/2013  
--Purpose - ALTER USP_PID_Merge in EADB  
-----------------------------------------------------------------------------------------------  

/****** Object:  StoredProcedure [dbo].[USP_PID_Merge]    Script Date: 03/04/2013 10:51:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:        Mazher
-- Create date: 07/17/2008
-- Description:   SP to call for PID Merge in Employer Account
--
--Modification History
--
-- =============================================
ALTER PROCEDURE [dbo].[USP_PID_Merge]
            @OldPID                 varchar(15),
            @OldSSN                 varchar(10),
            @NewPID                 varchar(15),
            @NewSSN                 varchar(10),
            @debug bit = 0

AS
BEGIN
set nocount on

      declare @newold char(1), @rtn int
      set @newold = 'e'

      if exists (select 1 from Participant WHERE SSN = @OldSSN)
      begin
            -- Check what to perform merging existing participants or changing participants SSN
            if not exists (select 1 from Participant where SSN = @NewSSN)
            begin
                  set @newold = 'n'
                  Update Participant Set PersonId = @NewPID, SSN = @NewSSN where ssn = @oldssn and PersonId = @OldPid
                  update Shareholder set PersonId = @NewPID, ssn = @newssn, AccountNO = @newssn where ssn = @oldssn and PersonId = @OldPid    
            end
            else
            begin
                  delete from Participant where ssn = @oldssn and PersonId = @OldPid
            end

            --Merge Hours, Also Merge EA Notes
            exec @rtn =  eadb.dbo.MergeHours @OldSSN, @NewSSN, @NewOld ,@debug     
            if @rtn != 0
            begin
                  raiserror 99999 'An error has occurred merging hours from the EA Hours table.'
                  return 99999
            end 
      end

      if exists (select 1 from Shareholder WHERE SSN = @OldSSN)
      begin
            update Shareholder set PersonId = @NewPID, ssn = @newssn, AccountNO = @newssn where ssn = @oldssn and PersonId = @OldPid      
      end

--    -- If either of the PIDs exist
--    if exists (select 1 from Participant WHERE PersonId = @OldPID)
--    or exists (select 1 from Participant WHERE PersonId = @NewPID)
--    Begin
--          if not exists (select 1 from Participant WHERE PersonId = @OldPID)
--          begin
--                return 0
--          end
--
--          if not exists (select 1 from Participant WHERE PersonId = @NewPID)
--          begin
--                Update Participant Set PersonId = @NewPID, SSN = @NewSSN where ssn = @oldssn and PersonId = @OldPid
--          end
--
--          if  exists (select 1 from Participant WHERE PersonId = @OldPID)
--          and exists (select 1 from Participant WHERE PersonId = @NewPID)
--          Begin 
--                delete from Participant where PersonId = @OldPID
--          End 
--
--          if not exists (select 1 from shareholder WHERE PersonId = @NewPID)
--          begin
--                update Shareholder set PersonId = @NewPID, ssn = @newssn, AccountNO = @newssn where ssn = @oldssn and PersonId = @OldPid    
--          end
--    End
            
return 0
END




-----------------------------------------------------------------------------------------------  
--Name - Abhishek Sharma
--Date - 03/18/2013  
--Purpose - ALTER usp_GetVestingDate1HourAftGivenDate in EADB  
-----------------------------------------------------------------------------------------------  

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate]    Script Date: 03/18/2013 11:09:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [dbo].[usp_GetVestingDate1HourAftGivenDate]    Script Date: 04/11/2012 12:04:53 ******/
ALTER PROC [dbo].[usp_GetVestingDate1HourAftGivenDate](@SSN char(10),@PlanCode varchar(20),@GivenDate DateTime)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @IAPHOURS int
declare @PENSIONHOURS int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	IAPHours numeric(18,1),
	PensionHours numeric(18,1),
	FromDate smalldatetime,
	ToDate smalldatetime	
)

if @PlanCode = 'IAP'
begin
INSERT INTO @Temp
SELECT IAPHours,0,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) >= @GivenDate order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @IAPHOURS=0
SET @FLAG =0 


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @IAPHOURS = @IAPHOURS +  (select case when temp.IAPHours is null then 0 else temp.IAPHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @IAPHOURS >= 1.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
end
-----For MPIPP
ELSE
BEGIN
INSERT INTO @Temp
SELECT 0,PensionHours,FromDate,ToDate FROM @PensionWorkHistory where SSN=@SSN and cast(FromDate AS datetime) > @GivenDate and PensionPlan=2 order by FromDate asc

--select * from @Temp
SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @PENSIONHOURS=0
SET @FLAG =0 


IF @TABLECOUNT > 0
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
Begin
set @PENSIONHOURS = @PENSIONHOURS +  (select case when temp.PensionHours is null then 0 else temp.PensionHours end from @Temp temp where temp.SEQ_NO=@COUNT)
if @PENSIONHOURS >= 1.0 
begin 
select CAST(temp.ToDate AS DATETIME) as VESTING_DATE from @Temp temp where temp.SEQ_NO=@COUNT 
SET @FLAG =1
break  
end
set @COUNT = @COUNT + 1
end

IF @FLAG =0
BEGIN
select NULL as VESTING_DATE from @Temp temp
END
END
ELSE
BEGIN
select NULL as VESTING_DATE from @Temp temp
END



END

END

go


-----------------------------------------------------------------------------------------------  
--Name -Rohan Adgaonkar
--Date - 03/20/2013  
--Purpose - ALTER usp_GetIAPHourInfoForQuarterlyAllocation in EADB  
-----------------------------------------------------------------------------------------------  
ALTER PROC [dbo].[usp_GetIAPHourInfoForQuarterlyAllocation](@SSN char(10),@FROMDATE DATETIME,@TODATE DATETIME)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6)
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT PWH.ComputationYear as ComputationYear,PWH.EmpAccountNo as EmpAccountNo,(CASE WHEN SUM(PWH.IAPHours) IS NULL THEN 0 ELSE SUM(PWH.IAPHours) END) AS IAPHours,
       (CASE WHEN SUM(PWH.IAPHoursA2)IS NULL THEN 0 ELSE SUM(PWH.IAPHoursA2) END)AS IAPHoursA2,
       (CASE WHEN SUM(PWH.IAPPercent)IS NULL THEN 0 ELSE SUM(PWH.IAPPercent) END)AS IAPPercent,
       0.0 as lateiappercent
FROM @PensionWorkHistory PWH WHERE PWH.FromDate >= @FROMDATE AND PWH.ToDate <= @TODATE AND PWH.SSN=@SSN
GROUP BY PWH.ComputationYear,PWH.EmpAccountNo

END

go




-----------------------------------------------------------------------------------------------  
--Name - Rashmi Sheri.
--Date - 03/23/2013  
--Purpose - ALTER usp_GetWorkDataAfterRetirement in EADB  
-----------------------------------------------------------------------------------------------  

ALTER PROC [dbo].[usp_GetWorkDataAfterRetirement](@SSN char(10),@RETIREMENT_DATE DateTime,@TO_DATE DateTime=NULL)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks,VPIO.OldEmployerNum,EMPR.EmployerName,EMPR.Address1,EMPR.City,EMPR.Address2,EMPR.State,EMPR.Contact1,EMPR.PostalCode,EMPR.Contact2,EMPRADR.Street
FROM @PensionWorkHistory AS VPIO INNER JOIN Employer EMPR ON VPIO.OldEmployerNum = EMPR.OldEmployerNum
LEFT OUTER join EmployerAddress EMPRADR ON EMPR.EmployerId=EMPRADR.EmployerId
where VPIO.SSN=@SSN AND  VPIO.ToDate>@RETIREMENT_DATE AND (VPIO.ToDate <=@TO_DATE OR @TO_DATE IS NULL)
END
GO



----------------------------------------------------------------------------------------------- 
--Name - Rohan Adgaonkar
--Date - 03/28/2013  
--Purpose - ALTER usp_PensionLateHours on EADB.Alter Sp to get Emp Account No.
-----------------------------------------------------------------------------------------------  
USE [EADB]
GO

ALTER PROCEDURE [dbo].[usp_PensionLateHours]
	@BatchRunDate smalldatetime
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime
BEGIN
	SET NOCOUNT ON;
    
    SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
    SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
	
	
     	    select  
					P.PersonID MPID,
					P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
					REPORT.FROMDATE PAYPERIODSTARTDATE,
					REPORT.TODATE PAYPERIODENDDATE,
					REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
									when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
									else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
					IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
					IAPPercent = Hours.IAPValue, EmpAccountNo,
					REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end     
									
			from	eadb.dbo.Report report
            inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
			inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)			
			left outer join pid.dbo.Person p on hours.ssn = p.ssn
			where EmpAccountNo not in (14002,13363,3596,3597,12904)	and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE 
   
END
go


----------------------------------------------------------------------------------------------------------------------------------
-- Name - Wasim Pathan
-- Date - 03/29/2013
-- Purpose - Adding procedure to get all active participant workhistory for Active_participant_outbound_file
----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 03/14/2013 00:39:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROC [dbo].[usp_GetWorkHistoryForActiveOutboundFile] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN_FOR_ACTIVE_OUTBOUND_FILE]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                [ComputationYear] [smallint] NULL,  
                [SSN] [char](9) NULL,  
                [PensionPlan] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                SSN = convert(char(9),Hours.SSN),  
                PensionPlan = convert(smallint, 2), -- MPI   
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
insert into [#PensionWorkHistory]  
select      

                ComputationYear = PY.PensionYear,  
                SSN = convert(char(9),HPTransactions.SSN),  
                PensionPlan = convert(smallint, 2), -- MPI   
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')  
                not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                SSN = convert(char(9),cpas.MKey),  
                PensionPlan = convert(smallint, 2), -- MPI   
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                where [Plan]=2  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                ComputationYear = Pre.Plan_Year,  
                SSN = convert(char(9),Pre.SSN),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                   when [Local]='L666' then convert(smallint, 4)  
                                   when [Local]='L700' then convert(smallint, 6)  
                                   when [Local]='L52' then convert(smallint, 7)  
                                   when [Local]='L161' then convert(smallint, 8)  
                                   else null end,   
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  

UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

delete from [#PensionWorkHistory]

end  
GO



----------------------------------------------------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
-- Date - 03/30/2013
-- Purpose - Updated SP usp_PensionLateHours
----------------------------------------------------------------------------------------------------------------------------------
USE [EADB]
GO

ALTER PROCEDURE [dbo].[usp_PensionLateHours]
	@BatchRunDate smalldatetime
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime
BEGIN
	SET NOCOUNT ON;
    
    SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
    SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
	
	
     	    select  
					LTRIM(RTRIM(P.PersonID)) MPID,
					P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
					REPORT.FROMDATE PAYPERIODSTARTDATE,
					REPORT.TODATE PAYPERIODENDDATE,
					REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
									when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
									else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
					IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
					IAPPercent = Hours.IAPValue, EmpAccountNo,
					REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end     
									
			from	eadb.dbo.Report report
            inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
			inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)			
			left outer join pid.dbo.Person p on hours.ssn = p.ssn
			where EmpAccountNo not in (14002,13363,3596,3597,12904)	and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE 
   
END
GO




----------------------------------------------------------------------------------------------------------------------------------
-- Name - Abhishek Sharma
-- Date - 04/01/2013
-- Purpose - CREATE TABLE OPUS_AnnualStmt_Participant_List
----------------------------------------------------------------------------------------------------------------------------------

/****** Object:  Table [dbo].[OPUS_AnnualStmt_Participant_List]    Script Date: 03/29/2013 13:59:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [dbo].[OPUS_AnnualStmt_Participant_List](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SSN] [varchar](9) NULL,
	[PensionYear] [int] NULL,
 CONSTRAINT [PK_OPUS_AnnualStmt_Participant_List] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO




----------------------------------------------------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
-- Date - 04/01/2013
-- Purpose - Updated SP usp_GetIAPSnapShotInfo
----------------------------------------------------------------------------------------------------------------------------------

ALTER PROC [dbo].[usp_GetIAPSnapShotInfo](@COMPUTATIONYEAR int) 
AS
BEGIN
SET NOCOUNT ON
--------------------------------------------------------------------------------------------

CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NULL,
	[LateAnnual] [varchar](1) NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 
insert into [#PensionWorkHistory]
exec usp_pensioninterface4opus_by_dates @COMPUTATIONYEAR,null,null


	SELECT * FROM
	(
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,IAPHOURS , IAPHOURSA2, IAPPERCENT, 'N' AS LATE_FLAG,FromDate,ToDate,Weeks
		FROM [#PensionWorkHistory] 
		WHERE ComputationYear = @COMPUTATIONYEAR
		UNION
		SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN, IAPHOURS, IAPHOURSA2, IAPPERCENT, 'Y' AS LATE_FLAG,FromDate,ToDate,Weeks
		FROM [#PensionWorkHistory]
		WHERE ComputationYear < @COMPUTATIONYEAR 
		AND (LateMonthly = 'Y' or LateAnnual = 'Y')
	) A
	ORDER BY SSN,COMPUTATIONYEAR DESC,EMPACCOUNTNO


drop table [#PensionWorkHistory]

END




-----------------------------------------------------------------------------------------------  
--Name - Rashmi Sheri.
--Date - 04/03/2013  
--Purpose - ALTER usp_GetWorkDataAfterRetirement in EADB  
-----------------------------------------------------------------------------------------------  

/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataAfterRetirement]    Script Date: 04/02/2013 23:49:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[usp_GetWorkDataAfterRetirement](@SSN char(10),@RETIREMENT_DATE DateTime,@TO_DATE DateTime=NULL)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[MPI_PERSON_ID] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT VPIO.ComputationYear AS ComputationYear, VPIO.FromDate AS FromDate, VPIO.ToDate ToDate, 
VPIO.PensionHours AS PensionHours,VPIO.IAPHours,VPIO.IAPHoursA2,VPIO.IAPPercent,VPIO.Weeks,VPIO.OldEmployerNum,EMPR.EmployerName,EMPR.Address1,EMPR.City,EMPR.Address2,EMPR.State,EMPR.Contact1,EMPR.PostalCode,EMPR.Contact2
,EMPRADR.Street
FROM @PensionWorkHistory AS VPIO INNER JOIN Employer EMPR ON VPIO.OldEmployerNum = EMPR.OldEmployerNum
LEFT OUTER join EmployerAddress EMPRADR ON EMPR.EmployerId=EMPRADR.EmployerId and EMPRADR.Type = 0 
where VPIO.SSN=@SSN AND  VPIO.ToDate>@RETIREMENT_DATE AND (VPIO.ToDate <=@TO_DATE OR @TO_DATE IS NULL)
END
go


-- =============================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   Removed Refs of Pid
-- =============================================
ALTER PROCEDURE [dbo].[usp_PensionLateHours]
      @BatchRunDate smalldatetime
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime
BEGIN
      SET NOCOUNT ON;
    
    SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
    SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
      
      
         select  
                              LTRIM(RTRIM(P.MPI_PERSON_ID)) MPID,
                              P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
                              REPORT.FROMDATE PAYPERIODSTARTDATE,
                              REPORT.TODATE PAYPERIODENDDATE,
                              REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                      when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                      else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
                              IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
                              IAPPercent = Hours.IAPValue, EmpAccountNo,
                              REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end     
                                                      
                  from  eadb.dbo.Report report
				  inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
                  inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)                
                  left outer join OPUS.dbo.SGT_PERSON p on hours.ssn = p.ssn 
                  where EmpAccountNo not in (14002,13363,3596,3597,12904)     and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE 
   
END
go



-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   usp_PensionInterface4OPUS
-- ====================================================================
ALTER Procedure [dbo].[usp_PensionInterface4OPUS] (@SSN char(9)=null)  
AS
BEGIN
set nocount on
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
 ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
 UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
 NULL AS PersonId, --varchar(15) no change  
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
 , Source = 'C/S '  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
 inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
 inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
 --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
 LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
 FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
 NULL AS PersonId,  
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
 LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
 LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
 , Source = 'H/P '  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
 --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
 LastName = NULL, --convert(char(50),p.LastName),  
 FirstName = NULL, --convert(char(50),p.FirstName),  
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
 PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
 NULL PersonId,  
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
 , Source = 'CPAS'  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	inner join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
 --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
 ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
 HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
	SSN = convert(char(9),Pre.SSN), 
 LastName = NULL, --convert(char(50),p.LastName),  
 FirstName = NULL, --convert(char(50),p.FirstName),  
	UnionCode = convert(int,Pre.UnionCode), 
 PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
      when [Local]='L666' then convert(smallint, 4)  
      when [Local]='L700' then convert(smallint, 6)  
      when [Local]='L52' then convert(smallint, 7)  
      when [Local]='L161' then convert(smallint, 8)  
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
 NULL AS PersonId,  
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
 LateMonthly = '',   
 LateAnnual = '' ,  
	-------------------------------------------------------------------
 UnionMisc = convert(char(2),''),  
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
 , Source = 'PM  '  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
 --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
go


-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   usp_PensionInterface4OPUS_By_Dates
-- ====================================================================

ALTER Procedure [dbo].[usp_PensionInterface4OPUS_By_Dates]

(@Year int, @FromDate smalldatetime = null,@ToDate smalldatetime = null,@PreviousCutOffDate smalldatetime = null,@CutOffDate smalldatetime = null)
AS
BEGIN
set nocount on
	--Declare @FromDate smalldatetime,@ToDate smalldatetime,@Debug int
	--select @Debug = 0
	
	if ((@FromDate is null or @ToDate is null) and @Year is not null)
	begin
		Select  @FromDate = StartDate, @ToDate = EndDate
		From	EADB.dbo.PensionYear	
		where	PensionYear = @Year

		select @PreviousCutOffDate = pe.cutoffdate 
		from eadb.dbo.Period pe
		inner join eadb.dbo.Pensionyear py on py.enddate = pe.qualifyingenddate
		where py.pensionyear = @Year - 1

		select @CutOffDate = pe.cutoffdate 
		from eadb.dbo.Period pe
		inner join eadb.dbo.Pensionyear py on py.enddate = pe.qualifyingenddate
		where py.pensionyear = @Year
	end
	

		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	and (report.ToDate between @FromDate and @ToDate or (report.pensionyear < year(@Todate) and report.processdate > @PreviousCutOffDate and report.processdate <= @CutOffDate))
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
    and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
	and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	inner join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
--	left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	and cpas.TDate between @FromDate and @ToDate

--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
--	left outer join pid.dbo.Person p on Pre.ssn = p.ssn
where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
go



-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   usp_GETYEARENDEXTRACTIONDATA
-- ==================================================================== 

  
ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]  
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
 [SSN] [varchar](9) NULL,  
 [PensionYear] [int] NULL   
 )   

INSERT INTO @temp    
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO  
  
declare @year int  
set select top(1) @year = PensionYear from @temp  
  
delete from OPUS_AnnualStmt_Participant_List  
  
INSERT INTO OPUS_AnnualStmt_Participant_List  
select * from  @temp   
  
declare @PlanStartDate datetime  
declare @PlanEndDate datetime  
declare @CutOffDate datetime  
 select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)  
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate  
    
CREATE TABLE [#PensionWorkHistory](  
 --[ReportID] [varchar](18) NULL,  
 [EmpAccountNo] [int] NULL,  
 [ComputationYear] [int] NULL,  
 [FromDate] [smalldatetime] NULL,  
 [ToDate] [smalldatetime] NULL,  
 [Weeks] [char](2) NULL,  
 --[Received] [smalldatetime] NULL,  
 [Processed] [smalldatetime] NULL,  
 --[HoursID] [varchar](24) NULL,  
 [SSN] [varchar](9) NULL,  
 --[LastName] [varchar](50) NULL,  
 --[FirstName] [varchar](50) NULL,  
 [UnionCode] [int] NULL,  
 [PensionPlan] [smallint] NULL,  
 --[PensionCredit] [numeric](7, 3) NULL,  
 --[L52VestedCredit] [smallint] NULL,  
 [PensionHours] [numeric](7, 1) NULL,  
 [IAPHours] [numeric](7, 1) NULL,  
 --[IAPHoursA2] [numeric](7, 1) NULL,  
 --[IAPPercent] [money] NULL,  
 --[ActiveHealthHours] [numeric](7, 1) NULL,  
 --[RetireeHealthHours] [numeric](7, 1) NULL,  
 --[PersonId] [varchar](15) NULL,  
 --[RateGroup] [varchar](4) NULL,  
 --[HoursStatus] [int] NULL,  
 [LateMonthly] [varchar](1) NOT NULL,  
 [LateAnnual] [varchar](1) NOT NULL,
 [EmployerName] [varchar] (255) NULL
 --[UnionMisc] [char](2) NULL,  
 --[HoursWorked] [numeric](7, 1) NULL,  
 --[IAPHourlyRate] [money] NULL,  
 --[Source] [varchar](4) NOT NULL,  
 --[ToHealthSystem] [int] NULL,  
 --[ToPensionSystem] [int] NULL,  
 --[IsActiveHealth] [int] NULL,  
 --[IsRetireeHealth] [int] NULL,  
 --[IsPension] [int] NULL,  
 --[IsIAPHourly] [int] NULL  
 --, [OldEmployerNum] [varchar](6)  
)   
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18), Report.ReportID),  --old was char(10), but in order to include HP id increased to varchar(18)  
 --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
 FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 ToDate = Report.ToDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
 --Received = Report.RecDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
 SSN = convert(char(9),Hours.SSN),  
 --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
 --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
 UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
 IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
     when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
     else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
 --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
 --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
 --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
 --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
 --NULL PersonId, --varchar(15) no change  
 --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
 --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
 LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
 LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end ,
 EmployerName = E.EmployerName 
 --------------------------------------------------------------------------------------------------------------  
 --UnionMisc = Hours.UnionMisc, --New field. char(2)  
 --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
        --It is required because for those records where we do not have any rate group info  
        --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
 --IAPHourlyRate = rgb.Individual  --New field. money  
 --, Source = 'C/S '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
 inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
 inner join eadb.dbo.Report report on report.reportid = hours.reportid   
 --and hours.SSN = @SSN   
 --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
 --and report.ToDate between @FromDate and @ToDate   
 inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
 inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
 inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
 inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate   
 --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904) and  
Report.RecDate <= isnull(@CutOffDate,Report.RecDate)  
 --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = HPTransactions.Ber,  
 ----EmpAccountNo = convert(int, HPTransactions.Employer),  
 EmpAccountNo = E.EmployerId,  
 PensionYear = PY.PensionYear,  
 FromDate = convert(smalldatetime, HPTransactions.StartDate),  
 ToDate = convert(smalldatetime, HPTransactions.EndDate),  
 --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),   
 Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
 --Received = convert(smalldatetime, HPTransactions.DateReceived),  
 Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
 --Processed = convert(smalldatetime,hb.Updated),  
 --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
 SSN = convert(char(9),HPTransactions.SSN),  
 --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
 --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
 UnionCode = convert(int,HPTransactions.UnionCode),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
 IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
 --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,HPTransactions.IAPDollars),  
 --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
 --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
 --HoursStatus = 0,  
 LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
 LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end ,
 EmployerName = E.EmployerName  
 ----------------------------------------------------------------------------------------------------------------  
 --UnionMisc = HPTransactions.UNMisc,  
 --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'H/P '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
 inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP   
 inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
 --and HPTransactions.SSN = @SSN
 --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
 --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select   
 --ReportID = left(cpas.erractid,18),  
 ----EmpAccountNo = convert(int, cpas.ERKey),  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
 FromDate = convert(smalldatetime, cpas.FDate),  
 ToDate = convert(smalldatetime, cpas.TDate),  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
 --Received = convert(smalldatetime, cpas.PDate),  
 Processed = convert(smalldatetime, cpas.PDate),  
 --HoursId = convert(varchar(24),cpas.erractid),  
 SSN = convert(char(9),cpas.MKey),  
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,cpas.LOC_NO),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
 IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
 ----MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
 ----we are not checking rate item to identify hours for Pension, Health, or IAP  
 ----IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,cpas.PanOnEarn),  
 ----MM 12/26/12  
 ----ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
 ----RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
 --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),cpas.RateGroup),  
 --HoursStatus = 0, --all the hours comming from CPAS are processed.  
 LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
 LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
 EmployerName = E.EmployerName 
 -----------------------------------------------------------------------  
 --UnionMisc = null,  
 --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'CPAS'  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, E.OldEmployerNum  
 from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
 inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 where [Plan]=2  
 --and cpas.mkey = @SSN  
 --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
 --and cpas.TDate between @FromDate and @ToDate  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
 EmpAccountNo = convert(int, Pre.EmployerId),   
 ComputationYear = Pre.Plan_Year,  
 FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
 ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
 --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
 Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
 --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
 SSN = convert(char(9),Pre.SSN),   
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,Pre.UnionCode),   
 PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
      when [Local]='L666' then convert(smallint, 4)  
      when [Local]='L700' then convert(smallint, 6)  
      when [Local]='L52' then convert(smallint, 7)  
      when [Local]='L161' then convert(smallint, 8)  
      else null end,   
 --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
 --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
 PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
 IAPHours = convert(numeric(7, 1), 0),  
 --IAPHoursA2 = convert(numeric(7, 1), 0),   
 --IAPPercent = convert(money, 0),   
 --ActiveHealthHours = convert(numeric(7, 1), 0),   
 --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
 --NULL PersonId,  
 --RateGroup = Pre.RateGroup,--?  
 --HoursStatus = convert(int, 0),  
 LateMonthly = '',   
 LateAnnual = '' ,
 EmployerName = E.EmployerName 
 -------------------------------------------------------------------  
 --UnionMisc = convert(char(2),''),  
 --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'PM  '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = Pre.EmployerId  
from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join EADB.dbo.Employer E on E.EmployerId = pre.EmployerId
 --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
 --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
 --Pre.EndDate between @FromDate and @ToDate  
  
select ComputationYear AS ComputationYear, FromDate as FromDate, ToDate as ToDate, Weeks as Weeks,PensionHours as PensionHours,SSN as SSN from [#PensionWorkHistory] where 
PensionPlan = 2 AND ComputationYear in (1979,1988)
				
																																		   
--insert into PensionWorkHistoryForStmt    
--select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName      
--from       
--(      
-- select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed      
-- from [#PensionWorkHistory] v      
-- left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid  
--  where v.PensionPlan = 2         
--)a      
--group by ssn,computationyear,unioncode,empaccountno,employername   

drop table [#PensionWorkHistory]

end  
go



-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   usp_GETYEARENDEXTRACTIONDATAYEARLY
-- ==================================================================== 
ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATAYEARLY]  
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
 [SSN] [varchar](9) NULL,  
 [PensionYear] [int] NULL   
 )   

INSERT INTO @temp    
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO  
  
declare @year int  
set select top(1) @year = PensionYear from @temp  
  
delete from OPUS_AnnualStmt_Participant_List  
  
INSERT INTO OPUS_AnnualStmt_Participant_List  
select * from  @temp   
  
declare @PlanStartDate datetime  
declare @PlanEndDate datetime  
declare @CutOffDate datetime  
 select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)  
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate  
    
CREATE TABLE [#PensionWorkHistory](  
 --[ReportID] [varchar](18) NULL,  
 [EmpAccountNo] [int] NULL,  
 [ComputationYear] [int] NULL,  
 [FromDate] [smalldatetime] NULL,  
 [ToDate] [smalldatetime] NULL,  
 [Weeks] [char](2) NULL,  
 --[Received] [smalldatetime] NULL,  
 [Processed] [smalldatetime] NULL,  
 --[HoursID] [varchar](24) NULL,  
 [SSN] [varchar](9) NULL,  
 --[LastName] [varchar](50) NULL,  
 --[FirstName] [varchar](50) NULL,  
 [UnionCode] [int] NULL,  
 [PensionPlan] [smallint] NULL,  
 --[PensionCredit] [numeric](7, 3) NULL,  
 --[L52VestedCredit] [smallint] NULL,  
 [PensionHours] [numeric](7, 1) NULL,  
 [IAPHours] [numeric](7, 1) NULL,  
 --[IAPHoursA2] [numeric](7, 1) NULL,  
 --[IAPPercent] [money] NULL,  
 --[ActiveHealthHours] [numeric](7, 1) NULL,  
 --[RetireeHealthHours] [numeric](7, 1) NULL,  
 --[PersonId] [varchar](15) NULL,  
 --[RateGroup] [varchar](4) NULL,  
 --[HoursStatus] [int] NULL,  
 [LateMonthly] [varchar](1) NOT NULL,  
 [LateAnnual] [varchar](1) NOT NULL,
 [EmployerName] [varchar] (255) NULL
 --[UnionMisc] [char](2) NULL,  
 --[HoursWorked] [numeric](7, 1) NULL,  
 --[IAPHourlyRate] [money] NULL,  
 --[Source] [varchar](4) NOT NULL,  
 --[ToHealthSystem] [int] NULL,  
 --[ToPensionSystem] [int] NULL,  
 --[IsActiveHealth] [int] NULL,  
 --[IsRetireeHealth] [int] NULL,  
 --[IsPension] [int] NULL,  
 --[IsIAPHourly] [int] NULL  
 --, [OldEmployerNum] [varchar](6)  
)   
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18), Report.ReportID),  --old was char(10), but in order to include HP id increased to varchar(18)  
 --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
 FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 ToDate = Report.ToDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
 --Received = Report.RecDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
 SSN = convert(char(9),Hours.SSN),  
 --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
 --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
 UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
 IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
     when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
     else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
 --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
 --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
 --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
 --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
 --NULL PersonId, --varchar(15) no change  
 --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
 --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
 LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
 LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end ,
 EmployerName = E.EmployerName 
 --------------------------------------------------------------------------------------------------------------  
 --UnionMisc = Hours.UnionMisc, --New field. char(2)  
 --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
        --It is required because for those records where we do not have any rate group info  
        --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
 --IAPHourlyRate = rgb.Individual  --New field. money  
 --, Source = 'C/S '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
 inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
 inner join eadb.dbo.Report report on report.reportid = hours.reportid   
 --and hours.SSN = @SSN   
 --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
 --and report.ToDate between @FromDate and @ToDate   
 inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
 inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
 inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
 inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate   
 --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904) and  
Report.RecDate <= isnull(@CutOffDate,Report.RecDate)  
 --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = HPTransactions.Ber,  
 ----EmpAccountNo = convert(int, HPTransactions.Employer),  
 EmpAccountNo = E.EmployerId,  
 PensionYear = PY.PensionYear,  
 FromDate = convert(smalldatetime, HPTransactions.StartDate),  
 ToDate = convert(smalldatetime, HPTransactions.EndDate),  
 --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),   
 Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
 --Received = convert(smalldatetime, HPTransactions.DateReceived),  
 Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
 --Processed = convert(smalldatetime,hb.Updated),  
 --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
 SSN = convert(char(9),HPTransactions.SSN),  
 --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
 --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
 UnionCode = convert(int,HPTransactions.UnionCode),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
 IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
 --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,HPTransactions.IAPDollars),  
 --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
 --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
 --HoursStatus = 0,  
 LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
 LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end ,
 EmployerName = E.EmployerName  
 ----------------------------------------------------------------------------------------------------------------  
 --UnionMisc = HPTransactions.UNMisc,  
 --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'H/P '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
 inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP   
 inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
 --and HPTransactions.SSN = @SSN  
 --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
 --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select   
 --ReportID = left(cpas.erractid,18),  
 ----EmpAccountNo = convert(int, cpas.ERKey),  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
 FromDate = convert(smalldatetime, cpas.FDate),  
 ToDate = convert(smalldatetime, cpas.TDate),  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
 --Received = convert(smalldatetime, cpas.PDate),  
 Processed = convert(smalldatetime, cpas.PDate),  
 --HoursId = convert(varchar(24),cpas.erractid),  
 SSN = convert(char(9),cpas.MKey),  
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,cpas.LOC_NO),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
 IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
 ----MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
 ----we are not checking rate item to identify hours for Pension, Health, or IAP  
 ----IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,cpas.PanOnEarn),  
 ----MM 12/26/12  
 ----ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
 ----RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
 --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),cpas.RateGroup),  
 --HoursStatus = 0, --all the hours comming from CPAS are processed.  
 LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
 LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
 EmployerName = E.EmployerName 
 -----------------------------------------------------------------------  
 --UnionMisc = null,  
 --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'CPAS'  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, E.OldEmployerNum  
 from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
 inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 where [Plan]=2  
 --and cpas.mkey = @SSN  
 --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
 --and cpas.TDate between @FromDate and @ToDate  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
 EmpAccountNo = convert(int, Pre.EmployerId),   
 ComputationYear = Pre.Plan_Year,  
 FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
 ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
 --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
 Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
 --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
 SSN = convert(char(9),Pre.SSN),   
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,Pre.UnionCode),   
 PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
      when [Local]='L666' then convert(smallint, 4)  
      when [Local]='L700' then convert(smallint, 6)  
      when [Local]='L52' then convert(smallint, 7)  
      when [Local]='L161' then convert(smallint, 8)  
      else null end,   
 --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
 --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
 PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
 IAPHours = convert(numeric(7, 1), 0),  
 --IAPHoursA2 = convert(numeric(7, 1), 0),   
 --IAPPercent = convert(money, 0),   
 --ActiveHealthHours = convert(numeric(7, 1), 0),   
 --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
 --NULL PersonId,  
 --RateGroup = Pre.RateGroup,--?  
 --HoursStatus = convert(int, 0),  
 LateMonthly = '',   
 LateAnnual = '' ,
 EmployerName = E.EmployerName 
 -------------------------------------------------------------------  
 --UnionMisc = convert(char(2),''),  
 --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'PM  '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = Pre.EmployerId  
from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join EADB.dbo.Employer E on E.EmployerId = pre.EmployerId
 --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
 --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
 --Pre.EndDate between @FromDate and @ToDate  
  
--select isnull(EmpAccountNo, 0) as EmpAccountNo, ComputationYear, SSN, UnionCode, PensionHours, case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours, 
--isnull(EmployerName, '') as EmployerName from [#PensionWorkHistory] where 
--PensionPlan = 2 
				
																																		   
--insert into PensionWorkHistoryForStmt    
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName      
from       
(      
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed      
 from [#PensionWorkHistory] v      
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid  
  where v.PensionPlan = 2         
)a      
group by ssn,computationyear,unioncode,empaccountno,employername   

drop table [#PensionWorkHistory]

end  
go


-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   usp_GetWorkHistoryForAllMpippParticipant
-- ==================================================================== 
  
ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                --[FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                --FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                --FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                --FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                --FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

DROP TABLE [#PensionWorkHistory]

END  
go


-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/05/2013
-- Description:   usp_GetWorkHistoryForActiveOutboundFile
-- ==================================================================== 

ALTER PROC [dbo].[usp_GetWorkHistoryForActiveOutboundFile] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS_BIS.dbo.[GET_ALL_PARTICIPANT_SSN_FOR_ACTIVE_OUTBOUND_FILE]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                --[FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                --FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                --FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                --FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                --FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  


delete from [#PensionWorkHistory]

end  
go



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_PensionInterface4OPUS_By_Dates
-- ==================================================================== 
/****** Object:  StoredProcedure [dbo].[usp_PensionInterface4OPUS_By_Dates]    Script Date: 04/08/2013 00:40:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER Procedure [dbo].[usp_PensionInterface4OPUS_By_Dates]

(@Year int, @FromDate smalldatetime = null,@ToDate smalldatetime = null,@PreviousCutOffDate smalldatetime = null,@CutOffDate smalldatetime = null)
AS
BEGIN
set nocount on
	--Declare @FromDate smalldatetime,@ToDate smalldatetime,@Debug int
	--select @Debug = 0
	
	if ((@FromDate is null or @ToDate is null) and @Year is not null)
	begin
		Select  @FromDate = StartDate, @ToDate = EndDate
		From	EADB.dbo.PensionYear	
		where	PensionYear = @Year

		select @PreviousCutOffDate = pe.cutoffdate 
		from eadb.dbo.Period pe
		inner join eadb.dbo.Pensionyear py on py.enddate = pe.qualifyingenddate
		where py.pensionyear = @Year - 1

		select @CutOffDate = pe.cutoffdate 
		from eadb.dbo.Period pe
		inner join eadb.dbo.Pensionyear py on py.enddate = pe.qualifyingenddate
		where py.pensionyear = @Year
	end
	

		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
	ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
	UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
	NULL PersonId, --varchar(15) no change
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
	, Source = 'C/S '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	--and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	and (report.ToDate between @FromDate and @ToDate or (report.pensionyear < year(@Todate) and report.processdate > @PreviousCutOffDate and report.processdate <= @CutOffDate))
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
	inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
	inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on hours.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
	LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
	FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
	NULL PersonId,
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
	LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'H/P '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
	--left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
    and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
	and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = E.EmployerId,
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	NULL PersonId,
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'CPAS'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
--	left outer join pid.dbo.Person p on cpas.mkey = p.ssn
	where [Plan]=2
	--and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	and cpas.TDate between @FromDate and @ToDate
	
-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	ToDate = convert(smalldatetime, rap.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	Received = convert(smalldatetime, rap.PDate),
	Processed = convert(smalldatetime, rap.PDate),
	HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	NULL AS PersonId,
	RateGroup = convert(varchar(4),rap.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'RAP'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.RAP_IAP$ rap
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN
	
--PreMerger View.
insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
	HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
	SSN = convert(char(9),Pre.SSN), 
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,Pre.UnionCode), 
	PensionPlan = case when [Local]='L600' then convert(smallint, 3)
						when [Local]='L666' then convert(smallint, 4)
						when [Local]='L700' then convert(smallint, 6)
						when [Local]='L52' then convert(smallint, 7)
						when [Local]='L161' then convert(smallint, 8)
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
	NULL PersonId,
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
	LateMonthly = '', 
	LateAnnual = '' ,
	-------------------------------------------------------------------
	UnionMisc = convert(char(2),''),
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
	, Source = 'PM  '
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
	left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
--	left outer join pid.dbo.Person p on Pre.ssn = p.ssn
where --Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
go


-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_PensionInterface4OPUS
-- ==================================================================== 
ALTER Procedure [dbo].[usp_PensionInterface4OPUS] (@SSN char(9)=null)  
AS
BEGIN
set nocount on
		
CREATE TABLE [#PensionWorkHistory](
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1) NOT NULL,
	[LateAnnual] [varchar](1) NOT NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select	
	ReportID = convert(varchar(18), Report.ReportID),		--old was char(10), but in order to include HP id increased to varchar(18)
	--EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
	EmpAccountNo = E.EmployerId,
 ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
	FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	ToDate = Report.ToDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
	Received = Report.RecDate,		-- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
	HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
	SSN = convert(char(9),Hours.SSN),
	LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
	FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
 UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
	IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
					when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
					else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
	IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
	IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
	ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
	RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
 NULL AS PersonId, --varchar(15) no change  
	RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
	HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
	LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
	LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = Hours.UnionMisc, --New field. char(2)
	HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
								--It is required because for those records where we do not have any rate group info
								--it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
	IAPHourlyRate = rgb.Individual  --New field. money
 , Source = 'C/S '  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = e.OldEmployerNum
from	eadb.dbo.Report report
	inner join eadb.dbo.Hours hours on report.reportid = hours.reportid 
	and hours.SSN = @SSN 
	--and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
	--and report.ToDate between @FromDate and @ToDate
	inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
 inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
 inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
	inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
 --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)	--Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select	
	ReportID = HPTransactions.Ber,
	--EmpAccountNo = convert(int, HPTransactions.Employer),
	EmpAccountNo = E.EmployerId,
	PensionYear = PY.PensionYear,
	FromDate = convert(smalldatetime, HPTransactions.StartDate),
	ToDate = convert(smalldatetime, HPTransactions.EndDate),
	--Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),	
	Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
	Received = convert(smalldatetime, HPTransactions.DateReceived),
	--Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
	Processed = convert(smalldatetime,hb.Updated),
	HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
	SSN = convert(char(9),HPTransactions.SSN),
 LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
 FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
	UnionCode = convert(int,HPTransactions.UnionCode),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
	IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
	IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,HPTransactions.IAPDollars),
	ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
	RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
 NULL AS PersonId,  
	RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
	HoursStatus = 0,
 LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
 LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
	--------------------------------------------------------------------------------------------------------------
	UnionMisc = HPTransactions.UNMisc,
	HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
	IAPHourlyRate = rgb.Individual
 , Source = 'H/P '  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, e.OldEmployerNum
from eadb.dbo.HPTransactions HPTransactions
	inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
		on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
		on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
 --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
and HPTransactions.SSN = @SSN
	--and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
	--and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select	
	ReportID = left(cpas.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, cpas.FDate),
	ToDate = convert(smalldatetime, cpas.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
	Received = convert(smalldatetime, cpas.PDate),
	Processed = convert(smalldatetime, cpas.PDate),
	HoursId = convert(varchar(24),cpas.erractid),
	SSN = convert(char(9),cpas.MKey),
 LastName = NULL, --convert(char(50),p.LastName),  
 FirstName = NULL, --convert(char(50),p.FirstName),  
	UnionCode = convert(int,cpas.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
 PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
	IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,cpas.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
 NULL PersonId,  
	RateGroup = convert(varchar(4),cpas.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
	LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
	IAPHourlyRate = rgb.Individual
 , Source = 'CPAS'  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.CPASPre95_11222011 cpas
	left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join EADB.dbo.vwRateGroupClassification_all RGC 
		on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
		on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
 --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	and cpas.mkey = @SSN
	--and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
	--and cpas.TDate between @FromDate and @ToDate

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	ToDate = convert(smalldatetime, rap.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	Received = convert(smalldatetime, rap.PDate),
	Processed = convert(smalldatetime, rap.PDate),
	HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	NULL AS PersonId,
	RateGroup = convert(varchar(4),rap.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'RAP'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from EADB.dbo.RAP_IAP$ rap
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	and rap.mkey = @SSN

--PreMerger View.
insert into [#PensionWorkHistory]
select	
 ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
	EmpAccountNo = convert(int, Pre.EmployerId), 
	ComputationYear = Pre.Plan_Year,
	FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
	ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
	Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
	Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
	Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
 HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
	SSN = convert(char(9),Pre.SSN), 
 LastName = NULL, --convert(char(50),p.LastName),  
 FirstName = NULL, --convert(char(50),p.FirstName),  
	UnionCode = convert(int,Pre.UnionCode), 
 PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
      when [Local]='L666' then convert(smallint, 4)  
      when [Local]='L700' then convert(smallint, 6)  
      when [Local]='L52' then convert(smallint, 7)  
      when [Local]='L161' then convert(smallint, 8)  
						else null end, 
	PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
	L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
	PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHours = convert(numeric(7, 1), 0),
	IAPHoursA2 = convert(numeric(7, 1), 0), 
	IAPPercent = convert(money, 0), 
	ActiveHealthHours = convert(numeric(7, 1), 0), 
	RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
 NULL AS PersonId,  
	RateGroup = Pre.RateGroup,--?
	HoursStatus = convert(int, 0),
 LateMonthly = '',   
 LateAnnual = '' ,  
	-------------------------------------------------------------------
 UnionMisc = convert(char(2),''),  
	HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
	IAPHourlyRate = rgb.Individual
 , Source = 'PM  '  
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, OldEmployerNum = Pre.EmployerId
from EADB.dbo.Pension_PreMerger_Annual_History Pre  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
		on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
		on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
 --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where Pre.SSN = @SSN
	--(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
	--Pre.EndDate between @FromDate and @ToDate

select * from [#PensionWorkHistory]
order by todate
drop table [#PensionWorkHistory]

END
GO



-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_GETYEARENDEXTRACTIONDATAYEARLY
-- ==================================================================== 
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATAYEARLY]    Script Date: 04/07/2013 23:56:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATAYEARLY]  
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
 [SSN] [varchar](9) NULL,  
 [PensionYear] [int] NULL   
 )   

INSERT INTO @temp    
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO  
  
declare @year int  
set select top(1) @year = PensionYear from @temp  
  
delete from OPUS_AnnualStmt_Participant_List  
  
INSERT INTO OPUS_AnnualStmt_Participant_List  
select * from  @temp   
  
declare @PlanStartDate datetime  
declare @PlanEndDate datetime  
declare @CutOffDate datetime  
 select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)  
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate  
    
CREATE TABLE [#PensionWorkHistory](  
 --[ReportID] [varchar](18) NULL,  
 [EmpAccountNo] [int] NULL,  
 [ComputationYear] [int] NULL,  
 [FromDate] [smalldatetime] NULL,  
 [ToDate] [smalldatetime] NULL,  
 [Weeks] [char](2) NULL,  
 --[Received] [smalldatetime] NULL,  
 [Processed] [smalldatetime] NULL,  
 --[HoursID] [varchar](24) NULL,  
 [SSN] [varchar](9) NULL,  
 --[LastName] [varchar](50) NULL,  
 --[FirstName] [varchar](50) NULL,  
 [UnionCode] [int] NULL,  
 [PensionPlan] [smallint] NULL,  
 --[PensionCredit] [numeric](7, 3) NULL,  
 --[L52VestedCredit] [smallint] NULL,  
 [PensionHours] [numeric](7, 1) NULL,  
 [IAPHours] [numeric](7, 1) NULL,  
 --[IAPHoursA2] [numeric](7, 1) NULL,  
 --[IAPPercent] [money] NULL,  
 --[ActiveHealthHours] [numeric](7, 1) NULL,  
 --[RetireeHealthHours] [numeric](7, 1) NULL,  
 --[PersonId] [varchar](15) NULL,  
 --[RateGroup] [varchar](4) NULL,  
 --[HoursStatus] [int] NULL,  
 [LateMonthly] [varchar](1) NOT NULL,  
 [LateAnnual] [varchar](1) NOT NULL,
 [EmployerName] [varchar] (255) NULL
 --[UnionMisc] [char](2) NULL,  
 --[HoursWorked] [numeric](7, 1) NULL,  
 --[IAPHourlyRate] [money] NULL,  
 --[Source] [varchar](4) NOT NULL,  
 --[ToHealthSystem] [int] NULL,  
 --[ToPensionSystem] [int] NULL,  
 --[IsActiveHealth] [int] NULL,  
 --[IsRetireeHealth] [int] NULL,  
 --[IsPension] [int] NULL,  
 --[IsIAPHourly] [int] NULL  
 --, [OldEmployerNum] [varchar](6)  
)   
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18), Report.ReportID),  --old was char(10), but in order to include HP id increased to varchar(18)  
 --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
 FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 ToDate = Report.ToDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
 --Received = Report.RecDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
 SSN = convert(char(9),Hours.SSN),  
 --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
 --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
 UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
 IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
     when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
     else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
 --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
 --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
 --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
 --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
 --NULL PersonId, --varchar(15) no change  
 --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
 --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
 LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
 LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end ,
 EmployerName = E.EmployerName 
 --------------------------------------------------------------------------------------------------------------  
 --UnionMisc = Hours.UnionMisc, --New field. char(2)  
 --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
        --It is required because for those records where we do not have any rate group info  
        --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
 --IAPHourlyRate = rgb.Individual  --New field. money  
 --, Source = 'C/S '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
 inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
 inner join eadb.dbo.Report report on report.reportid = hours.reportid   
 --and hours.SSN = @SSN   
 --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
 --and report.ToDate between @FromDate and @ToDate   
 inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
 inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
 inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
 inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate   
 --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904) and  
Report.RecDate <= isnull(@CutOffDate,Report.RecDate)  
 --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = HPTransactions.Ber,  
 ----EmpAccountNo = convert(int, HPTransactions.Employer),  
 EmpAccountNo = E.EmployerId,  
 PensionYear = PY.PensionYear,  
 FromDate = convert(smalldatetime, HPTransactions.StartDate),  
 ToDate = convert(smalldatetime, HPTransactions.EndDate),  
 --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),   
 Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
 --Received = convert(smalldatetime, HPTransactions.DateReceived),  
 Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
 --Processed = convert(smalldatetime,hb.Updated),  
 --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
 SSN = convert(char(9),HPTransactions.SSN),  
 --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
 --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
 UnionCode = convert(int,HPTransactions.UnionCode),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
 IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
 --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,HPTransactions.IAPDollars),  
 --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
 --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
 --HoursStatus = 0,  
 LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
 LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end ,
 EmployerName = E.EmployerName  
 ----------------------------------------------------------------------------------------------------------------  
 --UnionMisc = HPTransactions.UNMisc,  
 --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'H/P '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
 inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP   
 inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
 --and HPTransactions.SSN = @SSN  
 --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
 --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select   
 --ReportID = left(cpas.erractid,18),  
 ----EmpAccountNo = convert(int, cpas.ERKey),  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
 FromDate = convert(smalldatetime, cpas.FDate),  
 ToDate = convert(smalldatetime, cpas.TDate),  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
 --Received = convert(smalldatetime, cpas.PDate),  
 Processed = convert(smalldatetime, cpas.PDate),  
 --HoursId = convert(varchar(24),cpas.erractid),  
 SSN = convert(char(9),cpas.MKey),  
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,cpas.LOC_NO),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
 IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
 ----MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
 ----we are not checking rate item to identify hours for Pension, Health, or IAP  
 ----IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,cpas.PanOnEarn),  
 ----MM 12/26/12  
 ----ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
 ----RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
 --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),cpas.RateGroup),  
 --HoursStatus = 0, --all the hours comming from CPAS are processed.  
 LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
 LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
 EmployerName = E.EmployerName 
 -----------------------------------------------------------------------  
 --UnionMisc = null,  
 --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'CPAS'  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, E.OldEmployerNum  
 from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
 inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 where [Plan]=2  
 --and cpas.mkey = @SSN  
 --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
 --and cpas.TDate between @FromDate and @ToDate  

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	ToDate = convert(smalldatetime, rap.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	EmployerName = E.EmployerName
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list  
	inner join EADB.dbo.RAP_IAP$ rap on rap.mkey=list.SSN
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN

  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
 EmpAccountNo = convert(int, Pre.EmployerId),   
 ComputationYear = Pre.Plan_Year,  
 FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
 ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
 --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
 Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
 --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
 SSN = convert(char(9),Pre.SSN),   
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,Pre.UnionCode),   
 PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
      when [Local]='L666' then convert(smallint, 4)  
      when [Local]='L700' then convert(smallint, 6)  
      when [Local]='L52' then convert(smallint, 7)  
      when [Local]='L161' then convert(smallint, 8)  
      else null end,   
 --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
 --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
 PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
 IAPHours = convert(numeric(7, 1), 0),  
 --IAPHoursA2 = convert(numeric(7, 1), 0),   
 --IAPPercent = convert(money, 0),   
 --ActiveHealthHours = convert(numeric(7, 1), 0),   
 --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
 --NULL PersonId,  
 --RateGroup = Pre.RateGroup,--?  
 --HoursStatus = convert(int, 0),  
 LateMonthly = '',   
 LateAnnual = '' ,
 EmployerName = E.EmployerName 
 -------------------------------------------------------------------  
 --UnionMisc = convert(char(2),''),  
 --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'PM  '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = Pre.EmployerId  
from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join EADB.dbo.Employer E on E.EmployerId = pre.EmployerId
 --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
 --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
 --Pre.EndDate between @FromDate and @ToDate  
  
--select isnull(EmpAccountNo, 0) as EmpAccountNo, ComputationYear, SSN, UnionCode, PensionHours, case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours, 
--isnull(EmployerName, '') as EmployerName from [#PensionWorkHistory] where 
--PensionPlan = 2 
				
																																		   
--insert into PensionWorkHistoryForStmt    
select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName      
from       
(      
 select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed      
 from [#PensionWorkHistory] v      
 left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid  
  where v.PensionPlan = 2         
)a      
group by ssn,computationyear,unioncode,empaccountno,employername   

drop table [#PensionWorkHistory]

end  
go


-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_GETYEARENDEXTRACTIONDATA
-- ==================================================================== 
/****** Object:  StoredProcedure [dbo].[usp_GETYEARENDEXTRACTIONDATA]    Script Date: 04/08/2013 00:08:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GETYEARENDEXTRACTIONDATA]  
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
 [SSN] [varchar](9) NULL,  
 [PensionYear] [int] NULL   
 )   

INSERT INTO @temp    
EXEC OPUS.dbo.GET_YEAR_END_DATA_EXTRACTION_INFO  
  
declare @year int  
set select top(1) @year = PensionYear from @temp  
  
delete from OPUS_AnnualStmt_Participant_List  
  
INSERT INTO OPUS_AnnualStmt_Participant_List  
select * from  @temp   
  
declare @PlanStartDate datetime  
declare @PlanEndDate datetime  
declare @CutOffDate datetime  
 select @PlanStartDate = eadb.dbo.fn_PlanYearStartDate(@year),@PlanEndDate = eadb.dbo.fn_PlanYearEndDate(@year)  
    select @CutOffDate = cutoffdate from eadb.dbo.period where qualifyingenddate = @PlanEndDate  
    
CREATE TABLE [#PensionWorkHistory](  
 --[ReportID] [varchar](18) NULL,  
 [EmpAccountNo] [int] NULL,  
 [ComputationYear] [int] NULL,  
 [FromDate] [smalldatetime] NULL,  
 [ToDate] [smalldatetime] NULL,  
 [Weeks] [char](2) NULL,  
 --[Received] [smalldatetime] NULL,  
 [Processed] [smalldatetime] NULL,  
 --[HoursID] [varchar](24) NULL,  
 [SSN] [varchar](9) NULL,  
 --[LastName] [varchar](50) NULL,  
 --[FirstName] [varchar](50) NULL,  
 [UnionCode] [int] NULL,  
 [PensionPlan] [smallint] NULL,  
 --[PensionCredit] [numeric](7, 3) NULL,  
 --[L52VestedCredit] [smallint] NULL,  
 [PensionHours] [numeric](7, 1) NULL,  
 [IAPHours] [numeric](7, 1) NULL,  
 --[IAPHoursA2] [numeric](7, 1) NULL,  
 --[IAPPercent] [money] NULL,  
 --[ActiveHealthHours] [numeric](7, 1) NULL,  
 --[RetireeHealthHours] [numeric](7, 1) NULL,  
 --[PersonId] [varchar](15) NULL,  
 --[RateGroup] [varchar](4) NULL,  
 --[HoursStatus] [int] NULL,  
 [LateMonthly] [varchar](1) NOT NULL,  
 [LateAnnual] [varchar](1) NOT NULL,
 [EmployerName] [varchar] (255) NULL
 --[UnionMisc] [char](2) NULL,  
 --[HoursWorked] [numeric](7, 1) NULL,  
 --[IAPHourlyRate] [money] NULL,  
 --[Source] [varchar](4) NOT NULL,  
 --[ToHealthSystem] [int] NULL,  
 --[ToPensionSystem] [int] NULL,  
 --[IsActiveHealth] [int] NULL,  
 --[IsRetireeHealth] [int] NULL,  
 --[IsPension] [int] NULL,  
 --[IsIAPHourly] [int] NULL  
 --, [OldEmployerNum] [varchar](6)  
)   
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18), Report.ReportID),  --old was char(10), but in order to include HP id increased to varchar(18)  
 --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
 FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 ToDate = Report.ToDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
 --Received = Report.RecDate,  -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
 --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
 SSN = convert(char(9),Hours.SSN),  
 --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
 --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
 UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
 IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
     when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
     else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
 --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
 --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
 --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
 --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
 --NULL PersonId, --varchar(15) no change  
 --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
 --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
 LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
 LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end ,
 EmployerName = E.EmployerName 
 --------------------------------------------------------------------------------------------------------------  
 --UnionMisc = Hours.UnionMisc, --New field. char(2)  
 --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
        --It is required because for those records where we do not have any rate group info  
        --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
 --IAPHourlyRate = rgb.Individual  --New field. money  
 --, Source = 'C/S '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
 inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
 inner join eadb.dbo.Report report on report.reportid = hours.reportid   
 --and hours.SSN = @SSN   
 --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
 --and report.ToDate between @FromDate and @ToDate   
 inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
 inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
 inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
 inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate   
 --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904) and  
Report.RecDate <= isnull(@CutOffDate,Report.RecDate)  
 --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select   
 --ReportID = HPTransactions.Ber,  
 ----EmpAccountNo = convert(int, HPTransactions.Employer),  
 EmpAccountNo = E.EmployerId,  
 PensionYear = PY.PensionYear,  
 FromDate = convert(smalldatetime, HPTransactions.StartDate),  
 ToDate = convert(smalldatetime, HPTransactions.EndDate),  
 --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),   
 Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
 --Received = convert(smalldatetime, HPTransactions.DateReceived),  
 Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
 --Processed = convert(smalldatetime,hb.Updated),  
 --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
 SSN = convert(char(9),HPTransactions.SSN),  
 --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
 --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
 UnionCode = convert(int,HPTransactions.UnionCode),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
 IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
 --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,HPTransactions.IAPDollars),  
 --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
 --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
 --HoursStatus = 0,  
 LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
 LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end ,
 EmployerName = E.EmployerName  
 ----------------------------------------------------------------------------------------------------------------  
 --UnionMisc = HPTransactions.UNMisc,  
 --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'H/P '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, e.OldEmployerNum  
from OPUS_AnnualStmt_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
 inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP   
 inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
 --and HPTransactions.SSN = @SSN
 --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
 --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select   
 --ReportID = left(cpas.erractid,18),  
 ----EmpAccountNo = convert(int, cpas.ERKey),  
 EmpAccountNo = E.EmployerId,  
 ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
 FromDate = convert(smalldatetime, cpas.FDate),  
 ToDate = convert(smalldatetime, cpas.TDate),  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
 --Received = convert(smalldatetime, cpas.PDate),  
 Processed = convert(smalldatetime, cpas.PDate),  
 --HoursId = convert(varchar(24),cpas.erractid),  
 SSN = convert(char(9),cpas.MKey),  
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,cpas.LOC_NO),  
 PensionPlan = convert(smallint, 2), -- MPI   
 --PensionCredit = convert(numeric(7, 3),0),  
 --L52VestedCredit = convert(smallint,0),  
 PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
 IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
 ----MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
 ----we are not checking rate item to identify hours for Pension, Health, or IAP  
 ----IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
 --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
 --IAPPercent = convert(money,cpas.PanOnEarn),  
 ----MM 12/26/12  
 ----ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
 ----RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
 --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
 --NULL PersonId,  
 --RateGroup = convert(varchar(4),cpas.RateGroup),  
 --HoursStatus = 0, --all the hours comming from CPAS are processed.  
 LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
 LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
 EmployerName = E.EmployerName 
 -----------------------------------------------------------------------  
 --UnionMisc = null,  
 --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'CPAS'  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, E.OldEmployerNum  
 from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
 inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
 left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
 left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
 left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
 --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
 where [Plan]=2  
 --and cpas.mkey = @SSN  
 --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
 --and cpas.TDate between @FromDate and @ToDate  

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	ToDate = convert(smalldatetime, rap.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	EmployerName = E.EmployerName
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	from OPUS_AnnualStmt_Participant_List list 
	inner join EADB.dbo.RAP_IAP$ rap on rap.mkey = list.ssn
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select   
 --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
 EmpAccountNo = convert(int, Pre.EmployerId),   
 ComputationYear = Pre.Plan_Year,  
 FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
 ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
 Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
 --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
 Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
 --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
 SSN = convert(char(9),Pre.SSN),   
 --LastName = NULL, --convert(char(50),p.LastName),  
 --FirstName = NULL, --convert(char(50),p.FirstName),  
 UnionCode = convert(int,Pre.UnionCode),   
 PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
      when [Local]='L666' then convert(smallint, 4)  
      when [Local]='L700' then convert(smallint, 6)  
      when [Local]='L52' then convert(smallint, 7)  
      when [Local]='L161' then convert(smallint, 8)  
      else null end,   
 --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
 --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
 PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
 IAPHours = convert(numeric(7, 1), 0),  
 --IAPHoursA2 = convert(numeric(7, 1), 0),   
 --IAPPercent = convert(money, 0),   
 --ActiveHealthHours = convert(numeric(7, 1), 0),   
 --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
 --NULL PersonId,  
 --RateGroup = Pre.RateGroup,--?  
 --HoursStatus = convert(int, 0),  
 LateMonthly = '',   
 LateAnnual = '' ,
 EmployerName = E.EmployerName 
 -------------------------------------------------------------------  
 --UnionMisc = convert(char(2),''),  
 --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
 --IAPHourlyRate = rgb.Individual  
 --, Source = 'PM  '  
 --, rgc.ToHealthSystem  
 --, rgc.ToPensionSystem  
 --, IsActiveHealth = rgc.ActiveHealth  
 --, IsRetireeHealth = rgc.RetireeHealth  
 --, IsPension = rgc.Pension  
 --, IsIAPHourly = rgc.IAP  
 --, OldEmployerNum = Pre.EmployerId  
from OPUS_AnnualStmt_Participant_List list   
 inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
 left outer join EADB.dbo.vwRateGroupClassification_all RGC   
  on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
 left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
  on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
 left outer join EADB.dbo.Employer E on E.EmployerId = pre.EmployerId
 --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
 --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
 --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
 --Pre.EndDate between @FromDate and @ToDate  
  
select ComputationYear AS ComputationYear, FromDate as FromDate, ToDate as ToDate, Weeks as Weeks,PensionHours as PensionHours,SSN as SSN from [#PensionWorkHistory] where 
PensionPlan = 2 AND ComputationYear in (1979,1988)
				
																																		   
--insert into PensionWorkHistoryForStmt    
--select ssn,computationyear,sum(isnull(pensionhours,0.0)) - sum(isnull(latehours,0.0)) TotalPensionHours,sum(isnull(latehours,0.0))TotalLateHours,UnionCode,EmpAccountno,EmployerName      
--from       
--(      
-- select ssn,computationyear,pensionhours,case when lateannual = 'Y' and processed between @PlanStartDate and @CutoffDate then pensionhours else 0 end Latehours,unioncode,empaccountno,e.employername,processed      
-- from [#PensionWorkHistory] v      
-- left outer join EADB.dbo.Employer e on v.empaccountno = e.employerid  
--  where v.PensionPlan = 2         
--)a      
--group by ssn,computationyear,unioncode,empaccountno,employername   

drop table [#PensionWorkHistory]

end  
go


-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_GetWorkHistoryForAllMpippParticipant
-- ==================================================================== 
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 04/08/2013 00:14:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                --[FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                --FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                --FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                --FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	--EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	--FromDate = convert(smalldatetime, rap.FDate),
	--ToDate = convert(smalldatetime, rap.TDate),
	--Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	--Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	--UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	--LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	--LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	[CheckVesting] = case when ((Year(rap.PDate) = @Year and rap.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
	from OPUS_Participant_List list   
	inner join EADB.dbo.RAP_IAP$ rap on list.ssn = rap.mkey
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                --FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

DROP TABLE [#PensionWorkHistory]

END  
go

-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_GetWorkHistoryForActiveOutboundFile
-- ==================================================================== 
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForActiveOutboundFile]    Script Date: 04/08/2013 00:30:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetWorkHistoryForActiveOutboundFile] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS_BIS.dbo.[GET_ALL_PARTICIPANT_SSN_FOR_ACTIVE_OUTBOUND_FILE]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                --[FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                --FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                --FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                --FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  
-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	--EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	--FromDate = convert(smalldatetime, rap.FDate),
	--ToDate = convert(smalldatetime, rap.TDate),
	--Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	--Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	--UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	--LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	--LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	[CheckVesting] = case when ((Year(rap.PDate) = @Year and rap.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
	from OPUS_Participant_List list   
	inner join EADB.dbo.RAP_IAP$ rap on list.ssn = rap.mkey
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN





  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                --FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else '' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS  
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  


delete from [#PensionWorkHistory]

end  
go

-- =====================================================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/09/2013
-- Description:   usp_GetHealthWorkHistoryForAllMpippParticipant
-- ==================================================================== 
/****** Object:  StoredProcedure [dbo].[usp_GetHealthWorkHistoryForAllMpippParticipant]    Script Date: 04/05/2013 19:00:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetHealthWorkHistoryForAllMpippParticipant]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
                [SSN] [varchar](9) NULL,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                                                         
                ) 

INSERT INTO @temp  
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN_FOR_HEALTH_ELIGBILITY]

delete from OPUS_Participant_List 

INSERT INTO OPUS_Participant_List
select * from  @temp 

                                
CREATE TABLE [#PensionWorkHistory](
                [ReportID] [varchar](18) NULL,
                [EmpAccountNo] [int] NULL,
                [ComputationYear] [smallint] NULL,
                [FromDate] [smalldatetime] NULL,
                [ToDate] [smalldatetime] NULL,
                [Weeks] [char](2) NULL,
                [Received] [smalldatetime] NULL,
                [Processed] [smalldatetime] NULL,
                [HoursID] [varchar](24) NULL,
                [SSN] [char](9) NULL,
                [LastName] [varchar](50) NULL,
                [FirstName] [varchar](50) NULL,
                [UnionCode] [int] NULL,
                [PensionPlan] [smallint] NULL,
                [PensionCredit] [numeric](7, 3) NULL,
                [L52VestedCredit] [smallint] NULL,
                [PensionHours] [numeric](7, 1) NULL,
                [IAPHours] [numeric](7, 1) NULL,
                [IAPHoursA2] [numeric](7, 1) NULL,
                [IAPPercent] [money] NULL,
                [ActiveHealthHours] [numeric](7, 1) NULL,
                [RetireeHealthHours] [numeric](7, 1) NULL,
                [PersonId] [varchar](15) NULL,
                [RateGroup] [varchar](4) NULL,
                [HoursStatus] [int] NULL,
                [LateMonthly] [varchar](1) NOT NULL,
                [LateAnnual] [varchar](1) NOT NULL,
                [UnionMisc] [char](2) NULL,
                [HoursWorked] [numeric](7, 1) NULL,
                [IAPHourlyRate] [money] NULL,
                [Source] [varchar](4) NOT NULL,
                [ToHealthSystem] [int] NULL,
                [ToPensionSystem] [int] NULL,
                [IsActiveHealth] [int] NULL,
                [IsRetireeHealth] [int] NULL,
                [IsPension] [int] NULL,
                [IsIAPHourly] [int] NULL
                , [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
                EmpAccountNo = E.EmployerId,
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
                Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
                SSN = convert(char(9),Hours.SSN),
                LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
                FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
                UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
                IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
                IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
                ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
                RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
                NULL PersonId, --varchar(15) no change
                RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
                HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
                LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
                LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = Hours.UnionMisc, --New field. char(2)
                HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
                                                                                                                                --It is required because for those records where we do not have any rate group info
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
                IAPHourlyRate = rgb.Individual  --New field. money
                , Source = 'C/S '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = e.OldEmployerNum
from OPUS_Participant_List list 
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
                inner join eadb.dbo.Report report on report.reportid = hours.reportid 
                --and hours.SSN = @SSN 
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
                --and report.ToDate between @FromDate and @ToDate             
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select    
                ReportID = HPTransactions.Ber,
                --EmpAccountNo = convert(int, HPTransactions.Employer),
                EmpAccountNo = E.EmployerId,
                PensionYear = PY.PensionYear,
                FromDate = convert(smalldatetime, HPTransactions.StartDate),
                ToDate = convert(smalldatetime, HPTransactions.EndDate),
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),               
                Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
                Received = convert(smalldatetime, HPTransactions.DateReceived),
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
                Processed = convert(smalldatetime,hb.Updated),
                HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
                SSN = convert(char(9),HPTransactions.SSN),
                LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
                FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
                UnionCode = convert(int,HPTransactions.UnionCode),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
                IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
                IAPPercent = convert(money,HPTransactions.IAPDollars),
                ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
                RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
                NULL PersonId,
                RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
                HoursStatus = 0,
                LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = HPTransactions.UNMisc,
                HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'H/P '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , e.OldEmployerNum
from OPUS_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP            
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
                --and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select    
                ReportID = left(cpas.erractid,18),
                --EmpAccountNo = convert(int, cpas.ERKey),
                EmpAccountNo = E.EmployerId,
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
                FromDate = convert(smalldatetime, cpas.FDate),
                ToDate = convert(smalldatetime, cpas.TDate),
                Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
                Received = convert(smalldatetime, cpas.PDate),
                Processed = convert(smalldatetime, cpas.PDate),
                HoursId = convert(varchar(24),cpas.erractid),
                SSN = convert(char(9),cpas.MKey),
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,cpas.LOC_NO),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
				--we are not checking rate item to identify hours for Pension, Health, or IAP
				--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
				IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
				IAPPercent = convert(money,cpas.PanOnEarn),
				--MM 12/26/12
				--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
				--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
				ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
				RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
                NULL PersonId,
                RateGroup = convert(varchar(4),cpas.RateGroup),
                HoursStatus = 0, --all the hours comming from CPAS are processed.
                LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
                LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
                ---------------------------------------------------------------------
                UnionMisc = null,
                HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
                IAPHourlyRate = rgb.Individual
                , Source = 'CPAS'
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , E.OldEmployerNum
                from OPUS_Participant_List list 
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                where [Plan]=2
                --and cpas.mkey = @SSN
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
                --and cpas.TDate between @FromDate and @ToDate
                
-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	ToDate = convert(smalldatetime, rap.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	Received = convert(smalldatetime, rap.PDate),
	Processed = convert(smalldatetime, rap.PDate),
	HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	NULL AS PersonId,
	RateGroup = convert(varchar(4),rap.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'RAP'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_Participant_List list 
	inner join EADB.dbo.RAP_IAP$ rap on rap.mkey = list.SSN
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN

               
--PreMerger View.
insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
                EmpAccountNo = convert(int, Pre.EmployerId), 
                ComputationYear = Pre.Plan_Year,
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
                ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
                Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
                Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
                HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
                SSN = convert(char(9),Pre.SSN), 
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,Pre.UnionCode), 
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)
                                                                                                when [Local]='L666' then convert(smallint, 4)
                                                                                                when [Local]='L700' then convert(smallint, 6)
                                                                                                when [Local]='L52' then convert(smallint, 7)
                                                                                                when [Local]='L161' then convert(smallint, 8)
                                                                                                else null end, 
                PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
                L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHours = convert(numeric(7, 1), 0),
                IAPHoursA2 = convert(numeric(7, 1), 0), 
                IAPPercent = convert(money, 0), 
                ActiveHealthHours = convert(numeric(7, 1), 0), 
                RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
                NULL PersonId,
                RateGroup = Pre.RateGroup,--?
                HoursStatus = convert(int, 0),
                LateMonthly = '', 
                LateAnnual = '' ,
                -------------------------------------------------------------------
                UnionMisc = convert(char(2),''),
                HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'PM  '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = Pre.EmployerId
from OPUS_Participant_List list 
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
                --Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate
--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,VPIO.SSN,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan IN (2,3,4,6,7,8)) AS idecTotalHealthHours,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS idcPensionHours_healthBatch,
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS idcIAPHours_healthBatch

FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN
end
go


-- =====================================================================
-- Author:        Mahua Banerjee
-- Create date:	  04/12/2013
-- Description:   usp_GetQDROHoursBetweenForfeitureAndQDRODate
-- ==================================================================== 

GO
/****** Object:  StoredProcedure [dbo].[usp_GetQDROHoursBetweenForfeitureAndQDRODate]    Script Date: 04/12/2013 00:40:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[usp_GetQDROHoursBetweenForfeitureAndQDRODate] (@SSN char(10),@PLAN_CODE VARCHAR(10),@DATE_OF_DETERMINATION DATETIME,
					 @FORFEITURE_DATE DATETIME,@DENOMINATOR NUMERIC(7,1) OUTPUT)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL,
	[OldEmployerNum] [varchar](6),
	[SEQ] [int] IDENTITY(1,1) NOT NULL
) 

DECLARE @COUNT INT
DECLARE @TOTAL_COUNT INT


DECLARE @YEARS INT
DECLARE @COUNT_YEARLY INT
DECLARE @TOTAL_COUNT_YEARLY INT

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SET @TOTAL_COUNT = @@ROWCOUNT

SET @YEARS= 0
SET @DENOMINATOR=0.0

DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	ELSE
	BEGIN
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END


-----------------------------------------------------------------------------------------------------------
--FOR DENOMINATOR
DECLARE @COUNT_YEARLY_FOR_DENOMINATOR INT
DECLARE @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR INT


DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) <= @FORFEITURE_DATE
DELETE FROM @PensionWorkHistory WHERE CAST(FromDate AS DATETIME) > @DATE_OF_DETERMINATION

DECLARE @PensionWorkHistoryYearDenominator TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
)


INSERT INTO @PensionWorkHistoryYearDenominator
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLAN_CODE='MPIPP' THEN 
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 WHEN @PLAN_CODE='IAP' THEN
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
WHEN @PLAN_CODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLAN_CODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLAN_CODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLAN_CODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLAN_CODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
(select QualifiedYearCount from @PensionWorkHistoryYearWise PWH where PWH.ComputationYear=VPIO.ComputationYear)
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR =@@ROWCOUNT
SET @COUNT_YEARLY_FOR_DENOMINATOR =1



PRINT @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR

	
	
	--FOR DENOMINATOR
	IF @PLAN_CODE = 'IAP'
	BEGIN
		WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
		BEGIN
				SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
					AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
					SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
		END
	END
	ELSE
	BEGIN
		WHILE @COUNT_YEARLY_FOR_DENOMINATOR <= @TOTAL_COUNT_YEARLY_FOR_DENOMINATOR 
		BEGIN
			IF (SELECT PWHYD.QualifiedYearCount FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR) < 20
				BEGIN
					SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.QualifiedHours >= 400.0 
					AND PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
				END
				ELSE
				BEGIN
					SELECT  @DENOMINATOR = @DENOMINATOR +  QualifiedHours FROM @PensionWorkHistoryYearDenominator PWHYD WHERE PWHYD.YearlySEQ=@COUNT_YEARLY_FOR_DENOMINATOR 
				END
					SET @COUNT_YEARLY_FOR_DENOMINATOR = @COUNT_YEARLY_FOR_DENOMINATOR + 1
		END
	END
	
END
go



-- =============================================
-- Author:        Rohan Adgaonkar
-- Create date:	  04/16/2013
-- Description:   Removed Refs of Pid
-- =============================================
ALTER PROCEDURE [dbo].[usp_PensionLateHours]
      @BatchRunDate smalldatetime
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime
BEGIN
      SET NOCOUNT ON;
    
    SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
    SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
      
      
         select  
                              LTRIM(RTRIM(P.MPI_PERSON_ID)) MPID,
                              P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
                              REPORT.FROMDATE PAYPERIODSTARTDATE,
                              REPORT.TODATE PAYPERIODENDDATE,
                              REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                      when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                      else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
                              IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
                              IAPPercent = Hours.IAPValue, EmpAccountNo,
                              REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end     
                                                      
                  from  eadb.dbo.Report report
				  inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
                  inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)                
                  left outer join OPUS.dbo.SGT_PERSON p on hours.ssn = p.ssn 
                  where EmpAccountNo not in (14002,13363,3596,3597,12904)     and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE 
                  order by COMPUTATIONYEAR 
					
   
END



-----------------------------------------------------------------------------------------------
--Name - Abhishek	
--Date - 18th April 2013
--Purpose - Stored Procedure CHanges to Get the Plan Start Date too as a new COLUMN - required for Vesting and MD and Late CAlcs
-----------------------------------------------------------------------------------------------
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataTillGivenDate]    Script Date: 04/18/2013 10:12:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetWorkDataTillGivenDate](@SSN char(10),@PLANCODE varchar(20),@RETIREMENT_DATE DATETIME=null)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

IF @RETIREMENT_DATE = '01/01/1753'
BEGIN
	SET @RETIREMENT_DATE=NULL
END

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
 
IF @RETIREMENT_DATE <> NULL OR @RETIREMENT_DATE <> '' OR @RETIREMENT_DATE <> '01/01/1753'
BEGIN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @RETIREMENT_DATE)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2 and ToDate <= @RETIREMENT_DATE) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and ToDate <= @RETIREMENT_DATE) AS IAP_PERCENT,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7 and ToDate <= @RETIREMENT_DATE)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8 and ToDate <= @RETIREMENT_DATE)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear  and ToDate <= @RETIREMENT_DATE) 
ELSE NULL END AS VESTED_HOURS,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN AND VPIO.ToDate <= @RETIREMENT_DATE ORDER BY YEAR
END
END

ELSE 
BEGIN

IF @PLANCODE='MPIPP' 
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_PensionCredits,
(SELECT SUM(PensionCredit)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_PensionCredits,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE IF @PLANCODE='IAP'
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(IAPHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS QUALIFIED_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS VESTED_HOURS,
(SELECT SUM(IAPHoursA2)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_HOURSA2,
(SELECT SUM(IAPPercent)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS IAP_PERCENT,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

ELSE
BEGIN
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
CASE WHEN @PLANCODE='Local600' THEN
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3)
WHEN @PLANCODE='Local666' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4)
WHEN @PLANCODE='Local700' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6)
WHEN @PLANCODE='Local52' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7)
WHEN @PLANCODE='Local161' THEN
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8)
ELSE NULL END AS QUALIFIED_HOURS,
CASE WHEN @PLANCODE='IAP' THEN
(SELECT SUM(IAPHours)AS VESTED_HOURS FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) 
ELSE NULL END AS VESTED_HOURS,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END

END

END



-----------------------------------------------------------------------------------------------
--Name - Abhishek	
--Date - 18th April 2013
--Purpose - Stored Procedure CHanges to Get the Plan Start Date too as a new COLUMN - required for Vesting and MD and Late CAlcs
-----------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 04/18/2013 11:02:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetWorkDataForPersonOverview](@SSN char(9))
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [int] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN

SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR


END


-----------------------------------------------------------------------------------------------
--Name - Abhishek	
--Date - 18th April 2013
--Purpose - Stored Procedure CHanges to Get the Plan Start Date too as a new COLUMN - required for Vesting and MD and Late CAlcs
-----------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 04/18/2013 11:31:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetWorkHistoryForAllMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                [FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else 'N' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	--EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	--ToDate = convert(smalldatetime, rap.TDate),
	--Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	--Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	--UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	--LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	--LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	[CheckVesting] = case when ((Year(rap.PDate) = @Year and rap.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
	from OPUS_Participant_List list   
	inner join EADB.dbo.RAP_IAP$ rap on list.ssn = rap.mkey
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS,
(SELECT MIN(FromDate) from [#PensionWorkHistory] WHERE SSN=VPIO.SSN) as PlanStartDate
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

DROP TABLE [#PensionWorkHistory]

END  


-----------------------------------------------------------------------------------------------
--Name - Abhishek	
--Date - 18th April 2013
--Purpose - Stored Procedure CHanges to Get the Plan Start Date too as a new COLUMN - required for Vesting and MD and Late CAlcs
-----------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetHealthWorkHistoryForAllMpippParticipant]    Script Date: 04/18/2013 12:01:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[usp_GetHealthWorkHistoryForAllMpippParticipant]
AS
BEGIN
SET NOCOUNT ON

DECLARE @temp TABLE(
                [SSN] [varchar](9) NULL,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                                                         
                ) 

INSERT INTO @temp  
EXEC OPUS.dbo.[GET_ALL_PARTICIPANT_SSN_FOR_HEALTH_ELIGBILITY]

delete from OPUS_Participant_List 

INSERT INTO OPUS_Participant_List
select * from  @temp 

                                
CREATE TABLE [#PensionWorkHistory](
                [ReportID] [varchar](18) NULL,
                [EmpAccountNo] [int] NULL,
                [ComputationYear] [smallint] NULL,
                [FromDate] [smalldatetime] NULL,
                [ToDate] [smalldatetime] NULL,
                [Weeks] [char](2) NULL,
                [Received] [smalldatetime] NULL,
                [Processed] [smalldatetime] NULL,
                [HoursID] [varchar](24) NULL,
                [SSN] [char](9) NULL,
                [LastName] [varchar](50) NULL,
                [FirstName] [varchar](50) NULL,
                [UnionCode] [int] NULL,
                [PensionPlan] [smallint] NULL,
                [PensionCredit] [numeric](7, 3) NULL,
                [L52VestedCredit] [smallint] NULL,
                [PensionHours] [numeric](7, 1) NULL,
                [IAPHours] [numeric](7, 1) NULL,
                [IAPHoursA2] [numeric](7, 1) NULL,
                [IAPPercent] [money] NULL,
                [ActiveHealthHours] [numeric](7, 1) NULL,
                [RetireeHealthHours] [numeric](7, 1) NULL,
                [PersonId] [varchar](15) NULL,
                [RateGroup] [varchar](4) NULL,
                [HoursStatus] [int] NULL,
                [LateMonthly] [varchar](1) NOT NULL,
                [LateAnnual] [varchar](1) NOT NULL,
                [UnionMisc] [char](2) NULL,
                [HoursWorked] [numeric](7, 1) NULL,
                [IAPHourlyRate] [money] NULL,
                [Source] [varchar](4) NOT NULL,
                [ToHealthSystem] [int] NULL,
                [ToPensionSystem] [int] NULL,
                [IsActiveHealth] [int] NULL,
                [IsRetireeHealth] [int] NULL,
                [IsPension] [int] NULL,
                [IsIAPHourly] [int] NULL
                , [OldEmployerNum] [varchar](6)
) 

insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)
                EmpAccountNo = E.EmployerId,
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),
                Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime
                HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)
                SSN = convert(char(9),Hours.SSN),
                LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)
                FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)
                UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)
                IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)
                IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.
                ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)
                RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)
                NULL PersonId, --varchar(15) no change
                RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)
                HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.
                LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,
                LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = Hours.UnionMisc, --New field. char(2)
                HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system. 
                                                                                                                                --It is required because for those records where we do not have any rate group info
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.
                IAPHourlyRate = rgb.Individual  --New field. money
                , Source = 'C/S '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = e.OldEmployerNum
from OPUS_Participant_List list 
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN
                inner join eadb.dbo.Report report on report.reportid = hours.reportid 
                --and hours.SSN = @SSN 
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate
                --and report.ToDate between @FromDate and @ToDate             
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate 
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.
--Employer id for Locals Pre-Merger hours.
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)

insert into [#PensionWorkHistory]
select    
                ReportID = HPTransactions.Ber,
                --EmpAccountNo = convert(int, HPTransactions.Employer),
                EmpAccountNo = E.EmployerId,
                PensionYear = PY.PensionYear,
                FromDate = convert(smalldatetime, HPTransactions.StartDate),
                ToDate = convert(smalldatetime, HPTransactions.EndDate),
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),               
                Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),
                Received = convert(smalldatetime, HPTransactions.DateReceived),
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.
                Processed = convert(smalldatetime,hb.Updated),
                HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),
                SSN = convert(char(9),HPTransactions.SSN),
                LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),
                FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),
                UnionCode = convert(int,HPTransactions.UnionCode),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later 
                IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP
                IAPPercent = convert(money,HPTransactions.IAPDollars),
                ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),
                RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),
                NULL PersonId,
                RateGroup = convert(varchar(4),HPTransactions.RateGroup), 
                HoursStatus = 0,
                LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,
                --------------------------------------------------------------------------------------------------------------
                UnionMisc = HPTransactions.UNMisc,
                HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'H/P '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , e.OldEmployerNum
from OPUS_Participant_List list 
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP            
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch 
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate
                --and HPTransactions.EndDate between @FromDate and @ToDate

--CPAS View
insert into [#PensionWorkHistory]
select    
                ReportID = left(cpas.erractid,18),
                --EmpAccountNo = convert(int, cpas.ERKey),
                EmpAccountNo = E.EmployerId,
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,
                FromDate = convert(smalldatetime, cpas.FDate),
                ToDate = convert(smalldatetime, cpas.TDate),
                Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),
                Received = convert(smalldatetime, cpas.PDate),
                Processed = convert(smalldatetime, cpas.PDate),
                HoursId = convert(varchar(24),cpas.erractid),
                SSN = convert(char(9),cpas.MKey),
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,cpas.LOC_NO),
                PensionPlan = convert(smallint, 2), -- MPI 
                PensionCredit = convert(numeric(7, 3),0),
                L52VestedCredit = convert(smallint,0),
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
				--we are not checking rate item to identify hours for Pension, Health, or IAP
				--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
				IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP
				IAPPercent = convert(money,cpas.PanOnEarn),
				--MM 12/26/12
				--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
				--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
				ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),
				RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),
                NULL PersonId,
                RateGroup = convert(varchar(4),cpas.RateGroup),
                HoursStatus = 0, --all the hours comming from CPAS are processed.
                LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,
                LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,
                ---------------------------------------------------------------------
                UnionMisc = null,
                HoursWorked = convert(numeric(7, 1), cpas.HRSACT),
                IAPHourlyRate = rgb.Individual
                , Source = 'CPAS'
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , E.OldEmployerNum
                from OPUS_Participant_List list 
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
                where [Plan]=2
                --and cpas.mkey = @SSN
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate
                --and cpas.TDate between @FromDate and @ToDate
                
-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	ToDate = convert(smalldatetime, rap.TDate),
	Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	Received = convert(smalldatetime, rap.PDate),
	Processed = convert(smalldatetime, rap.PDate),
	HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	LastName = NULL, --convert(char(50),p.LastName),
	FirstName = NULL, --convert(char(50),p.FirstName),
	UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	PensionCredit = convert(numeric(7, 3),0),
	L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	NULL AS PersonId,
	RateGroup = convert(varchar(4),rap.RateGroup),
	HoursStatus = 0, --all the hours comming from CPAS are processed.
	LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	UnionMisc = null,
	HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	IAPHourlyRate = rgb.Individual
	, Source = 'RAP'
	, rgc.ToHealthSystem
	, rgc.ToPensionSystem
	, IsActiveHealth = rgc.ActiveHealth
	, IsRetireeHealth = rgc.RetireeHealth
	, IsPension = rgc.Pension
	, IsIAPHourly = rgc.IAP
	, E.OldEmployerNum
	from OPUS_Participant_List list 
	inner join EADB.dbo.RAP_IAP$ rap on rap.mkey = list.SSN
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN

               
--PreMerger View.
insert into [#PensionWorkHistory]
select    
                ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,
                EmpAccountNo = convert(int, Pre.EmployerId), 
                ComputationYear = Pre.Plan_Year,
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date
                ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date
                Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53
                Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date 
                Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date
                HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id
                SSN = convert(char(9),Pre.SSN), 
                LastName = NULL, --convert(char(50),p.LastName),
                FirstName = NULL, --convert(char(50),p.FirstName),
                UnionCode = convert(int,Pre.UnionCode), 
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)
                                                                                                when [Local]='L666' then convert(smallint, 4)
                                                                                                when [Local]='L700' then convert(smallint, 6)
                                                                                                when [Local]='L52' then convert(smallint, 7)
                                                                                                when [Local]='L161' then convert(smallint, 8)
                                                                                                else null end, 
                PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),
                L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHours = convert(numeric(7, 1), 0),
                IAPHoursA2 = convert(numeric(7, 1), 0), 
                IAPPercent = convert(money, 0), 
                ActiveHealthHours = convert(numeric(7, 1), 0), 
                RetireeHealthHours = convert(numeric(7, 1), 0), -- ?
                NULL PersonId,
                RateGroup = Pre.RateGroup,--?
                HoursStatus = convert(int, 0),
                LateMonthly = '', 
                LateAnnual = '' ,
                -------------------------------------------------------------------
                UnionMisc = convert(char(2),''),
                HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),
                IAPHourlyRate = rgb.Individual
                , Source = 'PM  '
                , rgc.ToHealthSystem
                , rgc.ToPensionSystem
                , IsActiveHealth = rgc.ActiveHealth
                , IsRetireeHealth = rgc.RetireeHealth
                , IsPension = rgc.Pension
                , IsIAPHourly = rgc.IAP
                , OldEmployerNum = Pre.EmployerId
from OPUS_Participant_List list 
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN
                left outer join EADB.dbo.vwRateGroupClassification_all RGC 
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate 
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb 
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance
--where --Pre.SSN = @SSN
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate
                --Pre.EndDate between @FromDate and @ToDate

--select * from [#PensionWorkHistory]
--order by todate
--select * from [#PensionWorkHistory]
--order by todate

--insert into PensionWorkHistoryForStmt  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,VPIO.SSN,
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan IN (2,3,4,6,7,8)) AS idecTotalHealthHours,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS idcPensionHours_healthBatch,
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS idcIAPHours_healthBatch,
(SELECT MIN(FromDate) from [#PensionWorkHistory] WHERE SSN=VPIO.SSN) as PlanStartDate
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN
end


-----------------------------------------------------------------------------------------------
--Name - Wasim Pathan	
--Date - 04/24/2013
--Purpose - Stored Procedure To get New Participant SSN
-----------------------------------------------------------------------------------------------
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkHistoryForAllMpippParticipant]    Script Date: 04/24/2013 03:26:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetWorkHistoryForNewMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_NEW_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                [FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else 'N' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	--EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	--ToDate = convert(smalldatetime, rap.TDate),
	--Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	--Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	--UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	--LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	--LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	[CheckVesting] = case when ((Year(rap.PDate) = @Year and rap.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
	from OPUS_Participant_List list   
	inner join EADB.dbo.RAP_IAP$ rap on list.ssn = rap.mkey
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS,
(SELECT MIN(FromDate) from [#PensionWorkHistory] WHERE SSN=VPIO.SSN) as PlanStartDate
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

DROP TABLE [#PensionWorkHistory]

END  

Go


-----------------------------------------------------------------------------------------------
--Name - Wasim Pathan	
--Date - 04/25/2013
--Purpose - ALTER Stored Procedure To get New Participant SSN
-----------------------------------------------------------------------------------------------
ALTER PROC [dbo].[usp_GetWorkHistoryForNewMpippParticipant] (@Year int)
AS  
BEGIN  
SET NOCOUNT ON  
  
DECLARE @temp TABLE(  
                [SSN] [varchar](9) NULL ,
                [VESTING_DATE] DATETIME NULL,
                [RECALCULATE_VESTING] VARCHAR(1) NULL                         
                )   
  
INSERT INTO @temp    
EXEC OPUS.dbo.[GET_NEW_PARTICIPANT_SSN]  
  
delete from OPUS_Participant_List   
  
INSERT INTO OPUS_Participant_List  
select * from  @temp   
  
                                  
CREATE TABLE [#PensionWorkHistory](  
                --[ReportID] [varchar](18) NULL,  
                --[EmpAccountNo] [int] NULL,  
                [ComputationYear] [smallint] NULL,  
                [FromDate] [smalldatetime] NULL,  
                --[ToDate] [smalldatetime] NULL,  
                --[Weeks] [char](2) NULL,  
                --[Received] [smalldatetime] NULL,  
                --[Processed] [smalldatetime] NULL,  
                --[HoursID] [varchar](24) NULL,  
                [SSN] [char](9) NULL,  
                --[LastName] [varchar](50) NULL,  
                --[FirstName] [varchar](50) NULL,  
                --[UnionCode] [int] NULL,  
                [PensionPlan] [smallint] NULL,  
                --[PensionCredit] [numeric](7, 3) NULL,  
                --[L52VestedCredit] [smallint] NULL,  
                [PensionHours] [numeric](7, 1) NULL,  
                [IAPHours] [numeric](7, 1) NULL,  
                --[IAPHoursA2] [numeric](7, 1) NULL,  
                --[IAPPercent] [money] NULL,  
                --[ActiveHealthHours] [numeric](7, 1) NULL,  
                --[RetireeHealthHours] [numeric](7, 1) NULL,  
                --[PersonId] [varchar](15) NULL,  
                --[RateGroup] [varchar](4) NULL,  
                --[HoursStatus] [int] NULL,  
                --[LateMonthly] [varchar](1) NOT NULL,  
                --[LateAnnual] [varchar](1) NOT NULL,  
                --[UnionMisc] [char](2) NULL,  
                --[HoursWorked] [numeric](7, 1) NULL,  
                --[IAPHourlyRate] [money] NULL,  
                --[Source] [varchar](4) NOT NULL,  
                --[ToHealthSystem] [int] NULL,  
                --[ToPensionSystem] [int] NULL,  
                --[IsActiveHealth] [int] NULL,  
                --[IsRetireeHealth] [int] NULL,  
                --[IsPension] [int] NULL,  
                --[IsIAPHourly] [int] NULL, 
                --[OldEmployerNum] [varchar](6), 
                [CheckVesting] [varchar](1) 
)   
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18), Report.ReportID),                          --old was char(10), but in order to include HP id increased to varchar(18)  
                --EmpAccountNo = convert(int,Report.EmpAccountNo),  --old was char(6)  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  --smallint ,  old name was 'PensionYear'  
                FromDate = Report.FromDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --ToDate = Report.ToDate,                             -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Report.FromDate, Report.ToDate)/7.0,0))),  
                --Received = Report.RecDate,                       -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --Processed = Report.ProcessDate, -- old was char(8) yyyymmdd, now no conversion it is smalldatetime  
                --HoursID = convert(varchar(24), Hours.HoursID),  --old size was char(10), but in order to include HP id increased to varchar(24)  
                SSN = convert(char(9),Hours.SSN),  
                --LastName = Hours.LastName,   --old was char(18), now no conversion took default which is varchar(50)  
                --FirstName = Hours.FirstName, --old was char(14), now no conversion took default which is varchar(50)  
                --UnionCode = Hours.UnionCode, --old was char(4), now no conversion it is 'int'  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension), -- old was numeric(18,1)  
                IAPHours = case when report.rategroup = 8 then Hours.HoursWorked   
                                                                                when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)  
                                                                                else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,  --old was numeric(18,1)  
                --IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),  -- $ 0.305 hourly IAP --old was numeric(18,1)  
                --IAPPercent = Hours.IAPValue,  --old was char(9), now no conversion it is money.  
                --ActiveHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.ActiveHealth), --old was numeric(18,1)  
                --RetireeHealthHours = convert(numeric(7, 1), Hours.HoursWorked * rgc.RetireeHealth), --old was numeric(18,1)  
                --NULL PersonId, --varchar(15) no change  
                --RateGroup = convert(varchar(4), report.RateGroup), -- old was char(4)  
                --HoursStatus = Hours.Status, --int now, old was tinyint -- 0 = Processed/posted , > 0 (1,2,...) unprocessed.  
                --LateMonthly = case when Report.RecDate > coalesce(Period.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --LateAnnual = case when Report.RecDate > coalesce(PlanCutoff.cutoffdate, Report.RecDate) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = Hours.UnionMisc, --New field. char(2)  
                --HoursWorked = convert(numeric(7, 1), Hours.HoursWorked), --New field to show whatever hours we have in system.   
                                                                                                                                --It is required because for those records where we do not have any rate group info  
                                                                                                                                --it will show 0 for PensionHours, ActiveHealthHours, and RetireeHealthHours.  
                --IAPHourlyRate = rgb.Individual  --New field. money  
                --, Source = 'C/S '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = e.OldEmployerNum 
                [CheckVesting] = case when ((Year(Report.RecDate) = @Year and Report.FromDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y')then 'Y' else 'N' end
                from OPUS_Participant_List list   
                inner join eadb.dbo.Hours hours  on list.SSN = hours.SSN  
                inner join eadb.dbo.Report report on report.reportid = hours.reportid   
                --and hours.SSN = @SSN   
                --and (hours.SSN = @SSN or @SSN is null) and report.ToDate between @FromDate and @ToDate  
                --and report.ToDate between @FromDate and @ToDate               
                inner join EADB.dbo.Employer E on convert(int,Report.EmpAccountNo) = E.EmployerId  -- taking care of Alpha numeric employer id in HP  
                inner join EADB.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate   
                inner join EADB.dbo.vwRateGroupBreakDown_all rgb on report.rategroup = rgb.rategroup and report.todate between rgb.FromDate and rgb.ToDate  
                inner join eadb.dbo.Period Period on Report.todate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join eadb.dbo.PensionYear PY on Report.todate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on hours.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on hours.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
where EmpAccountNo not in (14002,13363,3596,3597,12904)      --Excluding pre-merger data to avoid duplication, since it is comming from PremergerView.  
--Employer id for Locals Pre-Merger hours.  
--(L161=14002; L52=13363; L600=3596; L666=3597; L700=12904)  
  
insert into [#PensionWorkHistory]  
select      
                --ReportID = HPTransactions.Ber,  
                --EmpAccountNo = convert(int, HPTransactions.Employer),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = PY.PensionYear,  
                FromDate = convert(smalldatetime, HPTransactions.StartDate),  
                --ToDate = convert(smalldatetime, HPTransactions.EndDate),  
                --Weeks = datediff(week, HPTransactions.StartDate, dateadd(day,1,HPTransactions.EndDate)),                 
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, HPTransactions.StartDate, HPTransactions.EndDate)/7.0,0))),  
                --Received = convert(smalldatetime, HPTransactions.DateReceived),  
                --Processed = convert(smalldatetime, HPTransactions.DateReceived), -- we do not have processed date in HP table, so we are taking received date as process date.  
                --Processed = convert(smalldatetime,hb.Updated),  
                --HoursId = convert(varchar(24),HPTransactions.Ber + HPTransactions.Subreport + HPTransactions.Sequence),  
                SSN = convert(char(9),HPTransactions.SSN),  
                --LastName = convert(char(50),fpdb.dbo.fn_LastNameOrGen(HPTransactions.Name, 'LN')),  
                --FirstName = convert(char(50),fpdb.dbo.fn_FirstNameOrMid(HPTransactions.Name, 'FN')),  
                --UnionCode = convert(int,HPTransactions.UnionCode),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension),  
                IAPHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.Pension), -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later   
                --IAPHoursA2 = convert(numeric(7, 1), HPTransactions.Hours * rgc.IAP),  -- $ 0.305 hourly IAP  
                --IAPPercent = convert(money,HPTransactions.IAPDollars),  
                --ActiveHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.ActiveHealth),  
                --RetireeHealthHours = convert(numeric(7, 1), HPTransactions.Hours * rgc.RetireeHealth),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),HPTransactions.RateGroup),   
                --HoursStatus = 0,  
                --LateMonthly = case when HPTransactions.DateReceived > coalesce(Period.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --LateAnnual = case when HPTransactions.DateReceived > coalesce(PlanCutoff.cutoffdate, HPTransactions.DateReceived) then 'Y' else '' end,  
                --------------------------------------------------------------------------------------------------------------  
                --UnionMisc = HPTransactions.UNMisc,  
                --HoursWorked = convert(numeric(7, 1), HPTransactions.Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'H/P '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, e.OldEmployerNum  
                 [CheckVesting] = case when ((Year(HPTransactions.DateReceived) = @Year and HPTransactions.StartDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
from OPUS_Participant_List list   
    inner join eadb.dbo.HPTransactions HPTransactions on list.SSN = HPTransactions.SSN  
                inner join EADB.dbo.Employer E on HPTransactions.Employer = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP              
                inner join eadb.dbo.Period Period on HPTransactions.EndDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on HPTransactions.RateGroup = right(convert(varchar(4),1000+RGC.RateGroup),2) and HPTransactions.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on HPTransactions.rategroup = right(convert(varchar(4),1000+rgb.rategroup),2) and HPTransactions.EndDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on HPTransactions.EndDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on HPTransactions.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on HPTransactions.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                left outer join eadb.dbo.HPBatch hb on HPTransactions.Batch = hb.Batch   
where --not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime, HPTransactions.DateReceived) <= '02/21/1995')
	(not (convert(smalldatetime, HPTransactions.EndDate) <= '12/24/1994' and convert(smalldatetime,hb.Updated) <= '02/21/1995')
     or (convert(smalldatetime, HPTransactions.DateReceived)>'02/21/1995')
    )
and not exists(select 1 from CPASPre95_11222011 where mkey = hptransactions.ssn and fdate = hptransactions.startdate and tdate = hptransactions.enddate and hrsact = convert(numeric(7, 1), HPTransactions.Hours))
                --and HPTransactions.SSN = @SSN  
                --and (HPTransactions.SSN = @SSN or @SSN is null) and HPTransactions.EndDate between @FromDate and @ToDate  
                --and HPTransactions.EndDate between @FromDate and @ToDate  
  
--CPAS View  
insert into [#PensionWorkHistory]  
select      
                --ReportID = left(cpas.erractid,18),  
                --EmpAccountNo = convert(int, cpas.ERKey),  
                --EmpAccountNo = E.EmployerId,  
                ComputationYear = cpas.Plan_Year, -- PY.PensionYear,  
                FromDate = convert(smalldatetime, cpas.FDate),  
                --ToDate = convert(smalldatetime, cpas.TDate),  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, cpas.FDate, cpas.TDate)/7.0,0))),  
                --Received = convert(smalldatetime, cpas.PDate),  
                --Processed = convert(smalldatetime, cpas.PDate),  
                --HoursId = convert(varchar(24),cpas.erractid),  
                SSN = convert(char(9),cpas.MKey),  
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,cpas.LOC_NO),  
                PensionPlan = convert(smallint, 2), -- MPI   
                --PensionCredit = convert(numeric(7, 3),0),  
                --L52VestedCredit = convert(smallint,0),  
                PensionHours = convert(numeric(7, 1), cpas.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours  
                IAPHours = convert(numeric(7, 1), cpas.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later  
                --MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth  
    --we are not checking rate item to identify hours for Pension, Health, or IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP  
    --IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT),  -- $ 0.305 hourly IAP  
    --IAPPercent = convert(money,cpas.PanOnEarn),  
    --MM 12/26/12  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),  
    --ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
    --RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT),  
                --NULL PersonId,  
                --RateGroup = convert(varchar(4),cpas.RateGroup),  
                --HoursStatus = 0, --all the hours comming from CPAS are processed.  
                --LateMonthly = case when cpas.PDate > coalesce(Period.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                --LateAnnual = case when cpas.PDate > coalesce(PlanCutoff.cutoffdate, cpas.PDate) then 'Y' else '' end,  
                ---------------------------------------------------------------------  
                --UnionMisc = null,  
                --HoursWorked = convert(numeric(7, 1), cpas.HRSACT),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'CPAS'  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, E.OldEmployerNum  
                 [CheckVesting] = case when ((Year(cpas.PDate) = @Year and cpas.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
                from OPUS_Participant_List list   
                inner join EADB.dbo.CPASPre95_11222011 cpas on list.SSN = cpas.mkey  
                inner join eadb.dbo.Period Period on cpas.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate  
                left outer join EADB.dbo.Employer E on cpas.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on cpas.RateGroup = RGC.RateGroup and cpas.TDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on cpas.rategroup = rgb.rategroup and cpas.TDate between rgb.FromDate and rgb.ToDate  
                left outer join eadb.dbo.PensionYear PY on cpas.TDate between PY.StartDate and PY.EndDate  
                left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate  
                --left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
                where [Plan]=2  
                --and cpas.mkey = @SSN  
                --and (cpas.mkey = @SSN or @SSN is null) and cpas.TDate between @FromDate and @ToDate  
                --and cpas.TDate between @FromDate and @ToDate  

-- RAP IAP$
insert into [#PensionWorkHistory]
select	
	--ReportID = left(rap.erractid,18),
	--EmpAccountNo = convert(int, cpas.ERKey),
	--EmpAccountNo = isnull(E.EmployerId,'0'),
	ComputationYear = rap.Plan_Year, -- PY.PensionYear,
	FromDate = convert(smalldatetime, rap.FDate),
	--ToDate = convert(smalldatetime, rap.TDate),
	--Weeks = convert(char(2), convert(int , round(DateDiff(day, rap.FDate, rap.TDate)/7.0,0))),
	--Received = convert(smalldatetime, rap.PDate),
	--Processed = convert(smalldatetime, rap.PDate),
	--HoursId = convert(varchar(24),rap.erractid),
	SSN = convert(char(9),rap.MKey),
	--LastName = NULL, --convert(char(50),p.LastName),
	--FirstName = NULL, --convert(char(50),p.FirstName),
	--UnionCode = convert(int,rap.LOC_NO),
	PensionPlan = convert(smallint, 2), -- MPI 
	--PensionCredit = convert(numeric(7, 3),0),
	--L52VestedCredit = convert(smallint,0),
	PensionHours = convert(numeric(7, 1), rap.HRSACT),  -- here we dont need to check 'rgc.Pension' flag because whatever is comming from CPAS is PensionHours
	IAPHours = convert(numeric(7, 1), rap.HRSACT),  -- same as pension hours, RG 8, 66, and 42 issue was for 2003 and later
	--MM 12/26/12 As per Ajay, Since CPAS data is upto 12/24/1994 and that time all the hours were eligible for $.305 and RetireeHealth
	--we are not checking rate item to identify hours for Pension, Health, or IAP
	--IAPHoursA2 = convert(numeric(7, 1), cpas.HRSACT * rgc.IAP),  -- $ 0.305 hourly IAP
	--IAPHoursA2 = convert(numeric(7, 1), rap.HRSACT),  -- $ 0.305 hourly IAP
	--IAPPercent = convert(money,rap.PanOnEarn),
	--MM 12/26/12
	--ActiveHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.ActiveHealth),
	--RetireeHealthHours = convert(numeric(7, 1), cpas.HRSACT * rgc.RetireeHealth),
	--ActiveHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--RetireeHealthHours = convert(numeric(7, 1), rap.HRSACT),
	--NULL AS PersonId,
	--RateGroup = convert(varchar(4),rap.RateGroup),
	--HoursStatus = 0, --all the hours comming from CPAS are processed.
	--LateMonthly = case when rap.PDate > coalesce(Period.cutoffdate, rap.PDate) then 'Y' else '' end,
	--LateAnnual = case when rap.PDate > coalesce(PlanCutoff.cutoffdate, rap.PDate) then 'Y' else '' end,
	---------------------------------------------------------------------
	--UnionMisc = null,
	--HoursWorked = convert(numeric(7, 1), rap.HRSACT),
	--IAPHourlyRate = rgb.Individual
	--, Source = 'RAP'
	--, rgc.ToHealthSystem
	--, rgc.ToPensionSystem
	--, IsActiveHealth = rgc.ActiveHealth
	--, IsRetireeHealth = rgc.RetireeHealth
	--, IsPension = rgc.Pension
	--, IsIAPHourly = rgc.IAP
	--, E.OldEmployerNum
	[CheckVesting] = case when ((Year(rap.PDate) = @Year and rap.FDate < list.[Vesting_Date]) OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
	from OPUS_Participant_List list   
	inner join EADB.dbo.RAP_IAP$ rap on list.ssn = rap.mkey
	left outer join EADB.dbo.Employer E on rap.ERKey = E.OldEmployerNum  -- taking care of Alpha numeric employer id in HP
	left outer join eadb.dbo.vwRateGroupClassification_all RGC 
		on rap.RateGroup = RGC.RateGroup and rap.TDate between rgc.FromDate and rgc.ToDate 
	left outer join eadb.dbo.vwRateGroupBreakDown_all rgb 
		on rap.rategroup = rgb.rategroup and rap.TDate between rgb.FromDate and rgb.ToDate
	inner join eadb.dbo.Period Period on rap.TDate between Period.QualifyingStartDate and Period.QualifyingEnddate
	left outer join eadb.dbo.PensionYear PY on rap.TDate between PY.StartDate and PY.EndDate
	left outer join eadb.dbo.Period PlanCutoff on PY.EndDate = PlanCutoff.QualifyingEnddate
	--left outer join pid.dbo.Person p on cpas.mkey = p.ssn  
    --left outer join OPUS.dbo.SGT_Person p on cpas.mkey = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
	where [Plan]=2
	--and rap.mkey = @SSN
  
--PreMerger View.  
insert into [#PensionWorkHistory]  
select      
                --ReportID = convert(varchar(18),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year)) ,  
                --EmpAccountNo = convert(int, Pre.EmployerId),   
                ComputationYear = Pre.Plan_Year,  
                FromDate = convert(smalldatetime, Pre.StartDate), --Plan start date  
                --ToDate = convert(smalldatetime, Pre.EndDate),  -- Plan end date  
                --Weeks = convert(char(2), convert(int , round(DateDiff(day, Pre.StartDate, Pre.EndDate)/7.0,0))), --52/53  
                --Received = convert(smalldatetime, Pre.MergeDate), --Plan merger date   
                --Processed = convert(smalldatetime, Pre.MergeDate), -- plan merger date  
                --HoursId = convert(varchar(24),Pre.Local + '_' + convert(varchar(4),Pre.Plan_Year) + '_' + convert(varchar(6),Pre.RecordId)), --create unique id  
                SSN = convert(char(9),Pre.SSN),   
                --LastName = NULL, --convert(char(50),p.LastName),  
                --FirstName = NULL, --convert(char(50),p.FirstName),  
                --UnionCode = convert(int,Pre.UnionCode),   
                PensionPlan = case when [Local]='L600' then convert(smallint, 3)  
                                                                                                when [Local]='L666' then convert(smallint, 4)  
                                                                                                when [Local]='L700' then convert(smallint, 6)  
                                                                                                when [Local]='L52' then convert(smallint, 7)  
                                                                                                when [Local]='L161' then convert(smallint, 8)  
                                                                                                else null end,   
                --PensionCredit = convert(numeric(7, 3),Pre.Pension_Credit),  
                --L52VestedCredit = convert(smallint,Pre.L52_Vested_Credit),  
                PensionHours = convert(numeric(7, 1), Pre.Credited_Hours),  
                IAPHours = convert(numeric(7, 1), 0),  
                --IAPHoursA2 = convert(numeric(7, 1), 0),   
                --IAPPercent = convert(money, 0),   
                --ActiveHealthHours = convert(numeric(7, 1), 0),   
                --RetireeHealthHours = convert(numeric(7, 1), 0), -- ?  
                --NULL PersonId,  
                --RateGroup = Pre.RateGroup,--?  
                --HoursStatus = convert(int, 0),  
                --LateMonthly = '',   
                --LateAnnual = '' ,  
                -------------------------------------------------------------------  
                --UnionMisc = convert(char(2),''),  
                --HoursWorked = convert(numeric(7, 1), Pre.Credited_Hours),  
                --IAPHourlyRate = rgb.Individual  
                --, Source = 'PM  '  
                --, rgc.ToHealthSystem  
                --, rgc.ToPensionSystem  
                --, IsActiveHealth = rgc.ActiveHealth  
                --, IsRetireeHealth = rgc.RetireeHealth  
                --, IsPension = rgc.Pension  
                --, IsIAPHourly = rgc.IAP  
                --, OldEmployerNum = Pre.EmployerId  
                [CheckVesting] = case when ((Year(Pre.MergeDate) = @Year and Pre.StartDate < list.[Vesting_Date])OR list.VESTING_DATE IS NULL OR list.RECALCULATE_VESTING = 'Y') then 'Y' else 'N' end
from OPUS_Participant_List list   
                inner join EADB.dbo.Pension_PreMerger_Annual_History Pre on list.SSN = Pre.SSN  
                left outer join EADB.dbo.vwRateGroupClassification_all RGC   
                                on Pre.RateGroup = RGC.RateGroup and Pre.EndDate between rgc.FromDate and rgc.ToDate   
                left outer join EADB.dbo.vwRateGroupBreakDown_all rgb   
                                on Pre.rategroup = rgb.rategroup and Pre.EndDate between rgb.FromDate and rgb.ToDate  
                --left outer join pid.dbo.Person p on Pre.ssn = p.ssn  
                --left outer join OPUS.dbo.SGT_Person p on Pre.ssn = OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) --not using any field from sgt_person and decrytion is affecting performance  
--where --Pre.SSN = @SSN  
                --(Pre.SSN = @SSN or @SSN is null) and Pre.EndDate between @FromDate and @ToDate  
                --Pre.EndDate between @FromDate and @ToDate  
  
--select * from [#PensionWorkHistory]  
--order by todate  
--select * from [#PensionWorkHistory]  
--order by todate 
--insert into PensionWorkHistoryForStmt   


--UPDATE [#PensionWorkHistory] SET CheckVesting='Y' WHERE SSN IN (SELECT DISTINCT TE.SSN FROM [#PensionWorkHistory] TE WHERE TE.CheckVesting='Y')
  

SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR, VPIO.SSN, VPIO.CheckVesting,
(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2)  AS QUALIFIED_HOURS  
--(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS VESTED_HOURS,  
--(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,  
--(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,  
--(SELECT SUM(PensionHours) FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,  
--(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,  
--(SELECT SUM(PensionHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,  
--(SELECT SUM(IAPHours)  FROM [#PensionWorkHistory] WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan = 2) AS IAP_HOURS,
--(SELECT MIN(FromDate) from [#PensionWorkHistory] WHERE SSN=VPIO.SSN) as PlanStartDate
FROM [#PensionWorkHistory] AS VPIO ORDER BY VPIO.SSN  

DROP TABLE [#PensionWorkHistory]

END  

Go

-----------------------------------------------------------------------------------------------
--Name - Tushar Chandak	
--Date - 06/10/2014
--Purpose - ALTER Stored Procedure To get Get Work DataFor PersonOverview
-----------------------------------------------------------------------------------------------

/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 06/09/2014 21:43:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetWorkDataForPersonOverview]
(
@SSN char(9),
@MERGER_DATE_L600 DateTime = null,
@MERGER_DATE_L666 DateTime = null,
@MERGER_DATE_L700 DateTime = null,
@MERGER_DATE_L52 DateTime = null,
@MERGER_DATE_L161 DateTime = null
)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [int] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
IF @MERGER_DATE_L600  = null OR @MERGER_DATE_L666  = null OR @MERGER_DATE_L700  = null OR @MERGER_DATE_L52 = null OR @MERGER_DATE_L161 = null
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
ELSE
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=3)
      ELSE
      0
      END AS L600_HOURS,
 --(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=4)
      ELSE
      0
      END AS L666_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=6)
      ELSE
      0
      END AS L700_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=7)
      ELSE
      0
      END AS L52_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=8)
      ELSE
      0
      END AS L161_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END



END
-----------------------------------------------------------------------------------------------
--Name - Tushar Chandak	
--Date - 06/11/2014
--Purpose - ALTER Stored Procedure To get Get Work DataFor PersonOverview
-----------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 06/09/2014 21:43:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetWorkDataForPersonOverview]
(
@SSN char(9),
@MERGER_DATE_L600 DateTime = null,
@MERGER_DATE_L666 DateTime = null,
@MERGER_DATE_L700 DateTime = null,
@MERGER_DATE_L52 DateTime = null,
@MERGER_DATE_L161 DateTime = null
)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [int] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
IF @MERGER_DATE_L600  = null OR @MERGER_DATE_L666  = null OR @MERGER_DATE_L700  = null OR @MERGER_DATE_L52 = null OR @MERGER_DATE_L161 = null
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
ELSE
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=3)
      ELSE
      0
      END AS L600_HOURS,
 --(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L666)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=4)
      ELSE
      0
      END AS L666_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L700)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=6)
      ELSE
      0
      END AS L700_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L52)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=7)
      ELSE
      0
      END AS L52_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L161)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=8)
      ELSE
      0
      END AS L161_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END



END

-----------------------------------------------------------------------------------------------
--Name - Tushar Chandak	
--Date - 06/12/2014
--Purpose - ALTER Stored Procedure To get Get Work DataFor PersonOverview
-----------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 06/09/2014 21:43:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetWorkDataForPersonOverview]
(
@SSN char(9),
@MERGER_DATE_L600 DateTime = null,
@MERGER_DATE_L666 DateTime = null,
@MERGER_DATE_L700 DateTime = null,
@MERGER_DATE_L52 DateTime = null,
@MERGER_DATE_L161 DateTime = null
)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [int] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
declare @Last_Computation_Year int 
Select @Last_Computation_Year=MAX(ComputationYear) FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN
--sELECT * FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN 
IF @Last_Computation_Year <> 0 AND @Last_Computation_Year<2006
BEGIN
WHILE (@Last_Computation_Year <2006)
BEGIN
SET @Last_Computation_Year=@Last_Computation_Year+1
PRINT(@Last_Computation_Year)
INSERT INTO @PensionWorkHistory (ComputationYear,SSN,Source) values (@Last_Computation_Year,@SSN,'')
END

END
IF @MERGER_DATE_L600  = null OR @MERGER_DATE_L666  = null OR @MERGER_DATE_L700  = null OR @MERGER_DATE_L52 = null OR @MERGER_DATE_L161 = null
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
ELSE
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS QUALIFIED_HOURS,
 (SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
 AS VESTED_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=3)
      ELSE
      0
      END AS L600_HOURS,
 --(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L666)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=4)
      ELSE
      0
      END AS L666_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
 CASE WHEN YEAR(@MERGER_DATE_L700)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=6)
      ELSE
      0
      END AS L700_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L52)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=7)
      ELSE
      0
      END AS L52_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L161)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=8)
      ELSE
      0
      END AS L161_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
end



--------------------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------
-- Name - Tushar Thakare
-- Date - 03/20/2015
-- Purpose - PIR 859
----------------------------------------------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_PensionLateHours]    Script Date: 03/10/2015 03:28:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================
	-- Author:        Rohan Adgaonkar
	-- Create date:	  04/05/2013
	-- Description:   Removed Refs of Pid
	-- Updated:       03/20/2015/TusharT/PIR-859
	-- =============================================
ALTER PROCEDURE [dbo].[usp_PensionLateHours]
      @BatchRunDate smalldatetime, @BATCHNAME varchar(20)
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime

 IF @BATCHNAME='LATEIAP'
    BEGIN		
		SET @ENDDATE = (SELECT CONVERT (VARCHAR(25), DATEADD(yy, DATEDIFF(yy, 0, @BatchRunDate), -1), 101) ) 
		SET @BEGINDATE = (SELECT CONVERT (VARCHAR(25), DATEADD(yy, DATEDIFF(yy, 0, @BatchRunDate)-1, 0),101)) 
	END
 ELSE 
	BEGIN
		SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
		SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
    END
      
       
     
BEGIN
      SET NOCOUNT ON;
   
      
         select  
                              LTRIM(RTRIM(P.MPI_PERSON_ID)) MPID,
                              P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
                              REPORT.FROMDATE PAYPERIODSTARTDATE,
                              REPORT.TODATE PAYPERIODENDDATE,
                              REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked 
                                                      when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                      else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
                              IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
                              IAPPercent = Hours.IAPValue, EmpAccountNo,
                              REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end     
                                                      
                  from  eadb.dbo.Report report
				  inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
                  inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)                
                  left outer join OPUS.dbo.SGT_PERSON p on hours.ssn = p.ssn 
                  where EmpAccountNo not in (14002,13363,3596,3597,12904)     and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE 
	
	
      
               
   
END



----------------------------------------------------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar

----------------------------------------------------------------------------------------------------------------------------------

USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_PensionLateHours]    Script Date: 06/18/2015 21:58:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
ALTER PROCEDURE [dbo].[usp_PensionLateHours]
      @BatchRunDate smalldatetime, @BATCHNAME varchar(20) = null
AS
DECLARE
@BEGINDATE smalldatetime,
@ENDDATE   smalldatetime
 
IF @BATCHNAME='LATEIAP'
    BEGIN        
            --SET @ENDDATE = (SELECT CONVERT (VARCHAR(25), DATEADD(yy, DATEDIFF(yy, 0, @BatchRunDate), -1), 101) )
            select @BEGINDATE = --(SELECT CONVERT (VARCHAR(25), DATEADD(yy, DATEDIFF(yy, 0, @BatchRunDate)-1, 0),101))
            pe.cutoffdate from eadb.dbo.Period pe
            inner join eadb.dbo.Pensionyear py on py.enddate = pe.qualifyingenddate
            where py.pensionyear = year(@BatchRunDate) -2
            set @BEGINDATE = DATEADD(DAY,1, @BEGINDATE)
           
            select @ENDDATE = pe.cutoffdate from eadb.dbo.Period pe
            inner join eadb.dbo.Pensionyear py on py.enddate = pe.qualifyingenddate
            where py.pensionyear = year(@BatchRunDate) -1
           
      END
ELSE
      BEGIN
            SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BatchRunDate)),@BatchRunDate),101))
            SET @BEGINDATE = (SELECT convert(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BatchRunDate) - 1) ,DATEADD(mm,-1,@BatchRunDate)),101))
    END
     
       
     
BEGIN
      SET NOCOUNT ON;
  
      
         select 
                              LTRIM(RTRIM(P.MPI_PERSON_ID)) MPID,
                              P.SSN SSN,REPORT.PensionYear COMPUTATIONYEAR,
                              REPORT.FROMDATE PAYPERIODSTARTDATE,
                              REPORT.TODATE PAYPERIODENDDATE,
                              REPORT.PROCESSDATE PROCESSEDDATE,
                    HOURS.HOURSWORKED PENSIONHOURS,
                    IAPHours = case when report.rategroup = 8 then Hours.HoursWorked
                                                      when report.rategroup = 66 or report.rategroup = 42 then convert(numeric(7, 1), 0)
                                                      else convert(numeric(7, 1), Hours.HoursWorked * rgc.Pension) end,
                              IAPHoursA2 = convert(numeric(7, 1), Hours.HoursWorked * rgc.IAP),
                              IAPPercent = Hours.IAPValue, EmpAccountNo,
                              REPORTSTATUS = case when report.todate < @BEGINDATE then 'L'
                                        when report.todate between @BEGINDATE and @ENDDATE then 'R'
                                   end    
                                                      
                  from  eadb.dbo.Report report
                          inner join eadb.dbo.hours hours on hours.reportid = report.reportid and hours.status = 0
                  inner join eadb.dbo.vwRateGroupClassification_all RGC on report.RateGroup = RGC.RateGroup and report.ToDate between rgc.FromDate and rgc.ToDate and rgc.ToPensionSystem = 1 and (rgc.Pension = 1 or rgc.IAP = 1)               
                  left outer join OPUS.dbo.SGT_PERSON p on hours.ssn = p.ssn
                  where EmpAccountNo not in (14002,13363,3596,3597,12904) and report.status = 0 and report.processdate between @BEGINDATE and @ENDDATE
                  order by SSN,REPORT.PensionYear
 
END



----------------------------------------------------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
-- Purpose  - PIR 630
----------------------------------------------------------------------------------------------------------------------------------


USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetIAPSnapShotInfo]    Script Date: 06/18/2015 23:09:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[usp_GetIAPSnapShotInfo](@COMPUTATIONYEAR int, @OPTIONALPARAMETER int = 0) 
AS
BEGIN
SET NOCOUNT ON
--------------------------------------------------------------------------------------------

CREATE TABLE [#PensionWorkHistory](
      [ReportID] [varchar](18) NULL,
      [EmpAccountNo] [int] NULL,
      [ComputationYear] [smallint] NULL,
      [FromDate] [smalldatetime] NULL,
      [ToDate] [smalldatetime] NULL,
      [Weeks] [char](2) NULL,
      [Received] [smalldatetime] NULL,
      [Processed] [smalldatetime] NULL,
      [HoursID] [varchar](24) NULL,
      [SSN] [char](9) NULL,
      [LastName] [varchar](50) NULL,
      [FirstName] [varchar](50) NULL,
      [UnionCode] [int] NULL,
      [PensionPlan] [smallint] NULL,
      [PensionCredit] [numeric](7, 3) NULL,
      [L52VestedCredit] [smallint] NULL,
      [PensionHours] [numeric](7, 1) NULL,
      [IAPHours] [numeric](7, 1) NULL,
      [IAPHoursA2] [numeric](7, 1) NULL,
      [IAPPercent] [money] NULL,
      [ActiveHealthHours] [numeric](7, 1) NULL,
      [RetireeHealthHours] [numeric](7, 1) NULL,
      [PersonId] [varchar](15) NULL,
      [RateGroup] [varchar](4) NULL,
      [HoursStatus] [int] NULL,
      [LateMonthly] [varchar](1) NULL,
      [LateAnnual] [varchar](1) NULL,
      [UnionMisc] [char](2) NULL,
      [HoursWorked] [numeric](7, 1) NULL,
      [IAPHourlyRate] [money] NULL,
      [Source] [varchar](4) NULL,
      [ToHealthSystem] [int] NULL,
      [ToPensionSystem] [int] NULL,
      [IsActiveHealth] [int] NULL,
      [IsRetireeHealth] [int] NULL,
      [IsPension] [int] NULL,
      [IsIAPHourly] [int] NULL
      , [OldEmployerNum] [varchar](6) null
) 
insert into [#PensionWorkHistory]
exec usp_pensioninterface4opus_by_dates @COMPUTATIONYEAR,null,null


IF (@OPTIONALPARAMETER = 0)
BEGIN
      TRUNCATE TABLE OPUS.DBO.SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT 
	  
      INSERT INTO OPUS.DBO.SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT
      SELECT * FROM
      (
            SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,IAPHOURS , IAPHOURSA2, IAPPERCENT, 'N' AS LATE_FLAG,FromDate,ToDate,Weeks
            FROM [#PensionWorkHistory] 
            WHERE ComputationYear = @COMPUTATIONYEAR
            
            UNION ALL
            
            SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN, IAPHOURS, IAPHOURSA2, IAPPERCENT, 'Y' AS LATE_FLAG,FromDate,ToDate,Weeks
            FROM [#PensionWorkHistory]
            WHERE ComputationYear < @COMPUTATIONYEAR 
            --AND (LateMonthly = 'Y' or LateAnnual = 'Y')
      ) A
      ORDER BY SSN,COMPUTATIONYEAR DESC,EMPACCOUNTNO
      
       IF OBJECT_ID('OPUS..SGT_ALL_IAP_FULL_WORKHISTORY_4_SNAPSHOT') IS NOT NULL
	   BEGIN
	   DROP TABLE OPUS..SGT_ALL_IAP_FULL_WORKHISTORY_4_SNAPSHOT
	   END
      
      SELECT * INTO OPUS..SGT_ALL_IAP_FULL_WORKHISTORY_4_SNAPSHOT FROM [#PensionWorkHistory]
      
      
      
      DELETE FROM [#PensionWorkHistory] 
      
      DECLARE @PREVCOMPUTATIONYEAR INT = @COMPUTATIONYEAR - 1
      IF OBJECT_ID('OPUS..SGT_ALL_IAP_FULL_WORKHISTORY_4_SNAPSHOT_FOR_PREV_YEAR') IS NOT NULL
	  BEGIN
	  DROP TABLE OPUS..SGT_ALL_IAP_FULL_WORKHISTORY_4_SNAPSHOT_FOR_PREV_YEAR
	  END
      
      INSERT INTO [#PensionWorkHistory]
	  EXEC usp_pensioninterface4opus_by_dates @PREVCOMPUTATIONYEAR,null,null
	  SELECT * 
	  INTO OPUS..SGT_ALL_IAP_FULL_WORKHISTORY_4_SNAPSHOT_FOR_PREV_YEAR 
	  FROM
      (
            SELECT EMPACCOUNTNO,COMPUTATIONYEAR,SSN,IAPHOURS , IAPHOURSA2, IAPPERCENT, 'N' AS LATE_FLAG,FromDate,ToDate,Weeks
            FROM [#PensionWorkHistory] 
            WHERE ComputationYear = @PREVCOMPUTATIONYEAR
      ) A
      ORDER BY SSN,COMPUTATIONYEAR DESC,EMPACCOUNTNO
	  
      
END

ELSE

BEGIN -- Chamges for late Pension hours 
      IF OBJECT_ID('OPUS.DBO.TEMP_TABLE_FOR_LATE_PENSION_HOURS') IS NOT NULL
      BEGIN
            DROP TABLE OPUS.DBO.TEMP_TABLE_FOR_LATE_PENSION_HOURS
      END

      SELECT * INTO OPUS.DBO.TEMP_TABLE_FOR_LATE_PENSION_HOURS FROM
      (
            SELECT SUM(ISNULL(PensionHours,0)) AS PENSIONHOURS, SSN, 'Y' AS LATE_FLAG
            FROM [#PensionWorkHistory]
            WHERE ComputationYear < @COMPUTATIONYEAR 
            AND PENSIONPlAN = 2
            GROUP BY SSN
      ) B

END


drop table [#PensionWorkHistory]

END
