--------------------------------------------------------------------------------------------------------------------------
--Name: Rohan Adgaonkar
--Date:	05/04/2016
--purpose: Prod Pir 1052
---------------------------------------------------------------------------------------------------------------------------

USE [opus]
GO
/****** Object:  StoredProcedure [dbo].[GET_YEAR_END_DATA_EXTRACTION_INFO]    Script Date: 05/04/2016 11:44:22 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[GET_YEAR_END_DATA_EXTRACTION_INFO] @TEMPTABLE VARCHAR(1) = 'N'
AS
BEGIN
SET NOCOUNT ON

SELECT distinct DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) AS SSN,
(SELECT YEAR FROM SGT_YEAR_END_PROCESS_REQUEST WHERE YEAR_END_PROCESS_VALUE = 'ASPA' AND STATUS_VALUE = 'PEND') AS PensionYear 
FROM SGT_PERSON SP WITH(NOLOCK)
INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID 
INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID 
WHERE SPL.PLAN_ID IN (1,2)
AND (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')


END
go

--------------------------------------------------------------------------------------------------------------------------
--Name: Rohan Adgaonkar
--Date:	02/16/2016
--purpose: Prod Pir 1030
---------------------------------------------------------------------------------------------------------------------------


USE [OPUS]
GO
/****** Object:  StoredProcedure [dbo].[GET_ALL_PARTICIPANT_SSN]    Script Date: 02/16/2016 23:48:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[GET_ALL_PARTICIPANT_SSN] @ISBIS VARCHAR(1) = 'Y'
AS 
BEGIN
SET NOCOUNT ON


CREATE TABLE [#SSNINFORMATION](  
                [SSN] varchar(100) NULL,  
                [VESTING_DATE] DATETIME NULL,  
                [RECALCULATE_VESTING] varchar(1) NULL)

SELECT DISTINCT H.SSN INTO #EA 
FROM EADB..Report R
INNER JOIN EADB..Hours H ON R.ReportId = H.ReportId AND R.PensionYear >= YEAR(GETDATE())-2 AND R.PENSIONYEAR <= YEAR(GETDATE())-1
 


IF @ISBIS = 'N'
BEGIN 


INSERT INTO [#SSNINFORMATION]
SELECT DISTINCT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE,SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN #EA EA ON SP.SSN = EA.SSN
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND SPA.PLAN_ID = 2
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE in ('ACTV','INAC') 
and NOT EXISTS (SELECT * FROM SGT_BENEFIT_APPLICATION SBA WHERE SBA.PERSON_ID = SP.PERSON_ID
AND SBA.APPLICATION_STATUS_VALUE ='APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL'))
AND SP.DATE_OF_DEATH IS NULL AND 
SP.PERSON_ID NOT IN (SELECT Q.PERSON_ID FROM SGT_PERSON_BATCH_FLAGS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND BIS_FLAG = 'Y')
AND VESTED_DATE IS NOT NULL

DROP TABLE #EA

END
ELSE
BEGIN

INSERT INTO [#SSNINFORMATION]
SELECT DISTINCT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE,SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND SPA.PLAN_ID = 2
INNER JOIN #EA EA ON SP.SSN = EA.SSN
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE in ('ACTV','INAC') 
and NOT EXISTS (SELECT * FROM SGT_BENEFIT_APPLICATION SBA WHERE SBA.PERSON_ID = SP.PERSON_ID
AND SBA.APPLICATION_STATUS_VALUE ='APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL'))
AND (SP.DATE_OF_DEATH IS NULL OR (SP.DATE_OF_DEATH IS NOT NULL AND YEAR(SP.DATE_OF_DEATH)=YEAR(GETDATE())-1)) 


UNION
SELECT DISTINCT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE,SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND SPA.PLAN_ID = 2
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE in ('ACTV','INAC') 
and NOT EXISTS (SELECT * FROM SGT_BENEFIT_APPLICATION SBA WHERE SBA.PERSON_ID = SP.PERSON_ID
AND SBA.APPLICATION_STATUS_VALUE ='APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL'))
AND (SP.DATE_OF_DEATH IS NULL OR (SP.DATE_OF_DEATH IS NOT NULL AND YEAR(SP.DATE_OF_DEATH)=YEAR(GETDATE())-1)) 
AND SP.RECALCULATE_VESTING_FLAG = 'Y'


DROP TABLE #EA

END


SELECT DISTINCT SSNINFO.SSN,
(SELECT MAX(VESTING_DATE) FROM [#SSNINFORMATION] WHERE SSN = SSNINFO.SSN) AS VESTING_DATE,
SSNINFO.RECALCULATE_VESTING
FROM [#SSNINFORMATION] AS SSNINFO
 
DROP TABLE [#SSNINFORMATION]

END


go



--------------------------------------------------------------------------------------------------------------------------
--Name: Rohan Adgaonkar
--Date:	02/10/2015
--purpose: Prod Pir 850
---------------------------------------------------------------------------------------------------------------------------

USE [OPUS]
GO
/****** Object:  StoredProcedure [dbo].[GET_ALL_PARTICIPANT_SSN]    Script Date: 02/10/2015 10:54:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[GET_ALL_PARTICIPANT_SSN] @ISBIS VARCHAR(1) = 'Y'
AS 
BEGIN
SET NOCOUNT ON


CREATE TABLE [#SSNINFORMATION](  
                [SSN] varchar(100) NULL,  
                [VESTING_DATE] DATETIME NULL,  
                [RECALCULATE_VESTING] varchar(1) NULL)

SELECT DISTINCT H.SSN INTO #EA 
FROM EADB..Report R
INNER JOIN EADB..Hours H ON R.ReportId = H.ReportId AND R.PensionYear >= YEAR(GETDATE())-2 AND R.PENSIONYEAR <= YEAR(GETDATE())-1
  


IF @ISBIS = 'N'
BEGIN 


INSERT INTO [#SSNINFORMATION]
SELECT DISTINCT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE,SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN #EA EA ON SP.SSN = EA.SSN
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND SPA.PLAN_ID = 2
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE in ('ACTV','INAC') 
and NOT EXISTS (SELECT * FROM SGT_BENEFIT_APPLICATION SBA WHERE SBA.PERSON_ID = SP.PERSON_ID
AND SBA.APPLICATION_STATUS_VALUE ='APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL'))
AND SP.DATE_OF_DEATH IS NULL AND 
SP.PERSON_ID NOT IN (SELECT Q.PERSON_ID FROM SGT_PERSON_BATCH_FLAGS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND BIS_FLAG = 'Y')
AND VESTED_DATE IS NOT NULL

DROP TABLE #EA

END
ELSE
BEGIN

INSERT INTO [#SSNINFORMATION]
SELECT DISTINCT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE,SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND SPA.PLAN_ID = 2
INNER JOIN #EA EA ON SP.SSN = EA.SSN
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE in ('ACTV','INAC') 
and NOT EXISTS (SELECT * FROM SGT_BENEFIT_APPLICATION SBA WHERE SBA.PERSON_ID = SP.PERSON_ID
AND SBA.APPLICATION_STATUS_VALUE ='APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL'))
AND (SP.DATE_OF_DEATH IS NULL OR (SP.DATE_OF_DEATH IS NOT NULL AND YEAR(SP.DATE_OF_DEATH)=YEAR(GETDATE())-1)) AND SP.DATE_OF_BIRTH IS NOT NULL

UNION
SELECT DISTINCT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE,SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND SPA.PLAN_ID = 2
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE in ('ACTV','INAC') 
and NOT EXISTS (SELECT * FROM SGT_BENEFIT_APPLICATION SBA WHERE SBA.PERSON_ID = SP.PERSON_ID
AND SBA.APPLICATION_STATUS_VALUE ='APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL'))
AND (SP.DATE_OF_DEATH IS NULL OR (SP.DATE_OF_DEATH IS NOT NULL AND YEAR(SP.DATE_OF_DEATH)=YEAR(GETDATE())-1)) AND SP.DATE_OF_BIRTH IS NOT NULL
AND SP.RECALCULATE_VESTING_FLAG = 'Y'

DROP TABLE #EA

END


SELECT DISTINCT SSNINFO.SSN,
(SELECT MAX(VESTING_DATE) FROM [#SSNINFORMATION] WHERE SSN = SSNINFO.SSN) AS VESTING_DATE,
SSNINFO.RECALCULATE_VESTING
FROM [#SSNINFORMATION] AS SSNINFO
 
DROP TABLE [#SSNINFORMATION]

END





--------------------------------------------------------------------------------------------------------------------------
--Name: Tushar Thakare
--Date:	12/05/2014
--purpose: Prod Pir 379 field idecTotalIAPHours is replaced by idecIAPHours
---------------------------------------------------------------------------------------------------------------------------
USE [EADB]
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkDataForPersonOverview]    Script Date: 12/05/2014 01:25:48 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROC [dbo].[usp_GetWorkDataForPersonOverview]
(
@SSN char(9),
@MERGER_DATE_L600 DateTime = null,
@MERGER_DATE_L666 DateTime = null,
@MERGER_DATE_L700 DateTime = null,
@MERGER_DATE_L52 DateTime = null,
@MERGER_DATE_L161 DateTime = null
)
AS
BEGIN
SET NOCOUNT ON
DECLARE @PensionWorkHistory TABLE(
      [ReportID] [varchar](18) NULL,
      [EmpAccountNo] [int] NULL,
      [ComputationYear] [int] NULL,
      [FromDate] [smalldatetime] NULL,
      [ToDate] [smalldatetime] NULL,
      [Weeks] [char](2) NULL,
      [Received] [smalldatetime] NULL,
      [Processed] [smalldatetime] NULL,
      [HoursID] [varchar](24) NULL,
      [SSN] [char](9) NULL,
      [LastName] [varchar](50) NULL,
      [FirstName] [varchar](50) NULL,
      [UnionCode] [int] NULL,
      [PensionPlan] [smallint] NULL,
      [PensionCredit] [numeric](7, 3) NULL,
      [L52VestedCredit] [smallint] NULL,
      [PensionHours] [numeric](7, 1) NULL,
      [IAPHours] [numeric](7, 1) NULL,
      [IAPHoursA2] [numeric](7, 1) NULL,
      [IAPPercent] [money] NULL,
      [ActiveHealthHours] [numeric](7, 1) NULL,
      [RetireeHealthHours] [numeric](7, 1) NULL,
      [PersonId] [varchar](15) NULL,
      [RateGroup] [varchar](4) NULL,
      [HoursStatus] [int] NULL,
      [LateMonthly] [varchar](1)  NULL,
      [LateAnnual] [varchar](1)  NULL,
      [UnionMisc] [char](2) NULL,
      [HoursWorked] [numeric](7, 1) NULL,
      [IAPHourlyRate] [money] NULL,
      [Source] [varchar](4) NOT NULL,
      [ToHealthSystem] [int] NULL,
      [ToPensionSystem] [int] NULL,
      [IsActiveHealth] [int] NULL,
      [IsRetireeHealth] [int] NULL,
      [IsPension] [int] NULL,
      [IsIAPHourly] [int] NULL
      , [OldEmployerNum] [varchar](6) null
) 

INSERT INTO @PensionWorkHistory 
EXEC usp_PensionInterface4OPUS @SSN
declare @Last_Computation_Year int 
Select @Last_Computation_Year=MAX(ComputationYear) FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN
--sELECT * FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN 
IF @Last_Computation_Year <> 0 AND @Last_Computation_Year<2006
BEGIN
WHILE (@Last_Computation_Year <2006)
BEGIN
SET @Last_Computation_Year=@Last_Computation_Year+1
PRINT(@Last_Computation_Year)
INSERT INTO @PensionWorkHistory (ComputationYear,SSN,Source) values (@Last_Computation_Year,@SSN,'')
END

END
IF @MERGER_DATE_L600  = null OR @MERGER_DATE_L666  = null OR @MERGER_DATE_L700  = null OR @MERGER_DATE_L52 = null OR @MERGER_DATE_L161 = null
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
AS VESTED_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
ELSE
BEGIN
SELECT DISTINCT VPIO.ComputationYear AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
AS QUALIFIED_HOURS,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2)
AS VESTED_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L600)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=3)
      ELSE
      0
      END AS L600_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=3) AS L600_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L666)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=4)
      ELSE
      0
      END AS L666_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=4) AS L666_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L700)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=6)
      ELSE
      0
      END AS L700_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=6) AS L700_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L52)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=7)
      ELSE
      0
      END AS L52_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=7) AS L52_HOURS,
CASE WHEN YEAR(@MERGER_DATE_L161)=VPIO.ComputationYear 
      THEN
      (SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN and PensionPlan=8)
      ELSE
      0
      END AS L161_HOURS,
--(SELECT SUM(PensionHours)  FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=8) AS L161_HOURS,
(SELECT SUM(IAPHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecIAPHours,
(SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS idecTotalHealthHours,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN) as PlanStartDate,
(SELECT MIN(FromDate) from @PensionWorkHistory WHERE SSN=VPIO.SSN AND cast(ComputationYear as int) = cast(VPIO.ComputationYear as int)) as firstHourReported
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR
END
end



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



USE [OPUS]
GO



/****** Object:  View [dbo].[SGT_PERSON]    Script Date: 06/20/2013 12:23:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[SGT_PERSON] 
AS 
SELECT * FROM SGT_PERSON_BASE 
WHERE (IS_PERSON_DELETED_FLAG IS NULL OR IS_PERSON_DELETED_FLAG = 'N')

GO


/****** Object:  StoredProcedure [dbo].[GET_ALL_PARTICIPANT_SSN]    Script Date: 06/20/2013 12:01:28 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[GET_ALL_PARTICIPANT_SSN]
AS
BEGIN
SET NOCOUNT ON


CREATE TABLE [#SSNINFORMATION](  
                [SSN] varchar(100) NULL,  
                [VESTING_DATE] DATETIME NULL,  
                [RECALCULATE_VESTING] varchar(1) NULL)
                
INSERT INTO [#SSNINFORMATION]
SELECT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE, SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP 
INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID 
INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID 
LEFT JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE SPL.PLAN_ID IN (1,2)
AND (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE NOT IN ('RETR')

SELECT DISTINCT SSNINFO.SSN,
(SELECT MAX(VESTING_DATE) FROM [#SSNINFORMATION] WHERE SSN = SSNINFO.SSN) AS VESTING_DATE,
SSNINFO.RECALCULATE_VESTING
 FROM [#SSNINFORMATION] AS SSNINFO 
 
DROP TABLE [#SSNINFORMATION]

END 


GO




/****** Object:  StoredProcedure [dbo].[GET_ALL_PARTICIPANT_SSN_FOR_ACTIVE_OUTBOUND_FILE]    Script Date: 06/20/2013 12:02:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[GET_ALL_PARTICIPANT_SSN_FOR_ACTIVE_OUTBOUND_FILE]
AS
BEGIN
SET NOCOUNT ON

-- ALL ACTIVE PARTICIPANT
CREATE TABLE [#SSN](  
                [SSN] VARCHAR(9) NULL,
                [FLAG] VARCHAR(1) NULL)


INSERT INTO [#SSN]
SELECT DISTINCT 
 SP.SSN 
, CASE WHEN (SUM(ISNULL(SPARC.IAP_BALANCE_AMOUNT,0)) > 0 OR SUM(ISNULL(SPARC.EE_CONTRIBUTION_AMOUNT,0)) > 0) THEN 'N' ELSE 'Y' END 
FROM SGT_PERSON SP WITH(NOLOCK) 
INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID 
INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID 
LEFT OUTER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WITH(NOLOCK) ON SPARC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE 
(SP.SSN IS NOT NULL OR SP.SSN <> '') 
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL 
AND SP.DATE_OF_DEATH IS NULL 
AND SPA.STATUS_VALUE = 'ACTV' 
GROUP BY
SP.MPI_PERSON_ID 
, SP.FIRST_NAME 
, SP.LAST_NAME 
, SP.SSN 
, SP.DATE_OF_BIRTH 

-- LOAD WORKHISTORY FOR ACTIVE PARTICIPANT 
CREATE TABLE [#SSNINFORMATION]([SSN] VARCHAR(9) NULL)
INSERT INTO [#SSNINFORMATION]
SELECT [SSN] FROM [#SSN] WHERE [FLAG] = 'Y'

SELECT [SSN],NULL,NULL FROM [#SSNINFORMATION]
END 

GO




/****** Object:  StoredProcedure [dbo].[GET_ALL_PARTICIPANT_SSN_FOR_HEALTH_ELIGBILITY]    Script Date: 06/20/2013 12:03:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----------------------------------------------------------------------------------
--Name: Abhishek Sharma
--Date:	04/08/2013
--purpose: Created SP GET_ALL_PARTICIPANT_SSN_FOR_HEALTH_ELIGBILITY
-----------------------------------------------------------------------------------
CREATE PROC [dbo].[GET_ALL_PARTICIPANT_SSN_FOR_HEALTH_ELIGBILITY]
AS
BEGIN
SET NOCOUNT ON


CREATE TABLE [#SSNINFORMATION](  
                [SSN] varchar(100) NULL,  
                [VESTING_DATE] DATETIME NULL,  
                [RECALCULATE_VESTING] varchar(1) NULL)
                
INSERT INTO [#SSNINFORMATION]
SELECT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE, SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP WITH(NOLOCK)
INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID 
INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID 
LEFT JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE WITH(NOLOCK) ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE SPL.PLAN_ID IN (1,2)
AND (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL 



SELECT DISTINCT SSNINFO.SSN,
(SELECT MAX(VESTING_DATE) FROM [#SSNINFORMATION] WHERE SSN = SSNINFO.SSN) AS VESTING_DATE,
SSNINFO.RECALCULATE_VESTING
 FROM [#SSNINFORMATION] AS SSNINFO 

END 

GO




/****** Object:  StoredProcedure [dbo].[GET_DECRYPTED]    Script Date: 06/20/2013 12:04:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GET_DECRYPTED]
      @encryptedText [nvarchar](max),
      @Text [nvarchar](max) OUTPUT
AS
SET @Text = @encryptedText

GO




/****** Object:  StoredProcedure [dbo].[GET_ENCRYPTED]    Script Date: 06/20/2013 12:04:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GET_ENCRYPTED]
      @Text [nvarchar](max),
      @encryptedText [nvarchar](max) OUTPUT
AS
SET @encryptedText = @Text

GO



/****** Object:  StoredProcedure [dbo].[GET_NEW_PARTICIPANT_SSN]    Script Date: 06/20/2013 12:05:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROC [dbo].[GET_NEW_PARTICIPANT_SSN]
AS
BEGIN
SET NOCOUNT ON


CREATE TABLE [#SSNINFORMATION](  
                [SSN] varchar(100) NULL,  
                [VESTING_DATE] DATETIME NULL,  
                [RECALCULATE_VESTING] varchar(1) NULL)
                
INSERT INTO [#SSNINFORMATION]
SELECT (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN)) AS SSN,PAE.VESTED_DATE AS VESTING_DATE, SP.RECALCULATE_VESTING_FLAG AS RECALCULATE_VESTING
FROM SGT_PERSON SP WITH(NOLOCK)
INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID 
INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID 
LEFT JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE WITH(NOLOCK) ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID
WHERE SPL.PLAN_ID IN (1,2)
AND (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL 
AND SP.PERSON_ID IS NOT NULL
AND SPA.STATUS_VALUE NOT IN ('RETR','DCSD')
AND (SP.NEW_PARTICIPANT_LETTER_SEND_FLAG IS NULL OR SP.NEW_PARTICIPANT_LETTER_SEND_FLAG = 'N')

SELECT DISTINCT SSNINFO.SSN,
(SELECT MAX(VESTING_DATE) FROM [#SSNINFORMATION] WHERE SSN = SSNINFO.SSN) AS VESTING_DATE,
SSNINFO.RECALCULATE_VESTING
 FROM [#SSNINFORMATION] AS SSNINFO 
 
DROP TABLE [#SSNINFORMATION]
END 

GO





/****** Object:  StoredProcedure [dbo].[Get_PreviousMonths_LateHours_And_Contributions]    Script Date: 06/20/2013 12:05:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Get_PreviousMonths_LateHours_And_Contributions] (@BATCH_RUN_DATE DATETIME)
AS
BEGIN
SET NOCOUNT ON

DECLARE @PENSION_LATE_HOURS TABLE
(
	[SEQ_NO] INT IDENTITY(1,1) NOT NULL, 
	MPID NVARCHAR(20),
	SSN FLOAT,
	PAY_PERIOD_START_DATE SMALLDATETIME,
	PAY_PERIOD_END_DATE SMALLDATETIME,
	PROCESSED_DATE SMALLDATETIME,
	PENSION_HOURS FLOAT,
	IAPHOURS FLOAT,
	IAPHOURSA2 FLOAT,
	IAPPERCENT FLOAT,
	REPORT_STATUS CHAR(1)
)

DECLARE @ENDDATE DATETIME
DECLARE @BEGINDATE DATETIME

SET @ENDDATE = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@BATCH_RUN_DATE)),@BATCH_RUN_DATE),101))
SET @BEGINDATE = (SELECT CONVERT(varchar(25),DATEADD(dd,(-1) * (DATEPART(dd,@BATCH_RUN_DATE) - 1) ,DATEADD(mm,-1,@BATCH_RUN_DATE)),101))


SELECT DISTINCT 
		SP.PERSON_ID ,SP.MPI_PERSON_ID, 0.0 as UVHP_AMOUNT,0 as COMPUTATIONAL_YEAR,SPA.PAYEE_ACCOUNT_ID, 
		0 AS WITHDRAWAL_PAYEE_ACCOUNT_ID, SPBA.PAYEE_BENEFIT_ACCOUNT_ID,
		CASE WHEN SBA.RETIREMENT_DATE IS NULL THEN SBA.WITHDRAWAL_DATE ELSE RETIREMENT_DATE END AS RETIREMENT_DATE
		,SBA.MODIFIED_DATE, REPORTSTATUS = 'L'
FROM 
		SGT_PERSON SP 
		INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SP.PERSON_ID = SBA.PERSON_ID
		INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PERSON_ID = SP.PERSON_ID
		INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID 
		INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID
		INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID
		AND SPAS.STATUS_ID =(SELECT TOP 1 Q.STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q 
		WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.MODIFIED_DATE DESC)
		
WHERE 
	SBA.APPLICATION_STATUS_VALUE = 'APPR' AND SBA.MIN_DISTRIBUTION_FLAG <> 'Y'
	AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE <> 'QDRO' 
	AND(((SELECT TOP (1) Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) 
	WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY 
	Q.STATUS_EFFECTIVE_DATE DESC) IN  ('APRD','REVW','CMPL') AND SPBX.PLAN_ID = 1 )
	OR 
 ((SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) 
	WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY 
	Q.STATUS_EFFECTIVE_DATE DESC) NOT IN ('CNCL') AND SPBX.PLAN_ID <> 1 ))
	AND SPA.REFERENCE_ID IS NULL AND (SBA.RETIREMENT_DATE IS NOT NULL OR SBA.WITHDRAWAL_DATE IS NOT NULL)
	AND (SPA.RETIREE_INCR_FLAG <> 'Y' or SPA.RETIREE_INCR_FLAG is NULL)

UNION

SELECT DISTINCT
	  SPA.PERSON_ID,SP.MPI_PERSON_ID, SUM(UVHP_AMOUNT) AS UVHP_AMOUNT, 
	  cast(SPARC.COMPUTATIONAL_YEAR as int)AS COMPUTATIONAL_YEAR, PSAE.PAYEE_ACCOUNT_ID,
	  SPACC.PAYEE_ACCOUNT_ID AS WITHDRAWAL_PAYEE_ACCOUNT_ID,
	  SPBA.PAYEE_BENEFIT_ACCOUNT_ID, SBA.RETIREMENT_DATE,SBA.MODIFIED_DATE, REPORTSTATUS = 'R'
FROM
	 SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WITH(NOLOCK)
	 JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID
	 JOIN SGT_PERSON SP WITH(NOLOCK) ON SPA.PERSON_ID = SP.PERSON_ID
	 LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) on SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE = 'WDRL' 
	 and SPARC.EFFECTIVE_DATE <= SBA.WITHDRAWAL_DATE  AND SBA.APPLICATION_STATUS_VALUE = 'APPR'
	 LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PSAE WITH(NOLOCK) ON PSAE.PERSON_ID = SP.PERSON_ID AND PSAE.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' 
	 AND (PSAE.RETIREE_INCR_FLAG <> 'Y' or PSAE.RETIREE_INCR_FLAG is NULL) 
	 LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = PSAE.PAYEE_BENEFIT_ACCOUNT_ID
	 LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPBX.PLAN_BENEFIT_ID = PSAE.PLAN_BENEFIT_ID AND  
	 (((SELECT TOP (1) Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) 
	WHERE Q.PAYEE_ACCOUNT_ID = PSAE.PAYEE_ACCOUNT_ID ORDER BY 
	Q.STATUS_EFFECTIVE_DATE DESC) IN  ('APRD','REVW','CMPL') AND SPBX.PLAN_ID = 1)
	OR 
 ((SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) 
	WHERE Q.PAYEE_ACCOUNT_ID = PSAE.PAYEE_ACCOUNT_ID ORDER BY 
	Q.STATUS_EFFECTIVE_DATE DESC) NOT IN ('CNCL')) AND SPBX.PLAN_ID <> 1)
	AND PSAE.REFERENCE_ID IS NULL AND (SBA.RETIREMENT_DATE IS NOT NULL OR SBA.WITHDRAWAL_DATE IS NOT NULL)
	 LEFT JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PERSON_ID = SP.PERSON_ID AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' 
	 AND (SPACC.RETIREE_INCR_FLAG <> 'Y' or SPACC.RETIREE_INCR_FLAG is NULL)
WHERE
	SPARC.TRANSACTION_DATE >=  @BEGINDATE AND SPARC.TRANSACTION_DATE <= @ENDDATE and 
	(SPARC.TRANSACTION_TYPE_VALUE IS NULL OR SPARC.TRANSACTION_TYPE_VALUE <> 'PMNT' )
	AND SP.PERSON_ID NOT IN (SELECT Q.PERSON_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID =SP.PERSON_ID 
	AND MIN_DISTRIBUTION_FLAG = 'Y' AND BENEFIT_TYPE_VALUE= 'RTMT' AND APPLICATION_STATUS_VALUE = 'APPR') 
	AND SP.PERSON_ID IN (SELECT Q.PERSON_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID =SP.PERSON_ID 
	AND (MIN_DISTRIBUTION_FLAG IS NULL OR MIN_DISTRIBUTION_FLAG = 'N') AND BENEFIT_TYPE_VALUE= 'RTMT' AND APPLICATION_STATUS_VALUE = 'APPR') 
	       group by COMPUTATIONAL_YEAR, PSAE.PAYEE_ACCOUNT_ID, SPBA.PAYEE_BENEFIT_ACCOUNT_ID,
	        SP.MPI_PERSON_ID, SPA.PERSON_ID, COMPUTATIONAL_YEAR, SBA.RETIREMENT_DATE, SPACC.PAYEE_ACCOUNT_ID,
	        SBA.MODIFIED_DATE having SUM(SPARC.UVHP_AMOUNT)<> 0
	        ORDER BY SP.PERSON_ID DESC	              	       
END
GO







/****** Object:  StoredProcedure [dbo].[GET_YEAR_END_DATA_EXTRACTION_INFO]    Script Date: 06/20/2013 12:06:36 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[GET_YEAR_END_DATA_EXTRACTION_INFO]
AS
BEGIN
SET NOCOUNT ON
SELECT distinct DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) AS SSN,
(SELECT YEAR FROM SGT_YEAR_END_PROCESS_REQUEST WHERE YEAR_END_PROCESS_VALUE = 'ASPA' AND STATUS_VALUE = 'PEND') AS PensionYear 

FROM SGT_PERSON SP WITH(NOLOCK)
INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID 
INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID 
WHERE SPL.PLAN_ID IN (1,2)
AND (SP.SSN IS NOT NULL OR SP.SSN <> '')
AND SPA.BENEFECIARY_PERSON_ID IS NULL 
AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL
END

GO



/****** Object:  StoredProcedure [dbo].[INSERT_PERSON_INFO_INTO_OPUS]    Script Date: 06/20/2013 12:06:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[INSERT_PERSON_INFO_INTO_OPUS]
	(		
		@SSN CHAR(9)=NULL,
		@FIRST_NAME UDT_NAME,
		@MIDDLE_NAME UDT_NAME=NULL,
		@LAST_NAME UDT_NAME,
		@GENDER_VALUE UDT_CODE_VALUE,
		@DATE_OF_BIRTH VARCHAR(10),
		@ADDR_LINE_1 UDT_ADDRESS=NULL,
		@ADDR_LINE_2 UDT_ADDRESS=NULL,
		@ADDR_CITY UDT_CITY=NULL,
		@STATE varchar(256)=NULL,
		@ZIP varchar(10)=NULL,
		@ADDR_COUNTRY_VALUE UDT_CODE_VALUE=NULL,
		@START_DATE UDT_DATETIME=NULL,
		@CREATED_BY UDT_CREATEDBY=NULL,
		@Update varchar(1)=NULL,
		@MPI_PERSON_ID UDT_DATA OUTPUT
		--@RESULT VARCHAR(500) OUTPUT	
	)
	AS
		DECLARE @RESULT INT 
		BEGIN
			DECLARE @COUNT AS INT
			DECLARE @PERSON_ID AS INT
			DECLARE @ADDRESS_ID AS INT
			DECLARE @FLAG AS INT
			DECLARE @VIP_FLAG AS VARCHAR(5)
			------
			DECLARE @EncryptedSSN VARCHAR(100)
			DECLARE @EncryptedDateOfBirth VARCHAR(100)
			
			exec GET_ENCRYPTED @SSN,@EncryptedSSN output
			exec GET_ENCRYPTED @DATE_OF_BIRTH,@EncryptedDateOfBirth output
			
			
			SET @PERSON_ID=0
			SET @ADDRESS_ID=0
			SET @FLAG=0 
			SET @VIP_FLAG='N'
			------
			SET @EncryptedSSN= ltrim(rtrim(@EncryptedSSN))
			
			SET @FIRST_NAME=LTRIM(RTRIM(@FIRST_NAME))
			SET @MIDDLE_NAME=LTRIM(RTRIM(@MIDDLE_NAME))
			SET @LAST_NAME=LTRIM(RTRIM(@LAST_NAME))
			SET @GENDER_VALUE=LTRIM(RTRIM(@GENDER_VALUE))
			SET	@ADDR_LINE_1 =LTRIM(RTRIM(@ADDR_LINE_1))
			SET	@ADDR_LINE_2 =LTRIM(RTRIM(@ADDR_LINE_2))
			SET	@ADDR_CITY =LTRIM(RTRIM(@ADDR_CITY))
			SET	@STATE =LTRIM(RTRIM(@STATE))
			SET	@ZIP =LTRIM(RTRIM(@ZIP))
			SET @CREATED_BY=LTRIM(RTRIM(@CREATED_BY))
			SET	@ADDR_COUNTRY_VALUE =LTRIM(RTRIM(@ADDR_COUNTRY_VALUE))
			SET @ADDR_COUNTRY_VALUE=RIGHT('0000' + CONVERT(VARCHAR,@ADDR_COUNTRY_VALUE), 4)
			SET @RESULT=''	
			IF @CREATED_BY IS NULL OR @CREATED_BY =''
			BEGIN
				SET @CREATED_BY='Employer Report'
			END
			
			DECLARE @PensionWorkHistory TABLE(
					[ReportID] [varchar](18) NULL,
					[EmpAccountNo] [int] NULL,
					[ComputationYear] [smallint] NULL,
					[FromDate] [smalldatetime] NULL,
					[ToDate] [smalldatetime] NULL,
					[Weeks] [char](2) NULL,
					[Received] [smalldatetime] NULL,
					[Processed] [smalldatetime] NULL,
					[HoursID] [varchar](24) NULL,
					[SSN] [char](9) NULL,
					[LastName] [varchar](50) NULL,
					[FirstName] [varchar](50) NULL,
					[UnionCode] [int] NULL,
					[PensionPlan] [smallint] NULL,
					[PensionCredit] [numeric](7, 3) NULL,
					[L52VestedCredit] [smallint] NULL,
					[PensionHours] [numeric](7, 1) NULL,
					[IAPHours] [numeric](7, 1) NULL,
					[IAPHoursA2] [numeric](7, 1) NULL,
					[IAPPercent] [money] NULL,
					[ActiveHealthHours] [numeric](7, 1) NULL,
					[RetireeHealthHours] [numeric](7, 1) NULL,
					[MPI_PERSON_ID] [varchar](15) NULL,
					[RateGroup] [varchar](4) NULL,
					[HoursStatus] [int] NULL,
					[LateMonthly] [varchar](1)  NULL,
					[LateAnnual] [varchar](1)  NULL,
					[UnionMisc] [char](2) NULL,
					[HoursWorked] [numeric](7, 1) NULL,
					[IAPHourlyRate] [money] NULL,
					[Source] [varchar](4) NOT NULL,
					[ToHealthSystem] [int] NULL,
					[ToPensionSystem] [int] NULL,
					[IsActiveHealth] [int] NULL,
					[IsRetireeHealth] [int] NULL,
					[IsPension] [int] NULL,
					[IsIAPHourly] [int] NULL,
					[OldEmployerNum] [varchar](6) NULL
				) 


			INSERT INTO @PensionWorkHistory 
			EXEC EADB.dbo.usp_PensionInterface4OPUS @SSN


						
			------				
			SELECT @COUNT = COUNT(*) FROM SGT_PERSON WHERE SSN=@EncryptedSSN
			
		
			IF ((@COUNT <= 0 OR (@EncryptedSSN IS NULL OR @EncryptedSSN = '')) AND (@Update IS NULL OR @Update <> 'U'))
				BEGIN
					
					SELECT @VIP_FLAG ='Y' FROM EADB.dbo.Hours H JOIN EADB.dbo.Report R 
					ON H.ReportId=R.ReportId WHERE H.SSN=@EncryptedSSN AND R.EmpAccountNo=540
					
					
					INSERT INTO SGT_PERSON (SSN,FIRST_NAME,MIDDLE_NAME,LAST_NAME,GENDER_ID,GENDER_VALUE,
					DATE_OF_BIRTH,VIP_FLAG,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ,MPI_PERSON_ID) VALUES
					(@EncryptedSSN,@FIRST_NAME,@MIDDLE_NAME,@LAST_NAME,6014,@GENDER_VALUE,@EncryptedDateOfBirth,@VIP_FLAG,
					@CREATED_BY,GETDATE(),@CREATED_BY,GETDATE(),0,'M')
				
					SET @PERSON_ID = @@IDENTITY
					PRINT @PERSON_ID
					
					SELECT @MPI_PERSON_ID= 'M'+ RIGHT('00000000'+ CONVERT(VARCHAR,PERSON_ID),8) FROM SGT_PERSON WHERE PERSON_ID=@PERSON_ID	
					UPDATE SGT_PERSON SET MPI_PERSON_ID=@MPI_PERSON_ID WHERE PERSON_ID=@PERSON_ID	
					
					-- BEGIN FOR SSN MERGE AND INSERT RECORD IN SGW_WORKFLOW_REQUEST TABLE.
					DECLARE @MPI_PERSON_ID_FOR_SSN_MERGE UDT_DATA
					
					SELECT @PERSON_ID = PERSON_ID, @MPI_PERSON_ID_FOR_SSN_MERGE = MPI_PERSON_ID FROM SGT_PERSON WITH(NOLOCK) WHERE PERSON_ID=@PERSON_ID	
					IF @PERSON_ID=0
						BEGIN
						--SET @RESULT=@RESULT + ' ' + 'ERROR : PERSON DOES NOT EXIST.'
						SET @RESULT=0
						SET @FLAG=1
						END
					ELSE
						BEGIN 
						IF EXISTS (SELECT SP.FIRST_NAME, SP.LAST_NAME, SP.DATE_OF_BIRTH, SP.SSN, SP.PERSON_ID FROM SGT_PERSON SP WITH(NOLOCK)
						LEFT OUTER JOIN SGT_SSN_MERGE_HISTORY SSMH WITH (NOLOCK) ON SSMH.OLD_SSN = SP.SSN
						WHERE
						( 
							(
								(SP.FIRST_NAME IS NOT NULL  AND SP.FIRST_NAME = @FIRST_NAME) OR 
								(SP.LAST_NAME IS NOT NULL AND SP.LAST_NAME = @LAST_NAME) OR 
								(SP.DATE_OF_BIRTH IS NOT NULL AND  SP.DATE_OF_BIRTH = @DATE_OF_BIRTH )
							)
							AND (DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) IS NOT NULL)
							AND
							(DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+ SUBSTRING(@SSN,1,5)+'%'
							OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSN,2,5)+'%'
							OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSN,3,5)+'%'
							OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSN,4,5)+'%'
							OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSN,5,5)+'%')
							AND SP.PERSON_ID != @PERSON_ID
						)				
						OR
						(SSMH.OLD_SSN IS NOT NULL))
						BEGIN
							INSERT INTO SGW_WORKFLOW_REQUEST VALUES (NULL,23,NULL,NULL,NULL,@PERSON_ID,NULL,
							NULL,1601,'PSNP',1602,'ONLI',NULL,NULL,'OPUS_STORED_PROC',GETDATE(),'OPUS_STORED_PROC',GETDATE(),0,
							NULL,NULL,NULL,NULL)
							
							-- INSERT WORKFLOW REQUEST PARAMETER
							DECLARE @WORKFLOW_REQUEST_ID INT
							SELECT TOP 1 @WORKFLOW_REQUEST_ID = WORKFLOW_REQUEST_ID FROM SGW_WORKFLOW_REQUEST WITH(NOLOCK) 
							WHERE PROCESS_ID = 23 AND PERSON_ID = @PERSON_ID
							ORDER BY WORKFLOW_REQUEST_ID DESC
							
							INSERT INTO SGW_REQUEST_PARAMETER
							VALUES (@WORKFLOW_REQUEST_ID,'PERSON_ID', @PERSON_ID, 'OPUS_STORED_PROC',GETDATE(),'OPUS_STORED_PROC',GETDATE(),0)

							INSERT INTO SGW_REQUEST_PARAMETER
							VALUES (@WORKFLOW_REQUEST_ID,'MPI_PERSON_ID', @MPI_PERSON_ID_FOR_SSN_MERGE, 'OPUS_STORED_PROC',GETDATE(),'OPUS_STORED_PROC',GETDATE(),0)
							--END INSERT WORKFLOW REQUEST PARAMETER
														
							--SET @RESULT='SUCCESS : RECORD HAS BEEN INSERTED IN SGW_WORKFLOW_REQUEST, SGW_REQUEST_PARAMETER TABLES.'
							SET @RESULT = 1
						END
						END
					-- END FOR SSN MERGE AND INSERT RECORD IN SGW_WORKFLOW_REQUEST TABLE.
					
					IF @CREATED_BY IS NULL OR @CREATED_BY ='' 
					BEGIN
						--SET @RESULT='ERROR : RECORD HAS NOT BEEN INSERTED IN PERSON TABLE.'
						SET @RESULT=99999
					END
					ELSE 
					BEGIN
						--SET @RESULT='SUCCESS : RECORD HAS BEEN INSERTED IN PERSON TABLE.'
						SET @RESULT=0
					END
			
				END
			ELSE if  @Update IS NULL OR @Update <> 'U'
				BEGIN
					select @MPI_PERSON_ID =MPI_PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN
					--SET @RESULT='ERROR : PERSON ALREADY EXIST.'
					SET @RESULT=99999
				END
				
				SELECT @PERSON_ID =  PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN
				SELECT @MPI_PERSON_ID =  MPI_PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN
				IF @PERSON_ID=0
				BEGIN
					--SET @RESULT=@RESULT + ' ' + 'ERROR : PERSON DOES NOT EXIST.'
					SET @RESULT=99999
					SET @FLAG=1
				END
				
				IF  @ADDR_COUNTRY_VALUE ='0001' AND @Update IS NOT NULL
				BEGIN
					IF NOT EXISTS (SELECT TOP(1)* FROM SGS_CODE_VALUE WHERE CODE_ID=150 AND CODE_VALUE=@STATE)
					BEGIN
						--SET @RESULT=@RESULT + ' '  + 'ERROR : INCORRECT STATE CODE.'
						SET @RESULT=99999
						SET @FLAG=1
					END
				END
				ELSE IF @ADDR_COUNTRY_VALUE IN ('0011','0036','0133','0147') AND @Update IS NOT NULL
				BEGIN
					IF NOT EXISTS (SELECT TOP(1)* FROM SGS_CODE_VALUE WHERE CODE_ID=152 AND DATA1=CAST(@ADDR_COUNTRY_VALUE AS INT ) AND CODE_VALUE=@STATE)
					BEGIN
						--SET @RESULT=@RESULT + ' '  + 'ERROR : INCORRECT PROVINCE CODE.'
						SET @RESULT=99999
						SET @FLAG=1
					END
				END
			
				IF @START_DATE IS NULL OR @START_DATE =''
				BEGIN
					SET @START_DATE=GETDATE()
				END
				
				IF @FLAG=0 AND @Update IS NOT NULL
				BEGIN
					IF NOT EXISTS(SELECT TOP(1)* from SGT_PERSON_ADDRESS WHERE PERSON_ID = @PERSON_ID)
					BEGIN
							
						
							INSERT INTO SGT_PERSON_ADDRESS VALUES (@PERSON_ID,@ADDR_LINE_1,@ADDR_LINE_2,@ADDR_CITY,150,
							CASE WHEN @ADDR_COUNTRY_VALUE IN ('0001','0011','0036','0133','0147')
							THEN @STATE ELSE NULL END,151,@ADDR_COUNTRY_VALUE,SUBSTRING(@ZIP,0,6),SUBSTRING(@ZIP,6,4),
							CASE WHEN @ADDR_COUNTRY_VALUE NOT IN ('0001','0011','0036','0133','0147')
							THEN @STATE ELSE NULL END,NULL,@START_DATE,NULL,NULL,6031,'EMPR',@CREATED_BY,GETDATE(),@CREATED_BY,GETDATE(),0,NULL, NULL)
							
							SELECT @ADDRESS_ID = @@IDENTITY
							
							INSERT INTO SGT_PERSON_ADDRESS_CHKLIST VALUES (@ADDRESS_ID,6013,'MAIL','OPUS_STORED_PROC',GETDATE(),'OPUS_STORED_PROC',GETDATE(),0)
							--SET @RESULT=@RESULT + ' '  +'SUCCESS : RECORD HAS BEEN INSERTED IN PERSON ADDRESS TABLE.'
							SET @RESULT=0
							
					END
					ELSE
					BEGIN
							IF EXISTS (SELECT TOP(1)* FROM SGT_PERSON_ADDRESS WHERE PERSON_ID = (SELECT TOP(1)PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID = @MPI_PERSON_ID)
						  AND CAST(START_DATE AS DATETIME) <= GETDATE() AND (CAST(END_DATE AS DATETIME) >= GETDATE() OR CAST(END_DATE AS DATETIME) IS NULL))
						  BEGIN
								SELECT @ADDRESS_ID=ADDRESS_ID FROM SGT_PERSON_ADDRESS WHERE PERSON_ID = (SELECT TOP(1)PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID = @MPI_PERSON_ID)
								AND START_DATE <= GETDATE() AND (END_DATE >= GETDATE() OR END_DATE IS NULL)
								
								
								UPDATE SGT_PERSON_ADDRESS SET ADDR_LINE_1=@ADDR_LINE_1,ADDR_LINE_2=@ADDR_LINE_2,ADDR_CITY=@ADDR_CITY,
								ADDR_STATE_VALUE=CASE WHEN @ADDR_COUNTRY_VALUE IN ('0001','0011','0036','0133','0147')
								THEN @STATE ELSE NULL END,ADDR_COUNTRY_VALUE=@ADDR_COUNTRY_VALUE,ADDR_ZIP_CODE=SUBSTRING(@ZIP,0,6),ADDR_ZIP_4_CODE=SUBSTRING(@ZIP,6,4),
								FOREIGN_PROVINCE=CASE WHEN @ADDR_COUNTRY_VALUE NOT IN ('0001','0011','0036','0133','0147')
								THEN @STATE ELSE NULL END,START_DATE=GETDATE(),END_DATE=NULL,SECURED_FLAG=NULL,ADDR_SOURCE_ID=6031,ADDR_SOURCE_VALUE='EMPR',MODIFIED_BY=@CREATED_BY,
								MODIFIED_DATE=GETDATE(),UPDATE_SEQ=UPDATE_SEQ+1 WHERE ADDRESS_ID = @ADDRESS_ID
								
								DELETE FROM SGT_PERSON_ADDRESS_CHKLIST WHERE ADDRESS_ID=@ADDRESS_ID
								INSERT INTO SGT_PERSON_ADDRESS_CHKLIST VALUES (@ADDRESS_ID,6013,'MAIL','OPUS_STORED_PROC',GETDATE(),'OPUS_STORED_PROC',GETDATE(),0)
								--SET @RESULT=@RESULT + ' '  +'SUCCESS : RECORD HAS BEEN UPDATED IN PERSON ADDRESS TABLE.'
								SET @RESULT=0
					  
						   END
					END
				END
				
				IF @EncryptedSSN IS NOT NULL AND  @EncryptedSSN <> ''
				BEGIN
					--FOR MPIPP
					IF (SELECT SUM(PensionHours) FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@EncryptedSSN AND PensionPlan=2) > 0.0 AND 
					NOT EXISTS (SELECT * FROM SGT_PERSON_ACCOUNT WHERE PERSON_ID =(SELECT PERSON_ID FROM SGT_PERSON 
					WHERE SSN=@EncryptedSSN) AND PLAN_ID=2 AND STATUS_VALUE='ACTV')
					BEGIN
						INSERT INTO SGT_PERSON_ACCOUNT (PERSON_ID,PLAN_ID,START_DATE,END_DATE,STATUS_ID,STATUS_VALUE,
						CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) VALUES
						((SELECT TOP(1) PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN),2,GETDATE(),NULL,6035,'ACTV',@CREATED_BY,
						GETDATE(),@CREATED_BY,GETDATE(),0)
					END
					
					--FOR IAP
					IF (SELECT SUM(IAPHours) FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@EncryptedSSN) > 0.0 AND 
					NOT EXISTS (SELECT * FROM SGT_PERSON_ACCOUNT WHERE PERSON_ID =(SELECT PERSON_ID FROM SGT_PERSON 
					WHERE SSN=@EncryptedSSN) AND PLAN_ID=1 AND STATUS_VALUE='ACTV')
					BEGIN
						INSERT INTO SGT_PERSON_ACCOUNT (PERSON_ID,PLAN_ID,START_DATE,END_DATE,STATUS_ID,STATUS_VALUE,
						CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) VALUES
						((SELECT TOP(1) PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN),1,GETDATE(),NULL,6035,'ACTV',@CREATED_BY,
						GETDATE(),@CREATED_BY,GETDATE(),0)
					END
					
					
					--FOR LIFE
					IF (SELECT SUM(RetireeHealthHours) FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@EncryptedSSN) > 0.0 AND 
					NOT EXISTS (SELECT * FROM SGT_PERSON_ACCOUNT WHERE PERSON_ID =(SELECT PERSON_ID FROM SGT_PERSON 
					WHERE SSN=@EncryptedSSN) AND PLAN_ID=9 AND STATUS_VALUE='ACTV')
					BEGIN
						INSERT INTO SGT_PERSON_ACCOUNT (PERSON_ID,PLAN_ID,START_DATE,END_DATE,STATUS_ID,STATUS_VALUE,
						CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) VALUES
						((SELECT TOP(1) PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN),9,GETDATE(),NULL,6035,'ACTV',@CREATED_BY,
						GETDATE(),@CREATED_BY,GETDATE(),0)
					END
				END
				
				RETURN @RESULT
		END

GO








/****** Object:  StoredProcedure [dbo].[INSERT_WORKFLOW_REQUEST_INFO_INTO_OPUS]    Script Date: 06/20/2013 12:07:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--===========================================================
--==Modified By: Rohan Adgaonkar
--==Modified On: 02/07/2013
--==Purpose: INSERT_WORKFLOW_REQUEST_INFO_INTO_OPUS
----==========================================================

	CREATE PROC [dbo].[INSERT_WORKFLOW_REQUEST_INFO_INTO_OPUS]
			(	
				@RESULT VARCHAR(500) OUTPUT,
				@MPI_PERSON_ID CHAR(10)= NULL,
				@OPUS_DOC_ID INT=0,
				@TIMESTAMP DATETIME=NULL,
				@DOC_TYPE_VALUE UDT_NAME=NULL,
				@GROUP_NAME VARCHAR(50)=NULL
			)
			AS
				BEGIN
				DECLARE @FLAG INT
				DECLARE @COUNT INT
				DECLARE @PERSON_ID INT
						
				SET @MPI_PERSON_ID= ltrim(rtrim(@MPI_PERSON_ID))
				SET @DOC_TYPE_VALUE= ltrim(rtrim(@DOC_TYPE_VALUE))
				SET @GROUP_NAME=ltrim(rtrim(@GROUP_NAME))
				SET @FLAG = 0
				SET @COUNT = 0
				SET @PERSON_ID = NULL
				SET @RESULT=''
				
				IF (@MPI_PERSON_ID IS NOT NULL AND @MPI_PERSON_ID <> '') OR (@OPUS_DOC_ID IS NOT NULL AND @OPUS_DOC_ID ! = 0)				
				BEGIN
						
					IF @TIMESTAMP IS NULL OR @TIMESTAMP = '' 
					BEGIN
						SET @RESULT = @RESULT + ',' + 'PLEASE ENTER TIMESTAMP'
						SET @FLAG =1 
					END
					
					IF @MPI_PERSON_ID IS NOT NULL OR @MPI_PERSON_ID <> ''
					BEGIN
						
						SELECT @PERSON_ID = PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID = @MPI_PERSON_ID
						
						IF @PERSON_ID IS NULL OR @PERSON_ID = ''
						BEGIN
							SET @RESULT = @RESULT + ',' + 'PLEASE ENTER VALID MPI_PERSON_ID'
							SET @FLAG =1 
						END
						
						IF (@DOC_TYPE_VALUE IS NULL OR @DOC_TYPE_VALUE = '') AND (@OPUS_DOC_ID IS NULL OR @OPUS_DOC_ID  = 0)
						BEGIN
							SET @RESULT = @RESULT + ',' + 'PLEASE ENTER DOCUMENT VALUE TYPE'
							SET @FLAG =1 
						END		 
					END
					
					IF  (@OPUS_DOC_ID IS  NULL OR @OPUS_DOC_ID  = 0)
					BEGIN
						SET @OPUS_DOC_ID = NULL 
					END
					--CHANGE TO GET PERSON FROM OPUS_DOC_ID
					ELSE 
					BEGIN
						SELECT @PERSON_ID = PERSON_ID FROM SGS_COR_TRACKING WHERE TRACKING_ID = @OPUS_DOC_ID 
					END
					
					IF  (@DOC_TYPE_VALUE IS  NULL OR @DOC_TYPE_VALUE = '')
					BEGIN
						SET @DOC_TYPE_VALUE = NULL 
					END
					
					-- Wasim
					-- CHECK GROUP NAME 24/02/2012
					IF  (@GROUP_NAME IS  NULL OR @GROUP_NAME = '')
					BEGIN
							SET @RESULT = @RESULT + ',' + 'PLEASE ENTER GROUP NAME'
							SET @FLAG =1 
					END
					
					IF @FLAG = 0
					BEGIN
						INSERT INTO SGW_WORKFLOW_REQUEST VALUES (@DOC_TYPE_VALUE,NULL,NULL,NULL,NULL,@PERSON_ID,NULL,
						NULL,1601,'PSNP',1602,'SCIN',@TIMESTAMP,NULL,'OPUS_STORED_PROC',GETDATE(),'OPUS_STORED_PROC',GETDATE(),0,
						NULL,@OPUS_DOC_ID,@TIMESTAMP,@GROUP_NAME)
						
						SET @RESULT = 'RECORD SUCCESSFULLY INSERTED'
						
						RETURN 1
					END
					ELSE
					BEGIN
						RETURN 0
					END
				END 
				
				ELSE 
				BEGIN
					SET @RESULT = 'PLEASE ENTER MPI PERSON ID OR OPUS DOC ID OR BOTH'
					RETURN 0
				END 
			END

GO







/****** Object:  StoredProcedure [dbo].[ReEvaluation_Of_Minimum_Distribution]    Script Date: 06/20/2013 12:07:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--EXEC [dbo].[ReEvaluation_Of_Minimum_Distribution] 2012

CREATE PROC [dbo].[ReEvaluation_Of_Minimum_Distribution]
AS
BEGIN
SET NOCOUNT ON

DECLARE @PERSON_COUNT INT
DECLARE @TOTAL_PERSON_COUNT INT
DECLARE @YEAR INT

DECLARE @Person TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	PERSON_ID INT,
	SSN VARCHAR(MAX),
	MINIMUM_DISTRIBUTION_DATE DATETIME
)


SELECT @YEAR =  (YEAR(BATCH_DATE)-1) from SGS_SYSTEM_MANAGEMENT

INSERT INTO @Person
SELECT DISTINCT SP.PERSON_ID,SP.SSN,SBA.MIN_DISTRIBUTION_DATE FROM SGT_PERSON SP
JOIN SGT_BENEFIT_APPLICATION SBA ON SP.PERSON_ID = SBA.PERSON_ID
JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID
JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID
WHERE SBA.MIN_DISTRIBUTION_FLAG = 'Y' AND SBA.MIN_DISTRIBUTION_DATE IS NOT NULL
AND  (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q 
WHERE Q.PAYEE_ACCOUNT_ID =SPA.PAYEE_ACCOUNT_ID 
ORDER BY Q.MODIFIED_DATE DESC) = 'RECV' 

SET @TOTAL_PERSON_COUNT = @@ROWCOUNT
SET @PERSON_COUNT = 1

WHILE @PERSON_COUNT <= @TOTAL_PERSON_COUNT
BEGIN

DECLARE @PensionWorkHistory TABLE(
	[ReportID] [varchar](18) NULL,
	[EmpAccountNo] [int] NULL,
	[ComputationYear] [smallint] NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[Weeks] [char](2) NULL,
	[Received] [smalldatetime] NULL,
	[Processed] [smalldatetime] NULL,
	[HoursID] [varchar](24) NULL,
	[SSN] [char](9) NULL,
	[LastName] [varchar](50) NULL,
	[FirstName] [varchar](50) NULL,
	[UnionCode] [int] NULL,
	[PensionPlan] [smallint] NULL,
	[PensionCredit] [numeric](7, 3) NULL,
	[L52VestedCredit] [smallint] NULL,
	[PensionHours] [numeric](7, 1) NULL,
	[IAPHours] [numeric](7, 1) NULL,
	[IAPHoursA2] [numeric](7, 1) NULL,
	[IAPPercent] [money] NULL,
	[ActiveHealthHours] [numeric](7, 1) NULL,
	[RetireeHealthHours] [numeric](7, 1) NULL,
	[PersonId] [varchar](15) NULL,
	[RateGroup] [varchar](4) NULL,
	[HoursStatus] [int] NULL,
	[LateMonthly] [varchar](1)  NULL,
	[LateAnnual] [varchar](1)  NULL,
	[UnionMisc] [char](2) NULL,
	[HoursWorked] [numeric](7, 1) NULL,
	[IAPHourlyRate] [money] NULL,
	[Source] [varchar](4) NOT NULL,
	[ToHealthSystem] [int] NULL,
	[ToPensionSystem] [int] NULL,
	[IsActiveHealth] [int] NULL,
	[IsRetireeHealth] [int] NULL,
	[IsPension] [int] NULL,
	[IsIAPHourly] [int] NULL
	, [OldEmployerNum] [varchar](6) null
) 

DECLARE @SSN INT

DECLARE @SSN_ENCRYPTED VARCHAR(MAX)
DECLARE @SSN_DECRYPTED VARCHAR(MAX)

SELECT @SSN_ENCRYPTED = P.SSN FROM @Person P WHERE P.SEQ_NO= @PERSON_COUNT
EXEC GET_DECRYPTED @SSN_ENCRYPTED,@SSN_DECRYPTED OUTPUT

SET @SSN = CAST(@SSN_DECRYPTED AS INT)


INSERT INTO @PensionWorkHistory 
select * from vw_PensionInterface4OPUS where SSN = @SSN

DECLARE @COUNT int
DECLARE @FLAG INT
DECLARE @TABLECOUNT int
Declare @WorkingHours int
DECLARE @Temp TABLE
(
	[SEQ_NO] int IDENTITY(1,1) NOT NULL, 
	WorkingHours numeric(18,1)
)


INSERT INTO @Temp
SELECT PensionHours FROM @PensionWorkHistory where SSN=@SSN and ComputationYear=@YEAR AND PensionPlan = 2
 AND FromDate > (SELECT P.MINIMUM_DISTRIBUTION_DATE FROM @Person P WHERE P.SEQ_NO= @PERSON_COUNT) order by FromDate

SET @TABLECOUNT = @@ROWCOUNT
SET @COUNT = 1
SET @WorkingHours=0
SET @FLAG=0


--GET QUALIFIED YEAR COUNT
DECLARE @TOTAL_COUNT_YEARLY INT 
DECLARE @COUNT_YEARLY INT

DECLARE @YEARS INT
SET @YEARS= 0


DECLARE @PensionWorkHistoryYearWise TABLE(
	[ComputationYear] [smallint] NULL,
	[QualifiedHours] [numeric](7, 1) NULL,
	[FromDate] [smalldatetime] NULL,
	[ToDate] [smalldatetime] NULL,
	[QualifiedYearCount] [smallint] NULL,
	[YearlySEQ] [int] IDENTITY(1,1) NOT NULL
) 

INSERT INTO @PensionWorkHistoryYearWise
SELECT DISTINCT cast(VPIO.ComputationYear as int) AS YEAR,
(SELECT SUM(PensionHours) FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear and PensionPlan=2) AS QUALIFIED_HOURS,
(SELECT TOP(1)FromDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear) AS FROMDATE,
(SELECT TOP(1)ToDate FROM @PensionWorkHistory WHERE SSN=VPIO.SSN AND ComputationYear=VPIO.ComputationYear order by TODATE desc) AS TODATE,
0
FROM @PensionWorkHistory AS VPIO where VPIO.SSN=@SSN ORDER BY YEAR

SET @TOTAL_COUNT_YEARLY = @@ROWCOUNT
SET @COUNT_YEARLY = 1

WHILE @COUNT_YEARLY <= @TOTAL_COUNT_YEARLY
BEGIN	
	IF (SELECT PWHY.QualifiedHours FROM @PensionWorkHistoryYearWise PWHY WHERE PWHY.YearlySEQ = @COUNT_YEARLY ) >= 400.0
	BEGIN
		SET @YEARS = @YEARS + 1
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	ELSE
	BEGIN
		UPDATE @PensionWorkHistoryYearWise SET QualifiedYearCount = @YEARS WHERE YearlySEQ = @COUNT_YEARLY
	END
	
	SET @COUNT_YEARLY = @COUNT_YEARLY + 1
END

DECLARE @QUALIFIED_YEAR_COUNT INT
SELECT @QUALIFIED_YEAR_COUNT =  QualifiedYearCount FROM @PensionWorkHistoryYearWise WHERE [ComputationYear] = @YEAR

-------------

IF @TABLECOUNT > 0 AND @QUALIFIED_YEAR_COUNT <= 20
BEGIN
WHILE (@COUNT <= @TABLECOUNT)
begin
set @WorkingHours = @WorkingHours +  (select case when temp.WorkingHours is null then 0 else temp.WorkingHours end from @Temp temp where temp.SEQ_NO=@COUNT)
IF @WorkingHours >= 400.0 and @QUALIFIED_YEAR_COUNT <= 20
BEGIN 
SET @FLAG =1
BREAK  
SET @COUNT = @COUNT + 1

IF @FLAG =0
BEGIN
	DELETE FROM @Person WHERE SEQ_NO = @PERSON_COUNT
END
END
END
END

SET @PERSON_COUNT = @PERSON_COUNT + 1
END

	SELECT DISTINCT SP.PERSON_ID,SPA.PAYEE_ACCOUNT_ID FROM SGT_PERSON SP
	JOIN SGT_BENEFIT_APPLICATION SBA ON SP.PERSON_ID = SBA.PERSON_ID
	JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID
	JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID
	WHERE SBA.MIN_DISTRIBUTION_FLAG = 'Y' AND SBA.MIN_DISTRIBUTION_DATE IS NOT NULL
	AND  (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q 
	WHERE Q.PAYEE_ACCOUNT_ID =SPA.PAYEE_ACCOUNT_ID 
	ORDER BY Q.MODIFIED_DATE DESC) = 'RECV' AND SP.PERSON_ID IN (SELECT P.PERSON_ID FROM @Person P)

END

GO




/****** Object:  StoredProcedure [dbo].[RETRIEVE_INDEXING_INFO_FROM_OPUS]    Script Date: 06/20/2013 12:09:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


	CREATE PROC [dbo].[RETRIEVE_INDEXING_INFO_FROM_OPUS]
			(	
				@result varchar(50) OUTPUT,
				@MPI_PERSON_ID UDT_DATA OUTPUT,
				@DOC_TYPE_VALUE UDT_DATA50 OUTPUT,
				@APP_NAME VARCHAR(500) OUTPUT,
				@GROUP_NAME VARCHAR(50) OUTPUT,
				@OPUS_DOC_ID  INT
			)
			AS
				BEGIN
				SET NOCOUNT ON;
				DECLARE @COUNT INT
				SET @COUNT = 0
				
				IF @OPUS_DOC_ID  <> 0
				BEGIN
					SELECT @COUNT =COUNT(*) FROM SGS_COR_TRACKING WHERE TRACKING_ID=@OPUS_DOC_ID
					
					IF @COUNT = 0
					BEGIN
						SET @result = 'OPUS DOC ID = ' + CAST(@OPUS_DOC_ID AS VARCHAR) + ' DOES NOT EXIST'
						RETURN 0
					END
					
					ELSE
					
					BEGIN
					SELECT @MPI_PERSON_ID=PER.MPI_PERSON_ID,@DOC_TYPE_VALUE=COR.DOC_TYPE,@APP_NAME=DOC.APP_NAME,
					@GROUP_NAME=DOC.GROUP_NAME
					FROM SGS_COR_TRACKING SCT INNER JOIN  SGS_COR_TEMPLATES COR 
					ON SCT.TEMPLATE_ID = COR.TEMPLATE_ID INNER JOIN SGT_DOCUMENT DOC
					ON COR.DOC_TYPE = DOC.DOC_TYPE INNER JOIN SGT_PERSON PER
					ON SCT.PERSON_ID = PER.PERSON_ID
					WHERE SCT.TRACKING_ID = @OPUS_DOC_ID
					
					SET @result = 'SUCCESSFUL'
						RETURN 1
						
					END	
				END
				
				ELSE
				BEGIN
					SET @result = 'PLEASE ENTER VALID OPUS DOC ID'
					RETURN 0
				END		
			END
			

GO





/****** Object:  StoredProcedure [dbo].[SGP_PROCESS_LOG_INSERT]    Script Date: 06/20/2013 12:12:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[SGP_PROCESS_LOG_INSERT] ( @CYCLE_NO int , 
	@PROCESS_NAME VARCHAR(50) , 
	@MESSAGE_TYPE_VALUE VARCHAR(4) , 
	@MESSAGE VARCHAR(4096) , 
	@CREATED_BY VARCHAR(50) ) 
as
BEGIN 
	INSERT INTO SGS_PROCESS_LOG 
	( CYCLE_NO , PROCESS_NAME , MESSAGE_TYPE_ID , MESSAGE_TYPE_VALUE , MESSAGE , CREATED_BY , CREATED_DATE ) 
	VALUES 
	( @CYCLE_NO , @PROCESS_NAME , 28 , @MESSAGE_TYPE_VALUE , @MESSAGE , @CREATED_BY , getdate() ) 
END


GO




/****** Object:  StoredProcedure [dbo].[SGP_USER_DEFAULTS_INSERT]    Script Date: 06/20/2013 12:12:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO



CREATE PROCEDURE [dbo].[SGP_USER_DEFAULTS_INSERT] (
@USER_SERIAL_ID int ,
@FORM_NAME VARCHAR(50),
@GROUP_CONTROL_ID VARCHAR(50),
@DEFAULT_SET_ID VARCHAR(50),
@DATA_FIELD VARCHAR(200),
@DEFAULT_VALUE VARCHAR(50) )
AS
/**********************************************************************
Author Name: XXXX XXXX
Create Date: 05/20/10
Purpose: To insert data into SGS_USER_DEFAULTS

File Name : SGP_USER_DEFAULTS_INSERT.sql         


Change History:
=========================================================================
Name               Date         Change Details
=========================================================================
XXXX               05/20/10	    Proc Created 
=========================================================================*/
BEGIN
INSERT INTO SGS_USER_DEFAULTS
( USER_SERIAL_ID, FORM_NAME, GROUP_CONTROL_ID, DEFAULT_SET_ID, DATA_FIELD, DEFAULT_VALUE )
VALUES ( @USER_SERIAL_ID, @FORM_NAME, @GROUP_CONTROL_ID, @DEFAULT_SET_ID, @DATA_FIELD, @DEFAULT_VALUE )
END


GO





/****** Object:  StoredProcedure [dbo].[sp_GetTrueUnions]    Script Date: 06/20/2013 12:18:38 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[sp_GetTrueUnions] @SSN char(9)=NULL
AS
begin
	select 	ssn,first_name Name
	from	sgt_person where
	sgt_person.ssn=@ssn
	
end

GO





/****** Object:  StoredProcedure [dbo].[SP_GoGreen_Get_By_ID]    Script Date: 06/20/2013 12:19:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_GoGreen_Get_By_ID] 
	@Id int = 0
AS
BEGIN
	SELECT ID=GO_GREEN_HISTORY_ID, PID=MPI_PERSON_ID, Consent=REQUEST_FLAG, Source=SOURCE, StartDate=START_DATE, EndDate=END_DATE, Confirmed=CONFIRMED_FLAG, ConsentDate=REQUEST_DATE, IPAddress=IP_ADDRESS,
		Email=EMAIL_ADDRESS, IsProcessed=0 
		from SGT_GO_GREEN_HISTORY 
		where GO_GREEN_HISTORY_ID = @Id
		order by MPI_PERSON_ID
END



GO





/****** Object:  StoredProcedure [dbo].[SP_GoGreen_Get_By_PID]    Script Date: 06/20/2013 12:19:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_GoGreen_Get_By_PID] 
	@PID varchar(20) = 0
AS
BEGIN
	SELECT ID=GO_GREEN_HISTORY_ID, PID=MPI_PERSON_ID, Consent=REQUEST_FLAG, Source=SOURCE, StartDate=START_DATE, EndDate=END_DATE, Confirmed=CONFIRMED_FLAG, ConsentDate=REQUEST_DATE, IPAddress=IP_ADDRESS,
			Email=EMAIL_ADDRESS, IsProcessed=0
		from SGT_GO_GREEN_HISTORY 
		where MPI_PERSON_ID = @PID
		order by MPI_PERSON_ID
END



GO




/****** Object:  StoredProcedure [dbo].[SP_GoGreen_Insert]    Script Date: 06/20/2013 12:19:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
--Purpose - Updated Sp SP_GoGreen_Insert (UAT PIR - 882)
--Date - 02/25/2013
-------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[SP_GoGreen_Insert] 	 
	@PID varchar(20) = '', 
	@Consent varchar(1) = '', 
	@Source varchar(50) = '', 
	@StartDate datetime = null, 
	@EndDate datetime = null, 
	@Confirmed varchar(1) = '', 
	@ConsentDate datetime = null, 
	@IPAddress varchar(50) = '',
	@Email nvarchar(50) = '', 
	@IsProcessed bit = 0
AS
BEGIN    
	Insert into SGT_GO_GREEN_HISTORY ( 
		MPI_PERSON_ID, 
		REQUEST_FLAG, 
		SOURCE, 
		START_DATE, 
		END_DATE, 
		CONFIRMED_FLAG, 
		REQUEST_DATE, 
		IP_ADDRESS,
		EMAIL_ADDRESS, 
		IS_PROCESSED,
		CREATED_BY,
		CREATED_DATE,
		MODIFIED_BY,
		MODIFIED_DATE,
		UPDATE_SEQ)
	values ( 
		@PID, 
		@Consent, 
		@Source, 
		@StartDate, 
		@EndDate, 
		@Confirmed, 
		@ConsentDate, 
		@IPAddress,
		@Email, 
		0,
		'SP_GoGreen_Insert',
		GETDATE(),
		'SP_GoGreen_Insert',
		GETDATE(),
		0)
	select IDENT_CURRENT('SGT_GO_GREEN_HISTORY')
	
	IF (@Confirmed = 'Y' AND @Consent = 'Y')
	BEGIN
		UPDATE SGT_PERSON SET COMMUNICATION_PREFERENCE_ID=6027 , 
		COMMUNICATION_PREFERENCE_VALUE='EMAL' , 
		MODIFIED_BY='SP_GoGreen_Insert',
		MODIFIED_DATE=GETDATE() 
		WHERE MPI_PERSON_ID = @PID
	END
	ELSE
	BEGIN
		UPDATE SGT_PERSON SET COMMUNICATION_PREFERENCE_ID=6027 , 
		COMMUNICATION_PREFERENCE_VALUE='MAIL' ,
		MODIFIED_BY='SP_GoGreen_Insert',
		MODIFIED_DATE=GETDATE()
		WHERE MPI_PERSON_ID=@PID
	END
END

GO





/****** Object:  StoredProcedure [dbo].[SP_GoGreen_Update_By_ID]    Script Date: 06/20/2013 12:20:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-------------------------------------------------------------------------------------
-- Name - Rohan Adgaonkar
--Purpose - Updated Sp SP_GoGreen_Update_By_ID (UAT PIR - 882)
--Date - 02/25/2013
-------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[SP_GoGreen_Update_By_ID]
	@ID int = 0,
	@PID varchar(15) = '',
	@Consent varchar(1) = '',
	@Source varchar(50) = '',
	@StartDate datetime = null,
	@EndDate datetime = null,
	@Confirmed varchar(1) = '',
	@ConsentDate datetime = null,
	@IPAddress varchar(50) = '',
	@Email nvarchar(50) = '',
	@IsProcessed bit = 0 
AS
BEGIN    
	Update SGT_GO_GREEN_HISTORY set MPI_PERSON_ID = @PID,
		REQUEST_FLAG = @Consent,
		SOURCE = @Source,
		START_DATE = @StartDate,
		END_DATE = @EndDate,
		CONFIRMED_FLAG = @Confirmed,
		REQUEST_DATE = @ConsentDate,
		IP_ADDRESS = @IPAddress,
		EMAIL_ADDRESS = @Email,
		IS_PROCESSED = @IsProcessed,
		MODIFIED_BY='SP_GoGreen_Update_By_ID',
		MODIFIED_DATE=GETDATE()
	where GO_GREEN_HISTORY_ID = @ID
	
	IF (@Confirmed = 'Y' AND @Consent = 'Y')
	BEGIN
		UPDATE SGT_PERSON SET COMMUNICATION_PREFERENCE_ID=6027 , 
		COMMUNICATION_PREFERENCE_VALUE='EMAL' , 
		MODIFIED_BY='SP_GoGreen_Update_By_ID',
		MODIFIED_DATE=GETDATE()
		WHERE MPI_PERSON_ID=@PID
	END
	ELSE
	BEGIN
		UPDATE SGT_PERSON SET COMMUNICATION_PREFERENCE_ID=6027 , 
		COMMUNICATION_PREFERENCE_VALUE='MAIL' ,
		MODIFIED_BY='SP_GoGreen_Update_By_ID',
		MODIFIED_DATE=GETDATE()
		WHERE MPI_PERSON_ID=@PID
	END
END


GO





/****** Object:  StoredProcedure [dbo].[SP_GoGreen_Update_By_PID]    Script Date: 06/20/2013 12:20:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_GoGreen_Update_By_PID]
	@ID int = 0,
	@PID varchar(15) = '',
	@Consent varchar(1) = '',
	@Source varchar(50) = '',
	@StartDate datetime = null,
	@EndDate datetime = null,
	@Confirmed varchar(1) = '',
	@ConsentDate datetime = null,
	@IPAddress varchar(50) = '',
	@Email nvarchar(50) = '',
	@IsProcessed bit = 0 
AS
BEGIN    
	Update SGT_GO_GREEN_HISTORY set MPI_PERSON_ID = @PID,
		REQUEST_FLAG = @Consent,
		SOURCE = @Source,
		START_DATE = @StartDate,
		END_DATE = @EndDate,
		CONFIRMED_FLAG = @Confirmed,
		REQUEST_DATE = @ConsentDate,
		IP_ADDRESS = @IPAddress,
		EMAIL_ADDRESS = @Email,
		IS_PROCESSED = @IsProcessed,
		MODIFIED_BY='SP_GoGreen_Update_By_PID',
		MODIFIED_DATE=GETDATE()
	where MPI_PERSON_ID = @PID
	
	IF (@Confirmed = 'Y' AND @Consent = 'Y')
	BEGIN
		UPDATE SGT_PERSON SET COMMUNICATION_PREFERENCE_ID=6027 , 
		COMMUNICATION_PREFERENCE_VALUE='EMAL',
		MODIFIED_BY='SP_GoGreen_Update_By_PID',
		MODIFIED_DATE=GETDATE() 
		WHERE MPI_PERSON_ID=@PID
	END
	ELSE
	BEGIN
		UPDATE SGT_PERSON SET COMMUNICATION_PREFERENCE_ID=6027 , 
		COMMUNICATION_PREFERENCE_VALUE='MAIL',
		MODIFIED_BY='SP_GoGreen_Update_By_PID',
		MODIFIED_DATE=GETDATE() 
		WHERE MPI_PERSON_ID=@PID
	END
END

GO





/****** Object:  StoredProcedure [dbo].[SP_GoGreen_Update_By_PID_StartDate]    Script Date: 06/20/2013 12:20:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_GoGreen_Update_By_PID_StartDate]
	@ID int = 0,
	@PID varchar(15) = '',
	@ConsentDate datetime = null,
	@IsProcessed bit = 0,
	@Consent varchar (1) = ''
AS
BEGIN
	SET NOCOUNT off;
	Update SGT_GO_GREEN_HISTORY Set MPI_PERSON_ID = @PID, REQUEST_DATE = @ConsentDate,
			IS_PROCESSED = @IsProcessed,
			REQUEST_FLAG = @Consent,
			MODIFIED_BY='SP_GoGreen_Update_By_PID_StartDate',
			MODIFIED_DATE=GETDATE()
		Where MPI_PERSON_ID = @PID and REQUEST_DATE = @ConsentDate
END


GO





/****** Object:  StoredProcedure [dbo].[UpdatePersonAddress]    Script Date: 06/20/2013 12:21:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[UpdatePersonAddress]
      (           
            @AddressId int, --– This will be the primary key in SGT_PERSON_ADDRESS table.
            @PersonId  varchar(15) = NULL, --– This will be MPID
            @Address1 varchar(60) = NULL,
            @Address2 varchar(60) = NULL,
            @City varchar(30) = NULL,
            @State varchar(2) = NULL,
            @Zip varchar(10) = NULL,
            @CountryCode varchar(2) = NULL,      
            @AddressTypeId varchar(10) = 'MAIL', --– Code value of “Mailing”
            @EffectiveDate datetime  = NULL, --– Start date of address.
            @TermDate datetime  = NULL, --End Date of existing address
            @AddressSource varchar(4)  = NULL,--–
            @ModifyUser varchar(30)=NULL, --– “NCOA” or “ACS”

            @RESULT VARCHAR(500) OUTPUT   
      )
      AS
            BEGIN
            DECLARE @FLAG INT
            SET @FLAG = 0
            
            DECLARE @RTN INT 
			SET @RTN = 0
			
			DECLARE @Attention varchar(30)
 			DECLARE @PostalCode varchar(10)
			DECLARE @Country varchar(25)
			DECLARE @ForeignAddr bit
            DECLARE @Address1OLD AS VARCHAR(60)
			DECLARE @CityOLD AS VARCHAR(50)
			DECLARE @StateOLD as VARCHAR(60)
			DECLARE @ADDR_ZIP_CODE_OLD AS VARCHAR(50)
			DECLARE @COUNTRYCODEOLD AS VARCHAR(2)
            
            BEGIN TRAN 
            
            IF @ModifyUser = '' OR @ModifyUser IS NULL
            BEGIN
                  SET @RESULT ='PLEASE ENTER MODIFYUSER'
                  SET @FLAG = 1
            END
            
            IF @AddressSource = '' OR @AddressSource IS NULL
            BEGIN
                  SET @RESULT ='PLEASE ENTER ADDRESS SOURCE'
                  SET @FLAG = 1
            END
            
          
            IF NOT EXISTS (SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 6031 AND CODE_VALUE = @AddressSource)
            BEGIN
				 SET @RESULT ='ADDRESS SOURCE TYPE DOES NOT EXIST'
                 SET @FLAG = 1
            END
            
            IF NOT EXISTS (SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 6013 AND CODE_VALUE = @AddressTypeId)
            BEGIN
				 SET @RESULT ='ADDRESS TYPE ID DOES NOT EXIST'
                 SET @FLAG = 1
            END
            
            IF @Zip <> '' AND @Zip IS NOT NULL
            BEGIN
				SET @Zip = REPLACE(@ZIP,'-','')
				
				IF ISNUMERIC(@Zip) <> 1
				BEGIN
					 SET @RESULT = 'ZIP CODE IS IN WRONG FORMAT.FORMAT SHOULD BE e.g 12345-6789 OR 12345'
					 SET @FLAG = 1
				END
				
            END
            
            IF @AddressId > 0 AND EXISTS (SELECT * FROM SGT_PERSON_ADDRESS WHERE ADDRESS_ID = @AddressId)
            BEGIN
            
            IF NOT EXISTS (SELECT * FROM SGT_PERSON_ADDRESS WHERE ADDRESS_ID = @AddressId AND SECURED_FLAG = 'Y')
            BEGIN
                        IF @ModifyUser IS NOT NULL 
                        BEGIN
                              
                              IF @AddressId > 0
                              BEGIN
                                    DECLARE @PERSON_ID INT
                                    DECLARE @NEW_ADDRESS_ID INT 
                                    DECLARE @CountryCodeValue VARCHAR(4)
                                    DECLARE @END_DATE DATETIME
                                    
                                    IF @TermDate IS NOT NULL
                                    BEGIN
										SET @END_DATE = @TermDate
                                    END
                                    ELSE
                                    BEGIN
										SET @END_DATE = DATEADD(DAY, -1, @EffectiveDate)
                                    END
                                    
                                    
                                    IF @PersonId <> ''
                                    BEGIN
                                          SELECT @PERSON_ID =  PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID = @PersonId
                                          	IF @PERSON_ID IS NULL 
											BEGIN
											SET @RESULT = 'PERSON_ID NOT FOUND IN OPUS' 
											SET @FLAG=1
											END
                                    END
                                    ELSE
                                    BEGIN
                                          SET @RESULT = 'PARTICIPANT DOES NOT EXIST,'
                                          SET @FLAG = 1
                                    END
                                    
                                    IF @CountryCode <> ''
                                    BEGIN
										  SET @CountryCodeValue = (select top(1) CODE_VALUE from SGS_CODE_VALUE where CODE_ID=151 and DATA1=@CountryCode)
												IF (@CountryCodeValue IS NULL)
												BEGIN
												SET @RESULT = ',INVALID COUNTRY CODE'
												SET @FLAG = 1
												END                                           
                                    END
                                    
                                    IF @FLAG = 0
                                    BEGIN
                                    
                                    IF @TermDate IS NOT NULL
                                    BEGIN
                                      UPDATE SGT_PERSON_ADDRESS SET END_DATE = @END_DATE,MODIFIED_BY=@ModifyUser,BAD_ADDRESS_FLAG='Y'
                                      WHERE ADDRESS_ID = @AddressId
                                      
									 SELECT @Address1OLD = PA.ADDR_LINE_1 , @CityOLD = PA.ADDR_CITY,
										@StateOLD = CV.DESCRIPTION,
										@ADDR_ZIP_CODE_OLD = PA.ADDR_ZIP_CODE,
										@COUNTRYCODEOLD = CV1.DATA1
										FROM SGT_PERSON_ADDRESS PA
										INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_VALUE=PA.ADDR_STATE_VALUE
										INNER JOIN SGS_CODE_VALUE CV1 ON CV1.CODE_VALUE=PA.ADDR_COUNTRY_VALUE
                                        WHERE PA.ADDRESS_ID=@AddressId
                                        
									  exec @RTN = HEDB.DBO.USP_PID_PersonAddress_UPD
													  @PID				= @PersonId              
													, @Attention        = NULL             
													, @Address1         = @Address1OLD             
													, @City             = @CityOLD             
													, @State			= @StateOLD              
													, @PostalCode		= @ADDR_ZIP_CODE_OLD               
													, @Country          = NULL            
													, @CountryCode      = @COUNTRYCODEOLD          
													, @ForeignAddr		= 0            
													, @ReturnedMail     = @END_DATE    
													, @DoNotUpdate      = 0                     
													, @AuditUser        = @ModifyUser 
													, @ReceivedFrom     = @AddressSource   
                                      
                                    END
                                    ELSE
                                    BEGIN
                                       UPDATE SGT_PERSON_ADDRESS SET END_DATE = @END_DATE,MODIFIED_BY=@ModifyUser
                                       WHERE ADDRESS_ID = @AddressId
                                       
									 SELECT @Address1OLD = PA.ADDR_LINE_1 , @CityOLD = PA.ADDR_CITY,
										@StateOLD = CV.DESCRIPTION,
										@ADDR_ZIP_CODE_OLD = PA.ADDR_ZIP_CODE,
										@COUNTRYCODEOLD = CV1.DATA1
										FROM SGT_PERSON_ADDRESS PA
										INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_VALUE=PA.ADDR_STATE_VALUE
										INNER JOIN SGS_CODE_VALUE CV1 ON CV1.CODE_VALUE=PA.ADDR_COUNTRY_VALUE
                                        WHERE PA.ADDRESS_ID=@AddressId
                                        
									  exec @RTN = HEDB.DBO.USP_PID_PersonAddress_UPD
													  @PID				= @PersonId              
													, @Attention        = NULL             
													, @Address1         = @Address1OLD             
													, @City             = @CityOLD             
													, @State			= @StateOLD              
													, @PostalCode		= @ADDR_ZIP_CODE_OLD               
													, @Country          = NULL            
													, @CountryCode      = @COUNTRYCODEOLD          
													, @ForeignAddr		= 0            
													, @ReturnedMail     = NULL    
													, @DoNotUpdate      = 0                     
													, @AuditUser        = @ModifyUser 
													, @ReceivedFrom     = @AddressSource   
                                       
                                    END
                                   
                                    IF @TermDate IS NULL
                                    BEGIN
										INSERT INTO SGT_PERSON_ADDRESS VALUES (@PERSON_ID,@Address1,@Address2,@City,150,
										@State,151,@CountryCodeValue,SUBSTRING(@ZIP,0,6),SUBSTRING(@ZIP,6,4),
										NULL,NULL,@EffectiveDate,NULL,NULL,6031,@AddressSource,@ModifyUser,GETDATE(),@ModifyUser,GETDATE(),0,NULL,NULL)
	                                          
										SELECT @NEW_ADDRESS_ID = @@IDENTITY
	                                          
										INSERT INTO SGT_PERSON_ADDRESS_CHKLIST VALUES (@NEW_ADDRESS_ID,6013,@AddressTypeId,@ModifyUser,GETDATE(),@ModifyUser,GETDATE(),0)
                                    END 
                                    END
                              END
                              ELSE
                              BEGIN
                                    SET @RESULT = 'PLEASE PROVIDE AN ADDRESS ID,'
                                    SET @FLAG = 1
                              END
                              
                        END
                        --ELSE IF @ModifyUser = 'ACS'
                        --BEGIN
                        
                        --      IF @TermDate IS NULL OR @TermDate = ''
                        --      BEGIN 
                        --            SET @RESULT = 'PLEASE ENTER TERM END DATE,'
                        --            SET @FLAG = 1
                        --      END
                              
                        --      IF @FLAG = 0
                        --      BEGIN
                        --            UPDATE SGT_PERSON_ADDRESS SET END_DATE = @TermDate,MODIFIED_BY=@ModifyUser
                        --            WHERE ADDRESS_ID = @AddressId
                        --      END
                                 
                        --END
                        
                        ELSE 
                        BEGIN
                            SET @FLAG = 1
                        END   
                ---CALL HEDB SP HERE	
		        IF @FLAG = 0 AND @TermDate IS NULL
		        BEGIN
				exec @RTN = HEDB.DBO.USP_PID_PersonAddress_UPD
							  @PID				= @PersonId              
							, @Attention        = NULL             
							, @Address1         = @Address1             
							, @City             = @City             
							, @State			= @State              
							, @PostalCode		= @Zip               
							, @Country          = NULL            
							, @CountryCode      = @CountryCode          
							, @ForeignAddr		= 0            
							, @ReturnedMail     = NULL    
							, @DoNotUpdate      = 0                     
							, @AuditUser        = @ModifyUser 
						    , @ReceivedFrom     = @AddressSource   
			    END	   
            END
            ELSE
            BEGIN
                  SET @RESULT = 'SECURED ADDRESS CANNOT BE UPDATED,'
                  SET @FLAG = 1     
            END
            END
            ELSE
            BEGIN
                  SET @RESULT = 'PLEASE ENTER VALID ADDRESS ID,'
                  SET @FLAG = 1     
            END
            
            IF @FLAG <> 0 OR @RTN <>0
			begin
				  rollback tran
				  SET @RESULT = @RESULT + ',(ERROR.TRANSACTION ROLLEDBACK)'
			end
			else
			begin
				  commit tran
				  SET @RESULT = 'ADDRESS UPDATED SUCCESSFULLY'
            end
END
GO






/****** Object:  StoredProcedure [dbo].[UpdatePersonContact]    Script Date: 06/20/2013 12:21:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[UpdatePersonContact]
	(		
		@PersonId  varchar(15),
		@HomePhone  varchar(13) = NULL,
		@CellPhone  varchar(13) = NULL,
		@WorkPhone  varchar(13) = NULL,
		@Extension  varchar(5) = NULL ,
		@Email1  varchar(60) = NULL,
		@Fax  varchar(13) = NULL,
		@ModifyUser  varchar(30) = NULL,
		@RESULT VARCHAR(500) OUTPUT	
	)
	AS
		DECLARE @PERSON_ID INT
		DECLARE @RTN INT
	    DECLARE @SOCIAL VARCHAR(9)
	    DECLARE @FirstName varchar(50)    
        DECLARE @MiddleName varchar(50)    
        DECLARE @LastName varchar(50)    
        DECLARE @DateOfBirth datetime       
        DECLARE @DateOfDeath datetime     
        DECLARE @GENDER VARCHAR(1) 
	    
		BEGIN
		IF @PersonId IS NULL OR @PersonId = ''
		BEGIN
		   SET @RESULT = 'Please provide Participant MPID'
		END
		ELSE
		BEGIN
		SELECT @PERSON_ID =  PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID = @PersonId
		     BEGIN TRAN
					IF EXISTS(SELECT TOP(1)* from SGT_PERSON WHERE PERSON_ID = @PERSON_ID)
					BEGIN
					    SELECT @SOCIAL = dbo.fn_GET_DECRYPTED_TEXT(SSN), @FirstName=FIRST_NAME, @MiddleName = MIDDLE_NAME, @LastName = LAST_NAME, @GENDER = GENDER_VALUE, @DateOfBirth = dbo.fn_GET_DECRYPTED_VALUE(DATE_OF_BIRTH), @DateOfDeath=DATE_OF_DEATH FROM SGT_PERSON WHERE PERSON_ID = @PERSON_ID
					    
						UPDATE SGT_PERSON SET HOME_PHONE_NO = @HomePhone,CELL_PHONE_NO = @CellPhone,
						WORK_PHONE_NO = @WorkPhone,EXTENSION = @Extension,EMAIL_ADDRESS_1 = @Email1,
						FAX_NO = @Fax,MODIFIED_BY = @ModifyUser WHERE PERSON_ID = @PERSON_ID
			        	
				    EXEC @RTN = HEDB.dbo.USP_PID_Person_UPD	
				          @PID = @PersonId,
				          @SSN = @SOCIAL,
				          @FirstName = @FirstName,
				          @MiddleName = @MiddleName,
				          @LastName = @LastName,
				          @DateOfBirth = @DateOfBirth,
				          @DateOfDeath = @DateOfDeath,
				          @Gender = @GENDER,
				          @HomePhone = @HomePhone,  
                          @CellPhone = @CellPhone,  
						  @Email  = @Email1,
						  @AuditUser = @ModifyUser
				    END
					ELSE
					BEGIN
						SET @RESULT = 'Participant does not exist'
					END				
					
	        IF @RTN <>0
			BEGIN
				  rollback tran
				  SET @RESULT = 'ERROR OCCURED-TRANSACTION ROLLEDBACK'
			END
			ELSE
			BEGIN
				  commit tran
				  SET @RESULT = 'PERSON INFO UPDATED SUCCESSFULLY'
            END				
        END    
	END
GO





/****** Object:  StoredProcedure [dbo].[usp_GetPidInfo]    Script Date: 06/20/2013 12:22:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



		CREATE PROC [dbo].[usp_GetPidInfo](@ssn CHAR(9))
				AS
				BEGIN
				SET NOCOUNT ON;
				DECLARE @DATASET TABLE
				(
					 pid char(15),
					 ssn char(10),
					 FirstName varchar(50) NULL,
					 LastName varchar(50)   NULL,
					 MiddleName varchar(50) NULL,
					 Gender char(1) NULL,
					 Ethnicity varchar(50) NULL,
					 DateOfBirth datetime  NULL,
					 DateOfDeath datetime NULL,
					 HomePhone varchar(15) NULL,
					 CellPhone varchar(15) NULL,
					 WorkPhone varchar(50) NULL,
					 Email varchar(50) NULL,
					 Email2	varchar(150)  NULL,
					 Fax varchar(15)   NULL,
					 Pager varchar(50)   NULL,
					 Attention varchar(30)   NULL, 
					 Address1 varchar(60)   NULL, 
					 Address2 varchar(60)   NULL,
					 City	varchar(30)   NULL, 
					 State	varchar(20)   NULL,
					 PostalCode varchar(10)   NULL,
					 Country varchar(25)   NULL,
				     CountryCode varchar(3)    NULL,
					 ForeignAddr bit NULL ,
				     ReturnedMail datetime NULL,
					 DoNotUpdate bit NULL,
				     effectivedate	datetime NULL,
				     termdate datetime NULL,	
				     GoGreenstatus varchar(4) NULL,
				     StartDate DateTime null,
				     [Source] varchar(50) null 
				)
				
				
					DECLARE @COUNT INT
					DECLARE @FLAG INT
					DECLARE @personid INT
					DECLARE @EncryptedSSN VARCHAR(100)
					SET @ssn= ltrim(rtrim(@ssn))
					exec GET_ENCRYPTED @ssn,@EncryptedSSN output
					
					
					SET @FLAG = 0
					SET @personid = 0
					SET @EncryptedSSN= ltrim(rtrim(@EncryptedSSN))
					
					
					IF (@EncryptedSSN IS NOT NULL OR @EncryptedSSN <> '')
					BEGIN
						SELECT @COUNT =COUNT(*) FROM SGT_PERSON WHERE SSN=@EncryptedSSN
						IF @COUNT > 0
						BEGIN
						 SELECT @personid = PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN
						END
						ELSE
						BEGIN
							SET @FLAG = 1
						END
					END
					
					
				   IF ((@personid IS NOT NULL AND @personid <> '' ) OR (@EncryptedSSN IS NOT NULL AND @EncryptedSSN <> '')) AND @FLAG=0
				   BEGIN
						
						DECLARE @EncryptedDateOfBirth VARCHAR(100)
						DECLARE @DateOfBirth VARCHAR(50)
						SELECT @EncryptedDateOfBirth = DATE_OF_BIRTH FROM SGT_PERSON WHERE PERSON_ID = @personid
						exec GET_DECRYPTED @EncryptedDateOfBirth,@DateOfBirth output
						
						INSERT INTO @DATASET
						SELECT p.MPI_PERSON_ID,@ssn, FIRST_NAME,LAST_NAME,MIDDLE_NAME,GENDER_VALUE,NULL,
					    CAST(@DateOfBirth AS DATETIME),
					    CASE WHEN P.DATE_OF_DEATH IS NULL THEN DN.DATE_OF_DEATH ELSE NULL END AS DATE_OF_DEATH,
					    HOME_PHONE_NO,CELL_PHONE_NO,WORK_PHONE_NO,EMAIL_ADDRESS_1,EMAIL_ADDRESS_2,FAX_NO,PAGER,
					    NULL,PA.ADDR_LINE_1,PA.ADDR_LINE_2,PA.ADDR_CITY,
					    CASE WHEN PA.ADDR_COUNTRY_VALUE IN ('0001','0011','0036','0133','0147') THEN PA.ADDR_STATE_VALUE ELSE PA.FOREIGN_PROVINCE END,
					    CASE WHEN PA.ADDR_COUNTRY_VALUE ='0001' THEN PA.ADDR_ZIP_4_CODE + PA.ADDR_ZIP_CODE ELSE PA.FOREIGN_POSTAL_CODE END,
						(SELECT DESCRIPTION FROM SGS_CODE_VALUE WHERE CODE_ID=151 AND CODE_VALUE=PA.ADDR_COUNTRY_VALUE),
						SUBSTRING(PA.ADDR_COUNTRY_VALUE,2,3),CASE WHEN PA.ADDR_COUNTRY_VALUE='0001' THEN 0 ELSE 1 END,
						PA.END_DATE,CASE WHEN PA.SECURED_FLAG='Y' THEN 1 ELSE 0 END,PA.START_DATE,PA.END_DATE, p.COMMUNICATION_PREFERENCE_VALUE, gh.START_DATE, gh.[SOURCE]
						
						FROM SGT_PERSON P
						left OUTER JOIN SGT_PERSON_ADDRESS PA ON p.PERSON_ID = pa.PERSON_ID 
						LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA.ADDRESS_ID =PAC.ADDRESS_ID AND PAC.ADDRESS_TYPE_VALUE = 'MAIL' AND PA.START_DATE <= GetDate() AND (PA.END_DATE >= GetDate() OR PA.END_DATE IS NULL)
						left outer join SGT_GO_GREEN_HISTORY GH on GH.MPI_PERSON_ID = p.MPI_PERSON_ID AND GH.GO_GREEN_HISTORY_ID = (SELECT TOP 1 GH1.GO_GREEN_HISTORY_ID FROM SGT_GO_GREEN_HISTORY GH1 WHERE GH1.MPI_PERSON_ID = P.MPI_PERSON_ID ORDER BY START_DATE DESC)
						LEFT OUTER JOIN SGT_DEATH_NOTIFICATION  DN ON DN.PERSON_ID = P.PERSON_ID AND DN.DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG') AND DN.DEATH_NOTIFICATION_ID =(SELECT TOP 1 DN1.DEATH_NOTIFICATION_ID FROM SGT_DEATH_NOTIFICATION DN1 WHERE DN1.PERSON_ID=P.PERSON_ID ORDER BY DN1.DATE_OF_DEATH DESC)
						WHERE (p.PERSON_ID = @personid OR @personid IS NULL OR @personid ='')
							  AND (p.ssn = @EncryptedSSN OR @EncryptedSSN IS NULL OR @EncryptedSSN = '') 
							  
						SELECT TOP(1) * FROM @DATASET DS ORDER BY DS.StartDate DESC 
						RETURN 1
				  END
				  ELSE
				  BEGIN
					SELECT null  FROM @DATASET
					RETURN 0
				  END
				END



GO





/****** Object:  StoredProcedure [dbo].[usp_Get_UserAccessPermissions]    Script Date: 06/20/2013 12:22:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Get_UserAccessPermissions] 
@userName sysname = null 
AS

SET NOCOUNT ON

DECLARE @DatabaseUserName [SYSNAME];

SET @DatabaseUserName = @userName;


DECLARE @errStatement   VARCHAR(1000),
        @msgStatement   VARCHAR(1000),
        @DatabaseUserID SMALLINT,
        @ServerUserName SYSNAME,
        @RoleName       VARCHAR(1000),
        @ObjectID       INT,
        @ObjectName     VARCHAR(1000),
        @StateDesc       VARCHAR(1000),
        @permissionName VARCHAR(1000)
        
        
      

SELECT @DatabaseUserID = su.[uid],
       @ServerUserName = sl.[loginname]
FROM   dbo.[sysusers] su
       INNER JOIN [master].dbo.[syslogins] sl
         ON su.[sid] = sl.[sid]
WHERE  su.[name] = @DatabaseUserName

IF @DatabaseUserID IS NULL
  BEGIN
      SET @errStatement = 'User ' + @DatabaseUserName + ' does not exist in ' + DB_NAME() + CHAR(13) + 'Please provide the name of a current user in ' + DB_NAME() + ' you wish to script.'

      RAISERROR(@errStatement,
                16,
                1)
  END
ELSE
  BEGIN
      SET @msgStatement = '--Security creation script for user ' + @ServerUserName + CHAR(13) + '--Created At: ' + CONVERT(VARCHAR, GETDATE(), 100) + REPLACE(CONVERT(VARCHAR, GETDATE(), 108), ':', '') + CHAR(13) + '--Created By: ' + SUSER_NAME() + CHAR(13) + '--Add User To Database' + CHAR(13) + 'USE [' + DB_NAME() + ']' + CHAR(13) + 'EXEC [sp_grantdbaccess]' + CHAR(13) + CHAR(9) + '@loginame = ''' + @ServerUserName + ''',' + CHAR(13) + CHAR(9) + '@name_in_db = ''' + @DatabaseUserName + '''' + ';'+ CHAR(13) + 'GO' + CHAR(13) + '--Add User To Roles'

      PRINT @msgStatement

      DECLARE _sysusers CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
        SELECT [name]
        FROM   [dbo].[sysusers]
        WHERE  [uid] IN (SELECT [groupuid]
                         FROM   [dbo].[sysmembers]
                         WHERE  [memberuid] = @DatabaseUserID)

      OPEN _sysusers

      FETCH NEXT FROM _sysusers INTO @RoleName

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @msgStatement = 'EXEC [sp_addrolemember]' + CHAR(13) + CHAR(9) + '@rolename = ''' + @RoleName + ''',' + CHAR(13) + CHAR(9) + '@membername = ''' + @DatabaseUserName + ''''  + ';' ;

            PRINT @msgStatement

            FETCH NEXT FROM _sysusers INTO @RoleName
        END
        
        
        CLOSE _sysusers;
        
        DEALLOCATE _sysusers;
        
       --Database level perms;
       
       PRINT '--Set Database level Permissions';
       DECLARE _databaselevelperms CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR      
		SELECT 
			 sdp.state_desc,
			 sdp.permission_name
		FROM 
			sys.database_permissions sdp WITH(NOLOCK)
			
			JOIN sysusers  su WITH(NOLOCK)
				ON su.uid = sdp.grantee_principal_id
				
		WHERE 
			su.name = @userName
			AND sdp.class_desc = 'DATABASE';
	

      OPEN _databaselevelperms;
      
      FETCH NEXT FROM _databaselevelperms INTO @StateDesc, @PermissionName;
      
      WHILE @@FETCH_STATUS = 0 
      BEGIN 
      
		PRINT @StateDesc  + CHAR(13) + CHAR(9) + @PermissionName  + CHAR(13) + CHAR(9) +   'TO '  + @userName + ';';
		
		FETCH NEXT FROM _databaselevelperms INTO @StateDesc, @PermissionName
		
	  END
	  
	  CLOSE _databaselevelperms;

      DEALLOCATE _databaselevelperms;

      SET @msgStatement = 'GO' + CHAR(13) + '--Set Object Specific Permissions'

      PRINT @msgStatement;

      DECLARE _sysobjects CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR
        SELECT DISTINCT( [sysobjects].[id] ),
                       '[' + USER_NAME([sysobjects].[uid]) + '].[' + [sysobjects].[name] + ']'
        FROM   [dbo].[sysprotects]
               INNER JOIN [dbo].[sysobjects]
                 ON [sysprotects].[id] = [sysobjects].[id]
        WHERE  [sysprotects].[uid] = @DatabaseUserID;

      OPEN _sysobjects;

      FETCH NEXT FROM _sysobjects INTO @ObjectID, @ObjectName;

      WHILE @@FETCH_STATUS = 0
        BEGIN
            SET @msgStatement = '';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 193
                             AND [protecttype] = 205)
              SET @msgStatement = @msgStatement + 'SELECT,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 195
                             AND [protecttype] = 205)
              SET @msgStatement = @msgStatement + 'INSERT,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 197
                             AND [protecttype] = 205)
              SET @msgStatement = @msgStatement + 'UPDATE,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 196
                             AND [protecttype] = 205)
              SET @msgStatement = @msgStatement + 'DELETE,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 224
                             AND [protecttype] = 205)
              SET @msgStatement = @msgStatement + 'EXECUTE,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 26
                             AND [protecttype] = 205)
              SET @msgStatement = @msgStatement + 'REFERENCES,';

            IF LEN(@msgStatement) > 0
              BEGIN
                  IF RIGHT(@msgStatement, 1) = ','
                    SET @msgStatement = LEFT(@msgStatement, LEN(@msgStatement) - 1);

                  SET @msgStatement = 'GRANT' + CHAR(13) + CHAR(9) + @msgStatement + CHAR(13) + CHAR(9) + 'ON ' + @ObjectName + CHAR(13) + CHAR(9) + 'TO ' + @DatabaseUserName + ';' ;

                  PRINT @msgStatement;
              END

            SET @msgStatement = '';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 193
                             AND [protecttype] = 206)
              SET @msgStatement = @msgStatement + 'SELECT,'

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 195
                             AND [protecttype] = 206)
              SET @msgStatement = @msgStatement + 'INSERT,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 197
                             AND [protecttype] = 206)
              SET @msgStatement = @msgStatement + 'UPDATE,';

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 196
                             AND [protecttype] = 206)
              SET @msgStatement = @msgStatement + 'DELETE,'

            IF EXISTS(SELECT 1
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 224
                             AND [protecttype] = 206)
              SET @msgStatement = @msgStatement + 'EXECUTE,';

            IF EXISTS(SELECT *
                      FROM   [dbo].[sysprotects]
                      WHERE  [id] = @ObjectID
                             AND [uid] = @DatabaseUserID
                             AND [action] = 26
                             AND [protecttype] = 206)
              SET @msgStatement = @msgStatement + 'REFERENCES,';

            IF LEN(@msgStatement) > 0
              BEGIN
                  IF RIGHT(@msgStatement, 1) = ','
                    SET @msgStatement = LEFT(@msgStatement, LEN(@msgStatement) - 1)

                  SET @msgStatement = 'DENY' + CHAR(13) + CHAR(9) + @msgStatement + CHAR(13) + CHAR(9) + 'ON ' + @ObjectName + CHAR(13) + CHAR(9) + 'TO ' + @DatabaseUserName + ';' ;

                  PRINT @msgStatement;
              END

            FETCH NEXT FROM _sysobjects INTO @ObjectID, @ObjectName;
        END

      CLOSE _sysobjects;

      DEALLOCATE _sysobjects;
      
   

      PRINT 'GO'
  END 


SET NOCOUNT OFF

RETURN 0


GO










/****** Object:  UserDefinedFunction [dbo].[fn_GET_DECRYPTED_TEXT]    Script Date: 06/20/2013 12:24:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_GET_DECRYPTED_TEXT](@text [nvarchar](max))
RETURNS [nvarchar](max) 
AS 
begin
return @text
end

GO




/****** Object:  UserDefinedFunction [dbo].[fn_GET_DECRYPTED_VALUE]    Script Date: 06/20/2013 12:25:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_GET_DECRYPTED_VALUE](@DATE_OF_BIRTH [datetime])
RETURNS [datetime] 
begin
return @DATE_OF_BIRTH
end

GO


/****** Object:  UserDefinedFunction [dbo].[GetNumberOfHolidays]    Script Date: 06/20/2013 14:20:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetNumberOfHolidays] 
	( 
		@StartDate SMALLDATETIME, 
		@EndDate SMALLDATETIME = NULL
	) 
RETURNS INT 
AS BEGIN 

	IF @EndDate IS NULL SET @EndDate = GetDate();

	IF @StartDate > @EndDate RETURN -1;

	SET @StartDate = CONVERT(DATETIME,CONVERT(VARCHAR,@StartDate,101) ,110)
	SET @EndDate   = CONVERT(DATETIME,CONVERT(VARCHAR,@EndDate  ,101) ,110)

RETURN 
	( 
		SELECT COUNT('0') as HoliDays 
			FROM Sgs_Code_Value (Nolock)
			WHERE Code_Id = 21
			AND  CAST(Description AS DATETIME) 
			BETWEEN @StartDate AND @EndDate
	); 
END 



GO







/****** Object:  UserDefinedFunction [dbo].[GetNumberOfWeekDays]    Script Date: 06/20/2013 14:21:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetNumberOfWeekDays] 
	( 
		@StartDate SMALLDATETIME, 
		@EndDate SMALLDATETIME = NULL
	) 
RETURNS INT 
AS BEGIN 

	DECLARE @NumberOfDays INT; 
	IF @EndDate IS NULL SET @EndDate = GetDate();
	
	IF @StartDate > @EndDate RETURN -1;
	
	SET @NumberOfDays = DATEDIFF(DAY, @StartDate, @EndDate)+1; 

RETURN 
	( 
	SELECT	@NumberOfDays / 7 * 5 + @NumberOfDays % 7 - 
		( 
			SELECT COUNT(*) 
			FROM 
			( 
				SELECT 1 AS D 
				UNION ALL SELECT 2 
				UNION ALL SELECT 3 
				UNION ALL SELECT 4 
				UNION ALL SELECT 5 
				UNION ALL SELECT 6 
				UNION ALL SELECT 7 
			) Weekdays 
			WHERE D <= @NumberOfDays % 7 
			AND DATENAME(WEEKDAY, @EndDate - D + 1) 
			IN 
				( 
				'Saturday', 
				'Sunday' 
				) 
		)
	); 
END 


GO





/****** Object:  UserDefinedFunction [dbo].[GetNumberOfWeekEndDays]    Script Date: 06/20/2013 14:21:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

	( 
		@StartDate SMALLDATETIME, 
		@EndDate SMALLDATETIME = NULL
	) 
RETURNS INT 
AS BEGIN 
	DECLARE @NumberOfDays INT; 
	IF @EndDate IS NULL SET @EndDate = GetDate();
	
	IF @StartDate > @EndDate RETURN -1;	
	
	SET @NumberOfDays = DATEDIFF(DAY, @StartDate, @EndDate)+1; 

RETURN 
	( 
		SELECT  @NumberOfDays -  Dbo.GetNumberOfWeekDays(@StartDate,@EndDate)
	); 
END 



GO





/****** Object:  UserDefinedFunction [dbo].[GetNumberOfWorkingDays]    Script Date: 06/20/2013 14:22:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetNumberOfWorkingDays] 
	( 
		@StartDate SMALLDATETIME, 
		@EndDate SMALLDATETIME = NULL
	) 
RETURNS INT 
AS BEGIN 
	
	IF @EndDate IS NULL SET @EndDate = GetDate();
	IF @StartDate > @EndDate RETURN -1;
	
RETURN 
	( 
		SELECT  (
					Dbo.GetNumberOfWeekDays(@StartDate,@EndDate) -
					Dbo.GetNumberOfHolidays(@StartDate,@EndDate)
				)
	); 
END 



GO




/****** Object:  UserDefinedFunction [dbo].[GetWorkingTimeBetweenDates]    Script Date: 06/20/2013 14:22:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetWorkingTimeBetweenDates] 
	( 
		@START_DATE SMALLDATETIME, 
		@END_DATE SMALLDATETIME = NULL
	) 
RETURNS INT 
AS BEGIN 

DECLARE @TotalTime Int
DECLARE @STDT DATETIME
SET @STDT  = CONVERT(DATETIME,CONVERT(VARCHAR,@START_DATE,101) ,110);
IF @END_DATE IS NULL SET @END_DATE = GETDATE();
IF @START_DATE > @END_DATE RETURN -1;


WITH DATETABLE1(S1START_DATE, S1END_DATE,S2START_DATE, S2END_DATE) AS 
(
   SELECT CASE WHEN @START_DATE < DATEADD(HH,8,@STDT) 
			   THEN DATEADD(HH,8,@STDT) 
			   WHEN @START_DATE < DATEADD(HH,12,@STDT) 
			   THEN @START_DATE 
   			   ELSE CAST(NULL as DATETIME) END
		  AS S1START_DATE,
		  CASE WHEN @START_DATE < DATEADD(HH,12,@STDT) 
					AND @END_DATE < DATEADD(HH,12,@STDT) THEN @END_DATE
			   WHEN @START_DATE < DATEADD(HH,12,@STDT) 
					AND @END_DATE > DATEADD(HH,12,@STDT) THEN 
				    DATEADD(HH,12,@STDT)
			   WHEN @START_DATE > DATEADD(HH,12,@STDT) THEN CAST(NULL as DATETIME)
			   END						
		  AS S1END_DATE,
		  CASE WHEN @START_DATE < DATEADD(HH,13,@STDT) 
					AND @END_DATE > DATEADD(HH,13,@STDT) THEN
					DATEADD(HH,13,@STDT)  
			   WHEN @START_DATE > DATEADD(HH,13,@STDT) THEN @START_DATE
			   WHEN @START_DATE < DATEADD(HH,13,@STDT) 
					AND @END_DATE < DATEADD(HH,13,@STDT) THEN CAST(NULL as DATETIME)
			ELSE CAST(NULL as DATETIME) 
		  END
		 as S2START_DATE,	
		  CASE 	WHEN @END_DATE < DATEADD(HH,13,@STDT) THEN CAST(NULL as DATETIME)
				WHEN @END_DATE < DATEADD(HH,17,@STDT) THEN @END_DATE
			   ELSE DATEADD(HH,17,@STDT) 
			   END
		  AS S2END_DATE
			
	UNION ALL
	SELECT CASE WHEN @END_DATE > DATEADD(D,1,DATEADD(HH,8,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110)))
				THEN DATEADD(D,1,DATEADD(HH,8,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
				ELSE  CAST(NULL as DATETIME) END
		   AS S1END_DATE,
		   CASE WHEN @END_DATE > DATEADD(D,1,DATEADD(HH,12,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
				THEN DATEADD(D,1,DATEADD(HH,12,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
				ELSE @END_DATE END
		   AS S1END_DATE,
		  CASE WHEN @END_DATE > DATEADD(D,1,DATEADD(HH,13,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110)))
				THEN DATEADD(D,1,DATEADD(HH,13,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
				ELSE  CAST(NULL as DATETIME) END
		   AS S2START_DATE,
   		   CASE WHEN @END_DATE > DATEADD(D,1,DATEADD(HH,17,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
				THEN DATEADD(D,1,DATEADD(HH,17,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
			    WHEN @END_DATE > DATEADD(D,1,DATEADD(HH,13,CONVERT(DATETIME,CONVERT(VARCHAR,COALESCE(S1START_DATE, S1END_DATE, S2START_DATE, S2END_DATE),101) ,110))) 
				THEN @END_DATE 
			    ELSE CAST(NULL as DATETIME) END
		   AS S2END_DATE
	FROM DATETABLE1
	WHERE S2END_DATE < @END_DATE 

)

SELECT @TotalTime = SUM(
							(CASE WHEN ISNULL(DATEDIFF(N, S1START_DATE, S1END_DATE),0) < 0 THEN 0 
								  ELSE ISNULL(DATEDIFF(N, S1START_DATE, S1END_DATE),0) END)
						+
							(CASE WHEN ISNULL(DATEDIFF(N, S2START_DATE, S2END_DATE),0) < 0 THEN 0 
								  ELSE ISNULL(DATEDIFF(N, S2START_DATE, S2END_DATE),0) END)
					   )
	FROM DATETABLE1 OPTION (MAXRECURSION 32767);

RETURN 
	( 
			SELECT  @TotalTime
	); 
END 




GO




/****** Object:  UserDefinedFunction [dbo].[GetWorkingTimeInMinutes]    Script Date: 06/20/2013 14:23:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetWorkingTimeInMinutes] 
	( 
		@StartDate SMALLDATETIME, 
		@EndDate SMALLDATETIME = NULL
	) 
RETURNS INT 
AS BEGIN 
	
	DECLARE @MinutesInHolidaysAndWeekends Int
	DECLARE @MinutesInADay Int

	SET @MinutesInADay = 480; -- 1440 changed to 480 minutes to consider only working hours
	SET @MinutesInHolidaysAndWeekends = 0;

	IF @EndDate IS NULL SET @EndDate = GetDate();

	IF @StartDate > @EndDate RETURN -1;
	
	SET @MinutesInHolidaysAndWeekends = ( Dbo.GetNumberOfWeekEndDays(@StartDate,@EndDate) + 
										Dbo.GetNumberOfHolidays(@StartDate,@EndDate)) * @MinutesInADay;

	IF Dbo.GetNumberOfWeekEndDays(@EndDate,@EndDate) = 1 OR Dbo.GetNumberOfHolidays(@EndDate,@EndDate) = 1  BEGIN
		SET @MinutesInHolidaysAndWeekends = @MinutesInHolidaysAndWeekends - @MinutesInADay +
			dbo.GetWorkingTimeBetweenDates(DATEADD(HH,8,CONVERT(DATETIME,CONVERT(VARCHAR,@EndDate,101) ,110)),@EndDate);
	END

	IF Dbo.GetNumberOfWeekEndDays(@StartDate,@StartDate) = 1 OR Dbo.GetNumberOfHolidays(@StartDate,@StartDate) = 1 BEGIN
		SET @MinutesInHolidaysAndWeekends = @MinutesInHolidaysAndWeekends - @MinutesInADay + 
			dbo.GetWorkingTimeBetweenDates(@StartDate,DATEADD(HH,17,CONVERT(DATETIME,CONVERT(VARCHAR,@StartDate,101) ,110)));
	END
	
	IF @MinutesInHolidaysAndWeekends < 0  SET @MinutesInHolidaysAndWeekends = 0;

RETURN 
	( 
			SELECT  dbo.GetWorkingTimeBetweenDates(@STARTDATE, @ENDDATE) -  @MinutesInHolidaysAndWeekends  
	); 
END 



GO




/****** Object:  View [dbo].[vw_GET_DEMOGRAPHIC_INFO]    Script Date: 06/20/2013 15:30:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vw_GET_DEMOGRAPHIC_INFO] AS
SELECT MPI_PERSON_ID AS MPID,FIRST_NAME AS FIRST_NAME,
LAST_NAME AS LAST_NAME,VIP_FLAG AS IS_VIP,
CASE WHEN dbo.fn_GET_DECRYPTED_VALUE(DATE_OF_BIRTH)='1753-01-01 00:00:00.000' 
THEN NULL ELSE dbo.fn_GET_DECRYPTED_VALUE(DATE_OF_BIRTH) END AS DATE_OF_BIRTH
FROM SGT_PERSON


GO




/****** Object:  StoredProcedure [dbo].[UpdatePersonContact]    Script Date: 07/01/2013 13:54:39 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROC [dbo].[UpdatePersonContact]
	(		
		@PersonId  varchar(15),
		@HomePhone  varchar(13) = NULL,
		@CellPhone  varchar(13) = NULL,
		@WorkPhone  varchar(13) = NULL,
		@Extension  varchar(5) = NULL ,
		@Email1  varchar(60) = NULL,
		@Fax  varchar(13) = NULL,
		@ModifyUser  varchar(30) = NULL,
		@RESULT VARCHAR(500) OUTPUT	
	)
	AS
		DECLARE @PERSON_ID INT
		DECLARE @RTN INT
		SET @RTN = 99
	    DECLARE @SOCIAL VARCHAR(9)
	    DECLARE @FirstName varchar(50)    
        DECLARE @MiddleName varchar(50)    
        DECLARE @LastName varchar(50)    
        DECLARE @DateOfBirth datetime       
        DECLARE @DateOfDeath datetime     
        DECLARE @GENDER VARCHAR(1) 
	    
		BEGIN
		IF @PersonId IS NULL OR @PersonId = ''
		BEGIN
		   SET @RESULT = 'Please provide Participant MPID'
		END
		ELSE
		BEGIN TRY
		SELECT @PERSON_ID =  PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID = @PersonId
		 
		     BEGIN TRAN
		       
					IF EXISTS(SELECT TOP(1)* from SGT_PERSON WHERE PERSON_ID = @PERSON_ID)
					BEGIN
					    SELECT @SOCIAL = dbo.fn_GET_DECRYPTED_TEXT(SSN), @FirstName=FIRST_NAME, @MiddleName = MIDDLE_NAME, @LastName = LAST_NAME, @GENDER = GENDER_VALUE, @DateOfBirth = dbo.fn_GET_DECRYPTED_VALUE(DATE_OF_BIRTH), @DateOfDeath=DATE_OF_DEATH FROM SGT_PERSON WHERE PERSON_ID = @PERSON_ID
					    
						UPDATE SGT_PERSON SET HOME_PHONE_NO = @HomePhone,CELL_PHONE_NO = @CellPhone,
						WORK_PHONE_NO = @WorkPhone,EXTENSION = @Extension,EMAIL_ADDRESS_1 = @Email1,
						FAX_NO = @Fax,MODIFIED_BY = @ModifyUser WHERE PERSON_ID = @PERSON_ID
			      	
				    EXEC @RTN = HEDB.dbo.USP_PID_Person_UPD	
				          @PID = @PersonId,
				          @SSN = @SOCIAL,
				          @FirstName = @FirstName,
				          @MiddleName = @MiddleName,
				          @LastName = @LastName,
				          @DateOfBirth = @DateOfBirth,
				          @DateOfDeath = @DateOfDeath,
				          @Gender = @GENDER,
				          @HomePhone = @HomePhone,  
                          @CellPhone = @CellPhone,  
						  @Email  = @Email1,
						  @AuditUser = @ModifyUser
				    END
					ELSE
					BEGIN
						SET @RESULT = 'Participant does not exist'
					END				
			  		
	        IF @RTN <>0
			BEGIN
				  rollback tran
				  SET @RESULT = 'ERROR OCCURED-TRANSACTION ROLLEDBACK'
			END
			ELSE
			BEGIN
				  commit tran
				  SET @RESULT = 'PERSON INFO UPDATED SUCCESSFULLY'
            END	            	     
         END TRY           
         BEGIN CATCH 
            rollback tran
		    SET @RESULT = 'ERROR OCCURED-TRANSACTION ROLLEDBACK'         
         END CATCH  
	END
	GO



/****** Rohan Adgaonkar -Country Code change [dbo].[usp_GetPidInfo]    Script Date: 07/06/2013 14:43:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



		ALTER PROC [dbo].[usp_GetPidInfo](@ssn CHAR(9))
				AS
				BEGIN
				SET NOCOUNT ON;
				DECLARE @DATASET TABLE
				(
					 pid char(15),
					 ssn char(10),
					 FirstName varchar(50) NULL,
					 LastName varchar(50)   NULL,
					 MiddleName varchar(50) NULL,
					 Gender char(1) NULL,
					 Ethnicity varchar(50) NULL,
					 DateOfBirth datetime  NULL,
					 DateOfDeath datetime NULL,
					 HomePhone varchar(15) NULL,
					 CellPhone varchar(15) NULL,
					 WorkPhone varchar(50) NULL,
					 Email varchar(50) NULL,
					 Email2	varchar(150)  NULL,
					 Fax varchar(15)   NULL,
					 Pager varchar(50)   NULL,
					 Attention varchar(30)   NULL, 
					 Address1 varchar(60)   NULL, 
					 Address2 varchar(60)   NULL,
					 City	varchar(30)   NULL, 
					 State	varchar(20)   NULL,
					 PostalCode varchar(10)   NULL,
					 Country varchar(25)   NULL,
				     CountryCode varchar(2)    NULL,
					 ForeignAddr bit NULL ,
				     ReturnedMail datetime NULL,
					 DoNotUpdate bit NULL,
				     effectivedate	datetime NULL,
				     termdate datetime NULL,	
				     GoGreenstatus varchar(4) NULL,
				     StartDate DateTime null,
				     [Source] varchar(50) null 
				)
				
				
					DECLARE @COUNT INT
					DECLARE @FLAG INT
					DECLARE @personid INT
					DECLARE @EncryptedSSN VARCHAR(100)
					SET @ssn= ltrim(rtrim(@ssn))
					exec GET_ENCRYPTED @ssn,@EncryptedSSN output
					
					
					SET @FLAG = 0
					SET @personid = 0
					SET @EncryptedSSN= ltrim(rtrim(@EncryptedSSN))
					
					
					IF (@EncryptedSSN IS NOT NULL OR @EncryptedSSN <> '')
					BEGIN
						SELECT @COUNT =COUNT(*) FROM SGT_PERSON WHERE SSN=@EncryptedSSN
						IF @COUNT > 0
						BEGIN
						 SELECT @personid = PERSON_ID FROM SGT_PERSON WHERE SSN=@EncryptedSSN
						END
						ELSE
						BEGIN
							SET @FLAG = 1
						END
					END
					
					
				   IF ((@personid IS NOT NULL AND @personid <> '' ) OR (@EncryptedSSN IS NOT NULL AND @EncryptedSSN <> '')) AND @FLAG=0
				   BEGIN
						
						DECLARE @EncryptedDateOfBirth VARCHAR(100)
						DECLARE @DateOfBirth VARCHAR(50)
						SELECT @EncryptedDateOfBirth = DATE_OF_BIRTH FROM SGT_PERSON WHERE PERSON_ID = @personid
						exec GET_DECRYPTED @EncryptedDateOfBirth,@DateOfBirth output
						
						INSERT INTO @DATASET
						SELECT p.MPI_PERSON_ID,@ssn, FIRST_NAME,LAST_NAME,MIDDLE_NAME,GENDER_VALUE,NULL,
					    CAST(@DateOfBirth AS DATETIME),
					    CASE WHEN P.DATE_OF_DEATH IS NULL THEN DN.DATE_OF_DEATH ELSE NULL END AS DATE_OF_DEATH,
					    HOME_PHONE_NO,CELL_PHONE_NO,WORK_PHONE_NO,EMAIL_ADDRESS_1,EMAIL_ADDRESS_2,FAX_NO,PAGER,
					    NULL,PA.ADDR_LINE_1,PA.ADDR_LINE_2,PA.ADDR_CITY,
					    CASE WHEN PA.ADDR_COUNTRY_VALUE IN ('0001','0011','0036','0133','0147') THEN PA.ADDR_STATE_VALUE ELSE PA.FOREIGN_PROVINCE END,
					    CASE WHEN PA.ADDR_COUNTRY_VALUE ='0001' THEN PA.ADDR_ZIP_4_CODE + PA.ADDR_ZIP_CODE ELSE PA.FOREIGN_POSTAL_CODE END,
						(SELECT DESCRIPTION FROM SGS_CODE_VALUE WHERE CODE_ID=151 AND CODE_VALUE=PA.ADDR_COUNTRY_VALUE),
						--SUBSTRING(PA.ADDR_COUNTRY_VALUE,2,3),
						(SELECT DATA1 FROM SGS_CODE_VALUE WHERE CODE_ID=151 AND CODE_VALUE=PA.ADDR_COUNTRY_VALUE),
						CASE WHEN PA.ADDR_COUNTRY_VALUE='0001' THEN 0 ELSE 1 END,
						PA.END_DATE,CASE WHEN PA.SECURED_FLAG='Y' THEN 1 ELSE 0 END,PA.START_DATE,PA.END_DATE, p.COMMUNICATION_PREFERENCE_VALUE, gh.START_DATE, gh.[SOURCE]
						
						FROM SGT_PERSON P
						left OUTER JOIN SGT_PERSON_ADDRESS PA ON p.PERSON_ID = pa.PERSON_ID 
						LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA.ADDRESS_ID =PAC.ADDRESS_ID AND PAC.ADDRESS_TYPE_VALUE = 'MAIL' AND PA.START_DATE <= GetDate() AND (PA.END_DATE >= GetDate() OR PA.END_DATE IS NULL)
						left outer join SGT_GO_GREEN_HISTORY GH on GH.MPI_PERSON_ID = p.MPI_PERSON_ID AND GH.GO_GREEN_HISTORY_ID = (SELECT TOP 1 GH1.GO_GREEN_HISTORY_ID FROM SGT_GO_GREEN_HISTORY GH1 WHERE GH1.MPI_PERSON_ID = P.MPI_PERSON_ID ORDER BY START_DATE DESC)
						LEFT OUTER JOIN SGT_DEATH_NOTIFICATION  DN ON DN.PERSON_ID = P.PERSON_ID AND DN.DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG') AND DN.DEATH_NOTIFICATION_ID =(SELECT TOP 1 DN1.DEATH_NOTIFICATION_ID FROM SGT_DEATH_NOTIFICATION DN1 WHERE DN1.PERSON_ID=P.PERSON_ID ORDER BY DN1.DATE_OF_DEATH DESC)
						WHERE (p.PERSON_ID = @personid OR @personid IS NULL OR @personid ='')
							  AND (p.ssn = @EncryptedSSN OR @EncryptedSSN IS NULL OR @EncryptedSSN = '') 
							  
						SELECT TOP(1) * FROM @DATASET DS ORDER BY DS.StartDate DESC 
						RETURN 1
				  END
				  ELSE
				  BEGIN
					SELECT null  FROM @DATASET
					RETURN 0
				  END
				END



