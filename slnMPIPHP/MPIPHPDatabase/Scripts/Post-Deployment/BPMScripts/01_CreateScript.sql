
--------------------------------------------1.SGW_BPM_PROCESS-------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PROCESS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS] (
    [PROCESS_ID]     INT           IDENTITY (1, 1) NOT NULL,
    [BPM_PROCESS_ID] VARCHAR (50)  NULL,
    [CASE_ID]        INT           NULL,
    [DESCRIPTION]    VARCHAR (MAX) NULL,
    [NAME]           VARCHAR (MAX) NULL,
    [PRIORITY]       INT           NOT NULL,
    [PROCESS_CODE]   VARCHAR (50)  NULL,
    [TYPE_ID]        INT           NOT NULL,
    [TYPE_VALUE]     VARCHAR (4)   NULL,
    [STATUS_ID]      INT           NOT NULL,
    [STATUS_VALUE]   VARCHAR (4)   NULL,
    [CREATED_BY]     VARCHAR (50)  NOT NULL,
    [CREATED_DATE]   DATETIME      NOT NULL,
    [MODIFIED_BY]    VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]  DATETIME      NOT NULL,
    [UPDATE_SEQ]     INT           NULL,
	[SLA_MINUTES]		  INT			NULL,
	[SLA_HOURS]			  INT			NULL,
	[SLA_DAYS]			  INT			NULL,
	[RESTRICT_NOTIFY_FLAG]	varchar(1)	NULL,
	[ONLINE_IND]			varchar(1)				NULL,
	[SHORT_DESC]			varchar(20)				NULL,
    CONSTRAINT [PK_SGW_BPM_PROCESS_PROCESS_ID] PRIMARY KEY CLUSTERED ([PROCESS_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS is already exists' 
END       
GO

-----------------------------------2.SGW_BPM_ACTIVITY-------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY] (
    [ACTIVITY_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [BPM_ACTIVITY_ID]     VARCHAR (50)  NULL,
    [PROCESS_ID]          INT           NOT NULL,
    [NAME]                VARCHAR (MAX) NULL,
    [ACTIVITY_TYPE_ID]    INT           NULL,
    [ACTIVITY_TYPE_VALUE] VARCHAR (4)   NULL,
    [CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
    [PARENT_ACTIVITY_ID]  INT           NULL,
	[SLA_MINUTES]		  INT			NULL,
	[SLA_HOURS]			  INT			NULL,
	[SLA_DAYS]			  INT			NULL,
	[EXTERNAL_TASK]		  VARCHAR (1)	NULL,
	[TARGET_SITE_ID]	  INT           NULL,
	[TARGET_SITE_VALUE]	  VARCHAR(4)	NULL,
	[ASSIGNABLE_ACTY_COUNT] INT			NULL,
	[SHORT_DESC]			varchar(20)				NULL,
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_ACTIVITY_ID] PRIMARY KEY CLUSTERED ([ACTIVITY_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY is already exists' 
END       
GO

---------------------------------------------3.SGW_BPM_ACTIVITY_CHECKLIST-------------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_CHECKLIST') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_CHECKLIST IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_CHECKLIST](
	[ACTIVITY_CHECKLIST_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[DESCRIPTION] [dbo].[UDT_DESC] NULL,
	[ACTIVITY_ID] [dbo].[UDT_ID] NULL,
	[BPM_EVENT_ID] [dbo].[UDT_ID] NULL,
	[REQUIRED_FLAG] [dbo].[UDT_FLAG] NOT NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NULL,
	[DELETED_IND] [dbo].[UDT_IND] NULL,
	[GROUP_ID]    INT NULL,
 CONSTRAINT [PK_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_CHECKLIST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_CHECKLIST is already exists' 
END       
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_ACTIVITY_CHECKLIST_ACTIVITY_ID_SGW_ACTIVITY_ACTIVITY_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_ACTIVITY_CHECKLIST'))
BEGIN
	ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_SGW_BPM_ACTIVITY_CHECKLIST_ACTIVITY_ID_SGW_ACTIVITY_ACTIVITY_ID] FOREIGN KEY([ACTIVITY_ID])
	REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID])
END
GO
------------------------------------4.SGW_BPM_ACTIVITY_ESC_MESSAGES------------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_ESC_MESSAGES') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_ESC_MESSAGES IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES](
	[ACTIVITY_ESC_MESSAGE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_TYPE_VALUE] [varchar](4) NOT NULL,
	[ESCALATION_MESSAGE] [varchar](max) NOT NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_ACTIVITY_ESC] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_ESC_MESSAGE_ID] ASC
)) 
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_ESC_MESSAGES is already exists' 
END       
GO
-------------------------------5.SGW_BPM_ACTIVITY_INST_DETAILS---------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_INST_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_DETAILS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [int] NOT NULL,
	[PARENT_ACTV_INST_ID] [int] NOT NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NOT NULL,
 CONSTRAINT [PK_SGW_BPM_ACTIVITY_INST_DETAILS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_DETAILS is already exists' 
END       
GO
---------------------------------------------6.SGW_BPM_PROCESS_INSTANCE-------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PROCESS_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_INSTANCE] (
    [PROCESS_INSTANCE_ID] INT          IDENTITY (1, 1) NOT NULL,
    [CASE_INSTANCE_ID]    INT          NOT NULL,
    [PROCESS_ID]          INT          NOT NULL,
    [END_DATE]            DATETIME     NULL,
    [STATUS_ID]           INT          NOT NULL,
    [STATUS_VALUE]        VARCHAR (4)  NULL,
    [CREATED_BY]          VARCHAR (50) NOT NULL,
    [CREATED_DATE]        DATETIME     NOT NULL,
    [MODIFIED_BY]         VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]       DATETIME     NOT NULL,
    [UPDATE_SEQ]          INT          NULL,
    [DUE_DATE]            DATETIME     NULL,
	[SLA_MINUTES]		  INT			NULL,
	[SLA_HOURS]			  INT			NULL,
	[SLA_DAYS]			  INT			NULL,
	[NOTIFICATION_MESSAGE] VARCHAR(100) NULL,  
	[PROCESS_OWNER_ROLE]  INT           NULL,	
    CONSTRAINT [PK_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] PRIMARY KEY CLUSTERED ([PROCESS_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PROCESS_INSTANCE_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_INSTANCE is already exists' 
END       
GO

-------------------------------7.SGW_BPM_ACTIVITY_INSTANCE--------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INSTANCE] (
    [ACTIVITY_INSTANCE_ID]    INT            IDENTITY (1, 1) NOT NULL,
    [PROCESS_INSTANCE_ID]     INT            NOT NULL,
    [ACTIVITY_ID]             INT            NOT NULL,
    [CHECKED_OUT_USER]        VARCHAR (50)   NULL,
    [REFERENCE_ID]            BIGINT         NULL,
    [STATUS_ID]               INT            NOT NULL,
    [STATUS_VALUE]            VARCHAR (4)    NULL,
    [SUSPENSION_START_DATE]   DATETIME       NULL,
    [SUSPENSION_MINUTES]      INT            NULL,
    [SUSPENSION_END_DATE]     DATETIME       NULL,
    [RETURN_FROM_AUDIT_IND]   VARCHAR (1)    NULL,
    [RESUME_ACTION_ID]        INT            NOT NULL,
    [RESUME_ACTION_VALUE]     VARCHAR (4)    NULL,
    [SUSPENSION_REASON_ID]    INT            NOT NULL,
    [SUSPENSION_REASON_VALUE] VARCHAR (4)    NULL,
    [COMMENTS]                VARCHAR (2000) NULL,
    [DUE_DATE]                DATETIME       NULL,
    [START_DATE]              DATETIME       NULL,
    [END_DATE]                DATETIME       NULL,
    [INITIATOR_INSTANCE_ID]   INT            NULL,
    [CREATED_BY]              VARCHAR (50)   NOT NULL,
    [CREATED_DATE]            DATETIME       NOT NULL,
    [MODIFIED_BY]             VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]           DATETIME       NOT NULL,
    [UPDATE_SEQ]              INT            NULL,
    [CHECKED_OUT_DATE]        DATETIME       NULL,
    [ASSIGNED_BY]             VARCHAR (50)   CONSTRAINT [DF_SGW_BPM_ACTIVITY_INSTANCE_ASSIGNED_BY] DEFAULT ('') NOT NULL,
    [SLA_MINUTES]             INT            NULL,
    [SLA_HOURS]               INT            NULL,
    [SLA_DAYS]                INT            NULL,
    [ACTION_CONTROL]          VARCHAR (100)  NULL,
    [REJECTION_REASON_ID]     INT            NULL,
    [REJECTION_REASON_VALUE]  VARCHAR (4)    NULL,
    [LAUNCH_DATE]             DATETIME       NULL,
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] PRIMARY KEY CLUSTERED ([ACTIVITY_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INSTANCE_PROCESS_INSTANCE_ID_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] FOREIGN KEY ([PROCESS_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INSTANCE is already exists' 
END       
GO

-------------------------------------------8.SGW_BPM_ACTIVITY_INST_HISTORY-------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_INST_HISTORY') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_HISTORY IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_HISTORY] (
    [ACTIVITY_INSTANCE_HISTORY_ID] INT            IDENTITY (1, 1) NOT NULL,
    [ACTIVITY_INSTANCE_ID]         INT            NOT NULL,
    [STATUS_ID]                    INT            NOT NULL,
    [STATUS_VALUE]                 VARCHAR (4)    NULL,
    [ACTION_USER_ID]               VARCHAR (50)   NULL,
    [START_TIME]                   DATETIME       NULL,
    [END_TIME]                     DATETIME       NULL,
    [COMMENTS]                     VARCHAR (2000) NULL,
    [CREATED_BY]                   VARCHAR (50)   NOT NULL,
    [CREATED_DATE]                 DATETIME       NOT NULL,
    [MODIFIED_BY]                  VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]                DATETIME       NOT NULL,
    [UPDATE_SEQ]                   INT            NULL,
    [REASSIGNED_FROM]              VARCHAR (50)   NULL,
    [REASSIGNED_TO]                VARCHAR (50)   NULL,
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_INST_HISTORY_ACTIVITY_INSTANCE_HISTORY_ID] PRIMARY KEY CLUSTERED ([ACTIVITY_INSTANCE_HISTORY_ID] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INST_HISTORY_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_HISTORY is already exists' 
END       
GO


-----------------------------------9.SGW_BPM_ACTIVITY_INST_USERS-------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_INST_USERS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_USERS IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_USERS] (
    [ID]                   INT          IDENTITY (1, 1) NOT NULL,
    [ACTIVITY_INSTANCE_ID] INT          NOT NULL,
    [USER_SERIAL_ID]       INT          NOT NULL,
    [USER_ID]              VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_INST_USERS_ID] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INST_USERS_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_USERS is already exists' 
END       
GO

IF NOT EXISTS (SELECT * FROM sys.indexes 
				WHERE name='PK_SGW_BPM_ACTIVITY_INST_USERS_INSTANCE_ID' AND object_id = OBJECT_ID('SGW_BPM_ACTIVITY_INST_USERS'))
BEGIN
	CREATE NONCLUSTERED INDEX [PK_SGW_BPM_ACTIVITY_INST_USERS_INSTANCE_ID] ON [dbo].[SGW_BPM_ACTIVITY_INST_USERS]
	(
		[ACTIVITY_INSTANCE_ID] ASC
	)
END
GO

----------------------------------------10.SGW_BPM_ACTIVITY_REJECTION--------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTIVITY_REJECTION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_REJECTION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_REJECTION] (
	[BPM_ACTIVITY_REJECTION_ID] [UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_ID] [UDT_ID] NULL,
	[REJECTION_REASON_ID] [UDT_CODE_ID] NOT NULL,
	[REJECTION_REASON_VALUE] [UDT_CODE_VALUE] NULL,
	[CREATED_BY] [UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [UDT_MODIFIEDBY] NOT NULL,
	[MODIFIED_DATE] [UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [UDT_UPDSEQ] NOT NULL,
 CONSTRAINT [PK_SGW_BPM_ACTY_REJECTION_ID] PRIMARY KEY CLUSTERED 
(
	[BPM_ACTIVITY_REJECTION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY], 
    CONSTRAINT [FK_SGW_BPM_ACTY_REJE_ACTY_ID] FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [SGW_BPM_ACTIVITY]([ACTIVITY_ID])
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_REJECTION is already exists' 
END       
GO

-----------------------------------------11.SGW_BPM_ACTV_CHKL_GROUP-----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTV_CHKL_GROUP') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTV_CHKL_GROUP IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTV_CHKL_GROUP](
	[GROUP_ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_ID] [int] NOT NULL,
	[GROUP_NAME] [varchar](max) NOT NULL,
	[MIN_REQ_FIELDS] [int] NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[GROUP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTV_CHKL_GROUP is already exists' 
END       
GO

------------------------------------------12.SGW_BPM_ACTY_INST_CHECKLIST-----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTY_INST_CHECKLIST') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTY_INST_CHECKLIST IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST](
	[ACTIVITY_INST_CHECKLIST_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [dbo].[UDT_ID] NOT NULL,
	[ACTIVITY_CHECKLIST_ID] [dbo].[UDT_ID] NOT NULL,
	[REQUIRED_FLAG] [dbo].[UDT_FLAG] NOT NULL,
	[COMPLETED_IND] [dbo].[UDT_IND] NULL,
	[COMPLETED_DATE] [dbo].[UDT_DATE] NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NULL,
 CONSTRAINT [PK_SGW_BPM_ACTIVITY_INSTANCE_CHECKLIST_ACTIVITY_INSTANCE_CHECKLIST_ID] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_INST_CHECKLIST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTY_INST_CHECKLIST is already exists' 
END  
     
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_ACTY_INST_CHECKLIST_ACTY_INST_CHECKLIST_ID_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_ACTY_INST_CHECKLIST'))
BEGIN
	ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_SGW_BPM_ACTY_INST_CHECKLIST_ACTY_INST_CHECKLIST_ID_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID] FOREIGN KEY([ACTIVITY_CHECKLIST_ID])
	REFERENCES [dbo].[SGW_BPM_ACTIVITY_CHECKLIST] ([ACTIVITY_CHECKLIST_ID])
END
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_ACTY_INST_CHECKLIST'))
BEGIN
	ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY([ACTIVITY_INSTANCE_ID])
	REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
END
GO

ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST] CHECK CONSTRAINT [FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID]
GO

----------------------------------------------13.SGW_BPM_ACTY_INST_REJECTION----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ACTY_INST_REJECTION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTY_INST_REJECTION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTY_INST_REJECTION] (
	[BPM_ACTY_INST_REJECTION_ID] [UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [UDT_ID] NULL,
	[REJECTION_REASON_ID] [UDT_CODE_ID] NOT NULL,
	[REJECTION_REASON_VALUE] [UDT_CODE_VALUE] NULL,
	[CREATED_BY] [UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [UDT_MODIFIEDBY] NOT NULL,
	[MODIFIED_DATE] [UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [UDT_UPDSEQ] NOT NULL,
 CONSTRAINT [PK_SGW_BPM_ACTY_INST_REJ_ID] PRIMARY KEY CLUSTERED 
(
	[BPM_ACTY_INST_REJECTION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY], 
    CONSTRAINT [FK_SGW_BPM_ACTY_INST_REJ_ACTY] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [SGW_BPM_ACTIVITY_INSTANCE]([ACTIVITY_INSTANCE_ID]) 
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTY_INST_REJECTION is already exists' 
END       
GO
-------------------------------------14.SGW_BPM_CASE---------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE] (
    [CASE_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [CASE_FILE]     VARCHAR (MAX) NULL,
    [DESCRIPTION]   VARCHAR (MAX) NULL,
    [NAME]          VARCHAR (MAX) NULL,
    [CREATED_BY]    VARCHAR (50)  NOT NULL,
    [CREATED_DATE]  DATETIME      NOT NULL,
    [MODIFIED_BY]   VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE] DATETIME      NOT NULL,
    [UPDATE_SEQ]    INT           NULL,
    [VERSION]       INT           NULL,
    [BPMMAP]        VARCHAR (MAX) NULL,
	[BBPMMAP]		IMAGE		  NULL,
    [STATUS_ID]     INT           NOT NULL,
    [STATUS_VALUE]  VARCHAR (4)   NULL,
	[EFFECTIVE_DATE] DATE		  NOT NULL DEFAULT GETDATE(),
	[RESOURCE_ID]    INT          NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_CASE_ID] PRIMARY KEY CLUSTERED ([CASE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE is already exists' 
END       
GO
-----------------------------------------15.SGW_BPM_CASE_CONFIG_TRACING-------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_CONFIG_TRACING') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIG_TRACING IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_CONFIG_TRACING] (
	[CASE_CONFIG_TRACING_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_FILE] VARCHAR(4000) NULL,
	[BPM_TRACING_FLAG] VARCHAR(1) NOT NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT]  NULL,
 CONSTRAINT [PK_SGW_BPM_CASE_CONFIG_TRACING] PRIMARY KEY CLUSTERED 
(
	[CASE_CONFIG_TRACING_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIG_TRACING is already exists' 
END       
GO

-------------------------------------------16.SGW_BPM_CASE_CONFIGURATION----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_CONFIGURATION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIGURATION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_CONFIGURATION]
(
	[CASE_CONFIGURATION_ID]  int				IDENTITY(1,1) NOT NULL,
	[CASE_FILE]				 varchar(4000)		NULL,
	[ENGINE_ID]				 int				NULL,
	[ENGINE_VALUE]			 varchar(4)			NOT NULL,
	[CREATED_BY]			 varchar(50)		NOT NULL,
	[CREATED_DATE]			 datetime			NOT NULL,
	[MODIFIED_BY]			 varchar(50)		NOT NULL,
	[MODIFIED_DATE]			 datetime			NOT NULL,
	[UPDATE_SEQ]			 int				NOT NULL,
	[SOURCE_ID]				 int				NOT NULL default 2021,
	[SOURCE_VALUE]			 varchar(4)			NULL,
	[PRIORITY_ID]			 int				NOT NULL default 3008,
	[PRIORITY_VALUE]		 varchar(4)			NULL,
	CONSTRAINT [PK_SGW_BPM_CASE_CONFIGURATION] PRIMARY KEY CLUSTERED ([CASE_CONFIGURATION_ID] ASC)
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] 
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIGURATION is already exists' 
END       
GO
-----------------------------------------17.SGW_BPM_CASE_DETAILS--------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_DETAILS] (
    [CASE_DETAILS_ID] INT             IDENTITY (1, 1) NOT NULL,
    [CASE_ID]         INT             NOT NULL,
    [CASE_DETAILS]    VARBINARY (MAX) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_DETAILS] PRIMARY KEY CLUSTERED ([CASE_DETAILS_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_DETAILS is already exists' 
END       
GO

----------------------------------------18.SGW_BPM_CASE_EXCPT_NTFC-------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_EXCPT_NTFC') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC](
    [CASE_EXCPT_NOTIFICATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_ID] [int] NOT NULL,
	[TEMPLATE_ID] [int] NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_SGW_BPM_EXCPT_NTFC_CASE_EXCPT_NOTIFICATION_ID] PRIMARY KEY CLUSTERED 
(
	[CASE_EXCPT_NOTIFICATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC is already exists' 
END       
GO

-------------------------------------------19.SGW_BPM_CASE_EXCPT_NTFC_ROLE-----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_EXCPT_NTFC_ROLE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_ROLE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE](
    [CASE_EXCPT_NTFC_ROLE_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_EXCPT_NOTIFICATION_ID] [int] NOT NULL,
	[ROLE_ID] [int] NOT NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_SGW_BPM_CASE_EXCPT_NTFC_ROLE_CASE_EXCPT_NTFC_ROLE_ID] PRIMARY KEY CLUSTERED 
(
	[CASE_EXCPT_NTFC_ROLE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_ROLE is already exists' 
END       
GO

---------------------------------------20.SGW_BPM_CASE_EXCPT_NTFC_USER------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_EXCPT_NTFC_USER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_USER IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER](
    [CASE_EXCPT_NTFC_USER_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_EXCPT_NOTIFICATION_ID] [int] NOT NULL,
	[USER_SERIAL_ID] [int] NOT NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_SGW_BPM_CASE_EXCPT_NTFC_USER_CASE_EXCPT_NTFC_USER_ID] PRIMARY KEY CLUSTERED 
(
	[CASE_EXCPT_NTFC_USER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_USER is already exists' 
END       
GO

--------------------------------------------21.SGW_BPM_CASE_INST_EXEC_PATH-----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_INST_EXEC_PATH') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_EXEC_PATH IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH] (
    [EXECUTION_PATH_ID]           INT           IDENTITY (1, 1) NOT NULL,
    [CASE_INSTANCE_ID]            INT           NOT NULL,
    [ELEMENT_ID]                  VARCHAR (50)  NOT NULL,
    [STATUS_ID]                   INT           NOT NULL,
    [STATUS_VALUE]                VARCHAR (4)   NOT NULL,
    [ACTIVITY_INSTANCE_ID]        INT           NULL,
    [PARENT_ACTIVITY_INSTANCE_ID] INT           NULL,
	[INITIATED_ACTIVITY_INSTANCE_ID] INT NULL,
    [NAME]                        VARCHAR (MAX) NULL,
    [START_DATE]                  DATETIME      NULL,
    [END_DATE]                    DATETIME      NULL,
    [PARAMETERS_SNAPSHOT]         VARBINARY(MAX) NULL,
    [ELEMENT_TYPE_ID]             INT           NULL,
    [ELEMENT_TYPE_VALUE]          VARCHAR (4)   NULL,
    [CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_INST_EXEC_PATH] PRIMARY KEY CLUSTERED ([EXECUTION_PATH_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_EXEC_PATH is already exists' 
END       
GO
 
------------------------------------------22.SGW_BPM_CASE_INSTANCE----------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INSTANCE] (
    [CASE_INSTANCE_ID]    INT            IDENTITY (1, 1) NOT NULL,
    [CASE_ID]             INT            NOT NULL,
    [PERSON_ID]           INT            NOT NULL,
    [ORG_ID]              INT            NOT NULL,
    [REFERENCE_ID]        BIGINT         NULL,
    [REQUEST_ID]          INT            NULL,
    [CREATED_BY]          VARCHAR (50)   NOT NULL,
    [CREATED_DATE]        DATETIME       NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]       DATETIME       NOT NULL,
    [UPDATE_SEQ]          INT            NULL,
    [STATUS_ID]           INT            NOT NULL,
    [STATUS_VALUE]        VARCHAR (4)    NULL,
    [PRIORITY_CODE_ID]    INT            NULL,
    [PRIORITY_CODE_VALUE] VARCHAR (4)    NULL,
    [CASE_OWNER]          VARCHAR (100)  NULL,
    [TERMINATION_REASON]  VARCHAR (1000) NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_INSTANCE_CASE_INSTANCE_ID] PRIMARY KEY CLUSTERED ([CASE_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_CASE_INSTANCE_CASE_ID_SGW_BPM_CASE_CASE_ID] FOREIGN KEY ([CASE_ID]) REFERENCES [dbo].[SGW_BPM_CASE] ([CASE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE is already exists' 
END       
GO
 

------------------------------------23.SGW_BPM_CASE_INST_PARAMETER-----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_INST_PARAMETER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_PARAMETER IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INST_PARAMETER] (
    [CASE_INSTANCE_PARAMETER_ID] INT            IDENTITY (1, 1) NOT NULL,
    [CASE_INSTANCE_ID]           INT            NOT NULL,
    [PARAMETER_NAME]             VARCHAR (50)   NOT NULL,
    [PARAMETER_VALUE]            VARCHAR (1000) NULL,
    [OBJECT_VALUE]               VARBINARY(MAX) NULL,
    [CREATED_BY]                 VARCHAR (50)   NOT NULL,
    [CREATED_DATE]               DATETIME       NOT NULL,
    [MODIFIED_BY]                VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]              DATETIME       NOT NULL,
    [UPDATE_SEQ]                 INT            NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_INST_PARAMETER_CASE_INSTANCE_PARAMETER_ID] PRIMARY KEY CLUSTERED ([CASE_INSTANCE_PARAMETER_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_CASE_INST_PARAMETER_SGW_BPM_CASE_INSTANCE_CASE_INSTANCE_ID] FOREIGN KEY ([CASE_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_CASE_INSTANCE] ([CASE_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_PARAMETER is already exists' 
END       
GO
IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_SGW_BPM_CASE_INST_PARAMETER_PARAMETER_NAME' AND object_id = OBJECT_ID('SGW_BPM_CASE_INST_PARAMETER'))
    BEGIN
		CREATE NONCLUSTERED INDEX [PK_SGW_BPM_CASE_INST_PARAMETER_PARAMETER_NAME]
			ON [dbo].[SGW_BPM_CASE_INST_PARAMETER] ([PARAMETER_NAME])
			INCLUDE ([CASE_INSTANCE_ID],[PARAMETER_VALUE])
	END
ELSE
	BEGIN
		PRINT ' PK_SGW_BPM_CASE_INST_PARAMETER_PARAMETER_NAME Index already Exists ON SGW_BPM_CASE_INST_PARAMETER Table'
	END  
GO
 
---------------------------------------24.SGW_BPM_CASE_INSTANCE_TRACING---------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_CASE_INSTANCE_TRACING') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE_TRACING IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INSTANCE_TRACING] (
    [CASE_ID]              INT           NULL,
    [PROCESS_ID]           INT           NULL,
    [ACTIVITY_ID]          INT           NULL,
    [CASE_INSTANCE_ID]     INT           NULL,
    [PROCESS_INSTANCE_ID]  INT           NULL,
    [ACTIVITY_INSTANCE_ID] INT           NULL,
    [TRACE_DETAILS]        VARCHAR (MAX) NULL,
    [ERROR_DETAILS]        VARCHAR (MAX) NULL,
    [CREATED_BY]           VARCHAR (50)  NOT NULL,
    [CREATED_DATE]         DATETIME      NOT NULL,
	[MACHINE_NAME]		   NVARCHAR(MAX) NULL
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE_TRACING is already exists' 
END       
GO

------------------------------------25.SGW_BPM_DOCUMENT_UPLOAD--------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_DOCUMENT_UPLOAD') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_DOCUMENT_UPLOAD IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_DOCUMENT_UPLOAD](
	[BPM_DOCUMENT_UPLOAD_ID]		[int]	IDENTITY (1, 1)	NOT NULL,
	[BPM_PROCESS_INSTANCE_ID]		[int]					NOT NULL,
	[BPM_DOCUMENT_NAME]				[varchar](100)			NOT NULL,
	[CREATED_BY]					[dbo].[UDT_CREATEDBY]	NOT NULL,
	[CREATED_DATE]					[dbo].[UDT_DATETIME]	NOT NULL,
	[MODIFIED_BY]					[dbo].[UDT_MODIFIEDBY]	NOT NULL,
	[MODIFIED_DATE]					[dbo].[UDT_DATETIME]	NOT NULL,
	[UPDATE_SEQ]					[dbo].[UDT_UPDSEQ]		NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[BPM_DOCUMENT_UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_DOCUMENT_UPLOAD is already exists' 
END       
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_DOCUMENT_UPLOAD'))
BEGIN
	ALTER TABLE [dbo].[SGW_BPM_DOCUMENT_UPLOAD]  WITH CHECK ADD  CONSTRAINT [FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE] FOREIGN KEY([BPM_PROCESS_INSTANCE_ID])
	REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
END
GO

ALTER TABLE [dbo].[SGW_BPM_DOCUMENT_UPLOAD] CHECK CONSTRAINT [FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE]
GO

----------------------------------------26.SGW_BPM_ESCALATION----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ESCALATION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION] (
    [ESCALATION_ID]              INT          IDENTITY (1, 1) NOT NULL,
    [ESCALATION_NAME]            VARCHAR (100) DEFAULT ('') NOT NULL,
    [CASE_ID]                    INT          NOT NULL,
    [PROCESS_ID]                 INT          NOT NULL,
    [ACTIVITY_ID]                INT          NOT NULL,
    [LAPSE_TYPE_ID]              INT          NOT NULL,
    [LAPSE_TYPE_VALUE]           VARCHAR (4)  NOT NULL,
    [LAPSE_TIME_IN_MINUTES]      INT          NULL,
    [RECUR_TYPE_ID]              INT          NULL,
    [RECUR_TYPE_VALUE]           VARCHAR (4)  NULL,
    [RECUR_TIME_IN_DAYS]         INT          NULL,
    [RECUR_TIME_IN_HOURS]        INT          NULL,
    [RECUR_TIME_IN_MINUTES]      INT          NULL,
    [SEND_TO_CURRENT_ASSIGNEE]   VARCHAR (1)  NULL,
    [CORRESPONDENCE_TEMPLATE_ID] INT          NULL,
    [CREATED_BY]                 VARCHAR (50) NOT NULL,
    [CREATED_DATE]               DATETIME     NOT NULL,
    [MODIFIED_BY]                VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]              DATETIME     NOT NULL,
    [UPDATE_SEQ]                 INT          NULL,
	[STATUS_ID]					 INT		  NULL,
	[STATUS_VALUE]				 VARCHAR(4)	  NULL,
	[NOTIFY_PROCESS_OWNER]		 VARCHAR(1) NULL,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_ESCALATION_ID] PRIMARY KEY CLUSTERED ([ESCALATION_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESCALATION_ACTIVITY_ID_SGW_BPM_ACTIVITY_ACTIVITY_ID] FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESCALATION_CASE_ID_SGW_BPM_CASE_CASE_ID] FOREIGN KEY ([CASE_ID]) REFERENCES [dbo].[SGW_BPM_CASE] ([CASE_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESCALATION_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID]) ON DELETE CASCADE
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION is already exists' 
END       
GO
-----------------------------------------------27.SGW_BPM_ESC_ADDTL_RECIPIENT----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ESC_ADDTL_RECIPIENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_ADDTL_RECIPIENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT] (
    [ESC_ADDTL_RECIPIENT_ID] INT IDENTITY (1, 1) NOT NULL,
    [ESCALATION_ID]                      INT NOT NULL,
    [USER_SERIAL_ID]                     INT NOT NULL,
    [CREATED_BY]                         [varchar](50) NOT NULL,
	[CREATED_DATE]                       [datetime] NOT NULL,
	[MODIFIED_BY]                        [varchar](50) NOT NULL,
	[MODIFIED_DATE]                      [datetime] NOT NULL,
	[UPDATE_SEQ]                         [int] NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ESC_ADDTL_RECIPIENT_ESC_ADDTL_RECIPIENT_ID] PRIMARY KEY CLUSTERED ([ESC_ADDTL_RECIPIENT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESC_ADDTL_RECIPIENT_ESCALATION_ID_SGW_BPM_ESCALATION_ESCALATION_ID] FOREIGN KEY ([ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_ESCALATION] ([ESCALATION_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESC_ADDTL_RECIPIENT_USER_SERIAL_ID_SGS_USER_USER_SERIAL_ID] FOREIGN KEY ([USER_SERIAL_ID]) REFERENCES [dbo].[SGS_USER] ([USER_SERIAL_ID]) ON DELETE CASCADE
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_ADDTL_RECIPIENT is already exists' 
END       
GO

------------------------------------------------28.SGW_BPM_ESC_RECIPIENT_ROLE---------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ESC_RECIPIENT_ROLE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_RECIPIENT_ROLE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE](
	[ESCALATION_RECIPIENT_ROLE_ID]		 [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_ID]						 [int] NOT NULL,
	[ROLE_ID]							 [int] NOT NULL,
	[CREATED_BY]                         [varchar](50) NOT NULL,
	[CREATED_DATE]                       [datetime] NOT NULL,
	[MODIFIED_BY]                        [varchar](50) NOT NULL,
	[MODIFIED_DATE]                      [datetime] NOT NULL,
	[UPDATE_SEQ]                         [int] NOT NULL,
 CONSTRAINT [PK_SGW_BPM_ESC_RECIPIENT_ROLE] PRIMARY KEY CLUSTERED 
(
	[ESCALATION_RECIPIENT_ROLE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_RECIPIENT_ROLE is already exists' 
END       
GO

--------------------------------------------29.SGW_BPM_ESCALATION_INSTANCE-----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ESCALATION_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE] (
    [ESCALATION_INSTANCE_ID] INT         IDENTITY (1, 1) NOT NULL,
    [ESCALATION_ID]          INT         NOT NULL,
    [ACTIVITY_INSTANCE_ID]   INT         NOT NULL,
    [ESCLATION_DATE_TIME]    DATETIME    NOT NULL,
    [STATUS_ID]              INT         NOT NULL,
    [STATUS_VALUE]           VARCHAR (4) NOT NULL,
    [PROCESSING_FLAG]        VARCHAR (1) DEFAULT ('N') NULL,
    [CREATED_BY]                         [varchar](50) NOT NULL,
	[CREATED_DATE]                       [datetime] NOT NULL,
	[MODIFIED_BY]                        [varchar](50) NOT NULL,
	[MODIFIED_DATE]                      [datetime] NOT NULL,
	[UPDATE_SEQ]                         [int] NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_INSTANCE_ESCALATION_INSTANCE_ID] PRIMARY KEY CLUSTERED ([ESCALATION_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESCALATION_INSTANCE_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESCALATION_INSTANCE_ESCALATION_ID_SGW_BPM_ESCALATION_ESCALATION_ID] FOREIGN KEY ([ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_ESCALATION] ([ESCALATION_ID]) ON DELETE CASCADE
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_INSTANCE is already exists' 
END       
GO

------------------------------------------30.SGW_BPM_ESCALATION_MESSAGE-------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ESCALATION_MESSAGE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_MESSAGE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE] (
    [ESCALATION_MESSAGE_ID]  INT           IDENTITY (1, 1) NOT NULL,
    [ESCALATION_INSTANCE_ID] INT           NOT NULL,
    [ESCALATION_TYPE_ID]     INT           NOT NULL,
    [ESCALATION_TYPE_VALUE]  VARCHAR (4)   NOT NULL,
    [ESCALATION_MESSAGE]     VARCHAR (MAX) NOT NULL,
    [CREATED_BY]                         [varchar](50) NOT NULL,
	[CREATED_DATE]                       [datetime] NOT NULL,
	[MODIFIED_BY]                        [varchar](50) NOT NULL,
	[MODIFIED_DATE]                      [datetime] NOT NULL,
	[UPDATE_SEQ]                         [int] NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_MESSAGE] PRIMARY KEY CLUSTERED ([ESCALATION_MESSAGE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_MESSAGE is already exists' 
END       
GO

---------------------------------------31.SGW_BPM_ESCALATION_RECIPIENT-----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_ESCALATION_RECIPIENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_RECIPIENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT] (
    [ESCALATION_RECIPIENT_ID]         INT         IDENTITY (1, 1) NOT NULL,
    [ESCALATION_ID]                   INT         NOT NULL,
    [ESCALTION_RECPNT_TYPE_ID]        INT         NOT NULL,
    [ESCALTION_RECPNT_TYPE_VALUE]    VARCHAR (4)  NOT NULL,
    [CREATED_BY]                     VARCHAR (50) NOT NULL DEFAULT 'BPM Service',
    [CREATED_DATE]                   datetime     NOT NULL DEFAULT  getdate(),
    [MODIFIED_BY]                    varchar(50)  NOT NULL DEFAULT 'BPM Service',
    [MODIFIED_DATE]                  datetime     NOT NULL DEFAULT getdate(),
    [UPDATE_SEQ]                     int          NULL     DEFAULT '0'
    CONSTRAINT [PK_SGW_BPM_ESCALATION_RECIPIENT_ESCALATION_RECIPIENT_ID] PRIMARY KEY CLUSTERED ([ESCALATION_RECIPIENT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESCALATION_RECIPIENT_ESCALATION_RECIPIENT_ID_SGW_BPM_ESCALATION_ESCALATION_ID] FOREIGN KEY ([ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_ESCALATION] ([ESCALATION_ID]) ON DELETE CASCADE
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_RECIPIENT is already exists' 
END       
GO

--------------------------------------------------32.SGW_BPM_EVENT------------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_EVENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_EVENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_EVENT] (
    [BPM_EVENT_ID]             INT           IDENTITY (1, 1) NOT NULL,
    [EVENT_DESC]               VARCHAR (100) NULL,
    [EVENT_TYPE_ID]            INT           NOT NULL,
    [EVENT_TYPE_VALUE]         VARCHAR (4)   NULL,
    [RCPT_EMAIL_ID]            VARCHAR (70)  NULL,
    [RCPT_FAX_NU]              VARCHAR (15)  NULL,
    [DOC_TYPE]                 VARCHAR (50)  NULL,
    [SCREEN_ID]                VARCHAR (50)  NULL,   
    [PRIORITY_DOCUMENT_IND]    VARCHAR (1)   NULL,
    [ECM_SECURITY_TEMPLATE_ID] INT           NULL,
    [ECM_SUBSCRIPTION_FLAG]    VARCHAR (1)   NOT NULL,
    [STATUS_ID]                INT           NOT NULL,
    [STATUS_VALUE]             VARCHAR (4)   NULL,
    [CREATED_BY]               VARCHAR (50)  NOT NULL,
    [CREATED_DATE]             DATETIME      NOT NULL,
    [MODIFIED_BY]              VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]            DATETIME      NOT NULL,
    [UPDATE_SEQ]               INT           NULL,
    [DOCUMENT_CATEGORY]        VARCHAR (50)  NULL,
    [ORG_ID_REQUIRED_IND]      VARCHAR (1)   NULL,
    [PERSON_ID_REQUIRED_IND]   VARCHAR (1)   NULL,
	[DOC_CLASS]                 VARCHAR (100)  NULL,
    CONSTRAINT [PK_SGW_BPM_EVENT_EVENT_ID] PRIMARY KEY CLUSTERED ([BPM_EVENT_ID] ASC),
    CONSTRAINT [UK_SGW_BPM_EVENT_DOC_TYPE] UNIQUE NONCLUSTERED ([DOC_TYPE] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_EVENT is already exists' 
END       
GO
---------------------------------------33.SGW_BPM_EXCEPTION_DETAILS-----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_EXCEPTION_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_EXCEPTION_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [int] NOT NULL,
	[EXCEPTION_INSTANCE_ID] [uniqueidentifier] NOT NULL,
	[EXCEPTION_TYPE] [nvarchar](100) NOT NULL,
	[EXCEPTION_MESSAGE] [nvarchar](1000) NOT NULL,
	[ROLES] [nvarchar](max) NULL,
	[RETRY_COUNT] [int] NOT NULL,
	[RETRY_FREQUENCY] [int] NOT NULL,
	[NEXT_RETRY] [datetime] NULL,
	[STATUS_ID] [int] NOT NULL,
	[STATUS_VALUE] [varchar](4) NOT NULL,
	[CREATED_BY] [varchar](50) NOT NULL DEFAULT 'BPM Service',
	[CREATED_DATE] [datetime] NOT NULL DEFAULT getdate(),
	[MODIFIED_BY] [varchar](50) NOT NULL DEFAULT 'BPM Service',
	[MODIFIED_DATE] [datetime] NOT NULL DEFAULT getdate(),
	[UPDATE_SEQ] [int] NOT NULL DEFAULT 0,
	[MACHINE_NAME] [varchar](100) NULL,
 CONSTRAINT [PK_SGW_BPM_EXCEPTION_DETAILS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_EXCEPTION_DETAILS is already exists' 
END       
GO

---------------------------------------34.SGW_BPM_PROCESS_ESCALATION------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PROCESS_ESCALATION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESCALATION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_ESCALATION] (
    [PROCESS_ESCALATION_ID]      INT           IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_NAME]    VARCHAR (MAX) NOT NULL,
    [PROCESS_ID]                 INT           NOT NULL,
    [CASE_ID]                    INT           NOT NULL,
    [LAPSE_TYPE_ID]              INT           NOT NULL,
    [LAPSE_TYPE_VALUE]           VARCHAR (4)   NOT NULL,
    [LAPSE_TIME_IN_MINUTES]      INT           NULL,
    [RECUR_TYPE_ID]              INT           NOT NULL,
    [RECUR_TYPE_VALUE]           VARCHAR (4)   NOT NULL,
    [RECUR_TIME_IN_DAYS]         INT           NULL,
    [RECUR_TIME_IN_HOURS]        INT           NULL,
    [RECUR_TIME_IN_MINUTES]      INT           NULL,
    [CORRESPONDENCE_TEMPLATE_ID] INT           NULL,
    [CREATED_BY]                 VARCHAR (50)  NOT NULL,
    [CREATED_DATE]               DATETIME      NOT NULL,
    [MODIFIED_BY]                VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]              DATETIME      NOT NULL,
    [UPDATE_SEQ]                 INT           NULL,
    [STATUS_ID]                  INT           NULL,
    [STATUS_VALUE]               VARCHAR (4)   NULL,
	[NOTIFY_PROCESS_OWNER]		 VARCHAR (1)   NULL,
    CONSTRAINT [PK_PROCESS_ESCALATION] PRIMARY KEY CLUSTERED ([PROCESS_ESCALATION_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PROCESS_ESCALATION_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESCALATION is already exists' 
END       
GO

--------------------------------------------35.SGW_BPM_PRCS_ESC_INSTANCE------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PRCS_ESC_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_ESC_INSTANCE] (
    [PROCESS_ESCALATION_INSTANCE_ID] INT          IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_ID]          INT          NOT NULL,
    [PROCESS_INSTANCE_ID]            INT          NOT NULL,
    [ESCALATION_DATE_TIME]           DATETIME     NOT NULL,
    [STATUS_ID]                      INT          NOT NULL,
    [STATUS_VALUE]                   VARCHAR (4)  NOT NULL,
    [CREATED_BY]                     VARCHAR (50) NOT NULL,
    [CREATED_DATE]                   DATETIME     NOT NULL,
    [MODIFIED_BY]                    VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]                  DATETIME     NOT NULL,
    [UPDATE_SEQ]                     INT          NULL,
    [PROCESSING_FLAG]                VARCHAR (1)  DEFAULT ('N') NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_ESC_INSTANCE] PRIMARY KEY CLUSTERED ([PROCESS_ESCALATION_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_INSTANCE_PROCESS_ESCALATION_ID_SGW_BPM_PROCESS_ESCALATION_PROCESS_ESCALATION_ID] FOREIGN KEY ([PROCESS_ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_ESCALATION] ([PROCESS_ESCALATION_ID]),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_INSTANCE_PROCESS_INSTANCE_ID_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] FOREIGN KEY ([PROCESS_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_INSTANCE is already exists' 
END       
GO

----------------------------------------------36.SGW_BPM_PRCS_ESC_RECIPIENT----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PRCS_ESC_RECIPIENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECIPIENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT] (
    [PRCS_ESC_RECIPIENT_ID] INT IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_ID]           INT NOT NULL,
    [USER_SERIAL_ID]                  INT NOT NULL,
    [CREATED_BY]                         [varchar](50) NOT NULL,
	[CREATED_DATE]                       [datetime] NOT NULL,
	[MODIFIED_BY]                        [varchar](50) NOT NULL,
	[MODIFIED_DATE]                      [datetime] NOT NULL,
	[UPDATE_SEQ]                         [int] NOT NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_ESC_RECIPIENT] PRIMARY KEY CLUSTERED ([PRCS_ESC_RECIPIENT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_RECIPIENT_PROCESS_ESCALATION_ID_SGW_BPM_PROCESS_ESCALATION_PROCESS_ESCALATION_ID] FOREIGN KEY ([PROCESS_ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_ESCALATION] ([PROCESS_ESCALATION_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECIPIENT is already exists' 
END       
GO

---------------------------------------------37.SGW_BPM_PRCS_ESC_RECPNT_ROLE------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PRCS_ESC_RECPNT_ROLE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECPNT_ROLE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE] (
    [PRCS_ESC_RECPNT_ROLE_ID] INT IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_ID]                INT NOT NULL,
    [ROLE_ID]                              INT NOT NULL,
    [CREATED_BY]                           [varchar](50) NOT NULL,
	[CREATED_DATE]                         [datetime] NOT NULL,
	[MODIFIED_BY]                          [varchar](50) NOT NULL,
	[MODIFIED_DATE]                        [datetime] NOT NULL,
	[UPDATE_SEQ]                           [int] NOT NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_ESC_RECPNT_ROLE] PRIMARY KEY CLUSTERED ([PRCS_ESC_RECPNT_ROLE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_RECPNT_ROLE_PROCESS_ESCALATION_ID_SGW_BPM_PROCESS_ESCALATION_PROCESS_ESCALATION_ID] FOREIGN KEY ([PROCESS_ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_ESCALATION] ([PROCESS_ESCALATION_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECPNT_ROLE is already exists' 
END       
GO

-----------------------------------------38.SGW_BPM_PRCS_INST_ATTACHMENTS------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PRCS_INST_ATTACHMENTS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_ATTACHMENTS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_INST_ATTACHMENTS] (
    [PROCESS_INST_ATTCHMNT_ID] INT           IDENTITY (1, 1) NOT NULL,
    [BPM_PROCESS_INSTANCE_ID]  INT           NULL,
    [ECM_GUID]                 VARCHAR (MAX) NULL,
    [CREATED_BY]               VARCHAR (50)  NOT NULL,
    [CREATED_DATE]             DATETIME      NOT NULL,
    [MODIFIED_BY]              VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]            DATETIME      NOT NULL,
    [UPDATE_SEQ]               INT           NULL,
    [DOC_TYPE]                 VARCHAR (50)  NULL,
    [DOC_CLASS]                VARCHAR (100) NULL,
    [ACTIVITY_INSTANCE_ID]     INT           NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_INST_ATTACHMENTS_PROCESS_INST_ATTCHMNT_ID] PRIMARY KEY CLUSTERED ([PROCESS_INST_ATTCHMNT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_INST_ATTACHMENTS_BPM_PROCESS_INSTANCE_ID_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] FOREIGN KEY ([BPM_PROCESS_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_ATTACHMENTS is already exists' 
END       
GO

------------------------------------------39.SGW_BPM_PRCS_INST_RSRT_NOTY_XR---------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PRCS_INST_RSRT_NOTY_XR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_RSRT_NOTY_XR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_INST_RSRT_NOTY_XR](
    [PRCS_INST_RESTRICT_NOTIFY_ID] [int] IDENTITY(1,1) NOT NULL,
	[PARENT_PROCESS_INSTANCE_ID] [int] NOT NULL,
	[DEPENDENT_PROCESS_INSTANCE_ID] [int] NULL,
	[RESTRICT_NOTIFY_CODE_ID] [int] NOT NULL,
	[RESTRICT_NOTIFY_CODE_VALUE] [varchar](4) NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NULL   
 CONSTRAINT [SGW_BPM_PRCS_INST_RSRT_NOTY_XR_S_INST_RESTRICT_NOTIFY_ID] PRIMARY KEY CLUSTERED 
(
	[PRCS_INST_RESTRICT_NOTIFY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_RSRT_NOTY_XR is already exists' 
END       
GO

----------------------------------------40.SGW_BPM_PRCS_RSTRT_NOTY_XR-----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PRCS_RSTRT_NOTY_XR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_RSTRT_NOTY_XR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_RSTRT_NOTY_XR](
    [PROCESS_RESTRICT_NOTIFY_ID] [int] IDENTITY(1,1) NOT NULL,
	[PARENT_PROCESS_ID] [int] NOT NULL,
	[DEPENDENT_PROCESS_ID] [int] NULL,
	[RESTRICT_NOTIFY_CODE_ID] [int] NOT NULL,
	[RESTRICT_NOTIFY_CODE_VALUE] [varchar](4) NULL,
	[STATUS_ID] [int] NOT NULL,
	[STATUS_VALUE] [varchar](4) NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NULL   
 CONSTRAINT [SGW_BPM_PRCS_RSTRT_NOTY_XR_PROCESS_RESTRICT_NOTIFY_ID] PRIMARY KEY CLUSTERED 
(
	[PROCESS_RESTRICT_NOTIFY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_RSRT_NOTY_XR is already exists' 
END       
GO

--------------------------------------------41.SGW_BPM_PROCESS_ESC_MESSAGES----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PROCESS_ESC_MESSAGES') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESC_MESSAGES IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES](
	[PROCESS_ESC_MESSAGE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_TYPE_VALUE] [varchar](4) NOT NULL,
	[ESCALATION_MESSAGE] [varchar](max) NOT NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_PROCESS_ESC] PRIMARY KEY CLUSTERED 
(
	[PROCESS_ESC_MESSAGE_ID] ASC
))
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESC_MESSAGES is already exists' 
END       
GO

------------------------------------------42.SGW_BPM_PROCESS_EVENT_XR---------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PROCESS_EVENT_XR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_EVENT_XR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_EVENT_XR] (
    [BPM_PROCESS_EVENT_XR_ID] INT          IDENTITY (1, 1) NOT NULL,
    [EVENT_ID]                INT          NOT NULL,
    [PROCESS_ID]              INT          NOT NULL,
    [ACTION_ID]               INT          NOT NULL,
    [ACTION_VALUE]            VARCHAR (4)  NULL,
    [CREATED_BY]              VARCHAR (50) NOT NULL,
    [CREATED_DATE]            DATETIME     NOT NULL,
    [MODIFIED_BY]             VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]           DATETIME     NOT NULL,
    [UPDATE_SEQ]              INT          NULL,
    [EVENT_REASON_ID]         INT          NULL,
    [ACTIVITY_ID]             INT          DEFAULT (NULL) NULL,
    CONSTRAINT [PK_SGW_BPM_PROCESS_EVENT_XR_PROCESS_EVENT_XR_ID] PRIMARY KEY CLUSTERED ([BPM_PROCESS_EVENT_XR_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PROCESS_EVENT_XR_ACTIVITY_ID_SGW_BPM_ACTIVIY_ACTIVITY_ID] FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID]),
    CONSTRAINT [FK_SGW_BPM_PROCESS_EVENT_XR_EVENT_ID_SGW_BPM_EVENT_EVENT_ID] FOREIGN KEY ([EVENT_ID]) REFERENCES [dbo].[SGW_BPM_EVENT] ([BPM_EVENT_ID]),
    CONSTRAINT [FK_SGW_BPM_PROCESS_EVENT_XR_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_EVENT_XR is already exists' 
END       
GO
--------------------------------------------43.SGW_BPM_PROCESSING_ERROR------------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_PROCESSING_ERROR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESSING_ERROR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESSING_ERROR] (
	[PROCESSING_ERROR_ID] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTION_ID] [UNIQUEIDENTIFIER] NOT NULL,
	[TRACE_INSTANCE_ID] [int] NOT NULL,
	[SUB_TRANSACTION_ID] [int] NOT NULL,
	[ACTION_TYPE] VARCHAR(200) NULL,
	[METHOD_NAME] VARCHAR(200) NULL,
	[EXCEPTION_MESSAGE] VARCHAR(4000) NOT NULL,	
	[EXCEPTION_DATE] [DATETIME] NOT NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT]  NULL,
	[MACHINE_NAME] [VARCHAR] (500) NULL,
 CONSTRAINT [PK_SGW_BPM_PROCESSING_ERROR] PRIMARY KEY CLUSTERED 
(
	[PROCESSING_ERROR_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESSING_ERROR is already exists' 
END       
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_SGW_BPM_PROCESSING_ERROR_CREATED_DATE' AND object_id = OBJECT_ID('SGW_BPM_PROCESSING_ERROR'))
    BEGIN
		CREATE NONCLUSTERED INDEX [PK_SGW_BPM_PROCESSING_ERROR_CREATED_DATE] ON [dbo].[SGW_BPM_PROCESSING_ERROR]
		(
			[CREATED_DATE] ASC
		)
	END
ELSE
	BEGIN
		PRINT ' PK_SGW_BPM_PROCESSING_ERROR_CREATED_DATE Index already Exists ON SGW_BPM_PROCESSING_ERROR Table'
	END  
GO

GO

-------------------------------------------44.SGW_BPM_QUEUE-------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_QUEUE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_QUEUE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_QUEUE] (
    [QUEUE_ITEM_ID]            INT                    IDENTITY (1, 1) NOT NULL,
    [MACHINE_NAME]             NVARCHAR (MAX)         NULL,
    [PRIORITY_CODE_ID]         INT                    NULL,
    [PRIORITY_CODE_VALUE]      VARCHAR (4)            NULL,
    [ENGINE_VALUE]             VARCHAR (4)            NULL,
    [SRC_PRCS_INST_ID]         INT                    NULL,
    [ACTV_INST_ID_TO_EXEC]     INT                    NULL,
    [TRG_PRCS_INST_ID]         INT                    NULL,
    [TRG_ACTV_ID_TO_INST]      INT                    NULL,
    [STATUS_ID]                [dbo].[UDT_CODE_ID]    NULL,
    [STATUS_VALUE]             [dbo].[UDT_CODE_VALUE] NULL,
    [QUEUE_REQUEST_TYPE_ID]    [dbo].[UDT_CODE_ID]    NULL,
    [QUEUE_REQUEST_TYPE_VALUE] [dbo].[UDT_CODE_VALUE] NULL,
    [CREATED_BY]               [dbo].[UDT_CREATEDBY]  DEFAULT (user_name()) NOT NULL,
    [CREATED_DATE]             [dbo].[UDT_DATETIME]   DEFAULT (getdate()) NOT NULL,
    [MODIFIED_BY]              [dbo].[UDT_MODIFIEDBY] DEFAULT (user_name()) NOT NULL,
    [MODIFIED_DATE]            [dbo].[UDT_DATETIME]   DEFAULT (getdate()) NOT NULL,
    [UPDATE_SEQ]               [dbo].[UDT_UPDSEQ]     DEFAULT ((0)) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_QUEUE] PRIMARY KEY CLUSTERED ([QUEUE_ITEM_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_QUEUE is already exists' 
END       
GO

--------------------------------------------45.SGW_BPM_REQUEST----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_REQUEST') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_REQUEST] (
    [REQUEST_ID]                 INT              IDENTITY (1, 1) NOT NULL,
    [PERSON_ID]                  INT              NULL,
    [ORG_ID]                     INT              NULL,
    [PROCESS_ID]                 INT              NULL,
    [REFERENCE_ID]               BIGINT           NULL,
    [SOURCE_ID]                  INT              NOT NULL,
    [SOURCE_VALUE]               VARCHAR (4)      NULL,
    [STATUS_ID]                  INT              NOT NULL,
    [STATUS_VALUE]               VARCHAR (4)      NULL,
    [CREATED_BY]                 VARCHAR (50)     NOT NULL,
    [CREATED_DATE]               DATETIME         NOT NULL,
    [MODIFIED_BY]                VARCHAR (50)     NOT NULL,
    [MODIFIED_DATE]              DATETIME         NOT NULL,
    [UPDATE_SEQ]                 INT              NULL,
    [CASE_INSTANCE_ID]           INT              NULL,
    [BPM_MESSAGE_FLOW_ID]        VARCHAR (50)     NULL,
    [DOC_TYPE]                   VARCHAR (50)     NULL,
    [ECM_GUID]                   VARCHAR(MAX) NULL,
    [MACHINE_NAME]               NVARCHAR (MAX)   NULL,
    [PRIORITY_CODE_ID]           INT              NULL,
    [PRIORITY_CODE_VALUE]        VARCHAR (4)      NULL,
    [PARENT_CASE_INSTANCE_ID]    INT              NULL,
    [PARENT_PROCESS_INSTANCE_ID] INT              NULL,
	[DOC_CLASS]					[dbo].[UDT_DESC] NULL,
	[REASON_ID]					[dbo].[UDT_CODE_ID] NULL,
	[REASON_VALUE]				[dbo].[UDT_CODE_VALUE] NULL,
	[DOCUMENT_TITLE]			[dbo].[UDT_DESC] NULL,
	[SCAN_DT]					[dbo].[UDT_DATETIME] NULL,
	[PARENT_REQUEST_ID]			INT					NULL,
	[COMMENTS]					VARCHAR (4000)		NULL,
	[TRACKING_ID]				INT NULL,
	[ERROR_MESSAGE]				VARCHAR (500)       NULL,
	[RETRY_COUNT]				INT                 NULL,
	[SERVER_NAME]				VARCHAR (50)		NULL,
	[PROCESSED_BY_MACHINE]		VARCHAR (50)		NULL,
    [CHECK_FOR_EXISTING_INST]   [dbo].[UDT_FLAG]    NULL,
    CONSTRAINT [PK_SGW_BPM_REQUEST_REQUEST_ID] PRIMARY KEY CLUSTERED ([REQUEST_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_REQUEST_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST is already exists' 
END       
GO

------------------------------------------46.SGW_BPM_REQUEST_ACTION--------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_REQUEST_ACTION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_ACTION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
(
	[REQUEST_ACTION_ID] [dbo].[UDT_IDENTITY] IDENTITY (1, 1) NOT NULL, 
    [REQUEST_ID] [dbo].[UDT_INT] NULL, 
    [CASE_INSTANCE_ID] [dbo].[UDT_INT] NULL, 
    [PROCESS_INSTANCE_ID] [dbo].[UDT_INT] NULL, 
    [ACTIVITY_INSTANCE_ID] [dbo].[UDT_INT] NULL, 
    [TYPE] [dbo].[UDT_DESC] NULL,
    [CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
    CONSTRAINT [PK_SGW_BPM_REQUEST_ACTION] PRIMARY KEY CLUSTERED ([REQUEST_ACTION_ID])	
)
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_ACTION is already exists' 
END       
GO

---------------------------------------------47.SGW_BPM_REQUEST_PARAMETER-------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_REQUEST_PARAMETER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_PARAMETER IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_REQUEST_PARAMETER] (
    [REQUEST_PARAMETER_ID] INT            IDENTITY (1, 1) NOT NULL,
    [REQUEST_ID]           INT            NULL,
    [PARAMETER_NAME]       VARCHAR (50)   NULL,
    [PARAMETER_VALUE]      VARCHAR (1000) NULL,
    [CREATED_BY]           VARCHAR (50)   NOT NULL,
    [CREATED_DATE]         DATETIME       NOT NULL,
    [MODIFIED_BY]          VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]        DATETIME       NOT NULL,
    [UPDATE_SEQ]           INT            NULL,
    [PARAMETER_CODE_ID]    INT            NULL,
    CONSTRAINT [PK_SGW_BPM_REQUEST_PARAMETER_REQUEST_PARAMETER_ID] PRIMARY KEY CLUSTERED ([REQUEST_PARAMETER_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_REQUEST_PARAMETER_REQUEST_ID_SGW_BPM_REQUEST_REQUEST_ID] FOREIGN KEY ([REQUEST_ID]) REFERENCES [dbo].[SGW_BPM_REQUEST] ([REQUEST_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_ACTION is already exists' 
END       
GO
-------------------------------------------------------------------------------48.SGS_SERVERS------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGS_SERVERS') 
BEGIN
PRINT 'TABLE Name : SGS_SERVERS IS CREATED'
CREATE TABLE [dbo].[SGS_SERVERS]
(
	[SERVER_ID]			int				IDENTITY(1,1) NOT NULL,
	[SERVER_NAME]		varchar (4000)	NULL,
	[CREATED_BY]		varchar	(50)	NOT NULL,
	[CREATED_DATE]		datetime		NOT NULL,
	[MODIFIED_BY]		varchar (50)	NOT NULL,
	[MODIFIED_DATE]		datetime		NOT NULL,
	[UPDATE_SEQ]		int			NOT null
	CONSTRAINT [PK_SGS_SERVERS] PRIMARY KEY CLUSTERED ([SERVER_ID] ASC)	
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	)
END
ELSE
BEGIN
PRINT 'TABLE Name : SGS_SERVERS is already exists'
END       
GO
-------------------------------------------49.SGW_BPM_SERVICE_TIMER---------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_SERVICE_TIMER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVICE_TIMER IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_SERVICE_TIMER](
	[SERVICE_TIMER_ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTION_METHOD] [varchar](200) NOT NULL,
	[INTERVAL] [int] NOT NULL,
	[ENABLED] [varchar](1) NOT NULL CONSTRAINT [DF_SGW_BPM_SERVICE_TIMERS_ENABLED]  DEFAULT ('Y'),
	[BPM_TRACING_FLAG]						VARCHAR(1)			NULL,
	[BPM_QUERY_TRACING_FLAG]				VARCHAR(50)			NULL,
	[BPM_QUERY_LIMIT]						INT					NULL,
	[BPM_QUERY_LIMIT_ALERT]					VARCHAR(100)		NULL,
	[BPM_QUERY_HIGH_LIMIT]					INT					NULL,
	[BPM_QUERY_HIGH_LIMIT_ALERT]			VARCHAR(100)		NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_SGW_BPM_SERVICE_TIMERS] PRIMARY KEY CLUSTERED 
(
	[SERVICE_TIMER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVICE_TIMER is already exists'
END       
GO
--------------------------------------------50.SGW_BPM_SERVER_SETTINGS-------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_SERVER_SETTINGS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVER_SETTINGS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_SERVER_SETTINGS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SERVER_ID] [int] NOT NULL,
	[SERVICE_TIMER_ID] [int] NOT NULL,
	[INTERVAL] [int] NOT NULL,
	[ENABLED] [varchar](1) NOT NULL,
	[BPM_TRACING_FLAG]			varchar(1) NULL,
	[BPM_QUERY_TRACING_FLAG]	varchar(50) NULL,
	[BPM_QUERY_LIMIT]			INT			NULL,
	[BPM_QUERY_LIMIT_ALERT]		varchar(100) NULL,
	[BPM_QUERY_HIGH_LIMIT]		INT			NULL,
	[BPM_QUERY_HIGH_LIMIT_ALERT] varchar(100) NULL,
	[CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
 CONSTRAINT [PK_SGW_BPM_SERVER_SETTINGS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVER_SETTINGS is already exists'
END       
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_SERVER_SETTINGS'))
BEGIN
	ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID] FOREIGN KEY([SERVER_ID])
	REFERENCES [dbo].[SGS_SERVERS] ([SERVER_ID])
END
GO

ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS] CHECK CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_SERVER_SETTINGS'))
BEGIN
	ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID] FOREIGN KEY([SERVICE_TIMER_ID])
	REFERENCES [dbo].[SGW_BPM_SERVICE_TIMER] ([SERVICE_TIMER_ID])
END
GO

ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS] CHECK CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID]
GO

IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_SERVER_SETTINGS'))
BEGIN
 ALTER TABLE SGW_BPM_SERVER_SETTINGS NOCHECK CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID];
END
GO

IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID')
			AND parent_object_id = OBJECT_ID(N'SGW_BPM_SERVER_SETTINGS'))
BEGIN
 ALTER TABLE SGW_BPM_SERVER_SETTINGS NOCHECK CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID];
END
GO
-----------------------------------------------51.SGW_BPM_TMER_ACTY_INST_DETAILS----------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_TMER_ACTY_INST_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TMER_ACTY_INST_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS] (
    [TIMER_ID]             INT            IDENTITY (1, 1) NOT NULL,
    [ACTIVITY_INSTANCE_ID] INT            NOT NULL,
    [START_DATE_TIME]      DATETIME       NOT NULL,
    [END_DATE_TIME]        DATETIME       NOT NULL,
    [MACHINE_NAME]         NVARCHAR (MAX) NULL,
    [PROCESSING_FLAG]      VARCHAR (1)    DEFAULT ('N') NULL,
    [CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
    CONSTRAINT [PK_SGW_BPM_TMER_ACTY_INST_DETAILS] PRIMARY KEY CLUSTERED ([TIMER_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_TMER_ACTY_INST_DETAILS_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
);
END
ELSE
BEGIN
	PRINT 'TABLE Name : SGW_BPM_TMER_ACTY_INST_DETAILS is already exists'
END
GO
----------------------------------------------52.SGW_BPM_USERS_ESC_MESSAGE-----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_USERS_ESC_MESSAGE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_USERS_ESC_MESSAGE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE] (
    [USERS_ESC_MESSAGE_ID] INT         IDENTITY (1, 1) NOT NULL,
    [ESCALATION_MESSAGE_ID]       INT         NOT NULL,
    [USER_SERIAL_ID]              INT         NOT NULL,
    [MARK_AS_READ]                VARCHAR (1) NOT NULL,
    [CREATED_BY]                           [varchar](50) NOT NULL,
	[CREATED_DATE]                         [datetime] NOT NULL,
	[MODIFIED_BY]                          [varchar](50) NOT NULL,
	[MODIFIED_DATE]                        [datetime] NOT NULL,
	[UPDATE_SEQ]                           [int] NOT NULL,
    CONSTRAINT [PK_SGW_BPM_USERS_ESC_MESSAGE] PRIMARY KEY CLUSTERED ([USERS_ESC_MESSAGE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_USERS_ESC_MESSAGE is already exists'
END       
GO

-------------------------------------------53.SGW_USER_TIMEOFF-----------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_USER_TIMEOFF') 
BEGIN
PRINT 'TABLE Name : SGW_USER_TIMEOFF IS CREATED'
CREATE TABLE [dbo].[SGW_USER_TIMEOFF](
	[USER_TIMEOFF_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[USER_SERIAL_ID] [dbo].[UDT_IDENTITY] NOT NULL,
	[START_DATE] [dbo].[UDT_DATE] NOT NULL,
	[END_DATE] [dbo].[UDT_DATE] NOT NULL,
	[STATUS_ID] [dbo].[UDT_CODE_ID] NOT NULL,
	[STATUS_VALUE] [dbo].[UDT_CODE_VALUE] NOT NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_MODIFIEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NOT NULL,
 CONSTRAINT [PK_SGW_USER_TIMEOFF] PRIMARY KEY CLUSTERED 
(
	[USER_TIMEOFF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_USER_TIMEOFF is already exists'
END       
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGW_USER_TIMEOFF_SGS_USER')
			AND parent_object_id = OBJECT_ID(N'SGW_USER_TIMEOFF'))
BEGIN
	ALTER TABLE [dbo].[SGW_USER_TIMEOFF]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_USER_TIMEOFF_SGS_USER] FOREIGN KEY([USER_SERIAL_ID])
	REFERENCES [dbo].[SGS_USER] ([USER_SERIAL_ID])
END
GO

ALTER TABLE [dbo].[SGW_USER_TIMEOFF] CHECK CONSTRAINT [FK_SGW_USER_TIMEOFF_SGS_USER]
GO

--------------------------------------------------------------------------------54.SGW_BPM_TRACING---------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_TRACING') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACING IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACING] (
	[BPM_TRACING_ID] [int] IDENTITY(1,1) NOT NULL,
	[BPM_TRACING_FLAG] VARCHAR(1) NOT NULL,
	[BPM_QUERY_TRACING_FLAG] VARCHAR(1) NULL,
	[BPM_QUERY_LIMIT] [INT] NOT NULL ,
	[BPM_QUERY_LIMIT_ALERT] [VARCHAR](100) NOT NULL, 
	[BPM_QUERY_HIGH_LIMIT] [INT] NOT NULL,	
	[BPM_QUERY_HIGH_LIMIT_ALERT] [VARCHAR](100) NOT NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT]  NULL,
 CONSTRAINT [PK_SGW_BPM_TRACING] PRIMARY KEY CLUSTERED 
(
	[BPM_TRACING_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACING is already exists'
END       
GO

---------------------------55.SGW_BPM_TRACE_INSTANCE---------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_TRACE_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INSTANCE] (
	[TRACE_INSTANCE_ID] [INT] IDENTITY(1,1) NOT NULL,	
	[ENGINE_NAME] [VARCHAR](100) NULL,
	[START_TIME] [DATETIME] NOT NULL,
	[END_TIME] [DATETIME] NULL,
	[MACHINE_NAME] [VARCHAR](50) NULL,
	[USER_ID] [VARCHAR] (100) NULL,
	[PARAMETER_DETAILS][VARCHAR](8000) NULL,
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT] NULL,
 CONSTRAINT [PK_SGW_BPM_TRACE_INSTANCE] PRIMARY KEY CLUSTERED 
(
	[TRACE_INSTANCE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACING is already exists'
END       
GO

--------------------------------------------------------------56. SGW_BPM_TRACE_INST_ACTN--------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_TRACE_INST_ACTN') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INST_ACTN] (
	[TRACE_INST_ACTN_ID] [INT] IDENTITY(1,1) NOT NULL,	
	[TRACE_INSTANCE_ID] [INT] NOT NULL,
	[START_TIME] [DATETIME] NOT NULL,
	[ACTION_TYPE] [VARCHAR](200) NOT NULL,
	[PARAMETER_DETAILS] [varchar](8000) NULL,
	[QUERY_ID] [VARCHAR](100) NOT NULL,
	[QUERY_TEXT] [VARCHAR](8000) NOT NULL,
	[RECORD_COUNT] [INT] NULL,
	[TRANSACTION_ID] [uniqueidentifier] NULL,
	[END_TIME] [DATETIME] NULL,
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT] NULL,
 CONSTRAINT [PK_SGW_BPM_TRACE_INST_ACTN] PRIMARY KEY CLUSTERED 
(
	[TRACE_INST_ACTN_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN is already exists'
END       
GO


IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_SGW_BPM_TRACE_INST_ACTN_START_TIME' AND object_id = OBJECT_ID('SGW_BPM_TRACE_INST_ACTN'))
    BEGIN
	PRINT 'Index Created ON SGW_BPM_TRACE_INST_ACTN Table'
      CREATE NONCLUSTERED INDEX PK_SGW_BPM_TRACE_INST_ACTN_START_TIME ON [dbo].SGW_BPM_TRACE_INST_ACTN
        (
	       [START_TIME],[ACTION_TYPE] ASC
        )
    END
ELSE
BEGIN
PRINT 'Index already Exists ON SGW_BPM_TRACE_INST_ACTN Table'
END       
GO

--------------------------------------------------------------57. SGW_BPM_TRACE_INST_ACTN_DTL--------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGW_BPM_TRACE_INST_ACTN_DTL') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN_DTL IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INST_ACTN_DTL] (
	[TRACE_INST_ACTN_DTL_ID] [INT] IDENTITY(1,1) NOT NULL,		
	[START_TIME] [DATETIME] NOT NULL,
	[REFERENCE_TYPE] [VARCHAR](100)  NULL,
	[REFERENCE_ID] [BIGINT]  NULL,
	[PROCESS_INSTANCE_ID] [INT]  NULL,
	[RESPONSE_MESSAGE_VALUE] [INT]  NULL,	
	[TRANSACTION_ID] [uniqueidentifier] null,
	[SUB_TRANSACTION_ID] int,
	[END_TIME] [DATETIME]  NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT] NULL,
 CONSTRAINT [PK_SGW_BPM_TRACE_INST_ACTN_DTL] PRIMARY KEY CLUSTERED 
(
	[TRACE_INST_ACTN_DTL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN_DTL is already exists'
END       
GO
----------------------------------------58. SGS_USER----------------------------------------------------------
IF COL_LENGTH('dbo.SGS_USER', 'SUPERVISOR_ID') IS NULL
BEGIN
ALTER TABLE SGS_USER
ADD SUPERVISOR_ID int NULL DEFAULT 0
END
GO

---------------------------------------59. SGT_NOTES----------------------------------------------------------
IF COL_LENGTH('dbo.SGT_NOTES', 'REFERENCE_ID') IS NULL
BEGIN
	PRINT 'ADDING REFERENCE_ID COLUMN TO SGT_NOTES TABLE'
	ALTER TABLE SGT_NOTES
	ADD REFERENCE_ID bigint NULL
END
GO

------------------------------------------------------------------60. SGS_SERVER_CONFIGURATION-----------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGS_SERVER_CONFIGURATION') 
BEGIN
PRINT 'TABLE Name : SGS_SERVER_CONFIGURATION IS CREATED'
CREATE TABLE [dbo].[SGS_SERVER_CONFIGURATION]
(
	[SERVER_CONFIGURATION_ID]	int					  IDENTITY(1,1) NOT NULL,
	[SERVER_ID]					int					  NOT NULL,	
	[ENGINE_ID]					int					  NOT NULL,
	[ENGINE_VALUE]				varchar(4)			  NOT NULL,
	[CREATED_BY]				varchar(50)			  NOT NULL,
	[CREATED_DATE]				datetime			  NOT NULL,
	[MODIFIED_BY]				varchar(50)			  NOT NULL,
	[MODIFIED_DATE]				datetime			  NOT NULL,
	[UPDATE_SEQ]				int					  NOT NULL,
	CONSTRAINT [PK_SGS_SERVER_CONFIGURATION] PRIMARY KEY CLUSTERED ([SERVER_CONFIGURATION_ID] ASC)
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
)
END
ELSE
BEGIN
PRINT 'TABLE Name : SGS_SERVER_CONFIGURATION is already exists' 
END       
GO

------------------------------------------------------------------61. SGT_BENEFIT_APPLICATION_CHECKLIST-----------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_BENEFIT_APPLICATION_CHECKLIST') 
BEGIN
PRINT 'TABLE Name : SGT_BENEFIT_APPLICATION_CHECKLIST IS CREATED'
CREATE TABLE [dbo].[SGT_BENEFIT_APPLICATION_CHECKLIST](
	[CHECKLIST_BENEFIT_APPLICATION_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[BENEFIT_APPLICATION_ID] [dbo].[UDT_IDENTITY] NOT NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_MODIFIEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NOT NULL,
	[PROOF_OF_BIRTH] [dbo].[UDT_FLAG] NULL,
	[IAP_WAIT_TIMER] [dbo].[UDT_DATETIME] NULL,
	[PROOF_OF_BIRTH_SPOUSE] [dbo].[UDT_FLAG] NULL,
	[PROOF_OF_BIRTH_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[VERIFICATION_OF_TIN] [dbo].[UDT_FLAG] NULL,
	[VERIFICATION_OF_TIN_SPOUSE] [dbo].[UDT_FLAG] NULL,
	[VERIFICATION_OF_TIN_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[DEATH_CERTIFICATE] [dbo].[UDT_FLAG] NULL,
	[DEATH_CERTIFICATE_NA] [dbo].[UDT_FLAG] NULL,
	[DEATH_CERTIFICATE_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[DIVORCE_DOCUMENT] [dbo].[UDT_FLAG] NULL,
	[NO_OF_DIVORCES_EX_SPOUSE_NAME1] [dbo].[UDT_FLAG] NULL,
	[NO_OF_DIVORCES_EX_SPOUSE_NAME2] [dbo].[UDT_FLAG] NULL,
	[NO_OF_DIVORCES_EX_SPOUSE_NAME3] [dbo].[UDT_FLAG] NULL,
	[NO_OF_DIVORCES_EX_SPOUSE_NAME4] [dbo].[UDT_FLAG] NULL,
	[EX_SPOUSE_ID] [dbo].[UDT_ID] NULL,
	[EX_SPOUSE_NAME1_INTEREST] [varchar](200) NULL,
	[EX_SPOUSE_NAME2_INTEREST] [varchar](200) NULL,
	[EX_SPOUSE_NAME3_INTEREST] [varchar](200) NULL,
	[EX_SPOUSE_NAME4_INTEREST] [varchar](200) NULL,
	[SSD_AWARD] [dbo].[UDT_FLAG] NULL,
	[SSD_AWARD_NA] [dbo].[UDT_FLAG] NULL,
	[SSD_APPLICATION] [dbo].[UDT_FLAG] NULL,
	[SSD_APPLICATION_NA] [dbo].[UDT_FLAG] NULL,
	[SSD_APPLICATION_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[SSD_AWARD_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[SHARED_NOTE] [varchar](500) NULL,
	[SHARED_NOTE_APRROVED] [dbo].[UDT_FLAG] NULL,
	[SHARED_NOTE_REWORK_NEEDED] [dbo].[UDT_FLAG] NULL,
	[SHARED_NOTE_REWORK_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[SHARED_NOTE_LAST_INITIAL] [varchar](50) NULL,
	[MARRIAGE_CERTIFICATE] [dbo].[UDT_FLAG] NULL,
	[MARRIAGE_CERTIFICATE_NA] [dbo].[UDT_FLAG] NULL,
	[MARRIAGE_CERTIFICATE_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[EX_SPOUSE_NAME1_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[EX_SPOUSE_NAME2_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[EX_SPOUSE_NAME3_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[EX_SPOUSE_NAME4_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[SHARED_NOTE_FIRST_INITIAL] [dbo].[UDT_FLAG] NULL,
	[SHARED_NOTE_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[PROOF_OF_BIRTH_SPOUSE_NA] [dbo].[UDT_FLAG] NULL,
	[VERIFICATION_OF_TIN_SPOUSE_NA] [dbo].[UDT_FLAG] NULL,
 CONSTRAINT [PK_BENEFIT_APPLICATION_CHECKLIST] PRIMARY KEY CLUSTERED 
(
	[CHECKLIST_BENEFIT_APPLICATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_BENEFIT_APPLICATION_CHECKLIST is already exists' 
END       
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGT_BENEFIT_APPLICATION_CHECKLIST_SGT_BENEFIT_APPLICATION')
			AND parent_object_id = OBJECT_ID(N'SGT_BENEFIT_APPLICATION_CHECKLIST'))
BEGIN
	ALTER TABLE [dbo].[SGT_BENEFIT_APPLICATION_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_SGT_BENEFIT_APPLICATION_CHECKLIST_SGT_BENEFIT_APPLICATION] FOREIGN KEY([BENEFIT_APPLICATION_ID])
REFERENCES [dbo].[SGT_BENEFIT_APPLICATION] ([BENEFIT_APPLICATION_ID])
END
ELSE
BEGIN
PRINT 'CONSTRAINT Name : FK_SGT_BENEFIT_APPLICATION_CHECKLIST_SGT_BENEFIT_APPLICATION is already exists in SGT_BENEFIT_APPLICATION_CHECKLIST table' 
END
GO
--------------------------------------------------------62.SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST--------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST') 
BEGIN
PRINT 'TABLE Name : SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST IS CREATED'
CREATE TABLE [dbo].[SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST](
	[AUDITING_CHECKLIST_BENEFIT_APPLICATION_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[BENEFIT_APPLICATION_ID] [dbo].[UDT_IDENTITY] NOT NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_MODIFIEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NOT NULL,
	[AUDITING_NOTE] [varchar](500) NULL,
	[AUDITING_NOTE_COMPLETED] [dbo].[UDT_FLAG] NULL,
	[AUDITING_NOTE_RESPONSE] [dbo].[UDT_FLAG] NULL,
	[AUDITING_NOTE_RECEIVED_ON] [dbo].[UDT_DATETIME] NULL,
	[AUDITING_NOTE_FIRST_INTIAL] [varchar](100) NULL,
	[AUDITING_NOTE_LAST_INTIAL] [varchar](100) NULL,
 CONSTRAINT [PK_BENEFIT_APPLICATION_AUDITING_CHECKLIST] PRIMARY KEY CLUSTERED 
(
	[AUDITING_CHECKLIST_BENEFIT_APPLICATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST is already exists' 
END       
GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'FK_SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST_SGT_BENEFIT_APPLICATION')
			AND parent_object_id = OBJECT_ID(N'SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST'))
BEGIN
	ALTER TABLE [dbo].[SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_SGT_BENEFIT_APPLICATION_AUDITING_CHECKLIST_SGT_BENEFIT_APPLICATION] FOREIGN KEY([BENEFIT_APPLICATION_ID])
REFERENCES [dbo].[SGT_BENEFIT_APPLICATION] ([BENEFIT_APPLICATION_ID])
END
ELSE
BEGIN
PRINT 'CONSTRAINT Name : FK_SGT_BENEFIT_APPLICATION_CHECKLIST_SGT_BENEFIT_APPLICATION is already exists in SGT_BENEFIT_APPLICATION_CHECKLIST table' 
END
GO

--------------------------------------------------------63.UDF_GETAPPLICATIONDATE-------------------------------------------------------------------------------------
-- =============================================
-- Author:		Venkata Raman Pinnama
-- Create date: 07-APR-2017
-- Description:	Function To get Application date based on flag
-- =============================================

CREATE FUNCTION [dbo].[UDF_GETAPPLICATIONDATE]()
RETURNS DateTime
AS
BEGIN
	
	-- Return the result of the function
	Declare @Region varchar(4);
	Declare @UseApplicationDate varchar(1);
	Declare @ApplicationDate DateTime;
	DECLARE @LocalApplicationDate DateTime;	
	Select @Region = REGION_VALUE,@UseApplicationDate=USE_APPLICATION_DATE,@ApplicationDate=APPLICATION_DATE from SGS_SYSTEM_MANAGEMENT;

	IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_NAME='SGS_TIME_TRAVEL') 
		SELECT @LocalApplicationDate = APPLICATION_DATE FROM SGS_TIME_TRAVEL WHERE MACHINE_NAME = (SELECT HOST_NAME())


	IF(@LocalApplicationDate IS NOT NULL and @Region = 'DEVL' AND @UseApplicationDate IS NOT NULL AND @UseApplicationDate = 'Y')
		RETURN CONVERT(DATETIME, CONVERT(CHAR(8), @LocalApplicationDate, 112) + ' ' + FORMAT(GETDATE(), 'HH:mm:ss.fff'));	
	
	ELSE IF(@Region <> 'PROD' AND @UseApplicationDate IS NOT NULL AND @UseApplicationDate = 'Y' AND @ApplicationDate IS NOT NULL)
		RETURN CONVERT(DATETIME, CONVERT(CHAR(8), @ApplicationDate, 112) + ' ' + FORMAT(GETDATE(), 'HH:mm:ss.fff'));
				
	RETURN GETDATE();
END
GO

----------------------------------------------------------64.SGV_Code_id_2021_3008-------------------------------------------------------------------------------------

IF OBJECT_ID('DBO.SGV_Code_id_2021_3008') IS NULL
BEGIN
EXECUTE('CREATE VIEW [dbo].[SGV_Code_id_2021_3008]
AS
SELECT        CODE_ID, CODE_VALUE, DESCRIPTION
FROM            dbo.SGS_CODE_VALUE WITH (nolock)
WHERE        (CODE_ID IN (2021, 3008))')		
END
ELSE
BEGIN
	PRINT 'VIEW ALREADY EXIST'
END
GO

----------------------------------------------------------65.SGT_RETURN_TO_WORK_REQUEST-------------------------------------------------------------------------------------

/****** Object:  Table [dbo].[SGT_RETURN_TO_WORK_REQUEST]    Script Date: 5/29/2025 2:48:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_RETURN_TO_WORK_REQUEST') 
BEGIN
	PRINT 'Creating TABLE Name : SGT_RETURN_TO_WORK_REQUEST'
	CREATE TABLE [dbo].[SGT_RETURN_TO_WORK_REQUEST](
		[REEMPLOYMENT_NOTIFICATION_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
		[PERSON_ID] [dbo].[UDT_ID] NOT NULL,
		[REEMPLOYMENT_START_DATE] [dbo].[UDT_DATE] NULL,
		[STATUS_ID] [dbo].[UDT_ID] NOT NULL,
		[STATUS_VALUE] [dbo].[UDT_CODE_VALUE] NOT NULL,
		[SOURCE_ID] [dbo].[UDT_ID] NOT NULL,
		[SOURCE_VALUE] [dbo].[UDT_CODE_VALUE] NOT NULL,
		[EMPLOYER_NAME] [dbo].[UDT_FILE_NAME] NULL,
		[JOB_CLASSFICATION] [dbo].[UDT_FILE_NAME] NULL,
		[ELIGIBLE_FLAG] [dbo].[UDT_FLAG] NULL,
		[ESTIMATED_HOURS_PER_PAYROLL_MONTH] [dbo].[UDT_MONTHS] NULL,
		[NOTIFICATION_FORM_CREATED_ON] [dbo].[UDT_DATE] NOT NULL,
		[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
		[CREATED_DATE] [dbo].[UDT_DATE] NOT NULL,
		[MODIFIED_BY] [dbo].[UDT_MODIFIEDBY] NOT NULL,
		[MODIFIED_DATE] [dbo].[UDT_DATE] NOT NULL,
		[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NOT NULL,
		[Union_Local_Number] [dbo].[UDT_ID] NULL,
		[REQUEST_TYPE_ID] [dbo].[UDT_ID] NOT NULL,
		[REQUEST_TYPE_VALUE] [dbo].[UDT_CODE_VALUE] NOT NULL,
		[PAYMENT_ACCOUNT_SUSPENSION_DATE] [dbo].[UDT_DATE] NULL
	 CONSTRAINT [PK_SGT_RETURN_TO_WORK_REQUEST_REEMPLOYMENT_NOTIFICATION_ID] PRIMARY KEY CLUSTERED 
	(
		[REEMPLOYMENT_NOTIFICATION_ID] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
	) ON [PRIMARY]

	ALTER TABLE [dbo].[SGT_RETURN_TO_WORK_REQUEST]  WITH CHECK ADD  CONSTRAINT [FK_SGT_RETURN_TO_WORK_REQUEST_SGT_PERSON] FOREIGN KEY([PERSON_ID])
	REFERENCES [dbo].[SGT_PERSON_BASE] ([PERSON_ID])

	ALTER TABLE [dbo].[SGT_RETURN_TO_WORK_REQUEST] CHECK CONSTRAINT [FK_SGT_RETURN_TO_WORK_REQUEST_SGT_PERSON]

END
ELSE
BEGIN
	PRINT 'TABLE Name : SGT_RETURN_TO_WORK_REQUEST is already exists' 
END       
GO

----------------------------------------------------------66.SGT_RETURN_TO_WORK_REQUEST_ERROR-------------------------------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_RETURN_TO_WORK_REQUEST_ERROR') 
BEGIN
PRINT 'TABLE Name : SGT_RETURN_TO_WORK_REQUEST_ERROR IS CREATED'
CREATE TABLE [dbo].[SGT_RETURN_TO_WORK_REQUEST_ERROR](
	[REEMPLOYMENT_NOTIFICATION_ERROR_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[REEMPLOYMENT_NOTIFICATION_ID] [dbo].[UDT_ID] NOT NULL,
	[REEMPLOYMENT_NOTIFICATION_PERSON_ID] [dbo].[UDT_ID] NOT NULL,
	[MESSAGE_ID] [dbo].[UDT_ID] NOT NULL,
	[CREATED_BY] [dbo].[UDT_MODIFIEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NULL,
 CONSTRAINT [[REEMPLOYMENT_NOTIFICATION_ERROR_ID] PRIMARY KEY CLUSTERED 
(
	[REEMPLOYMENT_NOTIFICATION_ERROR_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_RETURN_TO_WORK_REQUEST_ERROR is already exists'
END       
GO

----------------------------------------------------------67.UDF_SPLIT-------------------------------------------------------------------------------------

CREATE FUNCTION [dbo].[UDF_SPLIT] (@String varchar(MAX), @Delimiter char(1))       
returns @temptable TABLE (Items varchar(MAX))       
as       
begin      
    declare @idx int       
    declare @slice varchar(8000)       

    select @idx = 1       
        if len(@String)<1 or @String is null  return       

    while @idx!= 0       
    begin       
        set @idx = charindex(@Delimiter,@String)       
        if @idx!=0       
            set @slice = left(@String,@idx - 1)       
        else       
            set @slice = @String       

        if(len(@slice)>0)  
            insert into @temptable(Items) values(@slice)       

        set @String = right(@String,len(@String) - @idx)       
        if len(@String) = 0 break       
    end   
return 
end;
GO

----------------------------------------------------------68.SGT_RTW_CORR_MAPPING-----------------------------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_RTW_CORR_MAPPING') 
BEGIN
PRINT 'TABLE Name : SGT_RTW_CORR_MAPPING IS CREATED'
CREATE TABLE [dbo].[SGT_RTW_CORR_MAPPING] (
    [MAPPING_ID]					  UDT_IDENTITY IDENTITY (1, 1) NOT NULL,
    [REEMPLOYMENT_NOTIFICATION_ID]    UDT_ID          NOT NULL,
    [CORR_TRACKING_ID]				  UDT_ID          NOT NULL,
    [DATA1]							  UDT_FILE_NAME	  NULL,
    [DATA2]							  UDT_FILE_NAME	  NULL,
    [CREATED_BY]					  UDT_CREATEDBY   NOT NULL,
    [CREATED_DATE]					  UDT_DATETIME    NOT NULL,
    [MODIFIED_BY]					  UDT_MODIFIEDBY  NOT NULL,
    [MODIFIED_DATE]					  UDT_DATETIME    NOT NULL,
    [UPDATE_SEQ]					  UDT_UPDSEQ      NULL,
    CONSTRAINT [PK_SGT_RTW_CORR_MAPPING_MAPPING_ID] PRIMARY KEY CLUSTERED ([MAPPING_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_RTW_CORR_MAPPING is already exists' 
END       
GO

----------------------------------------------------------69.SGT_ERTW_SHARED_NOTES---------------------------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_ERTW_SHARED_NOTES') 
BEGIN
PRINT 'TABLE Name : SGT_ERTW_SHARED_NOTES IS CREATED'
CREATE TABLE [dbo].[SGT_ERTW_SHARED_NOTES] (
    [NOTE_ID]							UDT_IDENTITY IDENTITY (1, 1) NOT NULL,
    [REEMPLOYMENT_NOTIFICATION_ID]		UDT_ID          NOT NULL,
    [NOTES]								UDT_FILE_NAME	NULL,
    [APPROVED]							UDT_FLAG		NULL,
    [REWORK_NEEDED]						UDT_FLAG		NULL,
	[FIRST_INITIAL]						UDT_FILE_NAME	NULL,
	[LAST_NAME]							UDT_FILE_NAME	NULL,
	[RECEIVED_ON]						UDT_DATE		NULL,
    [CREATED_BY]						UDT_CREATEDBY   NOT NULL,
    [CREATED_DATE]						UDT_DATETIME    NOT NULL,
    [MODIFIED_BY]						UDT_MODIFIEDBY  NOT NULL,
    [MODIFIED_DATE]						UDT_DATETIME    NOT NULL,
    [UPDATE_SEQ]						UDT_UPDSEQ      NOT NULL,
    CONSTRAINT [PK_SGT_ERTW_SHARED_NOTES_NOTE_ID] PRIMARY KEY CLUSTERED ([NOTE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_ERTW_SHARED_NOTES is already exists' 
END       
GO

----------------------------------------------------------70.SGT_ERTW_AUDITING_NOTES---------------------------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='SGT_ERTW_AUDITING_NOTES') 
BEGIN
PRINT 'TABLE Name : SGT_ERTW_AUDITING_NOTES IS CREATED'
CREATE TABLE [dbo].[SGT_ERTW_AUDITING_NOTES] (
    [NOTE_ID]							UDT_IDENTITY IDENTITY (1, 1) NOT NULL,
    [REEMPLOYMENT_NOTIFICATION_ID]		UDT_ID          NOT NULL,
    [NOTES]								UDT_FILE_NAME	NULL,
    [COMPLETE]							UDT_FLAG		NULL,
    [RESPONSE]							UDT_FLAG		NULL,
	[FIRST_INITIAL]						UDT_FILE_NAME	NULL,
	[LAST_NAME]							UDT_FILE_NAME	NULL,
	[RECEIVED_ON]						UDT_DATE		NULL,
    [CREATED_BY]						UDT_CREATEDBY   NOT NULL,
    [CREATED_DATE]						UDT_DATETIME    NOT NULL,
    [MODIFIED_BY]						UDT_MODIFIEDBY  NOT NULL,
    [MODIFIED_DATE]						UDT_DATETIME    NOT NULL,
    [UPDATE_SEQ]						UDT_UPDSEQ      NOT NULL,
    CONSTRAINT [PK_SGT_ERTW_AUDITING_NOTES_NOTE_ID] PRIMARY KEY CLUSTERED ([NOTE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_ERTW_AUDITING_NOTES is already exists' 
END       
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------