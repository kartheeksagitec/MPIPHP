
IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ResumeStuckTasks') 
BEGIN 
    INSERT into SGW_BPM_SERVICE_TIMER(ACTION_METHOD, INTERVAL, ENABLED, BPM_TRACING_FLAG, BPM_QUERY_TRACING_FLAG, BPM_QUERY_LIMIT, BPM_QUERY_LIMIT_ALERT, BPM_QUERY_HIGH_LIMIT, BPM_QUERY_HIGH_LIMIT_ALERT, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) 
    values('ResumeStuckTasks',300000,'N','N','N',5000,NULL,5000,NULL,'Conversion',GETDATE(),'Conversion',GETDATE(),0);
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='BpmRequestsHandler') 
BEGIN 
INSERT [dbo].[SGW_BPM_SERVICE_TIMER] ([ACTION_METHOD], [INTERVAL], [ENABLED], [BPM_TRACING_FLAG], [BPM_QUERY_TRACING_FLAG], [BPM_QUERY_LIMIT], [BPM_QUERY_LIMIT_ALERT], [BPM_QUERY_HIGH_LIMIT], [BPM_QUERY_HIGH_LIMIT_ALERT], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (N'BpmRequestsHandler', 6000, N'Y', NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ResumeSuspendedUserTasks') 
BEGIN 
INSERT [dbo].[SGW_BPM_SERVICE_TIMER] ([ACTION_METHOD], [INTERVAL], [ENABLED], [BPM_TRACING_FLAG], [BPM_QUERY_TRACING_FLAG], [BPM_QUERY_LIMIT], [BPM_QUERY_LIMIT_ALERT], [BPM_QUERY_HIGH_LIMIT], [BPM_QUERY_HIGH_LIMIT_ALERT], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (N'ResumeSuspendedUserTasks', 300000, N'Y', NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.sgs_system_settings WHERE SETTING_NAME = 'ResumeIfAllDocsReceived'))
BEGIN 
	INSERT dbo.sgs_system_settings ([SETTING_NAME],[SETTING_TYPE],[SETTING_VALUE],[ENCRYPTED_FLAG],[REFRESHABLE]) VALUES('ResumeIfAllDocsReceived','bool','false',NULL,NULL)
END
ELSE
BEGIN
	PRINT('dbo.sgs_system_settings already contains row with SETTING_NAME = ResumeIfAllDocsReceived');
END
GO

-------------------------------------------------------------------------------------------------------------------
IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007001))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007001  , 20001010  ,'F' ,'BPM Activity Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007002))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007002  , 20001010  ,'F' ,'BPM Failed Activity' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007003))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007003  , 20001010  ,'F' ,'BPM My Basket' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007004))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007004  , 20001010  ,'F' ,'BPM Online Initiation' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007005))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007005  , 20001010  ,'F' ,'BPM Document Receive' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007006))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007006  , 20001010  ,'F' ,'BPM Activity Instance Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007007))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007007  , 20001010  ,'F' ,'BPM Request Lookup' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007008))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007008  , 20001010  ,'F' ,'BPM Case' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO


IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007009))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007009  , 20001010  ,'F' ,'BPM Process' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007010))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007010  , 20001010  ,'F' ,'BPM Case Instance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007011))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007011  , 20001010  ,'F' ,'BPM Process Instance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007012))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007012  , 20001010  ,'F' ,'BPM Event' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007013))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007013  , 20001010  ,'F' ,'BPM Reassign Work Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007014))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007014  , 20001010  ,'F' ,'BPM Workflow Center Left Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007015))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007015  , 20001010  ,'F' ,'BPM Escalation' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007016))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007016  , 20001010  ,'F' ,'BPM Process Escalation' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007017))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007017  , 20001010  ,'F' ,'BPM Out Of Office' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007018))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007018  , 20001010  ,'F' ,'BPM Case Configuration Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007019))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007019  , 20001010  ,'F' ,'Server Management Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007020))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007020  , 20001010  ,'F' ,'Monitoring Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007021))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007021  , 20001010  ,'F' ,'User Dashboard Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007022))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007022  , 20001010  ,'F' ,'Supervisor Dashboard Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO


IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007023))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007023  , 20001010  ,'F' ,'Case Configuration Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007024))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007024  , 20001010  ,'F' ,'Bpm Service Timer' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO

IF(NOT EXISTS(SELECT 1 FROM SGS_RESOURCES WHERE RESOURCE_ID = 20007025))
BEGIN
	INSERT INTO SGS_RESOURCES (RESOURCE_ID ,RESOURCE_TYPE_ID ,RESOURCE_TYPE_VALUE ,RESOURCE_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
		VALUES (  20007025  , 20001010  ,'F' ,'Bpm Global Escalations Maintenance' ,'system' ,GETDATE() ,'system' ,GETDATE() , 0  ) 
END
GO
----------------------------------------------------------------------SGS_MESSAGES-------------------------------------------------
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1582))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1582, 'Entered user is unavailable.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007001))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007001, 'User Name is required.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007002))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007002, 'Start Date is requried.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007003))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007003, 'End Date is required.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007004))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007004, 'Start Date cannot be less than current date.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007005))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 	VALUES (20007005, 'Start Date cannot be greater than End Date.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007014) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007014,'Duplicate Process Escalation Name exists.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007017) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007017,'Case is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007018) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007018,'Activity is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007019) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007019,'Lapse Time In Minutes is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007020) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007020,'Days, Hours, or Minutes are required for Recur Details when Each Recur Time is selected.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007021) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007021,'Escalation Name is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO
IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007022) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007022,'Process is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO
IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007023) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007023,'At least one user is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007024) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007024,'Duplicate Escalation Name exists.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007028) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007028,'Process Escalation Name is required.',20002001,'E','','',20002001,'','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007029))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007029, 'At least one recipient is required.',20002001, 'I', NULL, NULL,20002001, NULL , GETDATE(), 'rahul.mane', GETDATE(), 'rahul.mane', 0)
END
GO

IF NOT EXISTS ( SELECT  1 FROM  SGS_MESSAGES WHERE [MESSAGE_ID] = 20007030 )
 BEGIN
	INSERT SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
	VALUES(20007030,'A combination of Event and Action already exists for this process.',20002001,'E',NULL,NULL,20002001,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	PRINT 'Inserting Record with [MESSAGE_ID] = ''20007030'' in SGS_MESSAGES Table'
 END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007037) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007037,'Rejection reason is required.',20002001,'E','','',20002001,'','rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007038) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007038,'Rejection reason already exists.',20002001,'E','','',20002001,'','rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO

IF NOT EXISTS ( SELECT  1 FROM  SGS_MESSAGES WHERE [MESSAGE_ID] = 20007039 )
 BEGIN
	INSERT SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
	VALUES(20007039,'Cannot terminate now.',20002001,'E',NULL,NULL,20002001,NULL,'rameshwar.landge',getdate(),'rameshwar.landge',getdate(),0)
	PRINT 'Inserting Record with [MESSAGE_ID] = ''20007039'' in SGS_MESSAGES Table'
 END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007040) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007040,'Exception reason is required.',20002001,'E','','',20002001,'','rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007041) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007041,'Exception reason already exists.',20002001,'E','','',20002001,'','rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007042) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007042,'Missing information reason is required.',20002001,'E','','',20002001,'','rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007043) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007043,'Missing information already exists.',20002001,'E','','',20002001,'','rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO
IF EXISTS (SELECT 1 FROM dbo.SGS_MESSAGES WHERE [MESSAGE_ID] =	1502)
	PRINT 'Record with [MESSAGE_ID] = ''1502'' already exist in SGS_MESSAGES Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [MESSAGE_ID] = ''1502'' in SGS_MESSAGES Table'
		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(1502,'Activity Released Successfully.',16,'I',NULL,NULL,16,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7004))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7004, 'Case instance is already in Progress for this Person.',20002001, 'E',  NULL, NULL,20002001, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF NOT EXISTS(SELECT 1 FROM [SGS_MESSAGES] WITH(NOLOCK) WHERE [MESSAGE_ID] = 7005) 
BEGIN
INSERT [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (7005, N'Estimated Hours Per Payroll Month Is Required', 16, N'W', NULL, NULL, 16, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS(SELECT 1 FROM [SGS_MESSAGES] WITH(NOLOCK) WHERE [MESSAGE_ID] = 7006) 
BEGIN
INSERT [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (7006, N'Employee Name Is Required', 16, N'W', NULL, NULL, 16, NULL, N'BPM', GETDATE(), N'BPM',GETDATE(), 0)
END
GO
IF NOT EXISTS(SELECT 1 FROM [SGS_MESSAGES] WITH(NOLOCK) WHERE [MESSAGE_ID] = 7007) 
BEGIN
INSERT [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (7007, N'Re-employment Start Date Is Required', 16, N'W', NULL, NULL, 16, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS(SELECT 1 FROM [SGS_MESSAGES] WITH(NOLOCK) WHERE [MESSAGE_ID] = 7008) 
BEGIN
INSERT [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (7008, N'Job Classification Is Required', 16, N'W', NULL, NULL, 16, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7009))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7009, '{0} Date cannot be a future date',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7010))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7010, 'Cannot Initiate BPM if Source is not Online or Indexing.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7013))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7013, 'QDRO Review Completion Date field cannot be blank',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7014))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7014, 'Please confirm if Election packet is sent',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007011) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007011,'Status is required.',20002001,'E','','',20002001,'','system',GETDATE(),'system',GETDATE(),0)
END
GO
-----------------------------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007006) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007006,'Event Description is required.',20002001,'E','','',20002001,'','system',GETDATE(),'system',GETDATE(),0)
END
GO
-------------------------------------------------------------------------------------------------------------------------------------------------------IF NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007015)

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007007) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007007,'Action is required.',20002001,'E','','',20002001,'','system',GETDATE(),'system',GETDATE(),0)
END
GO

-------------------------------------------------------------------------------------------------------------------------------------------------------IF NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007015)
IF NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007015)
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007015, 'Document Class is required.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'system', GETDATE(), 'system', 0)
END
GO
----------------------------------------------------------------------------------------------------------------------------------------------
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007010))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007010, 'Event Type is required.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'TanajiB', GETDATE(), 'TanajiB', 0)
END
GO
----------------------------------------------------------------------------------------------------------------------------------------------------
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007009))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007009, 'Document Type is required.',20002001, 'E',  NULL, NULL,20002001, NULL , GETDATE(), 'system', GETDATE(), 'system', 0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007026) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,RESPONSIBILITY_ID,RESPONSIBILITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007026,'Days or Hours or Minutes are required for Recur Details.',20002001,'E','','',20002001,'','system',GETDATE(),'system',GETDATE(),0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_MESSAGES WHERE MESSAGE_ID = 20015093) 
BEGIN
 INSERT INTO dbo.SGS_MESSAGES (MESSAGE_ID, DISPLAY_MESSAGE, SEVERITY_ID, SEVERITY_VALUE, INTERNAL_INSTRUCTIONS, EMPLOYER_INSTRUCTIONS, RESPONSIBILITY_ID, RESPONSIBILITY_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
 VALUES (20015093, 'Completed date cannot be future date',20002001, 'E', NULL, NULL, 20002001, NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------
IF(NOT EXISTS(SELECT 1 FROM SGS_SYSTEM_PATHS WHERE PATH_CODE = 'BPM_UPLD'))
BEGIN
	INSERT INTO SGS_SYSTEM_PATHS (PATH_CODE ,PATH_VALUE ,PATH_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ ) 
		VALUES ( 'BPM_UPLD' ,'BPMDocumentUpload\' ,'Upload BPM Related Document.' ,'Rahul.Mane' ,GETDATE() ,'Rahul.Mane' ,GETDATE() , 0)
END
Go

------------------------------------------------------------------------SGS_CODE------------------------------------------------
IF NOT EXISTS (SELECT *	FROM SGS_CODE	WHERE CODE_ID = 20007001)
BEGIN
INSERT INTO SGS_CODE (CODE_ID, DESCRIPTION, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (20007001, 'Status of out of office record', 'BPM', GETDATE(), 'BPM', GETDATE(), 0);
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 20007001 AND CODE_VALUE = 'ACTV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007001,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,NULL,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 20007001 AND CODE_VALUE = 'VOID') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007001,'VOID','Void',NULL,NULL, NULL,NULL,NULL, NULL,NULL,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 20007002) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007002, 'Search Counts', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 20007003) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007003, 'Rejection Reasons', 'Unknown','str','Identifies Rejection','str',NULL,NULL,'All',NULL,NULL,NULL, 'rameshwar.landge',GETDATE(),'rameshwar.landge',GETDATE(),0)
END
GO

declare @currentdatetime datetime
declare @defaultcodevalueorder int
set @currentdatetime = getdate()
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'D002')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'You requested that this check be returned to you.'
WHERE CODE_ID=20007003 AND CODE_VALUE='D002' and description not like 'You requested that this%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'D002','You requested that this check be returned to you.',NULL,'R', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'D004')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'We cannot accept payments from third parties.'
WHERE CODE_ID=20007003 AND CODE_VALUE='D004' and description not like 'We cannot accept payments%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'D004','We cannot accept payments from third parties.',NULL,'R', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R129')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Missing Title.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R129' and description not like 'Missing Title%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R129','Missing Title.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R130')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Missing notarization.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R130' and description not like 'Missing notarization%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R130','Missing notarization.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R131')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Missing notary information.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R131' and description not like 'Missing notary information%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R131','Missing notary information.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)
IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R132')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Notary commission expired.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R132' and description not like 'Notary commission expired%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R132','Notary commission expired.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R133')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Part A incomplete.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R133' and description not like 'Part A incomplete%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R133','Part A incomplete.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R134')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Part B incomplete.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R134' and description not like 'Part B incomplete%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R134','Part B incomplete.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R135')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Part C incomplete.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R135' and description not like 'Part C incomplete%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R135','Part C incomplete.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)


IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R143')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Title not valid (sub, per diems and paras).'
WHERE CODE_ID=20007003 AND CODE_VALUE='R143' and description not like 'Title not valid (sub, per diems and paras)%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R143','Title not valid (sub, per diems and paras).',NULL,'R', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)


IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R144')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Title not valid.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R144' and description not like 'Title not valid%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R144','Title not valid.',NULL,'R', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)


IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R145')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Valid application already on file.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R145' and description not like 'Valid application already on file%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R145','Valid application already on file.',NULL,'R', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)
set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)


IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'R162')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Documentation Missing.'
WHERE CODE_ID=20007003 AND CODE_VALUE='R162' and description not like 'Documentation Missing%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'R162','Documentation Missing.',NULL,'M', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)

set @defaultcodevalueorder = (select coalesce((select max(code_value_order) from   SGS_CODE_value where code_id=20007003),0)+1)

IF EXISTS (SELECT CODE_ID FROM  SGS_CODE_VALUE WHERE CODE_ID = 20007003 AND CODE_VALUE = 'E001')
UPDATE  SGS_CODE_VALUE SET DESCRIPTION = 'Exception Reasons.'
WHERE CODE_ID=20007003 AND CODE_VALUE='E001' and description not like 'Exception Reasons.%'
ELSE
INSERT INTO  SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,DATA1,DATA2, START_DATE, CODE_VALUE_ORDER, CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (20007003,'E001','Exception Reasons.',NULL,'E', NULL, @defaultcodevalueorder, 'rameshwar.landge', @currentdatetime, 'rameshwar.landge', @currentdatetime, 0)

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 20007002 AND CODE_VALUE = 'MAX') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007002,'MAX','Maximum Search Count',1000,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 20007002 AND CODE_VALUE = 'MIN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007002,'MIN','Minimum Search Count',100,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6028 AND CODE_VALUE = 'RTW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6028,'RTW','Return To Work Request Maintenance',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTBE') 
 BEGIN	
	INSERT INTO [SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) 
	VALUES ('LTBE','The case {0} with case instance id {1} at step {2} is due on {3}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
 END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTAE') 
BEGIN	
	INSERT INTO [SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTAE','The case {0} with case instance id {1} at step {2} is delayed whose due date is on {3}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTSA') 
 BEGIN	
	INSERT INTO [SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTSA','The case {0} with case instance id {1} at step {2} is suspended since {3}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTOE') 
 BEGIN
	INSERT INTO [SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTOE','The case {0} with case instance id {1} at step {2} is due now.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTBE') 
 BEGIN	
	INSERT INTO [SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTNA','The case {0} with case instance id {1} at step {2} is un assigned.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_PROCESS_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTAE') 
 BEGIN	
	INSERT INTO SGW_BPM_PROCESS_ESC_MESSAGES (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTAE','The process {0} with case instance id {1} is delayed whose due date is on {2}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
 END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_PROCESS_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTBE') 
BEGIN
	INSERT INTO SGW_BPM_PROCESS_ESC_MESSAGES (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTBE','The process {0} with case instance id {1} is due on {2}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_PROCESS_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTOE') 
 BEGIN
	INSERT INTO SGW_BPM_PROCESS_ESC_MESSAGES (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTOE','The process {0} with case instance id {1} is due now.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
 END
GO

IF EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'SETTING_VALUE'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_SETTINGS'))
BEGIN
	ALTER TABLE SGS_SYSTEM_SETTINGS
	ALTER COLUMN SETTING_VALUE VARCHAR(2000) NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: SETTING_VALUE NOT EXISTS IN THE TABLE SGS_SYSTEM_SETTINGS'
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].SGS_SYSTEM_SETTINGS WHERE SETTING_NAME = 'CustomAssemblyInfo')
BEGIN
INSERT [dbo].[SGS_SYSTEM_SETTINGS] ([SETTING_NAME], [SETTING_TYPE], [SETTING_VALUE], [ENCRYPTED_FLAG],[REFRESHABLE]) 
VALUES ('CustomAssemblyInfo', N'string', N'[{"Assembly":"NeoBaseCommon","Namespace":"NeoBase.Common"},{"Assembly":"NeoBaseSystemManagement","Namespace":"NeoBase.SystemManagement"},{"Assembly":"NeoBaseWebPortalSecurity","Namespace":"NeoBase.WebPortalSecurity"}]', NULL,NULL);
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 3008) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3008, 'Instance Priority', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3008 AND CODE_VALUE = 'HIGH') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3008,'HIGH','High',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3008 AND CODE_VALUE = 'NORM') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3008,'NORM','Normal',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2021) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021, 'BPM - Request - Source', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'BTCH') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'BTCH','Batch',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'INDX') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'INDX','Scanning & Indexing',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'MSGF') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'MSGF','Message Flow',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'ONLI') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'ONLI','Online',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO
 IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1569))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1569, 'Please set Process Type to initiate the process.',20002001, 'E',  NULL, NULL,20002001, NULL , GETDATE(), 'vijayw', GETDATE(), 'vijayw', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1573))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1573, 'Process can not be Initiated for both Person and Organisation.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'vivekb', GETDATE(), 'vivekb', 0)
END
GO
 
 IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1541))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1541, 'Person ID entered is invalid. Please select a valid Person ID.',20002001, 'E', NULL, NULL,20002001, NULL , GETDATE(), 'admin', GETDATE(), 'admin', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1542))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1542, 'Organization ID entered is invalid. Please select a valid Organization ID.',20002001, 'E',  NULL, NULL,20002001, NULL , GETDATE(), 'admin', GETDATE(), 'admin', 0)
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7001))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7001, 'MPID is mandatory to Initiate BPM.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7002))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7002, 'Source is mandatory to Initiate BPM.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7003))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7003, 'Retiree ineligible to Return to Work.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO

---ERTW---
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7011))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7011, 'Effective Date is mandatory.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7012))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7012, 'Please resume all eligible payee accounts.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7015))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7015, 'Request Type is mandatory to initiate BPM.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7016))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7016, 'Atleast one payee account is suspended status.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7017))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7017, 'Participant is not Pension Retiree.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 7018))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID], [RESPONSIBILITY_VALUE],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (7018, '{0} - Read Only Mode.',16, 'E', NULL, NULL,16, NULL , GETDATE(), 'BPM', GETDATE(), 'BPM', 0)
END
GO
---END ERTW---

IF EXISTS (SELECT 1 FROM dbo.SGS_MESSAGES WHERE [MESSAGE_ID] =	1521)
	PRINT 'Record with [MESSAGE_ID] = ''1521'' already exist in SGS_MESSAGES Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [MESSAGE_ID] = ''1521'' in SGS_MESSAGES Table'
		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(1521,'An external BPM activity cannot be reassigned.',16,'E',NULL,NULL,16,NULL,'sadimulam','May 18 2010 12:00:00:000AM','sadimulam','May 18 2010 12:00:00:000AM',0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_MESSAGES WHERE [MESSAGE_ID] =	1522)
	PRINT 'Record with [MESSAGE_ID] = ''1522'' already exist in SGS_MESSAGES Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [MESSAGE_ID] = ''1522'' in SGS_MESSAGES Table'
		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(1522,'The work items have been re-assigned to {0}.',16,'I',NULL,NULL,16,NULL,'sadimulam','May 18 2010 12:00:00:000AM','sadimulam','May 18 2010 12:00:00:000AM',0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_MESSAGES WHERE [MESSAGE_ID] =	1523)
	PRINT 'Record with [MESSAGE_ID] = ''1523'' already exist in SGS_MESSAGES Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [MESSAGE_ID] = ''1523'' in SGS_MESSAGES Table'
		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(1523,'Not all work items were able to be re-assigned. Please check security permissions.',16,'I',NULL,NULL,16,NULL,'sadimulam','May 18 2010 12:00:00:000AM','sadimulam','May 18 2010 12:00:00:000AM',0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_MESSAGES WHERE [MESSAGE_ID] =	1533)
	PRINT 'Record with [MESSAGE_ID] = ''1533'' already exist in SGS_MESSAGES Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [MESSAGE_ID] = ''1533'' in SGS_MESSAGES Table'
		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(1533,'No notes have been entered.',16,'E',NULL,NULL,16,NULL, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
	END
GO
---------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_MESSAGES WHERE MESSAGE_ID=1538)
	BEGIN		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES(1538,'For Reassignment User ID is required.',16,'E',NULL,NULL,16,'','elayaraja','Dec 11 2007  6:37:33:277PM','elayaraja','Dec 11 2007  6:37:33:277PM',0)
	END
ELSE
	BEGIN
		PRINT 'RECORD ALREADY EXISTS'
	END
---------------------------------------------------------------------------------------------------------------------

IF EXISTS (SELECT 1 FROM dbo.SGS_MESSAGES WHERE [MESSAGE_ID] =	1600)
	PRINT 'Record with [MESSAGE_ID] = ''1600'' already exist in SGS_MESSAGES Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [MESSAGE_ID] = ''1600'' in SGS_MESSAGES Table'
		
		INSERT dbo.SGS_MESSAGES ([MESSAGE_ID],[DISPLAY_MESSAGE],[SEVERITY_ID],[SEVERITY_VALUE],[INTERNAL_INSTRUCTIONS],[EMPLOYER_INSTRUCTIONS],[RESPONSIBILITY_ID],[RESPONSIBILITY_VALUE],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(1600,'MPID entered is invalid. Please enter a valid MPID..',16,'E',NULL,NULL,16,NULL,'BPM', GETDATE(), 'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE WHERE CODE_ID = 7099))
BEGIN 
	INSERT [dbo].[SGS_CODE] ([CODE_ID], [DESCRIPTION], [DATA1_CAPTION], [DATA1_TYPE], [DATA2_CAPTION], [DATA2_TYPE], [DATA3_CAPTION], [DATA3_TYPE], [FIRST_LOOKUP_ITEM], [FIRST_MAINTENANCE_ITEM], [COMMENTS], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (7099, N'Return To Work Request Status', NULL, NULL, NULL, NULL, NULL, NULL, N'All', NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE WHERE CODE_ID = 8000))
BEGIN 
	INSERT [dbo].[SGS_CODE] ([CODE_ID], [DESCRIPTION], [DATA1_CAPTION], [DATA1_TYPE], [DATA2_CAPTION], [DATA2_TYPE], [DATA3_CAPTION], [DATA3_TYPE], [FIRST_LOOKUP_ITEM], [FIRST_MAINTENANCE_ITEM], [COMMENTS], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
    VALUES (8000, N'Return To Work Request Source', NULL, NULL, NULL, NULL, NULL, NULL, N'All', NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE WHERE CODE_ID = 8001))
BEGIN 
	INSERT [dbo].[SGS_CODE] ([CODE_ID], [DESCRIPTION], [DATA1_CAPTION], [DATA1_TYPE], [DATA2_CAPTION], [DATA2_TYPE], [DATA3_CAPTION], [DATA3_TYPE], [FIRST_LOOKUP_ITEM], [FIRST_MAINTENANCE_ITEM], [COMMENTS], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
    VALUES (8001, N'Return To Work Request Type', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 7099 AND CODE_VALUE='CANC'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ([CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (7099, N'CANC', N'Cancelled', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 7099 AND CODE_VALUE='PRCD'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ([CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (7099, N'PRCD', N'Processed', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 7099 AND CODE_VALUE='REVW'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ([CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
	 VALUES (7099, N'REVW', N'Review', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 7099 AND CODE_VALUE='VALD'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ( [CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (7099, N'VALD', N'Valid', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)	
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 8000 AND CODE_VALUE='BTCH'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ( [CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
	 VALUES ( 8000, N'BTCH', N'Batch', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 8000 AND CODE_VALUE='INDX'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ( [CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES ( 8000, N'INDX', N'Indexing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)	
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 8000 AND CODE_VALUE='ONLI'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ( [CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (8000, N'ONLI', N'Online', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0) 
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 8001 AND CODE_VALUE='RTWO'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ([CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (8001, N'RTWO', N'Return To Work', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 8001 AND CODE_VALUE='ERTW'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ([CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (8001, N'ERTW', N'End Return To Work', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE WHERE CODE_ID = 8002))
BEGIN 
	INSERT [dbo].[SGS_CODE] ([CODE_ID], [DESCRIPTION], [DATA1_CAPTION], [DATA1_TYPE], [DATA2_CAPTION], [DATA2_TYPE], [DATA3_CAPTION], [DATA3_TYPE], [FIRST_LOOKUP_ITEM], [FIRST_MAINTENANCE_ITEM], [COMMENTS], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
    VALUES (8002, N'Return To Work Blackout Days', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
	END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE CODE_ID = 8002 AND CODE_VALUE='DAYS'))
BEGIN 
	INSERT [dbo].[SGS_CODE_VALUE] ( [CODE_ID], [CODE_VALUE], [DESCRIPTION], [DATA1], [DATA2], [DATA3], [COMMENTS], [START_DATE], [END_DATE], [CODE_VALUE_ORDER], [LEGACY_CODE_ID], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) 
	VALUES (8002, N'DAYS', N'Blackout Days', 20, 23, 24, NULL, NULL, NULL, NULL, NULL, N'BPM', GETDATE(), N'BPM', GETDATE(), 0) 
	END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2008) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2008, 'BPM - Work Pool Views', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2008 AND CODE_VALUE = 'ASWO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2008,'ASWO','Assigned Work',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2008 AND CODE_VALUE = 'COWO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2008,'COWO','Completed Work',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2008 AND CODE_VALUE = 'SUWO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2008,'SUWO','Suspended Work',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2008 AND CODE_VALUE = 'WKPO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2008,'WKPO','Work Pool',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2008 AND [CODE_VALUE] = 'OVED')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2008,'OVED','Overdue Work',NULL,NULL,NULL,NULL,NULL,NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2009) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009, 'BPM - Event - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2009 AND CODE_VALUE = 'ACTV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2009 AND CODE_VALUE = 'EXCD') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009,'EXCD','Excluded',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2009 AND CODE_VALUE = 'INAC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009,'INAC','Inactive',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO
-----------------------------------------------------------------------------------------------------------------


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE WHERE [CODE_ID] =	2010)
	PRINT 'Record with [CODE_ID] = ''2010'' already exist in SGS_CODE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [CODE_ID] = ''2010'' in SGS_CODE Table'
		
		INSERT dbo.SGS_CODE ([CODE_ID],[DESCRIPTION],[DATA1_CAPTION],[DATA1_TYPE],[DATA2_CAPTION],[DATA2_TYPE],[DATA3_CAPTION],[DATA3_TYPE],[FIRST_LOOKUP_ITEM],[FIRST_MAINTENANCE_ITEM],[COMMENTS],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2010,'BPM - Event - Type',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2010 AND [CODE_VALUE] = 'DOC')
	PRINT 'Record with combination [CODE_ID] = 2010 and [CODE_VALUE] = ''DOC'' already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] = 2010 and [CODE_VALUE] = ''DOC'' in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2010,'DOC','Document',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2010 AND [CODE_VALUE] = 'EML')
	PRINT 'Record with combination [CODE_ID] = 2010 and [CODE_VALUE] = ''EML'' already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] = 2010 and [CODE_VALUE] = ''EML'' in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2010,'EML','Email',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2010 AND [CODE_VALUE] = 'FAX')
	PRINT 'Record with combination [CODE_ID] = 2010 and [CODE_VALUE] = ''FAX'' already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] = 2010 and [CODE_VALUE] = ''FAX'' in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2010,'FAX','FAX',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2010 AND [CODE_VALUE] = 'SCRN')
	PRINT 'Record with combination [CODE_ID] = 2010 and [CODE_VALUE]= ''SCRN'' already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] = 2010 and [CODE_VALUE]= ''SCRN'' in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2010,'SCRN','Screen',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

----------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2011) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011, 'BPM - Activity Instance - Suspension Reason', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'AMRR')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'AMRR','Awaiting Member / Recipients Response',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'RBMR')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'RBMR','Requested by Member / Recipient',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SERN')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SERN','Employer Response Needed',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SIIR')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SIIR','Incorrect Information Received',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SIRN')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SIRN','Internal Response Needed',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRAW')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRAW','Awaiting BPM',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO
IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRMI')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRMI','Missing Information',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRCI')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRCI','Certification Issue',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SREC')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SREC','Employer Certification',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRFP')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRFP','Future Date Processing',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRID')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRID','Incomplete Data',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRMR')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRMR','Management Review',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO
IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SROT')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SROT','Other',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2011 AND [CODE_VALUE] = 'SRPD')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2011,'SRPD','Pend',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2021) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021, 'BPM - Request - Source', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'BTCH') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'BTCH','Batch',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'INDX') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'INDX','Scanning & Indexing',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'MSGF') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'MSGF','Message Flow',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2021 AND CODE_VALUE = 'ONLI') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'ONLI','Online',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2031) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031, 'Activity Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BACA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'BACA','Calling Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BAEV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'BAEV','Base Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BAGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'BAGW','Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BATK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'BATK','Base Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BATV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'BATV','Base Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BRCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'BRCA','Calling Global Business Rule Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'COGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'COGW','Complex Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'EBGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'EBGW','Event Based Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'EDEV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'EDEV','End Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'EXGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'EXGW','Exclusive Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'GTCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'GTCA','Calling Global Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'IMCE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'IMCE','Intermediate Message Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'INCE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'INCE','Intermediate Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'INGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'INGW','Inclusive Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'INTE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'INTE','Intermediate Throw Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'ITCE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'ITCE','Intermediate Timer Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'MACA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'MACA','Calling Global Manual Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'MATK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'MATK','Manual Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'PAGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'PAGW','Parallel Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'PRCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'PRCA','Calling Process',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'RMTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'RMTK','Receive Message Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'RUTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'RUTK','Business Rule Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SCCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'SCCA','Calling Global Script Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SCTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'SCTK','Script Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SMTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'SMTK','Send Message Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SPTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'SPTK','Sub Process',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SRTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'SRTK','Service Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'STEV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'STEV','Start Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'USCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'USCA','Calling Global User Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'USTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2031,'USTK','User Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE WHERE [CODE_ID] =	3002)
	PRINT 'Record with [CODE_ID] = ''3002'' already exist in SGS_CODE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [CODE_ID] = ''3002'' in SGS_CODE Table'
		
		INSERT dbo.SGS_CODE ([CODE_ID],[DESCRIPTION],[DATA1_CAPTION],[DATA1_TYPE],[DATA2_CAPTION],[DATA2_TYPE],[DATA3_CAPTION],[DATA3_TYPE],[FIRST_LOOKUP_ITEM],[FIRST_MAINTENANCE_ITEM],[COMMENTS],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3002,'BPM - Process - Status',NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 3002 AND [CODE_VALUE] = 'ACTV')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3002,'ACTV','Active',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 3002 AND [CODE_VALUE] = 'INAC')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3002,'INAC','Inactive',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE WHERE [CODE_ID] =	3003)
	PRINT 'Record with [CODE_ID] = ''3003'' already exist in SGS_CODE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [CODE_ID] = ''3003'' in SGS_CODE Table'
		
		INSERT dbo.SGS_CODE ([CODE_ID],[DESCRIPTION],[DATA1_CAPTION],[DATA1_TYPE],[DATA2_CAPTION],[DATA2_TYPE],[DATA3_CAPTION],[DATA3_TYPE],[FIRST_LOOKUP_ITEM],[FIRST_MAINTENANCE_ITEM],[COMMENTS],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3003,'BPM - Process - Type',NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 3003 AND [CODE_VALUE] = 'NONE')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3003,'NONE','None',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 3003 AND [CODE_VALUE] = 'ORGN')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3003,'ORGN','Organization',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 3003 AND [CODE_VALUE] = 'PERS')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(3003,'PERS','Person',NULL,'',NULL,NULL,NULL,NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2004) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004, 'BPM - Process Instance - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'ABRT') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'ABRT','Aborted',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'INPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'INPC','In Progress',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'PROC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'PROC','Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'TERM') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'TERM','Terminated',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'UNPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'UNPC','Not Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE WHERE [CODE_ID] =	2005)
	PRINT 'Record with [CODE_ID] = ''2005'' already exist in SGS_CODE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [CODE_ID] = ''2005'' in SGS_CODE Table'
		
		INSERT dbo.SGS_CODE ([CODE_ID],[DESCRIPTION],[DATA1_CAPTION],[DATA1_TYPE],[DATA2_CAPTION],[DATA2_TYPE],[DATA3_CAPTION],[DATA3_TYPE],[FIRST_LOOKUP_ITEM],[FIRST_MAINTENANCE_ITEM],[COMMENTS],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2005,'BPM - Event Type Action',NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO


IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2005 AND [CODE_VALUE] = 'ALIN')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2005,'ALIN','Initiate New',NULL,NULL,NULL,NULL,NULL,NULL,1,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2005 AND [CODE_VALUE] = 'INRE')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2005,'INRE','Initiate Or Resume',NULL,NULL,NULL,NULL,NULL,NULL,2,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2005 AND [CODE_VALUE] = 'RENE')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2005,'RENE','Resume',NULL,NULL,NULL,NULL,NULL,NULL,3,NULL,'BPM',GETDATE(),'BPM',GETDATE(),0)
	END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2007) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007, 'BPM - Activity Instance - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'CANC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'CANC','Cancelled',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'FAIL') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'FAIL','Failed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'INPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'INPC','In Progress',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'PROC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'PROC','Completed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RCHK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RCHK','Recheck',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RESU') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RESU','Resumed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RGEN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RGEN','Regenerated',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RSEN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RSEN','Resend',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RTRN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RTRN','Returned',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RWRK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RWRK','Rework',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'SUSP') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'SUSP','Suspended',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'UNPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'UNPC','Initiated',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RELE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RELE','Released',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'APPR') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'APPR','Approved',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'REJT') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'REJT','Rejected',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

------------------------------------------------------------------------------------------------------------------------
--CREATED BY	:	Rahul Mane
--CREATED ON	:   30 Oct 2017
--DESCRIPTION	:	Code ID for Report Formats
------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT *	FROM SGS_CODE WHERE CODE_ID = 3006)
BEGIN
INSERT INTO dbo.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'Process Escalation Lapse Type', NULL, NULL, NULL, NULL, NULL, NULL, 'All', NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT  1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3006 AND CODE_VALUE = 'LTAE')
BEGIN
INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'LTAE', 'After Expiration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT  1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3006 AND CODE_VALUE = 'LTBE')
BEGIN
INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'LTBE', 'Before Expiration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT  1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3006 AND CODE_VALUE = 'LTOE')
BEGIN
INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'LTOE', 'On Expiration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 6412) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6412, 'Escalation Lapse Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6412 AND CODE_VALUE = 'LTAE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6412,'LTAE','After Expiration',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6412 AND CODE_VALUE = 'LTBE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6412,'LTBE','Before Expiration',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6412 AND CODE_VALUE = 'LTNA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6412,'LTNA','Un Assigned Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6412 AND CODE_VALUE = 'LTOE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6412,'LTOE','On Expiration',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 6413) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6413, 'Escalation Recur Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6413 AND CODE_VALUE = 'RTET') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6413,'RTET','Each Recur Time',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6413 AND CODE_VALUE = 'RTNO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6413,'RTNO','None',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 6414) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6414, 'Escalation Instance Status', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6414 AND CODE_VALUE = 'ACTV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6414,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6414 AND CODE_VALUE = 'INTV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6414,'INTV','In Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO


------------------------------------------------------------------------------------------------------------------------
--DESCRIPTION	:	For BPM process restriction  : 2034
------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_CODE WHERE CODE_ID = 2034) 
BEGIN
	INSERT INTO SGS_CODE(CODE_ID,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
	VALUES (2034,'Restrict Or Notify Process','system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 2034 AND CODE_VALUE = 'RETR')
BEGIN
	INSERT INTO SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
	VALUES (2034,'RETR','Restrict','system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 2034 AND CODE_VALUE = 'NOTY') 
BEGIN 
	 INSERT INTO SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
	VALUES (2034,'NOTY','Notify','system',GETDATE(),'system',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 6416) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416, 'Activity Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'BACA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'BACA','Calling Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'BAEV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'BAEV','Base Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'BAGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'BAGW','Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'BATK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'BATK','Base Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'BATV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'BATV','Base Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'BRCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'BRCA','Calling Global Business Rule Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'COGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'COGW','Complex Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'EBGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'EBGW','Event Based Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'EDEV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'EDEV','End Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'EXGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'EXGW','Exclusive Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'GTCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'GTCA','Calling Global Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'IMCE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'IMCE','Intermediate Message Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'INCE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'INCE','Intermediate Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'INGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'INGW','Inclusive Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'INTE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'INTE','Intermediate Throw Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'ITCE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'ITCE','Intermediate Timer Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'MACA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'MACA','Calling Global Manual Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'MATK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'MATK','Manual Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'PAGW') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'PAGW','Parallel Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'PRCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'PRCA','Calling Process',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'RMTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'RMTK','Receive Message Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'RUTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'RUTK','Business Rule Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'SCCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'SCCA','Calling Global Script Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'SCTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'SCTK','Script Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'SMTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'SMTK','Send Message Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'SPTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'SPTK','Sub Process',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'SRTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'SRTK','Service Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'STEV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'STEV','Start Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'USCA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'USCA','Calling Global User Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 6416 AND CODE_VALUE = 'USTK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (6416,'USTK','User Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

------------------------------------------------------------------------------------------------------------------
IF EXISTS (SELECT 1 FROM dbo.SGS_CODE WHERE [CODE_ID] =	2029)
	PRINT 'Record with [CODE_ID] = ''2029'' already exist in SGS_CODE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with [CODE_ID] = ''2029'' in SGS_CODE Table'
		INSERT dbo.SGS_CODE ([CODE_ID],[DESCRIPTION],[DATA1_CAPTION],[DATA1_TYPE],[DATA2_CAPTION],[DATA2_TYPE],[DATA3_CAPTION],[DATA3_TYPE],[FIRST_LOOKUP_ITEM],[FIRST_MAINTENANCE_ITEM],[COMMENTS],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2029,'BPM Notes',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	END
GO

IF EXISTS (SELECT 1 FROM dbo.SGS_CODE_VALUE WHERE [CODE_ID] = 2029 AND [CODE_VALUE] = 'BPNT')
	PRINT 'Record with combination [CODE_ID] and [CODE_VALUE] already exist in SGS_CODE_VALUE Table'
ELSE
	BEGIN
		PRINT 'Inserting Record with combination [CODE_ID] and [CODE_VALUE] in SGS_CODE_VALUE Table'
		INSERT dbo.SGS_CODE_VALUE ([CODE_ID],[CODE_VALUE],[DESCRIPTION],[DATA1],[DATA2],[DATA3],[COMMENTS],[START_DATE],[END_DATE],[CODE_VALUE_ORDER],[LEGACY_CODE_ID],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
		VALUES(2029,'BPNT','BPM Notes','BPNT',NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	END
GO

-----------------------------------------------------SGS_CODE-------------------------------------------------
IF NOT EXISTS(SELECT * FROM SGS_CODE WHERE CODE_ID = 3001) 
BEGIN
	INSERT INTO SGS_CODE(CODE_ID,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
	VALUES (3001,'BPM - Request - Status','system',GETDATE(),'system',GETDATE(),0)
END
GO

--------------------------------------------------SGS_CODE_VALUE-------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3001 AND CODE_VALUE = 'IGNO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3001,'IGNO','Ignored',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3001 AND CODE_VALUE = 'PEND') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3001,'PEND','Pending',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3001 AND CODE_VALUE = 'PICK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3001,'PICK','Picked',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3001 AND CODE_VALUE = 'PROC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3001,'PROC','Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3001 AND CODE_VALUE = 'UNPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3001,'UNPC','Not Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 3001 AND CODE_VALUE = 'FAIL') 
BEGIN
INSERT INTO SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (3001,'FAIL','Failed','BPM',GETDATE(),'BPM',GETDATE(),0) 
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE WHERE CODE_ID = 3010) 
BEGIN
INSERT INTO SGS_CODE(CODE_ID,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (3010,'Engine Id','BPM',GETDATE(),'BPM',GETDATE(),0); 
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 3010 AND CODE_VALUE = 'DFLT') 
BEGIN
INSERT INTO SGS_CODE_VALUE(CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (3010,'DFLT','Default','BPM',GETDATE(),'BPM',GETDATE(),0)
END
GO

--------------------------------------------------SGS_FWK_MESSAGES--------------------------------------------------
IF NOT EXISTS (SELECT * FROM [dbo].[SGS_FWK_MESSAGES] WHERE [MESSAGE_ID] = 1524)
BEGIN
INSERT [dbo].[SGS_FWK_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [CATEGORY_NAME], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
VALUES (1524, N'Process is required', 16, N'I', N'FWK', N'BPM', GETDATE(), N'BPM', GETDATE(), 0)
END
GO
--------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM [dbo].[SGS_FWK_MESSAGES] WHERE [MESSAGE_ID] = 1550)
BEGIN
INSERT [dbo].[SGS_FWK_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [CATEGORY_NAME], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
VALUES (1550, N'BPM process initiation failed. This BPM process already exists for this person.', 16, N'I', N'FWK', N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), 0)
END
GO
----------------------------------------------------------------------------------------------------

IF NOT EXISTS (SELECT * FROM [dbo].[SGS_FWK_MESSAGES] WHERE [MESSAGE_ID] = 1549)
BEGIN
INSERT [dbo].[SGS_FWK_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [CATEGORY_NAME], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
VALUES (1549, N'BPM process initiation failed. This BPM process already exists for this organization.', 16, N'I', N'FWK', N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), 0)
END
GO
----------------------------------------------------------------------------------------------------

DECLARE @MESSAGE_ID AS INT
DECLARE @MESSAGE_KEY AS VARCHAR(200)
DECLARE @DISPLAY_MESSAGE AS VARCHAR(MAX)
DECLARE @SEVERITY_ID AS INT
DECLARE @SEVERITY_VALUE AS VARCHAR(50)
DECLARE @CATEGORY_ID AS INT
DECLARE @CATEGORY_VALUE AS VARCHAR(50)
DECLARE @CATEGORY_NAME AS VARCHAR(50)
DECLARE @CREATED_BY AS VARCHAR(200)
DECLARE @CREATED_DATE AS DATETIME
DECLARE @UPDATE_SEQ AS INT
DECLARE @PRINT_MESSAGE_FLAG AS BIT
DECLARE @UPDATE_MESSAGE_FLAG AS BIT
DECLARE @PRINT_MESSAGE AS VARCHAR(100)
DECLARE @INSERT_MESSAGE AS VARCHAR(100)
DECLARE @UPDATE_MESSAGE AS VARCHAR(100)
DECLARE @EXISTS_MESSAGE AS VARCHAR(100)
DECLARE @MODIFIED_BY AS VARCHAR(200)
DECLARE @MODIFIED_DATE as DATETIME
----------------------------------------------------------------------------------------------------

SET @PRINT_MESSAGE_FLAG = 1   -- Flag to Print or Do not print Message after execution
SET @UPDATE_MESSAGE_FLAG = 1  -- Flag to Update the existing message

SET @PRINT_MESSAGE = 'MESSAGE {MESSAGE_TYPE} - MESSAGE_ID: {MESSAGE_ID} DISPLAY_MESSAGE: "{DISPLAY_MESSAGE}".'
SET @INSERT_MESSAGE = REPLACE(@PRINT_MESSAGE, '{MESSAGE_TYPE}', 'INSERTED')
SET @UPDATE_MESSAGE = REPLACE(@PRINT_MESSAGE, '{MESSAGE_TYPE}', 'UPDATED')
SET @EXISTS_MESSAGE = REPLACE(@PRINT_MESSAGE, '{MESSAGE_TYPE}', 'ALREADY EXISTS')

SET @CREATED_BY = 'FRAMEWORK'
SET @SEVERITY_ID = 16
SET @CATEGORY_ID = 256
SET @CREATED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @CATEGORY_NAME = 'FWK'
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 1526
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'Suspension Reason is required.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 1527
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'Suspension End Date is required.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 1528
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'Resume Action is required.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 1529
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'Suspension Notes are required.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 1560
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'Termination Reason is required.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 1543
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'End Date must be a current or future date.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
----------------------------------------------------------------------------------------------------

SET @MESSAGE_ID = 5128
SET @SEVERITY_ID = 16
SET @SEVERITY_VALUE = 'E'
SET @CATEGORY_NAME = 'FWK'
SET @DISPLAY_MESSAGE = 'Document Type is required.'
SET @CREATED_DATE = GETDATE()
SET @MODIFIED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @MESSAGE_KEY = NULL

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR MESSAGE_KEY = @MESSAGE_KEY OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO SGS_FWK_MESSAGES
	(MESSAGE_ID,    DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID,  @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE SGS_FWK_MESSAGES
		SET
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
GO
----------------------------------------------------------------------------------------------------
SET IDENTITY_INSERT [dbo].[SGS_ROLES] ON
IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_ROLES] WHERE ROLE_ID = 605 and ROLE_DESCRIPTION = 'Return To Work User')
BEGIN
INSERT INTO [dbo].[SGS_ROLES]
	    ([ROLE_ID],[ROLE_DESCRIPTION],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES
	   (605,'Return To Work User','BPM',GETDATE(),'BPM',GETDATE(),0)
END
SET IDENTITY_INSERT [dbo].[SGS_ROLES] OFF
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_RESOURCES] WHERE RESOURCE_DESCRIPTION = 'Return To Work Request' and RESOURCE_ID = 1100)
BEGIN
INSERT INTO [dbo].[SGS_RESOURCES]
           ([RESOURCE_ID], [RESOURCE_TYPE_ID], [RESOURCE_TYPE_VALUE], [RESOURCE_DESCRIPTION], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
     VALUES
           (1100, 12, 'F', 'Return To Work Request', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 605 and RESOURCE_ID = 1100)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (605, 1100, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

SET IDENTITY_INSERT [dbo].[SGS_ROLES] ON
IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_ROLES] WHERE ROLE_ID = 601 and ROLE_DESCRIPTION = 'Return To Work Analyst')
BEGIN
INSERT INTO [dbo].[SGS_ROLES]
	    ([ROLE_ID],[ROLE_DESCRIPTION],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES
	   (601,'Return To Work Analyst','BPM',GETDATE(),'BPM',GETDATE(),0)
END
SET IDENTITY_INSERT [dbo].[SGS_ROLES] OFF
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_RESOURCES] WHERE RESOURCE_DESCRIPTION = 'Return To Work Analyst' and RESOURCE_ID = 1101)
BEGIN
INSERT INTO [dbo].[SGS_RESOURCES]
           ([RESOURCE_ID], [RESOURCE_TYPE_ID], [RESOURCE_TYPE_VALUE], [RESOURCE_DESCRIPTION], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
     VALUES
           (1101, 12, 'F', 'Return To Work Analyst', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 601 and RESOURCE_ID = 1101)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (601, 1101, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 601 and RESOURCE_ID = 1100)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (601, 1100, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

SET IDENTITY_INSERT [dbo].[SGS_ROLES] ON
IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_ROLES] WHERE ROLE_ID = 606 and ROLE_DESCRIPTION = 'BPM User')
BEGIN
INSERT INTO [dbo].[SGS_ROLES]
	    ([ROLE_ID],[ROLE_DESCRIPTION],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES
	   (606,'BPM User','BPM',GETDATE(),'BPM',GETDATE(),0)
END
SET IDENTITY_INSERT [dbo].[SGS_ROLES] OFF
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007001)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007001, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007002)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007002, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007003)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007003, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007004)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007004, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007005)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007005, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007006)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007006, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007007)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007007, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007008)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007008, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007009)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007009, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007010)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007010, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007011)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007011, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007012)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007012, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007013)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007013, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007014)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007014, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007015)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007015, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007016)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007016, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007017)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007017, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007018)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007018, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007019)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007019, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007020)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007020, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007021)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007021, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007022)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007022, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007023)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007023, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007024)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007024, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 606 and RESOURCE_ID = 20007025)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (606, 20007025, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO
-----------------------------------------------------------------------------------------------------------------------------------------------------

IF EXISTS(SELECT * FROM information_schema.constraint_column_usage where constraint_name = 'FK_SGT_NOTES_SGW_PROCESS_INSTANCE')
BEGIN
	PRINT'DROPING FOREIGN KEY CONTRAINT ON PROCESS_INSTANCE_ID FROM SGT_NOTES TABLE'
	ALTER TABLE SGT_NOTES DROP CONSTRAINT FK_SGT_NOTES_SGW_PROCESS_INSTANCE
END
ELSE
BEGIN
	PRINT 'FOREIGN KEY CONTRAINT ON PROCESS_INSTANCE_ID FROM SGT_NOTES TABLE NOT EXISTS'
END
GO

IF NOT EXISTS(SELECT * FROM information_schema.constraint_column_usage where constraint_name = 'FK_SGT_NOTES_SGW_BPM_PROCESS_INSTANCE')
BEGIN
	PRINT'ADDING NEW FOREIGN KEY CONTRAINT ON PROCESS_INSTANCE_ID FROM SGT_NOTES TABLE'
	UPDATE SGT_NOTES SET PROCESS_INSTANCE_ID = NULL;
	ALTER TABLE SGT_NOTES ADD CONSTRAINT FK_SGT_NOTES_SGW_BPM_PROCESS_INSTANCE FOREIGN KEY (PROCESS_INSTANCE_ID)
	REFERENCES OPUS.dbo.SGW_BPM_PROCESS_INSTANCE (PROCESS_INSTANCE_ID);
END
ELSE
BEGIN
	PRINT 'FOREIGN KEY CONTRAINT ON PROCESS_INSTANCE_ID FROM SGT_NOTES TABLE EXISTS'
END
GO
-------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'APPLICATION_FORM_SENT'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD APPLICATION_FORM_SENT UDT_FLAG NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: APPLICATION_FORM_SENT ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

---------------------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'QDRO_LEGAL_REVIEW_REQUIRED'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD QDRO_LEGAL_REVIEW_REQUIRED UDT_FLAG NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: QDRO_LEGAL_REVIEW_REQUIRED ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

-----------------------------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'ELECTION_PACKET_SENT'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD ELECTION_PACKET_SENT UDT_FLAG NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: ELECTION_PACKET_SENT ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'ELECTION_PACKET_RECEIVED'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD ELECTION_PACKET_RECEIVED UDT_FLAG NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: ELECTION_PACKET_RECEIVED ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

------------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'SIGNED_APPLICATION_FORN_RECEIVED_DATE'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD SIGNED_APPLICATION_FORN_RECEIVED_DATE UDT_DATETIME NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: SIGNED_APPLICATION_FORN_RECEIVED_DATE ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

------------------------------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'QDRO_REVIEW_COMPLETED_DATE'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD QDRO_REVIEW_COMPLETED_DATE UDT_DATETIME NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: QDRO_REVIEW_COMPLETED_DATE ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

-----------------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'QDRO_AUDITOR_NAME'  AND OBJECT_ID = OBJECT_ID(N'SGT_PERSON_ACCOUNT'))
BEGIN
	ALTER TABLE SGT_PERSON_ACCOUNT
	ADD QDRO_AUDITOR_NAME varchar(200) NULL
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: QDRO_AUDITOR_NAME ALREADY EXISTS IN THE TABLE SGT_PERSON_ACCOUNT'
END
GO

------------------------------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS (SELECT 1 FROM SGS_COR_TEMPLATES WHERE TEMPLATE_NAME = 'RPT-0001')
BEGIN
	INSERT INTO SGS_COR_TEMPLATES 
		(TEMPLATE_NAME, TEMPLATE_DESC, TEMPLATE_GROUP_ID, TEMPLATE_GROUP_VALUE, ACTIVE_FLAG, DESTINATION_ID, DESTINATION_VALUE, ASSOCIATED_FORMS, CONTACT_ROLE_ID, CONTACT_ROLE_VALUE, BATCH_FLAG, ONLINE_FLAG, AUTO_PRINT_FLAG, PRINTER_NAME_ID, PRINTER_NAME_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ, IMAGE_DOC_CATEGORY_ID, IMAGE_DOC_CATEGORY_VALUE, FILENET_DOCUMENT_TYPE_ID, FILENET_DOCUMENT_TYPE_VALUE, DOC_TYPE, TEMPLATE_TYPE_ID, TEMPLATE_TYPE_VALUE) 
	VALUES 
		('RPT-0001','Month Of Suspendible Service Report', 19, 'MMBR', 'Y', 0, NULL, 'wfmReturnToWorkRequestMaintenance', 6011, NULL, 'N', 'N', 'N', 44, NULL, 'BPM', GETDATE(), 'BPM', GETDATE(), 0, 0, NULL, 0, NULL, 'MONTH OF SUSPENDIBLE SERVICE REPORT', NULL, 'REPT')
END
GO
------------------------------------------------------------------------------------------------------------------------------------------------------

SET IDENTITY_INSERT [dbo].[SGS_ROLES] ON
IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_ROLES] WHERE ROLE_ID = 604 and ROLE_DESCRIPTION = 'RSD Auditor')
BEGIN
INSERT INTO [dbo].[SGS_ROLES]
	    ([ROLE_ID],[ROLE_DESCRIPTION],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES
	   (604, 'RSD Auditor', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
SET IDENTITY_INSERT [dbo].[SGS_ROLES] OFF
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_RESOURCES] WHERE RESOURCE_DESCRIPTION = 'RSD Auditor' and RESOURCE_ID = 1104)
BEGIN
INSERT INTO [dbo].[SGS_RESOURCES]
           ([RESOURCE_ID], [RESOURCE_TYPE_ID], [RESOURCE_TYPE_VALUE], [RESOURCE_DESCRIPTION], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
     VALUES
           (1104, 12, 'F', 'RSD Auditor', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 604 and RESOURCE_ID = 1101)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (604, 1104, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

------------------------------------------------------------------------------------------------------------------------------------------------------

SET IDENTITY_INSERT [dbo].[SGS_ROLES] ON
IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_ROLES] WHERE ROLE_ID = 602 and ROLE_DESCRIPTION = 'Retirement Analyst')
BEGIN
INSERT INTO [dbo].[SGS_ROLES]
	    ([ROLE_ID],[ROLE_DESCRIPTION],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES
	   (602, 'Retirement Analyst', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
SET IDENTITY_INSERT [dbo].[SGS_ROLES] OFF
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_RESOURCES] WHERE RESOURCE_DESCRIPTION = 'Retirement Analyst' and RESOURCE_ID = 1102)
BEGIN
INSERT INTO [dbo].[SGS_RESOURCES]
           ([RESOURCE_ID], [RESOURCE_TYPE_ID], [RESOURCE_TYPE_VALUE], [RESOURCE_DESCRIPTION], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
     VALUES
           (1102, 12, 'F', 'Retirement Analyst', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 602 and RESOURCE_ID = 1102)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (602, 1102, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO
------------------------------------------------------------------------------------------------------------------------------------------------------

SET IDENTITY_INSERT [dbo].[SGS_ROLES] ON
IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_ROLES] WHERE ROLE_ID = 603 and ROLE_DESCRIPTION = 'Legal Document Reviewer')
BEGIN
INSERT INTO [dbo].[SGS_ROLES]
	    ([ROLE_ID],[ROLE_DESCRIPTION],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES
	   (603, 'Legal Document Reviewer', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
SET IDENTITY_INSERT [dbo].[SGS_ROLES] OFF
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_RESOURCES] WHERE RESOURCE_DESCRIPTION = 'Legal Document Reviewer' and RESOURCE_ID = 1103)
BEGIN
INSERT INTO [dbo].[SGS_RESOURCES]
           ([RESOURCE_ID], [RESOURCE_TYPE_ID], [RESOURCE_TYPE_VALUE], [RESOURCE_DESCRIPTION], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
     VALUES
           (1103, 12, 'F', 'Legal Document Reviewer', 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[SGS_SECURITY] WHERE ROLE_ID = 603 and RESOURCE_ID = 1103)
BEGIN
INSERT INTO [dbo].[SGS_SECURITY]
           ([ROLE_ID], [RESOURCE_ID], [SECURITY_ID], [SECURITY_VALUE], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE],[UPDATE_SEQ])
     VALUES
           (603, 1103, 11, 5, 'BPM', GETDATE(), 'BPM', GETDATE(), 0)
END
GO
------------------------------------------------------------------------------------------------------------------------------------------------------




