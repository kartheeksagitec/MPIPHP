<entity ID="entPayeeAccount" sfwActive="True" sfwStatus="Review" sfwType="BusinessRule" sfwMainCDO="icdoPayeeAccount" sfwObjectID="busPayeeAccount" sfwTableName="sgt_payee_account" sfwView="False" sfwDataObjectID="doPayeeAccount">
  <rules>
    <rule ID="VisibileRule-ResumeButton" sfwExpression="(RFunc.EvaluateRule(&quot;VisibleRule-ReEmpFlag&quot;, this)) &amp;&amp; &#xA;!(this.CheckIfConversionRecordForReemployedParticipants() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRuel-DeathNotificationStatus" sfwExpression="(this.icdoPayeeAccount.istrDeathNotificationStatus == &quot;CRTF&quot;) &amp;&amp; &#xA;!(this.IsPayeeAccountStatusCancelled() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule - ShowConvertBenefitOptionButton" sfwExpression="(this.ShowConvertBenefitOptionButton() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-AdjustmentPaymentEligibleFlag" sfwExpression="(this.icdoPayeeAccount.adjustment_payment_eligible_flag == &quot;Y&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ApplicationID" sfwExpression="(this.icdoPayeeAccount.iintBenefitApplicationID &gt; 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-CalculationID" sfwExpression="(this.icdoPayeeAccount.iintBenefitCalculationID &gt; 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-DROApplicationID" sfwExpression="(this.icdoPayeeAccount.iintDROApplicationID &gt; 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-DROCalculationID" sfwExpression="(this.icdoPayeeAccount.iintDROCalculationID &gt; 0)" sfwObjectBased="True" />
    <rule ID="VisibleRuleForMPIAmounts" sfwExpression="(this.icdoPayeeAccount.iintPlanId == 2)" sfwObjectBased="True" />
    <rule ID="VisibleRule-NextPaymentDetails" sfwExpression="!(this.IsPayeeAccountStatusCompletedORCancelled() == True) &amp;&amp; (this.idecRetroSpkAmount == 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ReCalculateBenefit" sfwExpression="((this.icdoPayeeAccount.retirement_type_value == &quot;MIND&quot;) &amp;&amp; &#xA;(this.icdoPayeeAccount.iintPlanId == 1) &amp;&amp; &#xA;!(this.IsPayeeAccountStatusCancelled() == True)) || &#xA;(!(this.IsPayeeAccountStatusCancelled() == True))&#xA;&amp;&amp; this.icdoPayeeAccount.benefit_account_type_value != &quot;DDPT&quot;" sfwObjectBased="True" />
    <rule ID="VisibleRule-ReEmpFlag" sfwExpression="!(this.icdoPayeeAccount.reemployed_flag != &quot;Y&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ReEmployedFlagForEADB" sfwExpression="!(this.icdoPayeeAccount.reemployed_flag_from_eadb != &quot;Y&quot;) &amp;&amp; &#xA;(this.icdoPayeeAccount.reemployed_flag != &quot;Y&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ReemploymentButton" sfwExpression="(this.icdoPayeeAccount.reemployed_flag != &quot;Y&quot;) &amp;&amp; &#xA;!(this.IsPayeeAccountStatusCancelled() == True)&#xA;&amp;&amp; (this.icdoPayeeAccount.benefit_account_type_value != &quot;DDPT&quot;)&#xA;&amp;&amp; !(this.IsBPMInProgress() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ReEmploymentOverrideFlag" sfwExpression="!(this.icdoPayeeAccount.iintPlanId == 1) &amp;&amp; &#xA;!(this.icdoPayeeAccount.iintPlanId == 2) &amp;&amp; &#xA;!(this.icdoPayeeAccount.iintPlanId == 9) &amp;&amp; &#xA;!(this.icdoPayeeAccount.reemployed_flag_from_eadb != &quot;Y&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRule-RefreshCalculationButton" sfwExpression="!(this.icdoPayeeAccount.iintBenefitCalculationID &gt; 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ReleaseWithholdingButton" sfwExpression="(this.ShowReleaseWithholding() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ResumeConversionButton" sfwExpression="(RFunc.EvaluateRule(&quot;VisibleRule-ReEmpFlag&quot;, this)) &amp;&amp; &#xA;(this.CheckIfConversionRecordForReemployedParticipants() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-RolloverInformation" sfwExpression="(this.icdoPayeeAccount.benefit_account_type_value == &quot;WDRL&quot;) || &#xA;(this.icdoPayeeAccount.istrBenefitOption == &quot;Lump Sum&quot;) || &#xA;(this.ShowRolloverOptionForRetireePayeeAccount() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-SaveButton" sfwExpression="!(this.IsPayeeAccountStatusCancelled() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ShowRetroCalculationTab" sfwExpression="!(this.icdoPayeeAccount.istrCalculationType == &quot;ADCL&quot;) &amp;&amp; &#xA;(this.icdoPayeeAccount.reference_id == 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-TransferTab" sfwExpression="(this.icdoPayeeAccount.iintPlanId == 1) &amp;&amp; &#xA;(this.CheckAnnuity() == true)" sfwObjectBased="True" />
    <rule ID="VisibleRule-VerifiedBox" sfwExpression="(this.CheckMonthlyLimit() == TRUE)" sfwObjectBased="True" />
    <rule ID="VisibleRule-PayeeID" sfwExpression="!(RFunc.GetValue&lt;Int32&gt;(this, &quot;ibusPayee.icdoPerson.person_id&quot;) == 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-OrgID" sfwExpression="(RFunc.GetValue&lt;Int32&gt;(this, &quot;ibusPayee.icdoPerson.person_id&quot;) == 0)" sfwObjectBased="True" />
    <rule ID="VisibleRule-LoginUser" sfwExpression="(this.CheckIfManagerLogin() == true)" sfwObjectBased="True" />
    <rule ID="VisibilityRule-BenefitLookupButton" sfwRuleType="Validation" sfwExpression="this.icdoPayeeAccount.benefit_account_type_value != &quot;QDRO&quot; &amp;&amp; this.icdoPayeeAccount.benefit_account_type_value != &quot;DDPT&quot;" sfwObjectBased="True" />
    <rule ID="VisibilityRule-QDROCalcLookup" sfwRuleType="Validation" sfwExpression="this.icdoPayeeAccount.benefit_account_type_value == &quot;QDRO&quot;" sfwObjectBased="True" />
    <rule ID="VisibleRule-NextSpecialPaymentDetails" sfwRuleType="Validation" sfwExpression="!(this.IsPayeeAccountStatusCompletedORCancelled() == True) &amp;&amp; (this.idecRetroSpkAmount &gt; 0)" sfwObjectBased="True" />
    <rule ID="VisibilityRule - DeceasedPayeeCompletedPayeeAccount" sfwRuleType="Validation" sfwExpression="(this.IsPayeeAccountStatusCompletedORCancelled() == True) &amp;&amp; (this.icdoPayeeAccount.person_id &gt; 0 &amp;&amp; this.ibusPayee.icdoPerson.date_of_death != DateTime.MinValue)" sfwObjectBased="True" />
    <rule ID="VisibleRule - PrePostRetirementDeathPayeeAccount" sfwRuleType="Validation" sfwExpression="(this.icdoPayeeAccount.benefit_account_type_value == &quot;DDPT&quot;) || (this.icdoPayeeAccount.benefit_account_type_value == &quot;DDPR&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRule-ConfirmationLetterButton" sfwRuleType="Validation" sfwExpression="this.GetPaymentDirectiveType() != 2" sfwObjectBased="True" />
    <rule ID="VisibleRule-VerificationLetterButton" sfwRuleType="Validation" sfwExpression="this.GetPaymentDirectiveType() == 1" sfwObjectBased="True" />
    <rule ID="ReadOnlyRule-PaymentCycleDropdown" sfwRuleType="Validation" sfwExpression="this.CheckPaymentDirective()" sfwObjectBased="True" />
    <rule ID="ReadOnlyRule-DeletedPaymentDirectivesDropDown" sfwRuleType="Validation" sfwExpression="CheckDeletedPaymentDirective()" sfwObjectBased="True" />
    <rule ID="VisibleRule-DeleteLatestPDButton" sfwRuleType="Validation" sfwExpression="(this.CheckIfStaff2Login() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRule-AddIAPPaybackButton" sfwRuleType="Validation" sfwExpression="this.idecIAPPaybackRemainingUnPaidBalance != 0" sfwObjectBased="True" />
    <rule ID="VisibleRule-Covid-19Payback" sfwExpression="this.isCOVID19PayFlag == &quot;Y&quot; &amp;&amp; this.istrPayeeStatus == &quot;Payments Completed&quot;" sfwObjectBased="True" />
    <rule ID="VisibleRule-IAP-25Payback" sfwExpression="this.istrMoreInformation == &quot;Hardship 2025 IAP Withdrawal&quot; &amp;&amp; this.istrPayeeStatus == &quot;Payments Completed&quot;" sfwObjectBased="True" />
    <rule ID="VisibleRule-DeleteIAPPaybackCheck" sfwRuleType="Validation" sfwExpression="!(this.IsPayeeAccountStatusCancelled() == True) &amp;&amp;&#xD;&#xA;(this.CheckIfManagerLogin() == true)" sfwObjectBased="True" />
    <rule ID="Visible-WireTab" sfwRuleType="Validation" sfwObjectBased="True" sfwExpression="(this.CheckIfCountryIsOutsideUS()==true)" />
    <rule ID="Read-Only-Rule-AdverseInterest" sfwRuleType="Validation" sfwExpression="(this.CheckIfManagerLogin() == False &amp;&amp; this.icdoPayeeAccount.adverse_interest_flag ==&quot;Y&quot;)" sfwObjectBased="True" />
  </rules>
  <delete />
  <checklist />
  <initialload>
    <item ID="VisibleRule-DROApplicationID" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-DROCalculationID" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ApplicationID" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-CalculationID" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-RolloverInformation" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuel-DeathNotificationStatus" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleForMPIAmounts" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-TransferTab" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-VerifiedBox" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ReEmployedFlagForEADB" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ReEmpFlag" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-AdjustmentPaymentEligibleFlag" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule - ShowConvertBenefitOptionButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ShowRetroCalculationTab" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ReEmploymentOverrideFlag" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ReemploymentButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-RefreshCalculationButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ResumeConversionButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibileRule-ResumeButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-SaveButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-NextPaymentDetails" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ReleaseWithholdingButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-ReCalculateBenefit" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-PayeeID" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-OrgID" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRule-LoginUser" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibilityRule-BenefitLookupButton" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibilityRule-QDROCalcLookup" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-NextSpecialPaymentDetails" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibilityRule - DeceasedPayeeCompletedPayeeAccount" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule - PrePostRetirementDeathPayeeAccount" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-ConfirmationLetterButton" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-VerificationLetterButton" sfwStatus="Active" sfwMode="All" />
    <item ID="ReadOnlyRule-PaymentCycleDropdown" sfwStatus="Active" sfwMode="All" />
    <item ID="ReadOnlyRule-DeletedPaymentDirectivesDropDown" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-DeleteLatestPDButton" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-AddIAPPaybackButton" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-Covid-19Payback" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-IAP-25Payback" sfwStatus="Active" sfwMode="All" />
    <item ID="VisibleRule-DeleteIAPPaybackCheck" sfwStatus="Active" sfwMode="All" />
    <item ID="Visible-WireTab" sfwStatus="Active" sfwMode="All" />
    <item ID="Read-Only-Rule-AdverseInterest" sfwStatus="Active" sfwMode="All" />
  </initialload>
  <softerror />
  <harderror />
  <validatedelete />
  <groupslist />
  <aliaslist />
  <updateablecdo />
  <commonproperties />
  <expressionfields />
  <constraint />
  <queries>
    <query ID="Lookup" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.MPI_PERSON_ID , SPP.MPI_PERSON_ID , SPP.MPI_PERSON_ID AS ParticipantID, &#xD;&#xA;SPA.ORG_ID,SPA.RETIREE_INCR_FLAG, SPA.ONETIME_PAYMENT_FLAG,SPA.PAYEE_ACCOUNT_ID, (SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS PayeeName, &#xD;&#xA;(SPP.FIRST_NAME + ' ' + SPP.LAST_NAME) AS ParticipantName, PLNBXR.BENEFIT_OPTION_ID, &#xD;&#xA;PLNBXR.BENEFIT_OPTION_VALUE, SPA.BENEFIT_ACCOUNT_TYPE_ID, SPA.BENEFIT_ACCOUNT_TYPE_VALUE, &#xD;&#xA;SBAPL.BENEFIT_APPLICATION_ID, SBCH.BENEFIT_CALCULATION_HEADER_ID, SQAPL.DRO_APPLICATION_ID,&#xD;&#xA;SQCH.QDRO_CALCULATION_HEADER_ID, PLN.PLAN_ID,PLN.PLAN_CODE, SPA.RETIREMENT_TYPE_ID, &#xD;&#xA;SPA.RETIREMENT_TYPE_VALUE, SPAS.STATUS_ID, SPAS.STATUS_VALUE, SPA.ACCOUNT_RELATION_ID, &#xD;&#xA;SPA.ACCOUNT_RELATION_VALUE, SPA.FAMILY_RELATION_ID, SPA.FAMILY_RELATION_VALUE, SBAPL.RETIREMENT_DATE, &#xD;&#xA;SBAPL.WITHDRAWAL_DATE, SBCH.BENEFIT_COMMENCEMENT_DATE, SQAPL.DRO_COMMENCEMENT_DATE, SO.MPI_ORG_ID, &#xD;&#xA;SO.ORG_NAME, SPA.BENEFIT_BEGIN_DATE,&#xD;&#xA;istrRelativeVipFlag =&#xD;&#xA;( SELECT CASE WHEN (COUNT(*) &gt; 0 OR SPP.VIP_FLAG='Y') THEN 'Y' ELSE 'N' END FROM SGT_RELATIONSHIP SR&#xD;&#xA; INNER JOIN SGT_PERSON SP1 ON SP1.PERSON_ID = SR.PERSON_ID WHERE (SR.BENEFICIARY_PERSON_ID = SPP.PERSON_ID OR SR.DEPENDENT_PERSON_ID = SPP.PERSON_ID) &#xD;&#xA; AND SP1.VIP_FLAG = 'Y')&#xD;&#xA;,PDS.MORE_INFORMATION&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION SO WITH(NOLOCK) ON SO.ORG_ID = SPA.ORG_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_DIRECTIVES PDS WITH(NOLOCK) ON  PDS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PDS.PAYMENT_DIRECTIVES_ID = (SELECT  Max(PAYMENT_DIRECTIVES_ID) FROM SGT_PAYMENT_DIRECTIVES&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND IS_DELETED ='N' AND MORE_INFORMATION IS NOT NULL )&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBAC WITH(NOLOCK) ON SBAC.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBAPL WITH(NOLOCK) ON SBAPL.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_HEADER SBCH WITH(NOLOCK) ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBAC.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAT WITH(NOLOCK) ON SPAT.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPP WITH(NOLOCK) ON SPP.PERSON_ID =CASE WHEN  SPAT.PERSON_ID IS NULL THEN SPAT.BENEFECIARY_OF_PERSON_ID ELSE SPAT.PERSON_ID END &#xD;&#xA;LEFT OUTER JOIN SGT_DRO_BENEFIT_DETAILS SQAD WITH(NOLOCK) ON SQAD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID &#xD;&#xA;LEFT OUTER JOIN SGT_QDRO_CALCULATION_DETAIL SQAC WITH(NOLOCK) ON SQAC.QDRO_CALCULATION_DETAIL_ID = SPA.DRO_CALCULATION_DETAIL_ID &#xD;&#xA;LEFT OUTER JOIN SGT_DRO_APPLICATION SQAPL WITH(NOLOCK) ON SQAPL.DRO_APPLICATION_ID = SQAD.DRO_APPLICATION_ID &#xD;&#xA;LEFT OUTER JOIN SGT_QDRO_CALCULATION_HEADER SQCH WITH(NOLOCK) ON SQCH.QDRO_CALCULATION_HEADER_ID = SQAC.QDRO_CALCULATION_HEADER_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PLNBXR WITH(NOLOCK) ON PLNBXR.PLAN_BENEFIT_ID= SPA.PLAN_BENEFIT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN PLN WITH(NOLOCK) ON PLN.PLAN_ID = PLNBXR.PLAN_ID &#xD;&#xA;WHERE PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK) WHERE PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;order by RETIREE_INCR_FLAG,ONETIME_PAYMENT_FLAG,PLN.PLAN_ID,SPA.PAYEE_ACCOUNT_ID">
      <parameters />
    </query>
    <query ID="GetTaxOptions" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF (@Code_Value = 'FDRL' and @DistributionCode_Value='MNBF')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FTIR','NFTX')&#xD;&#xA;END&#xD;&#xA;ELSE IF(@Code_Value = 'FDRL' and @DistributionCode_Value='LSDB')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FLAD','FLAP','FTIA','FTIR','NFTX')&#xD;&#xA;END&#xD;&#xA;ELSE IF (@Code_Value = 'STAT' and @DistributionCode_Value='MNBF')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FLAD','STAT','STST','NSTX')&#xD;&#xA;END&#xD;&#xA;ELSE IF (@Code_Value = 'STAT' and @DistributionCode_Value='LSDB')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FLAD','FLAP','NSTX')  &#xD;&#xA;END&#xD;&#xA;ELSE IF (@Code_Value = 'ORST' and @DistributionCode_Value='MNBF')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FLAP','STAT','STST','NSTX')  &#xD;&#xA;END&#xD;&#xA;ELSE IF (@Code_Value IN ('GAST','NCST') and @DistributionCode_Value='MNBF')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('STAT','STST','NSTX')&#xD;&#xA;END&#xD;&#xA;ELSE IF (@Code_Value IN ('VAST') and @DistributionCode_Value='MNBF')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FLAD','STAT','STST','NSTX')&#xD;&#xA;END&#xD;&#xA;ELSE IF (@Code_Value IN ('GAST','ORST','NCST','VAST') and @DistributionCode_Value='LSDB')&#xD;&#xA;BEGIN&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7006 AND CODE_VALUE IN ('FLAD','STAT','STST','NSTX')  &#xD;&#xA;END">
      <parameters>
        <parameter ID="@Code_Value" sfwDataType="string" />
        <parameter ID="@DistributionCode_Value" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetMaritalStatus" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--IF(@CODE_VALUE = 'FDRL')&#xD;&#xA;--BEGIN&#xD;&#xA;--SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;--WHERE CODE_ID = 7032 AND CODE_VALUE IN ('SM','MQ','H')&#xD;&#xA;--END&#xD;&#xA;--ELSE IF (@CODE_VALUE = 'STAT')&#xD;&#xA;--BEGIN&#xD;&#xA;--SELECT * FROM SGS_CODE_VALUE&#xD;&#xA;--WHERE CODE_ID = 7032 AND CODE_VALUE IN ('M','S','H')&#xD;&#xA;--END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 7032 AND  DATA2 = @CODE_VALUE">
      <parameters>
        <parameter ID="@CODE_VALUE" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadPayeeAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_PAYEE_ACCOUNT WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountPaymentItemType" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Select * from SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE WITH(NOLOCK) where PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetSurvivorAmount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SURVIVOR_AMOUNT  from SGT_BENEFIT_CALCULATION_OPTIONS&#xD;&#xA;where BENEFIT_CALCULATION_DETAIL_ID=@BENEFIT_CALCULATION_DETAIL_ID">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetSurvivorData" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select distinct(SR.RELATIONSHIP_ID),sr.RELATIONSHIP_VALUE,SPAB.DIST_PERCENT,sbco.SURVIVOR_AMOUNT from SGT_RELATIONSHIP SR&#xD;&#xA;join SGT_BENEFIT_APPLICATION_DETAIL SBAD on SR.BENEFICIARY_PERSON_ID=sbad.JOINT_ANNUITANT_ID&#xD;&#xA;join SGT_PERSON_ACCOUNT_BENEFICIARY SPAB on SPAB.PERSON_RELATIONSHIP_ID=sr.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_PAYEE_ACCOUNT SPA on Sr.PERSON_ID=SPA.PERSON_ID&#xD;&#xA;join SGT_BENEFIT_CALCULATION_OPTIONS SBCO on SBCO.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;where SPA.PERSON_ID=@PERSON_ID&#xD;&#xA;and sbad.JOINT_ANNUITANT_ID= @JOINT_ANNUITANT_ID&#xD;&#xA;AND SBCO.PLAN_BENEFIT_ID=@PLAN_BENEFIT_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@JOINT_ANNUITANT_ID" sfwDataType="int" />
        <parameter ID="@PLAN_BENEFIT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountStatusForDeathNotification" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PAYEE_ACCOUNT_ID,SPA.TERM_CERTAIN_END_DATE,SPA.PLAN_BENEFIT_ID,&#xD;&#xA;SPA.BENEFIT_APPLICATION_DETAIL_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;WHERE SPA.PERSON_ID = @PERSON_ID &#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL', 'CNCL')">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeAccountUpdateTaxRateBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  *&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA (NOLOCK) &#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR (NOLOCK) ON PBXR.PLAN_BENEFIT_ID = PA.PLAN_BENEFIT_ID -- PIR 842&#xD;&#xA; LEFT JOIN SGT_PERSON P ON P.PERSON_ID=PA.PERSON_ID&#xD;&#xA; LEFT JOIN SGT_ORGANIZATION O ON O.ORG_ID=PA.ORG_ID&#xD;&#xA;WHERE &#xD;&#xA;&#xD;&#xA; PAS.STATUS_VALUE NOT IN ('CNCL','CMPL')   &#xD;&#xA; AND PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;  (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;   FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;   WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;   ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA; AND PAS.STATUS_EFFECTIVE_DATE &lt;=@PAYMENTDATE&#xD;&#xA; AND BENEFIT_BEGIN_DATE &lt;=@PAYMENTDATE&#xD;&#xA; AND (BENEFIT_END_DATE IS NULL OR BENEFIT_END_DATE &gt;=@PAYMENTDATE)&#xD;&#xA; AND (PA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL')&#xD;&#xA; -- PIR 842&#xD;&#xA; AND PBXR.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' &#xD;&#xA; AND EXISTS (SELECT SPAT.PAYEE_ACCOUNT_ID FROM &#xD;&#xA;    SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING SPAT WITH(NOLOCK)&#xD;&#xA;    WHERE SPAT.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID AND&#xD;&#xA;    (SPAT.END_DATE IS NULL OR SPAT.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;    AND SPAT.TAX_OPTION_VALUE IN ('FTIA','FTIR', 'STAT','STST'))">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadPAPITForRecalculatingTax" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  *,ISNULL(SPEIT.UPDATE_SEQ,0) AS PAPIT_UPDATE_SEQ,&#xD;&#xA;SPEIT.CREATED_BY AS PAPIT_CREATED_BY,SPEIT.CREATED_DATE AS PAPIT_CREATED_DATE,&#xD;&#xA;SPEIT.MODIFIED_BY AS PAPIT_MODIFIED_BY,SPEIT.MODIFIED_DATE AS PAPIT_MODIFIED_DATE&#xD;&#xA;FROM (&#xD;&#xA;SELECT &#xD;&#xA;   PA.*&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA (NOLOCK) &#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA;   INNER JOIN SGT_PLAN_BENEFIT_XR PBXR (NOLOCK) ON PBXR.PLAN_BENEFIT_ID = PA.PLAN_BENEFIT_ID -- PIR 842&#xD;&#xA;   LEFT JOIN SGT_PERSON P ON P.PERSON_ID=PA.PERSON_ID&#xD;&#xA;   LEFT JOIN SGT_ORGANIZATION O ON O.ORG_ID=PA.ORG_ID&#xD;&#xA;WHERE PAS.STATUS_VALUE NOT IN ('CNCL','CMPL')  &#xD;&#xA; AND PAYEE_ACCOUNT_STATUS_ID  = ( SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;         FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK)&#xD;&#xA;         WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;         ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;    AND PAS.STATUS_EFFECTIVE_DATE &lt;= @PAYMENTDATE&#xD;&#xA; AND BENEFIT_BEGIN_DATE &lt;= @PAYMENTDATE&#xD;&#xA; AND (BENEFIT_END_DATE IS NULL OR BENEFIT_END_DATE &gt; @PAYMENTDATE)&#xD;&#xA; AND (PA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL')&#xD;&#xA; -- PIR 842&#xD;&#xA; AND PBXR.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA; AND EXISTS (SELECT SPAT.PAYEE_ACCOUNT_ID FROM &#xD;&#xA;    SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING SPAT WITH(NOLOCK)&#xD;&#xA;    WHERE SPAT.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID AND&#xD;&#xA;    (SPAT.END_DATE IS NULL OR SPAT.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;    AND SPAT.TAX_OPTION_VALUE IN ('FTIA','FTIR', 'STAT','STST'))&#xD;&#xA; )TEMP  &#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE SPEIT ON SPEIT.PAYEE_ACCOUNT_ID=TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_ITEM_TYPE SPIT WITH(NOLOCK) ON SPIT.PAYMENT_ITEM_TYPE_ID=SPEIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; LEFT JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON ORG.ORG_ID=SPEIT.VENDOR_ORG_ID &#xD;&#xA; WHERE (SPEIT.END_DATE IS NULL OR SPEIT.END_DATE &gt;= @PAYMENTDATE)">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountStatusByApplicationID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PERSON_ID, SPA.PAYEE_ACCOUNT_ID,SPA.RETIREE_INCR_FLAG, SPA.PLAN_BENEFIT_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBAPL WITH(NOLOCK) ON SBAPL.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;WHERE SBAPL.BENEFIT_APPLICATION_ID = @BENEFIT_APPLICATION_ID&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL', 'CNCL')&#xD;&#xA;AND (RETIREE_INCR_FLAG &lt;&gt; 'Y' OR RETIREE_INCR_FLAG IS NULL)">
      <parameters>
        <parameter ID="@BENEFIT_APPLICATION_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadTaxWithHoldingForRecalculatingTax" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  &#xD;&#xA;* FROM &#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;   PA.*&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA (NOLOCK) &#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR (NOLOCK) ON PBXR.PLAN_BENEFIT_ID = PA.PLAN_BENEFIT_ID -- PIR 842&#xD;&#xA; LEFT JOIN SGT_PERSON P ON P.PERSON_ID=PA.PERSON_ID&#xD;&#xA; LEFT JOIN SGT_ORGANIZATION O ON O.ORG_ID=PA.ORG_ID&#xD;&#xA;WHERE &#xD;&#xA; PAS.STATUS_VALUE NOT IN ('CNCL','CMPL')  &#xD;&#xA; AND PAYEE_ACCOUNT_STATUS_ID  = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;         FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK)&#xD;&#xA;         WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;         ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA; AND PAS.STATUS_EFFECTIVE_DATE &lt;= @PAYMENTDATE&#xD;&#xA; AND BENEFIT_BEGIN_DATE &lt;= @PAYMENTDATE&#xD;&#xA; AND (BENEFIT_END_DATE IS NULL OR BENEFIT_END_DATE &gt; @PAYMENTDATE)&#xD;&#xA; AND (PA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL')&#xD;&#xA; AND PBXR.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' -- PIR 842&#xD;&#xA;)TEMP  &#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING TAX ON TEMP.PAYEE_ACCOUNT_ID=TAX.PAYEE_ACCOUNT_ID&#xD;&#xA;WHERE &#xD;&#xA; (TAX.END_DATE IS NULL OR TAX.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA; AND TAX.TAX_OPTION_VALUE IN ('FTIA','FTIR', 'STAT','STST') -- PIR 842">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountStatusByDROApplicationID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PERSON_ID, SPA.PAYEE_ACCOUNT_ID, SPA.PLAN_BENEFIT_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA  ON SDA.DRO_APPLICATION_ID = SDBD.DRO_APPLICATION_ID&#xD;&#xA;WHERE SDBD.DRO_APPLICATION_ID = @DRO_APPLICATION_ID&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL', 'CNCL')&#xD;&#xA;AND (RETIREE_INCR_FLAG &lt;&gt; 'Y' OR RETIREE_INCR_FLAG IS NULL)">
      <parameters>
        <parameter ID="@DRO_APPLICATION_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeAcountAndStatus" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;SPA.*,SBAPL.*,SP.*,SPAS.*,SBAC.*,SBCH.*,SPBA.*,SQAPL.DRO_APPLICATION_ID &#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION SO WITH(NOLOCK) ON SO.ORG_ID = SPA.ORG_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBAC WITH(NOLOCK) ON SBAC.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBAPL WITH(NOLOCK) ON SBAPL.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_HEADER SBCH WITH(NOLOCK) ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBAC.BENEFIT_CALCULATION_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAT WITH(NOLOCK) ON SPAT.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPP WITH(NOLOCK) ON SPP.PERSON_ID = SPAT.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_DRO_BENEFIT_DETAILS SQAD WITH(NOLOCK) ON SQAD.DRO_APPLICATION_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_QDRO_CALCULATION_DETAIL SQAC WITH(NOLOCK) ON SQAC.QDRO_CALCULATION_DETAIL_ID = SPA.DRO_CALCULATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_DRO_APPLICATION SQAPL WITH(NOLOCK) ON SQAPL.DRO_APPLICATION_ID = SQAD.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_QDRO_CALCULATION_HEADER SQCH WITH(NOLOCK) ON SQCH.QDRO_CALCULATION_HEADER_ID = SQAC.QDRO_CALCULATION_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PLNBXR WITH(NOLOCK) ON PLNBXR.PLAN_BENEFIT_ID= SPA.PLAN_BENEFIT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN PLN WITH(NOLOCK) ON PLN.PLAN_ID = PLNBXR.PLAN_ID&#xD;&#xA;WHERE SPA.BENEFIT_BEGIN_DATE&lt;=@PAYMENTDATE AND &#xD;&#xA;SPAS.STATUS_VALUE NOT IN ('CNCL','CMPL') &#xD;&#xA; AND SPAS.PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;  (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;    FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK)&#xD;&#xA;    WHERE PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;    AND PAS1.STATUS_EFFECTIVE_DATE &lt;= @PAYMENTDATE&#xD;&#xA;    ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="DeletePrevBackUpForSamePaymentSchedule" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="set nocount on&#xD;&#xA;&#xD;&#xA;DECLARE @BACKUPTABLEPREFIX VARCHAR(500)&#xD;&#xA;&#xD;&#xA;SELECT @BACKUPTABLEPREFIX = LTRIM(RTRIM(BACKUP_TABLE_PREFIX))+'%' FROM SGT_PAYMENT_SCHEDULE &#xD;&#xA; WHERE PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;  &#xD;&#xA;DECLARE @ROWCOUNTER INT, @MAXROWS INT&#xD;&#xA;&#xD;&#xA;SET @ROWCOUNTER  = 1&#xD;&#xA;SET @MAXROWS = 0 &#xD;&#xA;&#xD;&#xA;DECLARE @TARGET_TABLE VARCHAR(2000)&#xD;&#xA;&#xD;&#xA;IF @BACKUPTABLEPREFIX IS NOT NULL BEGIN&#xD;&#xA; &#xD;&#xA; IF OBJECT_ID('TEMPDB..#TEMPDROPPREVIOUSBACKUP') IS NOT NULL&#xD;&#xA;  DROP TABLE #TEMPDROPPREVIOUSBACKUP &#xD;&#xA;&#xD;&#xA; CREATE TABLE #TEMPDROPPREVIOUSBACKUP &#xD;&#xA; (&#xD;&#xA;  PRIMARY_KEY INT IDENTITY(1,1) NOT NULL PRIMARY KEY, &#xD;&#xA;  NAME VARCHAR(500)&#xD;&#xA; )&#xD;&#xA;&#xD;&#xA; INSERT INTO #TEMPDROPPREVIOUSBACKUP &#xD;&#xA;  SELECT NAME AS NAME &#xD;&#xA;   FROM SYS.OBJECTS WHERE NAME LIKE @BACKUPTABLEPREFIX &#xD;&#xA;&#xD;&#xA; SET @MAXROWS = @@ROWCOUNT   &#xD;&#xA; &#xD;&#xA;  IF @MAXROWS  &gt; 0 BEGIN&#xD;&#xA;&#xD;&#xA;  WHILE @MAXROWS &gt; 0 AND @ROWCOUNTER &lt;= @MAXROWS BEGIN&#xD;&#xA;    &#xD;&#xA;   SET @TARGET_TABLE  = NULL&#xD;&#xA;&#xD;&#xA;   SELECT @TARGET_TABLE  = NAME&#xD;&#xA;    FROM #TEMPDROPPREVIOUSBACKUP &#xD;&#xA;    WHERE PRIMARY_KEY = @ROWCOUNTER&#xD;&#xA;  &#xD;&#xA;   IF @TARGET_TABLE IS NOT NULL BEGIN&#xD;&#xA;    IF @TARGET_TABLE IS NOT NULL BEGIN&#xD;&#xA;     SET @TARGET_TABLE = 'IF OBJECT_ID('''+@TARGET_TABLE+''') IS NOT NULL DROP TABLE '+ @TARGET_TABLE&#xD;&#xA;&#xD;&#xA;      --PRINT @TARGET_TABLE &#xD;&#xA;     EXECUTE (@TARGET_TABLE )        &#xD;&#xA;    END   &#xD;&#xA;    SET @ROWCOUNTER = @ROWCOUNTER + 1 &#xD;&#xA;   END&#xD;&#xA;   END&#xD;&#xA; END&#xD;&#xA;END&#xD;&#xA;set nocount off&#xD;&#xA;select 1">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="BackupBeforePayroll" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;&#xD;&#xA;Declare @SQLSTR Varchar(2000)&#xD;&#xA;Declare @Table_Prefix as Varchar(50)&#xD;&#xA;set @Table_Prefix  = 'Bkp_Pay_'+Replace(replace(cast(getdate() as varchar(20)),' ',''),':','')+'_'&#xD;&#xA;print @Table_Prefix&#xD;&#xA;exec ('Select PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID,STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL from SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL')&#xD;&#xA;exec ('Select PAYEE_ACCOUNT_STATUS_ID into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT_STATUS from SGT_PAYEE_ACCOUNT_STATUS')&#xD;&#xA;exec ('Select CHECK_BOOK_ID,LAST_CHECK_NUMBER,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYMENT_CHECK_BOOK from SGT_PAYMENT_CHECK_BOOK')&#xD;&#xA;exec ('Select PAYMENT_HISTORY_DETAIL_ID into ' + @Table_Prefix+'SGT_PAYMENT_HISTORY_DETAIL from SGT_PAYMENT_HISTORY_DETAIL')&#xD;&#xA;exec ('Select PAYMENT_HISTORY_DISTRIBUTION_ID,DISTRIBUTION_STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYMENT_HISTORY_DISTRIBUTION from SGT_PAYMENT_HISTORY_DISTRIBUTION')&#xD;&#xA;exec ('Select PAYMENT_HISTORY_HEADER_ID  into ' + @Table_Prefix+'SGT_PAYMENT_HISTORY_HEADER from SGT_PAYMENT_HISTORY_HEADER')&#xD;&#xA;--exec ('Select RECOVERY_HISTORY_ID into ' + @Table_Prefix+'SGT_PAYMENT_RECOVERY_HISTORY from SGT_PAYMENT_RECOVERY_HISTORY')&#xD;&#xA;set @SQLSTR = 'Select * into ' + @Table_Prefix+'SGT_PAYMENT_SCHEDULE from SGT_PAYMENT_SCHEDULE where Payment_schedule_id = '+ cast(@PaymentScheduleId as varchar(10))&#xD;&#xA;Exec (@SQLSTR)&#xD;&#xA;set @SQLSTR = 'Select * into ' + @Table_Prefix+'SGT_PAYMENT_SCHEDULE_STEP from SGT_PAYMENT_SCHEDULE_STEP where Payment_schedule_id = '+ cast(@PaymentScheduleId as varchar(10))&#xD;&#xA;Exec (@SQLSTR)&#xD;&#xA;--exec ('Select PROVIDER_REPORT_PAYMENT_ID into ' + @Table_Prefix+'SGT_PROVIDER_REPORT_PAYMENT from SGT_PROVIDER_REPORT_PAYMENT')&#xD;&#xA;exec ('Select PERSON_ACCOUNT_ID,PLAN_ID,STATUS_ID,STATUS_VALUE, START_DATE,END_DATE,Modified_date,Modified_by  into ' + @Table_Prefix+'SGT_PERSON_ACCOUNT from SGT_PERSON_ACCOUNT')&#xD;&#xA;exec ('Select PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION_ID  into ' + @Table_Prefix+'SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION')&#xD;&#xA;exec ('Select  BENEFIT_APPLICATION_ID,STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_BENEFIT_APPLICATION from SGT_BENEFIT_APPLICATION')&#xD;&#xA;exec ('Select  BENEFIT_CALCULATION_HEADER_ID,BENEFIT_APPLICATION_ID,STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_BENEFIT_CALCULATION_HEADER from SGT_BENEFIT_CALCULATION_HEADER')&#xD;&#xA;exec ('Select  DRO_APPLICATION_ID,DRO_STATUS_ID,DRO_STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_DRO_APPLICATION from SGT_DRO_APPLICATION')&#xD;&#xA;exec ('Select  QDRO_CALCULATION_HEADER_ID,QDRO_APPLICATION_ID,STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_QDRO_CALCULATION_HEADER from SGT_QDRO_CALCULATION_HEADER')&#xD;&#xA;exec ('Select * into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE from SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE')&#xD;&#xA;exec ('Select PAYEE_ACCOUNT_TAX_WITHHOLDING_ITEM_DTL_ID into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING_ITEM_DETAIL from SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING_ITEM_DETAIL')&#xD;&#xA;--exec ('Select PAYMENT_RECOVERY_ID,STATUS_VALUE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYMENT_RECOVERY from SGT_PAYMENT_RECOVERY')&#xD;&#xA;--exec ('Select ACTIVITY_INSTANCE_ID into ' + @Table_Prefix+'SGW_ACTIVITY_INSTANCE &#xD;&#xA;--  from SGW_ACTIVITY_INSTANCE A&#xD;&#xA;--  INNER JOIN SGW_ACTIVITY APR ON A.ACTIVITY_ID = APR.ACTIVITY_ID&#xD;&#xA;--  Where APR.PROCESS_ID = 276')&#xD;&#xA;--exec ('Select ACTIVITY_INSTANCE_HISTORY_ID into ' &#xD;&#xA;--  + @Table_Prefix+'SGW_ACTIVITY_INSTANCE_HISTORY &#xD;&#xA;--  from SGW_ACTIVITY_INSTANCE_HISTORY A&#xD;&#xA;--  INNER JOIN SGW_ACTIVITY_INSTANCE AI &#xD;&#xA;--   ON A.ACTIVITY_INSTANCE_ID = AI.ACTIVITY_INSTANCE_ID&#xD;&#xA;--  INNER JOIN SGW_ACTIVITY APR ON AI.ACTIVITY_ID = APR.ACTIVITY_ID &#xD;&#xA;--  Where APR.PROCESS_ID = 276')&#xD;&#xA;exec ('Select PAYEE_ACCOUNT_RETRO_PAYMENT_ID,RETRO_PAYMENT_TYPE_VALUE,PAYMENT_HISTORY_HEADER_ID,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT_RETRO_PAYMENT from SGT_PAYEE_ACCOUNT_RETRO_PAYMENT')&#xD;&#xA;--exec ('Select PAYEE_ACCOUNT_DEDUCTION_ID,END_DATE,PAYMENT_HISTORY_HEADER_ID,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT_DEDUCTION_REFUND from SGT_PAYEE_ACCOUNT_DEDUCTION')&#xD;&#xA;exec ('Select DISTRIBUTION_STATUS_HISTORY_ID INTO ' + @Table_Prefix+'SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY from SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY')&#xD;&#xA;exec ('Select PAYEE_ACCOUNT_ID,BENEFIT_END_DATE,Modified_date,Modified_by into ' + @Table_Prefix+'SGT_PAYEE_ACCOUNT from SGT_PAYEE_ACCOUNT')&#xD;&#xA;exec ('select PAYEE_ACCOUNT_DEDUCTION_ID,PAYEE_ACCOUNT_ID,START_DATE,END_DATE,AMOUNT,PAYMENT_HISTORY_HEADER_ID,DEDUCTION_TYPE_VALUE,PAY_TO_VALUE,PERSON_ID,ORG_ID into ' + @Table_Prefix+'sgt_payee_account_deduction from sgt_payee_account_deduction')&#xD;&#xA;exec ('Select PROVIDER_REPORT_PAYMENT_ID,PROVIDER_ORG_ID,PAYEE_ACCOUNT_ID,PAYMENT_SCHEDULE_ID,PAYMENT_HISTORY_HEADER_ID,PAYMENT_ITEM_TYPE_ID into ' + @Table_Prefix+'SGT_PROVIDER_REPORT_PAYMENT from SGT_PROVIDER_REPORT_PAYMENT')&#xD;&#xA;exec ('Select REPAYMENT_SCHEDULE_ID,REIMBURSEMENT_AMOUNT_PAID,REIMBURSEMENT_STATUS_VALUE into ' + @Table_Prefix+'SGT_REPAYMENT_SCHEDULE from SGT_REPAYMENT_SCHEDULE')&#xD;&#xA;exec ('Select REIMBURSEMENT_DETAILS_ID,PAYMENT_OPTION_VALUE into ' + @Table_Prefix+'SGT_REIMBURSEMENT_DETAILS from SGT_REIMBURSEMENT_DETAILS')&#xD;&#xA;select @Table_Prefix">
      <parameters>
        <parameter ID="@PaymentScheduleId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="TrialMonthlyBenefitPaymentbyItemReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;CASE WHEN ITEM_DESCRIPTION='IRS Levy Deduction'  THEN 'IRS Levy Payment' &#xD;&#xA; WHEN ITEM_DESCRIPTION='Child Support Deduction' THEN 'Child Support Payment' &#xD;&#xA; WHEN ITEM_DESCRIPTION='Spousal Support Deduction' THEN 'Spousal Support Payment'&#xD;&#xA; WHEN ITEM_DESCRIPTION='Deduction Other' THEN 'Deduction Other Payment' ELSE ITEM_DESCRIPTION END AS ITEM_DESCRIPTION&#xD;&#xA;,[2] AS MPIPP_Amount,[7] AS L52_Amount,[8] AS L161_Amount,[3] AS L600_Amount,[4] AS L666_Amount,[6] AS L700_Amount,ITEM_TYPE_DIRECTION,ALLOW_ROLLOVER_CODE_VALUE, ITEM_PRIORITY, @PAYMENTDATE AS PAYMENT_DATE ,ITEMTYPE&#xD;&#xA;FROM (&#xD;&#xA;&#xD;&#xA;SELECT PLAN_ID,ITEM_DESCRIPTION, SUM(AMOUNT) AS AMOUNT,&#xD;&#xA; ITEM_TYPE_DIRECTION,ALLOW_ROLLOVER_CODE_VALUE,ITEM_PRIORITY,ITEMTYPE &#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA; SELECT TEMP.PLAN_ID,PIT.ITEM_TYPE_DESCRIPTION AS ITEM_DESCRIPTION, SUM(CASE WHEN PIT.ITEM_TYPE_CODE!= 'ITEM54' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) ELSE ITEM_TYPE_DIRECTION * PAPI.AMOUNT END) AS AMOUNT,--PIR 994&#xD;&#xA; PIT.ITEM_TYPE_DIRECTION,PIT.ALLOW_ROLLOVER_CODE_VALUE,PIT.ITEM_PRIORITY ,&#xD;&#xA;  CASE WHEN PIT.ITEM_PRIORITY IN (1,3,5,7,9,11,13,19) THEN 'MTLY' &#xD;&#xA; WHEN PIT.ITEM_PRIORITY IN (2,4,6,8,10,12) THEN 'ONTP' &#xD;&#xA; WHEN PIT.ITEM_PRIORITY = 21 THEN 'PENS' ELSE 'OTHR' END AS ITEMTYPE  &#xD;&#xA;     FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;  INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;  INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_DEDUCTION PADR ON PADR.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID  &#xD;&#xA;  LEFT OUTER JOIN (SELECT PARP.PAYEE_ACCOUNT_ID,PARP.PAYMENT_OPTION_VALUE,PARPD.* FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT PARP &#xD;&#xA;                   INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT_DETAIL PARPD ON &#xD;&#xA;                PARPD.PAYEE_ACCOUNT_RETRO_PAYMENT_ID = PARP.PAYEE_ACCOUNT_RETRO_PAYMENT_ID &#xD;&#xA;                AND ISNULL(PARP.IS_OVERPAYMENT_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;                         AND PARP.START_DATE &lt;&gt; ISNULL(PARP.END_DATE,'99991231') &#xD;&#xA;         AND (PARP.END_DATE IS NULL OR PARP.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;         AND PARP.PAYMENT_HISTORY_HEADER_ID IS NULL&#xD;&#xA;                ) AS RETRO&#xD;&#xA;  ON RETRO.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND RETRO.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;  AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;                  -- Reissue Amount Fix&#xD;&#xA;                  LEFT JOIN SGT_PAYMENT_REISSUE_DETAIL PRD ON PRD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;      LEFT JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL PRID ON PRD.PAYMENT_REISSUE_DETAIL_ID = PRID.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;  WHERE &#xD;&#xA;  (@CheckStartDate=1 OR PAPI.START_DATE &lt;= @PAYMENTDATE) &#xD;&#xA;   AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   AND (PAPI.START_DATE != ISNULL(PAPI.END_DATE,'99991231'))  &#xD;&#xA;  AND ((ISNULL(RETRO.PAYMENT_OPTION_VALUE,'REGL') = 'REGL' AND ISNULL(TEMP.RETRO_PAYMENT_OPTION_VALUE,'REGL') = 'REGL') OR &#xD;&#xA;   (RETRO.PAYMENT_OPTION_VALUE = 'SPCK' AND TEMP.RETRO_PAYMENT_OPTION_VALUE='SPCK')) &#xD;&#xA;  AND (&#xD;&#xA;         ((RETRO.PAYMENT_OPTION_VALUE IS NULL OR RETRO.PAYMENT_OPTION_VALUE = 'REGL') &#xD;&#xA;        AND((ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') &lt;&gt; 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N')&lt;&gt;'Y')))&#xD;&#xA;        &#xD;&#xA;        OR &#xD;&#xA;        ((RETRO.PAYMENT_OPTION_VALUE = 'SPCK' OR (ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') = 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N') = 'Y') OR&#xD;&#xA;         ISNULL(TEMP.INCLUDE_IN_ADHOC_FLAG,'N') = 'Y' OR (TEMP.BENEFIT_OPTION_VALUE = 'LUMP' AND ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') = 'N' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N') = 'N'))&#xD;&#xA;      AND ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE,'') NOT IN ('PTOS','PTRO','RLOG'))         &#xD;&#xA;       )   &#xD;&#xA;  --AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK' /*this is to avoid pick up 13th and 14th check which we will cover in benefit adjst testcase */&#xD;&#xA;  --AND TEMP.PAYEE_ACCOUNT_ID in (11021,14080)&#xD;&#xA;                    -- Reissue Amount Fix&#xD;&#xA;       AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID,0) OR PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA; GROUP BY PIT.ITEM_TYPE_DESCRIPTION,PIT.ITEM_TYPE_DIRECTION,TEMP.PLAN_ID, PIT.ALLOW_ROLLOVER_CODE_VALUE,PIT.ITEM_PRIORITY&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;&#xD;&#xA; SELECT TEMP.PLAN_ID,PIT.ITEM_TYPE_DESCRIPTION AS ITEM_DESCRIPTION,  SUM(CASE WHEN PIT.ITEM_TYPE_CODE!= 'ITEM54' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) ELSE ITEM_TYPE_DIRECTION * PAPI.AMOUNT END) AS AMOUNT,--PIR 994&#xD;&#xA; PIT.ITEM_TYPE_DIRECTION,PIT.ALLOW_ROLLOVER_CODE_VALUE,PIT.ITEM_PRIORITY,&#xD;&#xA;  CASE WHEN PIT.ITEM_PRIORITY IN (1,3,5,7,9,11,13,19) THEN 'MTLY' &#xD;&#xA; WHEN PIT.ITEM_PRIORITY IN (2,4,6,8,10,12) THEN 'ONTP' &#xD;&#xA; WHEN PIT.ITEM_PRIORITY = 21 THEN 'PENS' ELSE 'OTHR' END AS ITEMTYPE   &#xD;&#xA;     FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;     INNER JOIN SGT_PAYMENT_REISSUE_DETAIL RD ON RD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID  &#xD;&#xA;        INNER JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL RID ON RID.PAYMENT_REISSUE_DETAIL_ID = RD.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;  INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;  AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;  WHERE &#xD;&#xA;  (@CheckStartDate=1 OR PAPI.START_DATE &lt;= @PAYMENTDATE) &#xD;&#xA;   AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   AND (PAPI.START_DATE != ISNULL(PAPI.END_DATE,'99991231'))  &#xD;&#xA;  &#xD;&#xA;  AND (ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE,'') = 'PTOS' )       &#xD;&#xA;  --AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK' /*this is to avoid pick up 13th and 14th check which we will cover in benefit adjst testcase */&#xD;&#xA;  --AND TEMP.PAYEE_ACCOUNT_ID in (11021,14080)&#xD;&#xA;                    -- Reissue Amount Fix&#xD;&#xA;  AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID,0) OR RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA; GROUP BY PIT.ITEM_TYPE_DESCRIPTION,PIT.ITEM_TYPE_DIRECTION,TEMP.PLAN_ID, PIT.ALLOW_ROLLOVER_CODE_VALUE,PIT.ITEM_PRIORITY&#xD;&#xA;  &#xD;&#xA;UNION&#xD;&#xA; &#xD;&#xA; --ROLLOVER ITEMS&#xD;&#xA; SELECT TEMP.PLAN_ID, PIT1.ITEM_TYPE_DESCRIPTION AS ITEM_DESCRIPTION,  SUM(CASE WHEN PIT1.ITEM_TYPE_CODE!= 'ITEM54' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPIT.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) ELSE PIT1.ITEM_TYPE_DIRECTION * PAPIT.AMOUNT END) AS AMOUNT,--PIR 994&#xD;&#xA; PIT1.ITEM_TYPE_DIRECTION,PIT1.ALLOW_ROLLOVER_CODE_VALUE,PIT1.ITEM_PRIORITY,&#xD;&#xA; CASE WHEN PIT1.ITEM_PRIORITY IN (1,3,5,7,9,11,13,19) THEN 'MTLY' &#xD;&#xA; WHEN PIT1.ITEM_PRIORITY IN (2,4,6,8,10,12) THEN 'ONTP' &#xD;&#xA; WHEN PIT1.ITEM_PRIORITY = 21 THEN 'PENS' ELSE 'OTHR' END AS ITEMTYPE&#xD;&#xA;    FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;     INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON TEMP.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PAPIT.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;     INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;     INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;     INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA;                                                             AND PAPIT.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)                                                           &#xD;&#xA;  AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;                  -- Reissue Amount Fix&#xD;&#xA;                  LEFT JOIN SGT_PAYMENT_REISSUE_DETAIL PRD ON PRD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;      LEFT JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL PRID ON PRD.PAYMENT_REISSUE_DETAIL_ID = PRID.PAYMENT_REISSUE_DETAIL_ID                                                           &#xD;&#xA;     WHERE&#xD;&#xA;  (@CheckStartDate=1 OR PAPIT.START_DATE &lt;= @PAYMENTDATE) &#xD;&#xA;   AND (PAPIT.END_DATE IS NULL OR PAPIT.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   AND (PAPIT.START_DATE != ISNULL(PAPIT.END_DATE,'99991231'))&#xD;&#xA;   &#xD;&#xA;  AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED'&#xD;&#xA;  AND PARD.STATUS_VALUE = 'ACTV'&#xD;&#xA;  --AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK'&#xD;&#xA;  AND (ISNULL(PAPIT.REISSUE_ITEM_FLAG,'N') &lt;&gt; 'Y' OR @INCLUDEREISSUEITEM=1)&#xD;&#xA;  --AND TEMP.PAYEE_ACCOUNT_ID in (11021,14080)&#xD;&#xA;                  -- Reissue Amount Fix&#xD;&#xA;       AND (PAPIT.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID,0) OR PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA; GROUP BY PIT1.ITEM_TYPE_DESCRIPTION,PIT1.ITEM_TYPE_DIRECTION,TEMP.PLAN_ID, PIT1.ALLOW_ROLLOVER_CODE_VALUE,PIT1.ITEM_PRIORITY&#xD;&#xA;) AS RESULT&#xD;&#xA;WHERE ISNUMERIC(AMOUNT) = 1&#xD;&#xA;GROUP BY ITEM_DESCRIPTION,ITEM_TYPE_DIRECTION,PLAN_ID,ALLOW_ROLLOVER_CODE_VALUE,ITEM_PRIORITY,ITEMTYPE&#xD;&#xA;&#xD;&#xA;) AS TBL&#xD;&#xA;&#xD;&#xA;PIVOT&#xD;&#xA;(&#xD;&#xA; MAX(TBL.AMOUNT) FOR TBL.PLAN_ID  IN (&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;) &#xD;&#xA;) AS PVT&#xD;&#xA;&#xD;&#xA;ORDER BY &#xD;&#xA;CASE WHEN ITEM_PRIORITY IN (1,3,5,7,9,11,13,19) THEN 1 &#xD;&#xA;WHEN ITEM_PRIORITY IN (2,4,6,8,10,12) THEN 2 &#xD;&#xA;WHEN ITEM_PRIORITY = 21 THEN 3 &#xD;&#xA;ELSE 4 END&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@INCLUDEREISSUEITEM" sfwDataType="int" />
        <parameter ID="@CheckStartDate" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="TrialNewRetireeDetailReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;PAYEE_ACCOUNT_ID,&#xD;&#xA;MPID_OrganizationID,&#xD;&#xA;PayeeName_OrganizationName,&#xD;&#xA;ACCOUNT_RELATIONSHIP,&#xD;&#xA;PLAN_NAME,&#xD;&#xA;RETIREMENT_DATE,&#xD;&#xA;REP.MONTHLY_GROSS_AMOUNT,&#xD;&#xA;REP.MONTHLY_NET_AMOUNT,&#xD;&#xA;REP.CURRENT_MONTH_GROSS_AMOUNT,&#xD;&#xA;REP.NET_CHECK_AMOUNT,&#xD;&#xA;@PAYMENTDATE AS PAYMENT_DATE &#xD;&#xA;&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA; SELECT PAYEE_ACCOUNT_ID,&#xD;&#xA; ISNULL(MPI_PERSON_ID,MPI_ORG_ID) AS MPID_OrganizationID,&#xD;&#xA; CASE WHEN MPI_PERSON_ID IS NULL THEN ORGANIZATION_NAME ELSE PAYEE_NAME END AS PayeeName_OrganizationName,&#xD;&#xA; PLAN_NAME, PAYEE_NAME,BENEFIT_ACCOUNT_TYPE,BENEFIT_OPTION,&#xD;&#xA;   ACCOUNT_RELATIONSHIP, &#xD;&#xA;   RETIREMENT_DATE,&#xD;&#xA;   SUM(MONTHLY_GROSS_AMOUNT) AS MONTHLY_GROSS_AMOUNT,&#xD;&#xA;   SUM(MONTHLY_NET_AMOUNT) AS MONTHLY_NET_AMOUNT,&#xD;&#xA;   SUM(GROSS_AMOUNT) AS CURRENT_MONTH_GROSS_AMOUNT,&#xD;&#xA;   SUM(NET_CHECK_AMOUNT) AS NET_CHECK_AMOUNT&#xD;&#xA; FROM (&#xD;&#xA;  SELECT TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.MPI_ORG_ID, TEMP.PLAN_NAME&#xD;&#xA;   , TEMP.ORGANIZATION_NAME&#xD;&#xA;   , ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP&#xD;&#xA;   , TEMP.BENEFIT_OPTION&#xD;&#xA;   , TEMP.PAYEE_NAME,BTP.DESCRIPTION AS BENEFIT_ACCOUNT_TYPE&#xD;&#xA;   , TEMP.RETIREMENT_DATE&#xD;&#xA;   , SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND BASE_AMOUNT_FLAG = 'Y' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) AS MONTHLY_GROSS_AMOUNT--PIR 994&#xD;&#xA;   , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) * ITEM_TYPE_DIRECTION ELSE 0 END) AS MONTHLY_NET_AMOUNT--PIR 994&#xD;&#xA;   , SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END)--PIR 994&#xD;&#xA;    + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS GROSS_AMOUNT&#xD;&#xA;   , SUM(ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) AS NET_CHECK_AMOUNT--PIR 994&#xD;&#xA;   , 'Y' AS INDICATOR&#xD;&#xA;  FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;   INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;    (&#xD;&#xA;     SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;      LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE B WITH(NOLOCK) ON A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;      WHERE ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY') PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;   LEFT OUTER JOIN SGS_CODE_VALUE BTP WITH(NOLOCK) ON TEMP.BENEFIT_ACCOUNT_TYPE_ID = BTP.CODE_ID AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE = BTP.CODE_VALUE&#xD;&#xA;         LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;  WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL &#xD;&#xA;   AND TEMP.STATUS_VALUE = 'APRD'&#xD;&#xA;  ----COND: 1,2,3,4&#xD;&#xA;   AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO')&#xD;&#xA;   AND TEMP.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  GROUP BY TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.ACCOUNT_RELATION_VALUE, TEMP.MPI_ORG_ID, TEMP.PLAN_NAME&#xD;&#xA;    , TEMP.ORGANIZATION_NAME, TEMP.PAYEE_NAME, TEMP.BENEFIT_OPTION,BTP.DESCRIPTION, TEMP.RETIREMENT_DATE&#xD;&#xA;    &#xD;&#xA;  UNION ALL&#xD;&#xA;&#xD;&#xA;  SELECT TEMP.PAYEE_ACCOUNT_ID, NULL AS MPI_PERSON_ID , SO.MPI_ORG_ID, TEMP.PLAN_NAME&#xD;&#xA;   , SO.ORG_NAME&#xD;&#xA;   , ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP, TEMP.BENEFIT_OPTION&#xD;&#xA;   , NULL AS PAYEE_NAME,BTP.DESCRIPTION AS BENEFIT_ACCOUNT_TYPE, TEMP.RETIREMENT_DATE&#xD;&#xA;   , SUM(CASE WHEN PIT1.ITEM_TYPE_DIRECTION = 1 AND PIT1.BASE_AMOUNT_FLAG = 'Y' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) AS MONTHLY_GROSS_AMOUNT--PIR 994&#xD;&#xA;   , SUM(CASE WHEN PIT1.BASE_AMOUNT_FLAG = 'Y' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) * PIT1.ITEM_TYPE_DIRECTION ELSE 0 END) AS MONTHLY_NET_AMOUNT--PIR 994&#xD;&#xA;   , SUM(CASE WHEN (PIT1.ITEM_TYPE_DIRECTION = 1 AND ISNULL(PIT.PAYEE_DETAIL_GROUP_VALUE,'') &lt;&gt; 'OTHR') THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;     + SUM(CASE WHEN PIT1.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT1.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS GROSS_AMOUNT&#xD;&#xA;   , SUM(PIT1.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) AS NET_CHECK_AMOUNT&#xD;&#xA;   , 'Y' AS INDICATOR&#xD;&#xA;  FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;   INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;   INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 WITH(NOLOCK) ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA;       AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH On SPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;   INNER JOIN SGT_ORGANIZATION SO On SPHH.ORG_ID = SO.ORG_ID&#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;    (&#xD;&#xA;     SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;      INNER JOIN SGT_PAYMENT_SCHEDULE B WITH(NOLOCK) ON A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;      WHERE ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY'&#xD;&#xA;    ) PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;   LEFT OUTER JOIN SGS_CODE_VALUE BTP WITH(NOLOCK) ON TEMP.BENEFIT_ACCOUNT_TYPE_ID = BTP.CODE_ID AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE = BTP.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;  WHERE &#xD;&#xA;   PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL &#xD;&#xA;   AND TEMP.STATUS_VALUE = 'APRD'&#xD;&#xA;  --COND: 1,2,3,4&#xD;&#xA;   AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO') &#xD;&#xA;   AND TEMP.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;   AND SPHH.ORG_ID is not null&#xD;&#xA;    &#xD;&#xA;  GROUP BY TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.ACCOUNT_RELATION_VALUE, SO.MPI_ORG_ID, TEMP.PLAN_NAME&#xD;&#xA;    , SO.ORG_NAME, TEMP.PAYEE_NAME, TEMP.BENEFIT_OPTION,BTP.DESCRIPTION, TEMP.RETIREMENT_DATE&#xD;&#xA; ) MA &#xD;&#xA; GROUP BY PAYEE_ACCOUNT_ID,MPI_PERSON_ID, MPI_ORG_ID, PLAN_NAME, PAYEE_NAME,INDICATOR, ORGANIZATION_NAME, BENEFIT_ACCOUNT_TYPE,BENEFIT_OPTION,ACCOUNT_RELATIONSHIP,BENEFIT_ACCOUNT_TYPE, RETIREMENT_DATE&#xD;&#xA;) REP &#xD;&#xA;ORDER BY PLAN_NAME, MPID_OrganizationID">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="TrialReinstatedRetireeDetailReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @LAST_PAYMENTDATE DATETIME&#xD;&#xA;DECLARE @PROCESS_DATE DATETIME&#xD;&#xA;DECLARE @LAST_SCHEDULE_ID INT&#xD;&#xA;SET @LAST_PAYMENTDATE = DATEADD(M,-1,@PAYMENTDATE)&#xD;&#xA;&#xD;&#xA;SELECT @LAST_SCHEDULE_ID=ISNULL(PAYMENT_SCHEDULE_ID,0), @LAST_PAYMENTDATE = PAYMENT_DATE,&#xD;&#xA;@PROCESS_DATE = ISNULL(PROCESS_START_TIME,PROCESS_DATE) &#xD;&#xA; FROM SGT_PAYMENT_SCHEDULE &#xD;&#xA;WHERE PAYMENT_DATE = @LAST_PAYMENTDATE AND SCHEDULE_TYPE_VALUE = 'MTLY' AND STATUS_VALUE = 'PRCD'&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;MPID_OrganizationID,&#xD;&#xA;PayeeName_OrganizationName,&#xD;&#xA;ACCOUNT_RELATIONSHIP,&#xD;&#xA;PLAN_NAME,&#xD;&#xA;RETIREMENT_DATE,&#xD;&#xA;STATUS_EFFECTIVE_DATE,&#xD;&#xA;MONTHLY_GROSS_AMOUNT,&#xD;&#xA;MONTHLY_NET_AMOUNT,&#xD;&#xA;CURRENT_MONTH_GROSS_AMOUNT,&#xD;&#xA;NET_CHECK_AMOUNT,&#xD;&#xA;@PAYMENTDATE AS PAYMENT_DATE&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;    SELECT PAYEE_ACCOUNT_ID,&#xD;&#xA;    ISNULL(PER.MPI_PERSON_ID,ORG.MPI_ORG_ID) AS MPID_OrganizationID,&#xD;&#xA;    CASE WHEN PER.MPI_PERSON_ID IS NULL THEN ORG.ORG_NAME ELSE &#xD;&#xA;    ISNULL(PER.LAST_NAME,'')+' '+ISNULL(PER.FIRST_NAME,'') END AS PayeeName_OrganizationName,&#xD;&#xA;    RETIREMENT_DATE, GROSS_AMOUNT, NET_CHECK_AMOUNT, ACCOUNT_RELATIONSHIP, PLAN_NAME, STATUS_EFFECTIVE_DATE,&#xD;&#xA;            MONTHLY_GROSS_AMOUNT,&#xD;&#xA;            MONTHLY_NET_AMOUNT,&#xD;&#xA;            GROSS_AMOUNT AS CURRENT_MONTH_GROSS_AMOUNT &#xD;&#xA;&#xD;&#xA;    FROM &#xD;&#xA;    (&#xD;&#xA;        SELECT PAYEE_ACCOUNT_ID,MPI_PERSON_ID,MPI_ORG_ID,&#xD;&#xA;               SUM(GROSS_AMOUNT) AS GROSS_AMOUNT,SUM(NET_CHECK_AMOUNT) AS NET_CHECK_AMOUNT,&#xD;&#xA;               INDICATOR,RETIREMENT_DATE, ACCOUNT_RELATIONSHIP, PLAN_NAME, STATUS_EFFECTIVE_DATE,&#xD;&#xA;                   SUM(MONTHLY_GROSS_AMOUNT) AS MONTHLY_GROSS_AMOUNT,&#xD;&#xA;                SUM(MONTHLY_NET_AMOUNT) AS MONTHLY_NET_AMOUNT,&#xD;&#xA;                SUM(GROSS_AMOUNT) AS CURRENT_MONTH_GROSS_AMOUNT&#xD;&#xA;         FROM (&#xD;&#xA;                SELECT TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.PAYEE_NAME, TEMP.MPI_ORG_ID, TEMP.ORGANIZATION_NAME&#xD;&#xA;                    , TEMP.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP&#xD;&#xA;                    , TEMP.RETIREMENT_DATE, TEMP.PLAN_NAME&#xD;&#xA;                    , SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;                    + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END)AS GROSS_AMOUNT&#xD;&#xA;                    , SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND BASE_AMOUNT_FLAG = 'Y' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) AS MONTHLY_GROSS_AMOUNT--PIR 994&#xD;&#xA;                    , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) * ITEM_TYPE_DIRECTION ELSE 0 END) AS MONTHLY_NET_AMOUNT--PIR 994&#xD;&#xA;                    , SUM(ITEM_TYPE_DIRECTION * (ROUND(AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) AS NET_CHECK_AMOUNT--PIR 994&#xD;&#xA;                    , 'Y' AS INDICATOR, TEMP.STATUS_EFFECTIVE_DATE&#xD;&#xA;                FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;                    INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;                    INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                    INNER JOIN SGT_PAYEE_ACCOUNT_STATUS(NOLOCK) PASLAST ON PASLAST.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID &#xD;&#xA;                    --INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAS.PAYEE_ACCOUNT_ID -- COmmented Vinovin&#xD;&#xA;                    LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;                     ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;                     AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;&#xD;&#xA;                --COND:5&#xD;&#xA;                WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE) /*VINOVIN - Changed to payment date*/&#xD;&#xA;                 &#xD;&#xA;                AND    PASLAST.PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;                     (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;                      WHERE PAS1.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND PAS1.STATUS_EFFECTIVE_DATE &lt;= @LAST_PAYMENTDATE&#xD;&#xA;                      and PAS1.STATUS_EFFECTIVE_DATE &lt; @PROCESS_DATE/*change made on 12/01/2013 rohan kunal*/&#xD;&#xA;                      ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;                AND PASLAST.STATUS_VALUE NOT IN ('RECV','APRD')&#xD;&#xA;                                                 &#xD;&#xA;        --COND: 7&#xD;&#xA;            AND TEMP.PAYEE_ACCOUNT_ID IN &#xD;&#xA;                  (     SELECT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER PHH   &#xD;&#xA;                        LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE B ON B.PAYMENT_SCHEDULE_ID = ISNULL(PHH.PAYMENT_SCHEDULE_ID,0)&#xD;&#xA;                        WHERE PHH.PAYMENT_DATE &lt; @LAST_PAYMENTDATE AND ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY' &#xD;&#xA;                  )&#xD;&#xA;            AND TEMP.PAYEE_ACCOUNT_ID NOT IN &#xD;&#xA;            (&#xD;&#xA;                SELECT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER PHH   &#xD;&#xA;                INNER JOIN SGT_PAYMENT_SCHEDULE B ON ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                WHERE ISNULL(B.PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID&#xD;&#xA;            )&#xD;&#xA;            --COND: 1,2,3,4,5&#xD;&#xA;                AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'WDRL', 'DDPT', 'QDRO') &#xD;&#xA;                AND TEMP.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;&#xD;&#xA;                &#xD;&#xA;            GROUP BY TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.ACCOUNT_RELATION_VALUE, TEMP.MPI_ORG_ID, TEMP.PLAN_NAME&#xD;&#xA;                    , TEMP.ORGANIZATION_NAME, TEMP.PAYEE_NAME, TEMP.BENEFIT_OPTION, TEMP.RETIREMENT_DATE, TEMP.STATUS_EFFECTIVE_DATE&#xD;&#xA;                    &#xD;&#xA;            &#xD;&#xA;            )TEMP&#xD;&#xA;        GROUP BY PAYEE_ACCOUNT_ID,MPI_PERSON_ID,MPI_ORG_ID,INDICATOR,RETIREMENT_DATE, ACCOUNT_RELATIONSHIP, PLAN_NAME, ORGANIZATION_NAME, PAYEE_NAME,STATUS_EFFECTIVE_DATE&#xD;&#xA;    ) MA &#xD;&#xA;    LEFT OUTER JOIN SGT_PERSON PER WITH(NOLOCK) ON MA.MPI_PERSON_ID = PER.MPI_PERSON_ID&#xD;&#xA;    LEFT OUTER JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON MA.MPI_ORG_ID = ORG.MPI_ORG_ID&#xD;&#xA;) REP ORDER BY MPID_OrganizationID, PLAN_NAME&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="TrialClosedorSuspendedPayeeAccountReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @LAST_PAYMENTDATE DATETIME&#xD;&#xA;DECLARE @LAST_SCHEDULE_ID INT&#xD;&#xA;SET @LAST_PAYMENTDATE = DATEADD(M,-1,@PAYMENTDATE)&#xD;&#xA;SELECT @LAST_SCHEDULE_ID=ISNULL(PAYMENT_SCHEDULE_ID,0), @LAST_PAYMENTDATE = PAYMENT_DATE FROM SGT_PAYMENT_SCHEDULE &#xD;&#xA;WHERE PAYMENT_DATE = @LAST_PAYMENTDATE AND SCHEDULE_TYPE_VALUE = 'MTLY' AND STATUS_VALUE = 'PRCD'&#xD;&#xA;SELECT&#xD;&#xA;MPI_PERSON_ID AS MPID_OrganizationID,&#xD;&#xA;PAYEE_NAME AS PayeeName_OrganizationName,&#xD;&#xA;SUM(GROSS_AMOUNT) AS GROSS_AMOUNT,&#xD;&#xA;SUM(NET_CHECK_AMOUNT) AS NET_CHECK_AMOUNT,&#xD;&#xA;INDICATOR,&#xD;&#xA;STATUS_EFFECTIVE_DATE, &#xD;&#xA;ACCOUNT_RELATIONSHIP, &#xD;&#xA;PLAN_NAME,&#xD;&#xA;DESCRIPTION,&#xD;&#xA;TERM_CERTAIN_END_DATE,&#xD;&#xA;@PAYMENTDATE AS PAYMENT_DATE,&#xD;&#xA;SUSPENSION_REASON_DESCRIPTION,&#xD;&#xA;BenefitOption&#xD;&#xA;INTO #TMP_CL_SUSP&#xD;&#xA;  FROM (&#xD;&#xA;    SELECT SPA.PAYEE_ACCOUNT_ID, isnull(PER.MPI_PERSON_ID,ORG.MPI_ORG_ID) as MPI_PERSON_ID,&#xD;&#xA;  CASE WHEN PER.MPI_PERSON_ID IS NOT NULL  then ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') &#xD;&#xA;  WHEN ORG.MPI_ORG_ID IS NOT NULL then ORG.ORG_NAME &#xD;&#xA;  END AS PAYEE_NAME &#xD;&#xA;     , CVRELATION.DESCRIPTION AS ACCOUNT_RELATIONSHIP, SPLN.PLAN_CODE AS PLAN_NAME,  PAS.STATUS_EFFECTIVE_DATE&#xD;&#xA;     , SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;     + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS GROSS_AMOUNT&#xD;&#xA;     , SUM(ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) AS NET_CHECK_AMOUNT --PIR 994&#xD;&#xA;     , 'Y' AS INDICATOR,SCV.DESCRIPTION,SPA.TERM_CERTAIN_END_DATE,&#xD;&#xA;&#x9; CV.Description AS SUSPENSION_REASON_DESCRIPTION,&#xD;&#xA;&#x9; CVOPTION.DESCRIPTION AS BenefitOption&#xD;&#xA;    FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;     INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;     INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;     --INNER JOIN DBO.SGT_PAYEE_ACCOUNT_STATUS(NOLOCK) PASLAST ON PASLAST.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID -- COmmented Vinovin (dont uncomment)&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PAS.STATUS_VALUE &lt;&gt; 'REVW'  &#xD;&#xA;     INNER JOIN (SELECT DISTINCT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER(NOLOCK) WHERE ISNULL(PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID)PHH ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID /*ADDED TO AVOID PICKING UP MULTIPLE PAYMENT HISTORY FOR SAME DATE FOR SAME PAYEE ACCOUNT*/&#xD;&#xA;                    --LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID  -- COmmented Vinovin (dont uncomment)&#xD;&#xA;                    LEFT OUTER JOIN SGT_PERSON PER(NOLOCK) ON SPA.PERSON_ID = PER.PERSON_ID&#xD;&#xA;                    LEFT OUTER JOIN SGT_ORGANIZATION ORG(NOLOCK) ON SPA.ORG_ID = ORG.ORG_ID&#xD;&#xA;                    LEFT OUTER JOIN SGS_CODE_VALUE CVRELATION (nolock) ON SPA.ACCOUNT_RELATION_ID= CVRELATION.CODE_ID AND SPA.ACCOUNT_RELATION_VALUE = CVRELATION.CODE_VALUE&#xD;&#xA;        LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID=SPA.PLAN_BENEFIT_ID &#xD;&#xA;&#x9;&#x9; INNER JOIN SGS_CODE_VALUE CV (NOLOCK) ON PAS.STATUS_ID= CV.CODE_ID AND PAS.STATUS_VALUE = CV.CODE_VALUE&#xD;&#xA;      INNER JOIN SGS_CODE_VALUE CVOPTION (NOLOCK) ON PBXR.BENEFIT_OPTION_ID = CVOPTION.CODE_ID AND PBXR.BENEFIT_OPTION_VALUE = CVOPTION.CODE_VALUE&#xD;&#xA;        LEFT OUTER JOIN SGT_PLAN SPLN WITH(NOLOCK) ON SPLN.PLAN_ID=PBXR.PLAN_ID&#xD;&#xA;  --PIR-864&#xD;&#xA;  LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON PAS.TERMINATED_STATUS_REASON_ID=SCV.CODE_ID and PAS.TERMINATED_STATUS_REASON_VALUE=SCV.CODE_VALUE&#xD;&#xA;     LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;               ON PITY.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;      AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;     WHERE PAPI.START_DATE &lt;= @LAST_PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @LAST_PAYMENTDATE)        &#xD;&#xA;       --COND:6 &#xD;&#xA;     AND PAS.PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;     (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;     FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;     WHERE PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;     ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;     AND PAS.STATUS_VALUE NOT IN ('RECV','APRD')&#xD;&#xA;    &#xD;&#xA;  --COND: 7&#xD;&#xA;     AND SPA.PAYEE_ACCOUNT_ID NOT IN &#xD;&#xA;     (&#xD;&#xA;      SELECT PAYEE_ACCOUNT_ID FROM TEMP_TABLE_FOR_PAYMENT TEMP   &#xD;&#xA;      WHERE TEMP.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;     )&#xD;&#xA;   --COND: 1,2,3,4,5&#xD;&#xA;     AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'WDRL', 'DDPT', 'QDRO')&#xD;&#xA;     AND PBXR.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;    &#xD;&#xA;    GROUP BY SPA.PAYEE_ACCOUNT_ID,PER.MPI_PERSON_ID, CVRELATION.DESCRIPTION, ORG.MPI_ORG_ID, SPLN.PLAN_CODE,&#xD;&#xA;      PER.FIRST_NAME,PER.LAST_NAME,PER.MIDDLE_NAME, ORG.ORG_NAME, &#xD;&#xA;      PBXR.BENEFIT_OPTION_VALUE, PAS.STATUS_EFFECTIVE_DATE,PAS.TERMINATED_STATUS_REASON_ID,SCV.DESCRIPTION,TERM_CERTAIN_END_DATE,PAS.SUSPENSION_REASON_DESCRIPTION,CVOPTION.DESCRIPTION,CV.Description &#xD;&#xA;   )TEMP&#xD;&#xA;&#xD;&#xA;GROUP BY PAYEE_ACCOUNT_ID,MPI_PERSON_ID,INDICATOR, ACCOUNT_RELATIONSHIP, PLAN_NAME, &#xD;&#xA;PAYEE_NAME, STATUS_EFFECTIVE_DATE,TEMP.DESCRIPTION,TEMP.TERM_CERTAIN_END_DATE,TEMP.SUSPENSION_REASON_DESCRIPTION,Temp.BenefitOption&#xD;&#xA;  &#xD;&#xA;ORDER BY MPID_OrganizationID, PLAN_NAME&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;-- RID #78398&#xD;&#xA;SELECT  MPID_OrganizationID, BENEFIT_APPLICATION_ID, DISABILITY_CONVERSION_DATE, CONVERTED_MIN_DISTRIBUTION_FLAG&#xD;&#xA;into #TMP_CONV&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT MPID_OrganizationID, SBA.BENEFIT_APPLICATION_ID, SBA.DISABILITY_CONVERSION_DATE, SBA.CONVERTED_MIN_DISTRIBUTION_FLAG&#xD;&#xA;FROM #TMP_CL_SUSP a&#xD;&#xA;INNER JOIN SGT_PERSON P on a.MPID_OrganizationID = P.MPI_PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON P.PERSON_ID = SBA.PERSON_ID AND SBA.APPLICATION_STATUS_VALUE &lt;&gt; 'CANC'&#xD;&#xA;WHERE SBA.DISABILITY_CONVERSION_DATE IS NOT NULL OR SBA.CONVERTED_MIN_DISTRIBUTION_FLAG IS NOT NULL&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT MPID_OrganizationID, SBA.BENEFIT_APPLICATION_ID, SBA.DISABILITY_CONVERSION_DATE, SBA.CONVERTED_MIN_DISTRIBUTION_FLAG&#xD;&#xA;FROM #TMP_CL_SUSP a&#xD;&#xA;INNER JOIN SGT_ORGANIZATION O on a.MPID_OrganizationID = O.MPI_ORG_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON O.ORG_ID = SBA.ORG_ID AND SBA.APPLICATION_STATUS_VALUE &lt;&gt; 'CANC'&#xD;&#xA;WHERE SBA.DISABILITY_CONVERSION_DATE IS NOT NULL OR SBA.CONVERTED_MIN_DISTRIBUTION_FLAG IS NOT NULL&#xD;&#xA;) x&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT a.MPID_OrganizationID,PayeeName_OrganizationName,GROSS_AMOUNT,NET_CHECK_AMOUNT,INDICATOR,STATUS_EFFECTIVE_DATE, &#xD;&#xA;ACCOUNT_RELATIONSHIP,PLAN_NAME,&#xD;&#xA;[DESCRIPTION] = CASE WHEN [DESCRIPTION] IS NULL AND DISABILITY_CONVERSION_DATE IS NULL AND CONVERTED_MIN_DISTRIBUTION_FLAG = 'Y' THEN 'Convert from RMD'&#xD;&#xA;&#x9; WHEN [DESCRIPTION] IS NULL AND DISABILITY_CONVERSION_DATE IS NOT NULL AND CONVERTED_MIN_DISTRIBUTION_FLAG IS NULL THEN 'Disability Conversion'&#xD;&#xA;&#x9; ELSE [DESCRIPTION] END,&#xD;&#xA;TERM_CERTAIN_END_DATE,PAYMENT_DATE,SUSPENSION_REASON_DESCRIPTION,BenefitOption&#xD;&#xA;FROM #TMP_CL_SUSP a&#xD;&#xA;LEFT JOIN #TMP_CONV b on a.MPID_OrganizationID = b.MPID_OrganizationID&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DROP TABLE #TMP_CL_SUSP, #TMP_CONV">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="TrialMinimumGuaranteeChangeSummaryReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable">
      <parameters />
    </query>
    <query ID="TrialBenefitPaymentChangeMainReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;DECLARE @LAST_SCHEDULE_ID INT&#xD;&#xA;DECLARE @LAST_PAYMENTDATE DATETIME&#xD;&#xA;DECLARE @CREATED_BY VARCHAR(50)&#xD;&#xA;&#xD;&#xA;SET @LAST_PAYMENTDATE  = DATEADD(M,-1,@PAYMENTDATE)&#xD;&#xA;&#xD;&#xA;SELECT @LAST_SCHEDULE_ID = PAYMENT_SCHEDULE_ID,@CREATED_BY = ISNULL(CREATED_BY,'') FROM SGT_PAYMENT_SCHEDULE WHERE STATUS_VALUE = 'PRCD' AND SCHEDULE_TYPE_VALUE = 'MTLY' AND PAYMENT_DATE = @LAST_PAYMENTDATE&#xD;&#xA;SELECT @LAST_SCHEDULE_ID = ISNULL(@LAST_SCHEDULE_ID,0)&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;CREATE TABLE #PREV&#xD;&#xA; (&#xD;&#xA; PAYEE_ACCOUNT_ID INT,&#xD;&#xA; MPI_PERSON_ID VARCHAR(30),&#xD;&#xA; PAYEE_NAME VARCHAR(150),&#xD;&#xA; MPI_ORG_ID VARCHAR(30),&#xD;&#xA; ORGANIZATION_NAME VARCHAR(100),&#xD;&#xA; PAYMENT_ITEM_TYPE_ID INT,&#xD;&#xA; AMOUNT DECIMAL(13,2),&#xD;&#xA; PLAN_NAME VARCHAR(30))&#xD;&#xA;&#xD;&#xA; --COND: 2&#xD;&#xA; INSERT INTO #PREV&#xD;&#xA; SELECT TEMP.PAYEE_ACCOUNT_ID, TEMP.MPI_PERSON_ID, TEMP.PAYEE_NAME, TEMP.MPI_ORG_ID, TEMP.ORGANIZATION_NAME, &#xD;&#xA;  PHD.PAYMENT_ITEM_TYPE_ID, SUM(PHD.AMOUNT) AS AMOUNT, TEMP.PLAN_NAME &#xD;&#xA;  FROM DBO.TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH ON TEMP.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE) &#xD;&#xA;     WHERE ISNULL(PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID&#xD;&#xA;     AND PIT.ITEM_TYPE_CODE NOT IN ('ITEM45','ITEM46','ITEM47','ITEM56')&#xD;&#xA;     GROUP BY TEMP.PAYEE_ACCOUNT_ID, TEMP.MPI_PERSON_ID, TEMP.PAYEE_NAME, TEMP.MPI_ORG_ID, TEMP.ORGANIZATION_NAME, PHD.PAYMENT_ITEM_TYPE_ID,TEMP.PLAN_NAME&#xD;&#xA; &#xD;&#xA;----------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA;&#xD;&#xA;SELECT MA.PAYEE_ACCOUNT_ID&#xD;&#xA; , MA.MPI_PERSON_ID, MA.PAYEE_NAME&#xD;&#xA; , MA.MPI_ORG_ID, MA.ORGANIZATION_NAME&#xD;&#xA; , ITEM_TYPE_CODE&#xD;&#xA; , ITEM_TYPE_DESCRIPTION&#xD;&#xA; , CHECK_COMPONENT_DESCRIPTION &#xD;&#xA; , ISNULL(AFTERAMOUNT,0)* ITEM_TYPE_DIRECTION AS AFTER_AMOUNT&#xD;&#xA; , ISNULL(BEFOREAMOUNT,0)* ITEM_TYPE_DIRECTION AS BEFORE_AMOUNT&#xD;&#xA; , (ISNULL(AFTERAMOUNT,0)* ITEM_TYPE_DIRECTION) - (ISNULL(BEFOREAMOUNT,0)* ITEM_TYPE_DIRECTION) AS DIFFERENCE_AMOUNT&#xD;&#xA; , PIT.ITEM_TYPE_DIRECTION &#xD;&#xA; , PLAN_NAME&#xD;&#xA; INTO #FINAL&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;--&lt;&lt;&lt;&lt; CUR MONTH PAYMENT ITEM WISE AMOUNT, OTHER THAN BATCH ITEM&#xD;&#xA;SELECT &#xD;&#xA;  ISNULL(CUR_PAY.PAYEE_ACCOUNT_ID, PREV.PAYEE_ACCOUNT_ID) AS PAYEE_ACCOUNT_ID&#xD;&#xA; , ISNULL(CUR_PAY.MPI_PERSON_ID, PREV.MPI_PERSON_ID) AS MPI_PERSON_ID&#xD;&#xA; , ISNULL(CUR_PAY.MPI_ORG_ID, PREV.MPI_ORG_ID) AS MPI_ORG_ID&#xD;&#xA; , ISNULL(CUR_PAY.PAYMENT_ITEM_TYPE_ID, PREV.PAYMENT_ITEM_TYPE_ID) PAYMENT_ITEM_TYPE_ID&#xD;&#xA; , CUR_PAY.AMOUNT AS AFTERAMOUNT, PREV.AMOUNT AS BEFOREAMOUNT&#xD;&#xA; , ISNULL(CUR_PAY.PAYEE_NAME, PREV.PAYEE_NAME) AS PAYEE_NAME&#xD;&#xA; , ISNULL(CUR_PAY.ORGANIZATION_NAME, PREV.ORGANIZATION_NAME) AS ORGANIZATION_NAME&#xD;&#xA; , ISNULL(CUR_PAY.PLAN_NAME,PREV.PLAN_NAME) AS PLAN_NAME&#xD;&#xA; FROM &#xD;&#xA;(&#xD;&#xA;        SELECT TEMP.PAYEE_ACCOUNT_ID, TEMP.MPI_PERSON_ID, TEMP.PAYEE_NAME, TEMP.MPI_ORG_ID, TEMP.ORGANIZATION_NAME,&#xD;&#xA;   PAPI.PAYMENT_ITEM_TYPE_ID, SUM((ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) AS AMOUNT, TEMP.PLAN_NAME --PIR 994&#xD;&#xA;   FROM DBO.TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP&#xD;&#xA;   --INNER JOIN DBO.SGT_PAYEE_ACCOUNT_STATUS(NOLOCK) PAS ON PAS.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID /*TO AVOID DUPLICATE ENTRIES IF MORE THAN ONE PAYEE ACCOUNT STATUS IS AVAILABLE*/&#xD;&#xA;   INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;   INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PAPI.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;   INNER JOIN (SELECT DISTINCT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER WHERE PAYMENT_SCHEDULE_ID = @LAST_SCHEDULE_ID) PHHLAST&#xD;&#xA;      ON PHHLAST.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;   LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;      ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;      AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)         &#xD;&#xA;  WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;     AND TEMP.STATUS_VALUE IN ('APRD','RECV')&#xD;&#xA;     AND PIT.ITEM_TYPE_CODE NOT IN ('ITEM45','ITEM46','ITEM47','ITEM56')&#xD;&#xA;        GROUP BY TEMP.PAYEE_ACCOUNT_ID, TEMP.MPI_PERSON_ID, TEMP.PAYEE_NAME, TEMP.MPI_ORG_ID, TEMP.ORGANIZATION_NAME, PAPI.PAYMENT_ITEM_TYPE_ID, TEMP.PLAN_NAME&#xD;&#xA;&#xD;&#xA;) AS CUR_PAY&#xD;&#xA;&#xD;&#xA;FULL OUTER JOIN  &#xD;&#xA;&#xD;&#xA;--&lt;&lt;&lt;&lt; PREV MONTH PAYMENT ITEM WISE AMOUNT, OTHER THAN BATCH ITEM&#xD;&#xA;#PREV AS PREV ON CUR_PAY.PAYEE_ACCOUNT_ID = PREV.PAYEE_ACCOUNT_ID&#xD;&#xA;                 AND CUR_PAY.PAYMENT_ITEM_TYPE_ID = PREV.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE CUR_PAY.PAYEE_ACCOUNT_ID IS NULL OR PREV.PAYEE_ACCOUNT_ID IS NULL OR CUR_PAY.AMOUNT &lt;&gt; PREV.AMOUNT  --COND: 4 &amp; 5&#xD;&#xA;) AS MA &#xD;&#xA;     INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON MA.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  LEFT OUTER JOIN DBO.SGT_PERSON(NOLOCK) PER ON MA.MPI_PERSON_ID = PER.MPI_PERSON_ID &#xD;&#xA;     LEFT OUTER JOIN DBO.SGT_ORGANIZATION(NOLOCK) ORG ON MA.MPI_ORG_ID = ORG.MPI_ORG_ID&#xD;&#xA;&#xD;&#xA;IF @CHOICE = 'N'&#xD;&#xA;BEGIN&#xD;&#xA; SELECT PAYEE_ACCOUNT_ID,  &#xD;&#xA; ISNULL(MPI_PERSON_ID,MPI_ORG_ID) AS MPID_ORGANIZATIONID,&#xD;&#xA; CASE WHEN MPI_PERSON_ID IS NULL THEN ORGANIZATION_NAME ELSE PAYEE_NAME END AS PAYEENAME_ORGANIZATIONNAME,&#xD;&#xA; ITEM_TYPE_DESCRIPTION AS ITEM_TYPE,   &#xD;&#xA; BEFORE_AMOUNT, AFTER_AMOUNT,DIFFERENCE_AMOUNT &#xD;&#xA; ,PLAN_NAME&#xD;&#xA; ,@PAYMENTDATE AS PAYMENT_DATE&#xD;&#xA; FROM #FINAL&#xD;&#xA;END &#xD;&#xA;ELSE IF @CHOICE = 'G'&#xD;&#xA;BEGIN&#xD;&#xA; SELECT A.ITEM_TYPE_DESCRIPTION AS ITEM_TYPE,SUM(BEFORE_AMOUNT) AS BEFORE_AMOUNT,SUM(AFTER_AMOUNT) AS AFTER_AMOUNT,&#xD;&#xA;   SUM(DIFFERENCE_AMOUNT) AS DIFFERENCE_AMOUNT,A.ITEM_TYPE_DIRECTION,B.ITEM_PRIORITY&#xD;&#xA; FROM #FINAL A&#xD;&#xA; INNER JOIN SGT_PAYMENT_ITEM_TYPE B ON A.ITEM_TYPE_CODE = B.ITEM_TYPE_CODE&#xD;&#xA; GROUP BY A.ITEM_TYPE_DESCRIPTION,A.ITEM_TYPE_DIRECTION,B.ITEM_PRIORITY&#xD;&#xA; ORDER BY B.ITEM_PRIORITY&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;----DROP TEMP TABLE&#xD;&#xA;DROP TABLE #PREV&#xD;&#xA;DROP TABLE #FINAL&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@CHOICE" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="TrialMonthlyBenefitPaymentSummaryReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @LAST_PAYMENTDATE     DATETIME&#xD;&#xA;SET @LAST_PAYMENTDATE = DATEADD(M,-1,@PAYMENTDATE)&#xD;&#xA;&#xD;&#xA;DECLARE @LAST_SCHEDULE_ID INT&#xD;&#xA;DECLARE @PROCESS_DATE DATETIME&#xD;&#xA;DECLARE @LASTEFFECTIVEDATE    DATETIME&#xD;&#xA;&#xD;&#xA;SELECT @LAST_SCHEDULE_ID = PAYMENT_SCHEDULE_ID,@PROCESS_DATE = ISNULL(PROCESS_START_TIME,PROCESS_DATE) &#xD;&#xA;FROM SGT_PAYMENT_SCHEDULE &#xD;&#xA;WHERE PAYMENT_DATE = @LAST_PAYMENTDATE AND SCHEDULE_TYPE_VALUE = 'MTLY' AND STATUS_VALUE = 'PRCD'&#xD;&#xA;&#xD;&#xA;--------------------------------------------------------------------&#xD;&#xA;CREATE TABLE #PREV&#xD;&#xA;      (&#xD;&#xA;      PAYEE_ACCOUNT_ID INT,&#xD;&#xA;      PAYEE_PERSLINK_ID INT,&#xD;&#xA;      PAYEE_ORG_ID INT,&#xD;&#xA;      --PAYMENT_ITEM_TYPE_ID INT,&#xD;&#xA;      AMOUNT DECIMAL(13,2),&#xD;&#xA;      PLAN_ID INT&#xD;&#xA;      )&#xD;&#xA;&#xD;&#xA;      --COND: 2&#xD;&#xA;      INSERT INTO #PREV&#xD;&#xA;      SELECT TEMP.PAYEE_ACCOUNT_ID, &#xD;&#xA;            TEMP.PERSON_ID, TEMP.ORG_ID,-- PHD.PAYMENT_ITEM_TYPE_ID, &#xD;&#xA;            SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN PHD.AMOUNT ELSE 0 END) &#xD;&#xA;            + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * PHD.AMOUNT) ELSE 0 END) AS AMOUNT,&#xD;&#xA;            TEMP.PLAN_ID&#xD;&#xA;            FROM TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP &#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH ON TEMP.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;          WHERE ISNULL(PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID&#xD;&#xA;           AND PIT.ITEM_TYPE_CODE NOT IN ('ITEM45','ITEM46','ITEM47','ITEM56')&#xD;&#xA;      GROUP BY TEMP.PAYEE_ACCOUNT_ID, TEMP.PERSON_ID, TEMP.ORG_ID,TEMP.PLAN_ID--, PHD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT REPORDER,REPTYPE,[2] AS MPIPP_Amount,[7] AS L52_Amount,[8] AS L161_Amount,[3] AS L600_Amount,[4] AS L666_Amount,[6] AS L700_Amount&#xD;&#xA;            INTO #FINALRPT&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;----A.      NEW RETIREE DETAIL REPORT AS POSITIVE AMOUNT&#xD;&#xA;SELECT 3 AS REPORDER,'New Payee' AS REPTYPE, ABS(SUM(AMOUNT)) AS AMOUNT, PLAN_ID &#xD;&#xA;FROM (&#xD;&#xA;      --COPIED FROM REP# 2&#xD;&#xA;      SELECT TEMP.PAYEE_ACCOUNT_ID,&#xD;&#xA;      --SUM(PIT.ITEM_TYPE_DIRECTION*PAPI.AMOUNT) AS AMOUNT, &#xD;&#xA;      SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;      + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS AMOUNT,&#xD;&#xA;      TEMP.PLAN_ID&#xD;&#xA;      FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  LEFT OUTER JOIN &#xD;&#xA;                        (&#xD;&#xA;                              SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;                                    LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE B WITH(NOLOCK) ON A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                                    WHERE ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY') PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;                  LEFT OUTER JOIN SGS_CODE_VALUE BTP WITH(NOLOCK) ON TEMP.BENEFIT_ACCOUNT_TYPE_ID = BTP.CODE_ID AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE = BTP.CODE_VALUE&#xD;&#xA;         LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;            ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;            AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;            WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;                  AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL &#xD;&#xA;                  AND TEMP.STATUS_VALUE = 'APRD'&#xD;&#xA;            ----COND: 1,2,3,4&#xD;&#xA;                  AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO')&#xD;&#xA;                  AND TEMP.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'             &#xD;&#xA;      GROUP BY TEMP.PAYEE_ACCOUNT_ID,  TEMP.PLAN_ID&#xD;&#xA;      UNION ALL&#xD;&#xA;      SELECT TEMP.PAYEE_ACCOUNT_ID,&#xD;&#xA;      --SUM(PIT1.ITEM_TYPE_DIRECTION*PAPI.AMOUNT) AS AMOUNT, &#xD;&#xA;      SUM(CASE WHEN PIT1.ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;      + SUM(CASE WHEN PIT1.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT1.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS AMOUNT,&#xD;&#xA;      TEMP.PLAN_ID &#xD;&#xA;      FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 WITH(NOLOCK) ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA;                           AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH On SPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;                  INNER JOIN SGT_ORGANIZATION SO On SPHH.ORG_ID = SO.ORG_ID&#xD;&#xA;                  LEFT OUTER JOIN &#xD;&#xA;                        (&#xD;&#xA;                              SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;                                    INNER JOIN SGT_PAYMENT_SCHEDULE B WITH(NOLOCK) ON A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                                    WHERE ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY'&#xD;&#xA;                        ) PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;                        LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;            ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;            AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;                  LEFT OUTER JOIN SGS_CODE_VALUE BTP WITH(NOLOCK) ON TEMP.BENEFIT_ACCOUNT_TYPE_ID = BTP.CODE_ID AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE = BTP.CODE_VALUE&#xD;&#xA;            WHERE &#xD;&#xA;                  PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;                  AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL &#xD;&#xA;                  AND TEMP.STATUS_VALUE = 'APRD'&#xD;&#xA;            --COND: 1,2,3,4&#xD;&#xA;                  AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO') &#xD;&#xA;                  AND TEMP.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;                  AND SPHH.ORG_ID is not null&#xD;&#xA;      GROUP BY TEMP.PAYEE_ACCOUNT_ID, TEMP.PLAN_ID&#xD;&#xA;) TEMP&#xD;&#xA;GROUP BY  PLAN_ID&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;------------D.    LAST MONTH’S PAYEE WITH ‘BENEFIT OPTION’&#xD;&#xA;SELECT 6 AS REPORDER,'Previous Month One Time Payments', &#xD;&#xA;       -1*(ABS(SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN PIT.ITEM_TYPE_DIRECTION*AMOUNT ELSE 0 END)) &#xD;&#xA;       + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS AMOUNT,&#xD;&#xA;      PHH.PLAN_ID&#xD;&#xA;      FROM SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH&#xD;&#xA;      INNER JOIN SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR XR ON PA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID&#xD;&#xA;      &#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID &#xD;&#xA;AND XR.BENEFIT_OPTION_VALUE = 'LUMP'&#xD;&#xA;GROUP BY PHH.PLAN_ID&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;-------------3 E. THIS MONTH’S PAYEE WITH ‘BENEFIT OPTION&#xD;&#xA;SELECT 7 AS REPORDER,'Current Month  One Time Payments',  SUM(AMOUNT) AS AMOUNT,PLAN_ID &#xD;&#xA;FROM (&#xD;&#xA;      SELECT 8 AS REPORDER, &#xD;&#xA;      --SUM(PIT.ITEM_TYPE_DIRECTION*AMOUNT) AS AMOUNT, &#xD;&#xA;      SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN PIT.ITEM_TYPE_DIRECTION*(ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;      + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS AMOUNT,&#xD;&#xA;      TEMP.PLAN_ID &#xD;&#xA;      --COPIED FROM REP: 8&#xD;&#xA;      FROM DBO.TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP&#xD;&#xA;      INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;      INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;            ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;            AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;      WHERE TEMP.STATUS_VALUE = 'APRD' AND &#xD;&#xA;      PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE) AND&#xD;&#xA;      BENEFIT_OPTION_VALUE = 'LUMP'&#xD;&#xA;      GROUP BY  TEMP.PLAN_ID&#xD;&#xA;      UNION ALL&#xD;&#xA;      SELECT 8 AS REPORDER, &#xD;&#xA;      SUM(CASE WHEN PIT1.ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) AS AMOUNT,--PIR 994&#xD;&#xA;      TEMP.PLAN_ID &#xD;&#xA;      FROM DBO.TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP&#xD;&#xA;      INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;      INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA;               AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;    LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;            ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;            AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;      WHERE TEMP.STATUS_VALUE = 'APRD' AND&#xD;&#xA;      PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE) AND&#xD;&#xA;      BENEFIT_OPTION_VALUE = 'LUMP' AND&#xD;&#xA;      PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' AND&#xD;&#xA;      PARD.STATUS_VALUE = 'ACTV'&#xD;&#xA;      GROUP BY  TEMP.PLAN_ID&#xD;&#xA;) REFUNDS&#xD;&#xA;GROUP BY REPORDER,PLAN_ID&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;--------F.  SUM OF ALL PAYMENTS TO THE PAYEE IN ‘FINAL ADHOC PROCESS’ OR VENDOR PAYMENTS AS NEGATIVE AMOUNT &#xD;&#xA;SELECT 2 AS REPORDER,'Final Adhoc Process',  &#xD;&#xA; ABS(SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN PIT.ITEM_TYPE_DIRECTION*AMOUNT ELSE 0 END)) &#xD;&#xA; + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS AMOUNT,PLAN_ID&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD WITH(NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_SCHEDULE PS ON PS.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID &#xD;&#xA;LEFT JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;WHERE PS.PROCESS_DATE &gt;= CONVERT(VARCHAR(10), @PROCESS_DATE, 110) &#xD;&#xA;AND PS.SCHEDULE_TYPE_VALUE IN ('ADHM')&#xD;&#xA;GROUP BY PLAN_ID&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;--------F.  SUM OF ALL PAYMENTS TO THE PAYEE IN ‘FINAL ADHOC PROCESS’ OR VENDOR PAYMENTS AS NEGATIVE AMOUNT &#xD;&#xA;SELECT 9 AS REPORDER,'Final Adhoc Process',  &#xD;&#xA; -1*(ABS(SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN PIT.ITEM_TYPE_DIRECTION*AMOUNT ELSE 0 END)) &#xD;&#xA; + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS AMOUNT,PLAN_ID&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD WITH(NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_SCHEDULE PS ON PS.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID &#xD;&#xA;LEFT JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;WHERE PS.PROCESS_DATE &gt;= CONVERT(VARCHAR(10), @PROCESS_DATE, 110) &#xD;&#xA;AND PS.SCHEDULE_TYPE_VALUE IN ('ADHM')&#xD;&#xA;GROUP BY PLAN_ID&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;---------G. TOTAL DIFFERENCE BENEFIT PAYMENT CHANGE REPORT&#xD;&#xA;SELECT 8 AS REPORDER,'Benefit Payment Change',  SUM(AMOUNT) AS AMOUNT,PLAN_ID&#xD;&#xA;--COPIED FROM REP #6 AND CHANGED THE SELECT &amp; GROUP BY CLAUSE&#xD;&#xA;FROM &#xD;&#xA;--COND: 1&#xD;&#xA;(&#xD;&#xA;SELECT --ISNULL(CUR_PAY.PAYMENT_ITEM_TYPE_ID, PREV.PAYMENT_ITEM_TYPE_ID) AS PAYMENT_ITEM_TYPE_ID,&#xD;&#xA;      ISNULL(CUR_PAY.AMOUNT,0) - ISNULL(PREV.AMOUNT,0) AS AMOUNT,ISNULL(CUR_PAY.PLAN_ID,PREV.PLAN_ID) AS PLAN_ID&#xD;&#xA;FROM&#xD;&#xA;(SELECT TEMP.PAYEE_ACCOUNT_ID, --PAPI.PAYMENT_ITEM_TYPE_ID,&#xD;&#xA;      SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END) --PIR 994&#xD;&#xA;      + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS AMOUNT, TEMP.PLAN_ID&#xD;&#xA;FROM TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP&#xD;&#xA;      --INNER JOIN DBO.SGT_PAYEE_ACCOUNT_STATUS(NOLOCK) PAS ON PAS.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID &#xD;&#xA;      INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PAPI.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN (SELECT DISTINCT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER WHERE PAYMENT_SCHEDULE_ID = @LAST_SCHEDULE_ID) PHHLAST&#xD;&#xA;                        ON PHHLAST.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID   &#xD;&#xA;      LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;            ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;    AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)                 &#xD;&#xA;WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;AND TEMP.STATUS_VALUE  IN ('APRD','RECV')&#xD;&#xA;AND PIT.ITEM_TYPE_CODE NOT IN ('ITEM45','ITEM46','ITEM47','ITEM56')&#xD;&#xA;GROUP BY TEMP.PAYEE_ACCOUNT_ID, TEMP.PLAN_ID--, PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;) AS CUR_PAY&#xD;&#xA;-----&#xD;&#xA;FULL OUTER JOIN  &#xD;&#xA;--&lt;&lt;&lt;&lt; PREV MONTH PAYMENT ITEM WISE AMOUNT, OTHER THAN BATCH ITEM&#xD;&#xA;#PREV AS PREV &#xD;&#xA;--COND: 3&#xD;&#xA;            ON CUR_PAY.PAYEE_ACCOUNT_ID = PREV.PAYEE_ACCOUNT_ID&#xD;&#xA;                  --AND CUR_PAY.PAYMENT_ITEM_TYPE_ID = PREV.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;--COND: 4 &amp; 5&#xD;&#xA;WHERE CUR_PAY.PAYEE_ACCOUNT_ID IS NULL OR PREV.PAYEE_ACCOUNT_ID IS NULL OR CUR_PAY.AMOUNT &lt;&gt; PREV.AMOUNT&#xD;&#xA;) MA &#xD;&#xA;--INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON MA.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;GROUP BY  PLAN_ID&#xD;&#xA;) --P  PIVOT (SUM(AMOUNT) FOR MONTHLY_SUMMARY_GROUP_VALUE IN ([GROS],[FEDL], [STAT], [OTHR])) AS PVT&#xD;&#xA;P PIVOT (SUM(AMOUNT) FOR PLAN_ID IN (&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;)) AS PVT&#xD;&#xA;ORDER BY REPORDER&#xD;&#xA;&#xD;&#xA;--RID#88493 Beginning balance issue&#xD;&#xA;-- INSERTING THE BEGINNING BALANCE FROM PAYMENT SUMMARY TABLE FOR LAST MONTH ENDING BALANCE&#xD;&#xA;--      INSERT INTO #FINALRPT   &#xD;&#xA;--      SELECT  1 AS REPORDER, 'Beginning Balance' AS REPTYPE,MPIPP_AMOUNT,L52_AMOUNT,L161_AMOUNT,L600_AMOUNT,L666_AMOUNT,L700_AMOUNT&#xD;&#xA;--      FROM SGT_MONTHLY_BENIFIT_SUMMARY&#xD;&#xA;--      WHERE PAYMENT_SCHEDULE_ID = @LAST_SCHEDULE_ID   &#xD;&#xA;      &#xD;&#xA;      INSERT INTO #FINALRPT   &#xD;&#xA;      SELECT REPORDER,REPTYPE,[2] AS MPIPP_Amount,[7] AS L52_Amount,[8] AS L161_Amount,[3] AS L600_Amount,[4] AS L666_Amount,[6] AS L700_Amount           &#xD;&#xA;      FROM &#xD;&#xA;      (&#xD;&#xA;&#x9;&#x9;SELECT 1 AS REPORDER,'Beginning Balance' AS REPTYPE, ABS(SUM(AMOUNT)) AS AMOUNT, PLAN_ID &#xD;&#xA;&#x9;&#x9;FROM (&#xD;&#xA;&#x9;  &#x9;&#x9;&#x9;SELECT A.PAYEE_ACCOUNT_ID,1 AS REPORDER,'LAST PAY' AS REPTYPE,&#xD;&#xA;&#x9;&#x9;&#x9;ABS(SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 or PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN B.AMOUNT*PIT.ITEM_TYPE_DIRECTION ELSE 0 END)) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * B.AMOUNT) ELSE 0 END) AS AMOUNT,&#xD;&#xA;&#x9;&#x9;&#x9;A.PLAN_ID&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PAYMENT_HISTORY_HEADER A&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL B ON A.PAYMENT_HISTORY_HEADER_ID = B.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON B.PAYMENT_ITEM_TYPE_ID  = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;&#x9;WHERE A.PAYMENT_SCHEDULE_ID = @LAST_SCHEDULE_ID&#xD;&#xA;&#x9;&#x9;&#x9;and PIT.ITEM_TYPE_CODE not in ('ITEM45','ITEM46','ITEM47','ITEM56') &#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY A.PAYEE_ACCOUNT_ID,A.PLAN_ID&#xD;&#xA;&#x9;&#x9;&#x9;) BEGBAL&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY PLAN_ID&#xD;&#xA;&#x9;) P PIVOT (SUM(AMOUNT) FOR PLAN_ID IN (&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;)) AS PVT&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      INSERT INTO #FINALRPT   &#xD;&#xA;      SELECT REPORDER,REPTYPE,[2] AS MPIPP_Amount,[7] AS L52_Amount,[8] AS L161_Amount,[3] AS L600_Amount,[4] AS L666_Amount,[6] AS L700_Amount           &#xD;&#xA;      FROM &#xD;&#xA;      (&#xD;&#xA;            SELECT 4 AS REPORDER,'Reinstated Payee' AS REPTYPE,  &#xD;&#xA;            ABS(SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END))--PIR 994 &#xD;&#xA;            + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS AMOUNT,&#xD;&#xA;            TEMP.PLAN_ID &#xD;&#xA;            FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_STATUS(NOLOCK) PASLAST ON PASLAST.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID &#xD;&#xA;                  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;                ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;            AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;                  --INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAS.PAYEE_ACCOUNT_ID&#xD;&#xA;            WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE) /*VINOVIN - Changed to payment date*/&#xD;&#xA;                        &#xD;&#xA;                        AND   PASLAST.PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;                               (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;                              WHERE PAS1.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND PAS1.STATUS_EFFECTIVE_DATE &lt;= @LAST_PAYMENTDATE&#xD;&#xA;                              AND PAS1.STATUS_EFFECTIVE_DATE &lt; @PROCESS_DATE/*change made on 12/01/2013-rohan kunal */&#xD;&#xA;                                ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;                        AND PASLAST.STATUS_VALUE NOT IN ('RECV','APRD')&#xD;&#xA;                                                                       &#xD;&#xA;            --COND: 7&#xD;&#xA;                  AND TEMP.PAYEE_ACCOUNT_ID IN &#xD;&#xA;                  (     SELECT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER PHH   &#xD;&#xA;                        LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE B ON B.PAYMENT_SCHEDULE_ID = ISNULL(PHH.PAYMENT_SCHEDULE_ID,0)&#xD;&#xA;                        WHERE PHH.PAYMENT_DATE &lt; @LAST_PAYMENTDATE AND ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY' &#xD;&#xA;                  )&#xD;&#xA;                  AND TEMP.PAYEE_ACCOUNT_ID NOT IN &#xD;&#xA;                  (&#xD;&#xA;                        SELECT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER PHH   &#xD;&#xA;                        INNER JOIN SGT_PAYMENT_SCHEDULE B ON ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                        WHERE ISNULL(B.PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID&#xD;&#xA;                  )&#xD;&#xA;                  --COND: 1,2,3,4,5&#xD;&#xA;                        AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'WDRL', 'DDPT', 'QDRO') &#xD;&#xA;                        AND TEMP.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;            GROUP BY TEMP.PLAN_ID&#xD;&#xA;            &#xD;&#xA;            UNION ALL&#xD;&#xA;            &#xD;&#xA;            SELECT 5 AS REPORDER,'Closed/Suspended',  &#xD;&#xA;                   -1*(ABS(SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) ELSE 0 END)) --PIR 994&#xD;&#xA;                   + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END)) AS AMOUNT,&#xD;&#xA;                  PBXR.PLAN_ID&#xD;&#xA;            FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  --INNER JOIN DBO.SGT_PAYEE_ACCOUNT_STATUS(NOLOCK) PASLAST ON PASLAST.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;                INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID  &#xD;&#xA;                  INNER JOIN (SELECT DISTINCT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER(NOLOCK) WHERE ISNULL(PAYMENT_SCHEDULE_ID,0) = @LAST_SCHEDULE_ID)PHH ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID /*ADDED TO AVOID PICKING UP MULTIPLE PAYMENT HISTORY FOR SAME DATE FOR SAME PAYEE ACCOUNT*/&#xD;&#xA;            --LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            LEFT OUTER JOIN SGT_PERSON PER(NOLOCK) ON SPA.PERSON_ID = PER.PERSON_ID&#xD;&#xA;            LEFT OUTER JOIN SGT_ORGANIZATION ORG(NOLOCK) ON SPA.ORG_ID = ORG.ORG_ID&#xD;&#xA;            LEFT OUTER JOIN SGS_CODE_VALUE CVRELATION (nolock) ON SPA.ACCOUNT_RELATION_ID= CVRELATION.CODE_ID AND SPA.ACCOUNT_RELATION_VALUE = CVRELATION.CODE_VALUE&#xD;&#xA;                LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID=SPA.PLAN_BENEFIT_ID &#xD;&#xA;                LEFT OUTER JOIN SGT_PLAN SPLN WITH(NOLOCK) ON SPLN.PLAN_ID=PBXR.PLAN_ID&#xD;&#xA;                  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;                 ON PITY.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;             AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;                 WHERE PAPI.START_DATE &lt;= @LAST_PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @LAST_PAYMENTDATE) &#xD;&#xA;                  AND PAS.PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;                  (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;                  FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;                  WHERE PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;                  ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;                  AND PAS.STATUS_VALUE NOT IN ('RECV','APRD')&#xD;&#xA;                  AND SPA.PAYEE_ACCOUNT_ID NOT IN &#xD;&#xA;                  (&#xD;&#xA;                        SELECT PAYEE_ACCOUNT_ID FROM TEMP_TABLE_FOR_PAYMENT TEMP   &#xD;&#xA;                        WHERE TEMP.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;                  )&#xD;&#xA;                  AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'WDRL', 'DDPT', 'QDRO')&#xD;&#xA;                  AND PBXR.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'&#xD;&#xA;            GROUP BY  PBXR.PLAN_ID&#xD;&#xA;      )     &#xD;&#xA;      P PIVOT (SUM(AMOUNT) FOR PLAN_ID IN (&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;)) AS PVT&#xD;&#xA;&#xD;&#xA;ORDER BY REPORDER&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT REPORDER, REPTYPE, &#xD;&#xA;MPIPP_Amount, L52_Amount, L161_Amount, L600_Amount, L666_Amount, L700_Amount,@PAYMENTDATE AS PAYMENT_DATE&#xD;&#xA;FROM #FINALRPT &#xD;&#xA;GROUP BY REPORDER, REPTYPE, MPIPP_Amount, L52_Amount, L161_Amount, L600_Amount, L666_Amount, L700_Amount&#xD;&#xA;ORDER BY REPORDER&#xD;&#xA;&#xD;&#xA;DROP TABLE #PREV&#xD;&#xA;DROP TABLE #FINALRPT&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="TrialNonMonthlyPaymentDetailReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM &#xD;&#xA; (&#xD;&#xA; SELECT   TPA.PAYEE_ACCOUNT_ID,&#xD;&#xA; CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) THEN TPA.MPI_PERSON_ID +' / '+ ISNULL( TRAN_ORG.MPI_ORG_ID,'') ELSE TPA.MPI_PERSON_ID END AS MPID_ORGANIZATIONID, &#xD;&#xA;  CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) THEN ISNULL( TRAN_ORG.ORG_NAME,'') +' FBO:'+ ISNULL(RTRIM(TPA.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TPA.PAYEE_LAST_NAME)),'') ELSE ISNULL(RTRIM(TPA.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TPA.PAYEE_LAST_NAME)),'') END AS PAYEENAME_ORGANIZATIONNAME,&#xD;&#xA;   TPA.PLAN_NAME,&#xD;&#xA;   TPA.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP,&#xD;&#xA;   CASE WHEN TPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND TPA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'DDPT' ELSE TPA.BENEFIT_ACCOUNT_TYPE_VALUE END AS BENEFIT_TYPE,&#xD;&#xA;   TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;  MAX(ISNULL(TOTAL_UVHP_INTEREST_AMOUNT,0) - ISNULL(TOTAL_UVHP_INTEREST_QDRO_OFFSET,0))  AS  UVHP_INT&#xD;&#xA; , MAX(ISNULL(NON_VESTED_EE_INTEREST,0) + ISNULL(VESTED_EE_INTEREST,0) - ISNULL(TOTAL_EE_INTEREST_QDRO_OFFSET,0)) AS EE_INT&#xD;&#xA; , MAX(ISNULL(TOTAL_UVHP_CONTRIBUTION_AMOUNT,0) - ISNULL(TOTAL_UVHP_CONTRIBUTION_QDRO_OFFSET,0))  AS UVHP&#xD;&#xA; , MAX(ISNULL(NON_VESTED_EE_AMOUNT,0) + ISNULL(VESTED_EE_AMOUNT,0) - ISNULL(TOTAL_EE_CONTRIBUTION_QDRO_OFFSET,0)) AS  EE_CONT,&#xD;&#xA;&#xD;&#xA;   --SUM(((PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)))*PIT.ITEM_TYPE_DIRECTION)) AS NET_AMOUNT,&#xD;&#xA;   SUM(CASE WHEN PIT.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'TEEA' OR (PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' AND PIT.TAXABLE_ITEM_FLAG='Y') THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS TAXABLE_AMOUNT, --PIR 994&#xD;&#xA;   SUM(CASE WHEN PIT.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'NEEA' OR (PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' AND PIT.TAXABLE_ITEM_FLAG='N') THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS NON_TAXABLE_AMOUNT,--PIR 994&#xD;&#xA;   SUM(CASE WHEN PIT.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'STTX' THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS STATE_TAX_AMOUNT, --PIR 994&#xD;&#xA;   SUM(CASE WHEN PIT.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'FDTX' THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS FEDERAL_TAX_AMOUNT,--PIR 994&#xD;&#xA;   --SUM(CASE WHEN PIT.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'TXRA' THEN ((PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)))*PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS TAXABLE_ROLLOVER_AMOUNT,&#xD;&#xA;   --SUM(CASE WHEN PIT.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'NTRA' THEN ((PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)))*PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS NON_TAXABLE_ROLLOVER_AMOUNT,&#xD;&#xA;   @PAYMENTDATE AS PAYMENT_DATE,&#xD;&#xA;   ISNULL(TPA.RETIREE_INCR_FLAG,'N') AS RETIREE_INCR_FLAG,&#xD;&#xA;   SPBA.FUNDS_TYPE_VALUE AS FUND_TYPE&#xD;&#xA;       , TPA.ACCOUNT_NUMBER&#xD;&#xA;      , CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) THEN  ISNULL('C/O '+TPA.TRANSFER_ORG_CONTACT_NAME + ', ','')+TRAN_ORG_ADD.TRAN_ORG_ADDRESS  &#xD;&#xA;          ELSE &#xD;&#xA;          CASE WHEN TPA.PERSON_ID IS NOT NULL THEN  PERADDR.PER_ADDRESS ELSE ORG_ADD.ORG_ADDRESS END &#xD;&#xA;          END &#xD;&#xA;        AS PER_ADDRESS&#xD;&#xA;   FROM TEMP_TABLE_FOR_PAYMENT TPA&#xD;&#xA; INNER JOIN  SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PHDE ON PHDE.PAYEE_ACCOUNT_ID=TPA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGS_CODE_VALUE SCV ON SCV.CODE_ID = TPA.BENEFIT_ACCOUNT_TYPE_ID AND SCV.CODE_VALUE = TPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHDE.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON P ON TPA.PERSON_ID=P.PERSON_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION ORG ON TPA.ORG_ID=ORG.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;   ON PITY.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;   AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA; LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD ON TPA.BENEFIT_CALCULATION_DETAIL_ID = SBCD.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = TPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION TRAN_ORG&#xD;&#xA;   ON TRAN_ORG.ORG_ID=TPA.TRANSFER_ORG_ID&#xD;&#xA; LEFT OUTER JOIN &#xD;&#xA;    (SELECT  PA1.PERSON_ID, &#xD;&#xA;          ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;          + ISNULL(PA1.ADDR_LINE_2 + ',','')&#xD;&#xA;                                  &#xD;&#xA;          + CASE WHEN CVDCOUNTY.DESCRIPTION = 'UNITED STATES' &#xD;&#xA;           THEN ISNULL(PA1.ADDR_CITY + ' ','')&#xD;&#xA;              + ISNULL(PA1.ADDR_STATE_VALUE + '  ','')                        &#xD;&#xA;              + ISNULL(PA1.ADDR_ZIP_CODE ,'')&#xD;&#xA;              + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ADDR_ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;             THEN '-'&#xD;&#xA;             ELSE '' END &#xD;&#xA;              + ISNULL(PA1.ADDR_ZIP_4_CODE + '','')&#xD;&#xA;           ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;              + ISNULL(PA1.ADDR_CITY + ',','')&#xD;&#xA;              + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS PER_ADDRESS&#xD;&#xA;          FROM SGT_PERSON_ADDRESS PA1   &#xD;&#xA;             LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.ADDR_STATE_ID AND CVDSTATE.CODE_VALUE = PA1.ADDR_STATE_VALUE&#xD;&#xA;          LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.ADDR_COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.ADDR_COUNTRY_VALUE&#xD;&#xA;          LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA1.ADDRESS_ID=PAC.ADDRESS_ID&#xD;&#xA;          AND PAC.ADDRESS_TYPE_VALUE='MAIL'&#xD;&#xA;          WHERE  PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;    )AS PERADDR ON PERADDR.PERSON_ID=TPA.PERSON_ID&#xD;&#xA;     LEFT OUTER JOIN &#xD;&#xA;        (SELECT  P.ORG_ID, &#xD;&#xA;          ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;          + ISNULL(PA1.ADDR_LINE_2 + ',','')&#xD;&#xA;          + CASE WHEN CVDCOUNTY.DESCRIPTION = 'UNITED STATES' &#xD;&#xA;           THEN ISNULL(PA1.CITY + ' ','')&#xD;&#xA;              + ISNULL(PA1.STATE_VALUE + '  ','')                        &#xD;&#xA;              + ISNULL(PA1.ZIP_CODE ,'')&#xD;&#xA;              + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;             THEN '-'&#xD;&#xA;             ELSE '' END &#xD;&#xA;              + ISNULL(PA1.ZIP_4_CODE + '','')&#xD;&#xA;           ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;              + ISNULL(PA1.CITY + ',','')&#xD;&#xA;              + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS TRAN_ORG_ADDRESS&#xD;&#xA;          FROM SGT_ORGANIZATION P &#xD;&#xA;          LEFT OUTER JOIN SGT_ORG_ADDRESS PA1   &#xD;&#xA;          ON  P.ORG_ID  = PA1.ORG_ID  &#xD;&#xA;          AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;          AND PA1.ADDRESS_TYPE_VALUE IN ('MAIL','PYAM')&#xD;&#xA;         LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.STATE_ID AND CVDSTATE.CODE_VALUE = PA1.STATE_VALUE&#xD;&#xA;          LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.COUNTRY_VALUE                           &#xD;&#xA;                           &#xD;&#xA;    )AS TRAN_ORG_ADD ON TRAN_ORG_ADD.ORG_ID=TRAN_ORG.ORG_ID&#xD;&#xA;    LEFT OUTER JOIN &#xD;&#xA;        (SELECT  P.ORG_ID, &#xD;&#xA;          ISNULL('C/O '+P.CARE_OF + ', ','')&#xD;&#xA;          +ISNULL(PA1.ADDR_LINE_1 + ', ','')&#xD;&#xA;          + ISNULL(PA1.ADDR_LINE_2 + ', ','')&#xD;&#xA;          + CASE WHEN CVDCOUNTY.DESCRIPTION = 'UNITED STATES' &#xD;&#xA;           THEN ISNULL(PA1.CITY + ' ','')&#xD;&#xA;              + ISNULL(PA1.STATE_VALUE + '  ', '')                        &#xD;&#xA;              + ISNULL(PA1.ZIP_CODE ,'')&#xD;&#xA;              + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;             THEN '-'&#xD;&#xA;             ELSE '' END &#xD;&#xA;              + ISNULL(PA1.ZIP_4_CODE + '','')&#xD;&#xA;           ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;              + ISNULL(PA1.CITY + ', ','')&#xD;&#xA;              + ISNULL(CVDCOUNTY.DESCRIPTION + ', ','') END AS ORG_ADDRESS&#xD;&#xA;          FROM SGT_ORGANIZATION P &#xD;&#xA;          LEFT OUTER JOIN SGT_ORG_ADDRESS PA1   &#xD;&#xA;          ON  P.ORG_ID  = PA1.ORG_ID  &#xD;&#xA;          AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;          AND PA1.ADDRESS_TYPE_VALUE IN ('MAIL','PYAM')&#xD;&#xA;         LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.STATE_ID AND CVDSTATE.CODE_VALUE = PA1.STATE_VALUE&#xD;&#xA;          LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.COUNTRY_VALUE                           &#xD;&#xA;                           &#xD;&#xA;    )AS ORG_ADD ON ORG_ADD.ORG_ID=TPA.ORG_ID&#xD;&#xA; WHERE TPA.BENEFIT_OPTION_VALUE IN ('LUMP')&#xD;&#xA;   AND PHDE.START_DATE &lt;= @PAYMENTDATE AND (PHDE.END_DATE IS NULL OR PHDE.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   --AND TPA.PAYEE_ACCOUNT_ID IN (88500,88694,89088,89332)&#xD;&#xA; GROUP BY TPA.PLAN_NAME,TPA.ACCOUNT_RELATION_VALUE,TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;   TPA.MPI_PERSON_ID,P.MPI_PERSON_ID,ORG.MPI_ORG_ID,ORG.ORG_NAME,P.LAST_NAME,P.FIRST_NAME,P.MIDDLE_NAME,&#xD;&#xA;   TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.ACCOUNT_RELATION_VALUE,TPA.TRANSFER_ORG_ID,TPA.PERSON_ID,TRAN_ORG.MPI_ORG_ID,TRAN_ORG.ORG_NAME,TPA.PAYEE_FIRST_NAME,&#xD;&#xA;   TPA.PAYEE_LAST_NAME,TPA.RETIREE_INCR_FLAG,SPBA.FUNDS_TYPE_VALUE,TPA.ACCOUNT_NUMBER,TPA.TRANSFER_ORG_CONTACT_NAME,TRAN_ORG_ADDRESS,PERADDR.PER_ADDRESS&#xD;&#xA;   ,ORG_ADD.ORG_ADDRESS,TPA.PAYEE_ACCOUNT_ID&#xD;&#xA; UNION&#xD;&#xA;&#xD;&#xA; SELECT  TPA.PAYEE_ACCOUNT_ID, TPA.MPI_PERSON_ID +' / '+ SO.MPI_ORG_ID  AS MPID_ORGANIZATIONID,&#xD;&#xA;   SO.ORG_NAME+' FBO:' + ISNULL(RTRIM(TPA.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TPA.PAYEE_LAST_NAME)),''),&#xD;&#xA;   TPA.PLAN_NAME,&#xD;&#xA;   TPA.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP,&#xD;&#xA;   CASE WHEN TPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND TPA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'DDPT' ELSE TPA.BENEFIT_ACCOUNT_TYPE_VALUE END AS BENEFIT_TYPE,&#xD;&#xA;   TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;  MAX(ISNULL(TOTAL_UVHP_INTEREST_AMOUNT,0) - ISNULL(TOTAL_UVHP_INTEREST_QDRO_OFFSET,0))  AS  UVHP_INT&#xD;&#xA; , MAX(ISNULL(NON_VESTED_EE_INTEREST,0) + ISNULL(VESTED_EE_INTEREST,0) - ISNULL(TOTAL_EE_INTEREST_QDRO_OFFSET,0)) AS EE_INT&#xD;&#xA; , MAX(ISNULL(TOTAL_UVHP_CONTRIBUTION_AMOUNT,0) - ISNULL(TOTAL_UVHP_CONTRIBUTION_QDRO_OFFSET,0))  AS UVHP&#xD;&#xA; , MAX(ISNULL(NON_VESTED_EE_AMOUNT,0) + ISNULL(VESTED_EE_AMOUNT,0) - ISNULL(TOTAL_EE_CONTRIBUTION_QDRO_OFFSET,0)) AS  EE_CONT,&#xD;&#xA;&#xD;&#xA;   --SUM(((PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)))*PIT.ITEM_TYPE_DIRECTION)) AS NET_AMOUNT,&#xD;&#xA;   SUM(CASE WHEN PIT1.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'TXRA' THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT1.ITEM_TYPE_DIRECTION) ELSE 0 END) AS TAXABLE_AMOUNT, --PIR 994&#xD;&#xA;   SUM(CASE WHEN PIT1.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'NTRA' THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT1.ITEM_TYPE_DIRECTION) ELSE 0 END) AS NON_TAXABLE_AMOUNT,--PIR 994&#xD;&#xA;   SUM(CASE WHEN PIT1.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'STTX' THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT1.ITEM_TYPE_DIRECTION) ELSE 0 END) AS STATE_TAX_AMOUNT, --PIR 994&#xD;&#xA;   SUM(CASE WHEN PIT1.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'FDTX' THEN ((ROUND(PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT1.ITEM_TYPE_DIRECTION) ELSE 0 END) AS FEDERAL_TAX_AMOUNT,--PIR 994&#xD;&#xA;   --SUM(CASE WHEN PIT1.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'TXRA' THEN ((PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)))*PIT1.ITEM_TYPE_DIRECTION) ELSE 0 END) AS TAXABLE_ROLLOVER_AMOUNT,&#xD;&#xA;   --SUM(CASE WHEN PIT1.NON_MONTHLY_PAYMENT_GROUP_VALUE = 'NTRA' THEN ((PHDE.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)))*PIT1.ITEM_TYPE_DIRECTION) ELSE 0 END) AS NON_TAXABLE_ROLLOVER_AMOUNT,&#xD;&#xA;   @PAYMENTDATE AS PAYMENT_DATE,&#xD;&#xA;   ISNULL(TPA.RETIREE_INCR_FLAG,'N') AS RETIREE_INCR_FLAG,&#xD;&#xA;   SPBA.FUNDS_TYPE_VALUE AS FUND_TYPE&#xD;&#xA;       , PARD.ACCOUNT_NUMBER&#xD;&#xA;       ,              ISNULL(PARD.CONTACT_NAME + ',','')&#xD;&#xA;          + ISNULL(PARD.ADDR_LINE_1 + ',','')&#xD;&#xA;          + ISNULL(PARD.ADDR_LINE_2 + ',','')&#xD;&#xA;          + CASE WHEN CVDCOUNTY.DESCRIPTION = 'UNITED STATES' &#xD;&#xA;          --+ CASE WHEN CVDCOUNTY.DESCRIPTION = 'UNITED STATES OF AMERICA' &#xD;&#xA;     THEN ISNULL(PARD.CITY + ' ','')+ ISNULL(PARD.STATE_VALUE + ' ','') + ISNULL(PARD.ZIP_CODE ,'') + CASE WHEN LTRIM(RTRIM(ISNULL (PARD.ZIP_4_CODE , ''))) &lt;&gt; '' THEN '-' ELSE '' END + ISNULL( PARD.ZIP_4_CODE + '','')&#xD;&#xA;           ELSE ISNULL(PARD.CITY + ',','') + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS PER_ADDRESS&#xD;&#xA;                                &#xD;&#xA;   FROM TEMP_TABLE_FOR_PAYMENT TPA&#xD;&#xA; INNER JOIN  SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PHDE ON PHDE.PAYEE_ACCOUNT_ID=TPA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGS_CODE_VALUE SCV ON SCV.CODE_ID = TPA.BENEFIT_ACCOUNT_TYPE_ID AND SCV.CODE_VALUE = TPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHDE.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 WITH(NOLOCK) ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ID = PHDE.PAYEE_ACCOUNT_ID AND  PARD.STATUS_VALUE = 'ACTV'&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA; AND PHDE.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON P ON TPA.PERSON_ID=P.PERSON_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION ORG ON TPA.ORG_ID=ORG.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;   ON PITY.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;   AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA; INNER JOIN SGT_ORGANIZATION SO ON PARD.ROLLOVER_ORG_ID = SO.ORG_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = TPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD ON TPA.BENEFIT_CALCULATION_DETAIL_ID = SBCD.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;&#xD;&#xA;  LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PARD.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PARD.COUNTRY_VALUE&#xD;&#xA; WHERE TPA.BENEFIT_OPTION_VALUE IN ('LUMP')&#xD;&#xA;   AND PHDE.START_DATE &lt;= @PAYMENTDATE AND (PHDE.END_DATE IS NULL OR PHDE.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA; GROUP BY TPA.PLAN_NAME,TPA.ACCOUNT_RELATION_VALUE,TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;   TPA.MPI_PERSON_ID,P.MPI_PERSON_ID,ORG.MPI_ORG_ID,ORG.ORG_NAME,P.LAST_NAME,P.FIRST_NAME,P.MIDDLE_NAME,&#xD;&#xA;   TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.ACCOUNT_RELATION_VALUE,TPA.TRANSFER_ORG_ID,TPA.PERSON_ID,TPA.MPI_ORG_ID&#xD;&#xA;   ,TPA.PAYEE_FIRST_NAME,&#xD;&#xA;   TPA.PAYEE_LAST_NAME,TPA.RETIREE_INCR_FLAG,SPBA.FUNDS_TYPE_VALUE,PARD.ACCOUNT_NUMBER,ORG_ADDRESS,TPA.PAYEE_ACCOUNT_ID,SO.MPI_ORG_ID,SO.ORG_NAME&#xD;&#xA;   ,PARD.CONTACT_NAME,PARD.ADDR_LINE_1,PARD.ADDR_LINE_2,PARD.CITY,PARD.STATE_VALUE,PARD.ZIP_CODE,PARD.ZIP_4_CODE,CVDCOUNTY.DESCRIPTION  &#xD;&#xA;) TEMP&#xD;&#xA;WHERE (TAXABLE_AMOUNT+NON_TAXABLE_AMOUNT) &gt; 0">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="TrialRetirementOptionSummaryReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT PLAN_NAME,BENEFIT_OPTION,SUM(OPTION_COUNT) AS OPTION_COUNT,SUM(AMOUNT) AS AMOUNT,@PAYMENTDATE as PAYMENT_DATE&#xD;&#xA;FROM &#xD;&#xA; (SELECT TEMP.PLAN_NAME,TEMP.BENEFIT_OPTION, COUNT(DISTINCT TEMP.PAYEE_ACCOUNT_ID) AS OPTION_COUNT, &#xD;&#xA;         SUM((ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT FROM TEMP_TABLE_FOR_PAYMENT TEMP --PIR 994&#xD;&#xA;         &#xD;&#xA;   LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID    &#xD;&#xA;   LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID   &#xD;&#xA;   LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_DEDUCTION PAD ON PAD.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;      (SELECT PARP.PAYEE_ACCOUNT_ID,PARP.PAYMENT_OPTION_VALUE,PARPD.* FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT PARP &#xD;&#xA;    INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT_DETAIL PARPD ON &#xD;&#xA;    PARPD.PAYEE_ACCOUNT_RETRO_PAYMENT_ID = PARP.PAYEE_ACCOUNT_RETRO_PAYMENT_ID &#xD;&#xA;              AND ISNULL(PARP.IS_OVERPAYMENT_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;                 AND PARP.START_DATE &lt;&gt; ISNULL(PARP.END_DATE,'99991231') &#xD;&#xA;       AND (PARP.END_DATE IS NULL OR PARP.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;       AND PARP.PAYMENT_HISTORY_HEADER_ID IS NULL&#xD;&#xA;    ) AS RETRO&#xD;&#xA;   ON RETRO.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND RETRO.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;            LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;      ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;      AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;   WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   AND (RETRO.PAYMENT_OPTION_VALUE IS NULL OR RETRO.PAYMENT_OPTION_VALUE = 'REGL')&#xD;&#xA;   AND (PIT.ITEM_TYPE_DIRECTION=1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE='RRED')&#xD;&#xA;   AND ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;  GROUP BY TEMP.BENEFIT_OPTION,TEMP.PLAN_NAME&#xD;&#xA;&#xD;&#xA; UNION ALL&#xD;&#xA;&#xD;&#xA; SELECT TEMP.PLAN_NAME,TEMP.BENEFIT_OPTION, 0 AS OPTION_COUNT, SUM((ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))*PIT1.ITEM_TYPE_DIRECTION) AS AMOUNT--PIR 994&#xD;&#xA;  FROM TEMP_TABLE_FOR_PAYMENT(NOLOCK) TEMP &#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA;      AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;  AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;  WHERE PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;  AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED'&#xD;&#xA;  AND PARD.STATUS_VALUE = 'ACTV'&#xD;&#xA;  AND ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA; GROUP BY BENEFIT_OPTION,TEMP.PLAN_NAME&#xD;&#xA;) AS FINAL&#xD;&#xA;GROUP BY PLAN_NAME,BENEFIT_OPTION&#xD;&#xA;ORDER BY PLAN_NAME,BENEFIT_OPTION">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UpdateBenefitEndDateWithTermCertainEndDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @LASTDAYOFTHEMONTH DATETIME&#xD;&#xA;SET @LASTDAYOFTHEMONTH = DATEADD(M,1,@PAYMENTDATE) - 1&#xD;&#xA;&#xD;&#xA;UPDATE PAYEE SET BENEFIT_END_DATE = TERM_CERTAIN_END_DATE , MODIFIED_BY = 'OPUS Batch',MODIFIED_DATE = GETDATE()&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PAYEE&#xD;&#xA; INNER JOIN &#xD;&#xA; ( &#xD;&#xA;  SELECT DISTINCT PA.PAYEE_ACCOUNT_ID FROM TEMP_TABLE_FOR_PAYMENT PA &#xD;&#xA;   INNER JOIN  SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;    ON  PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;   &#xD;&#xA;   AND BENEFIT_BEGIN_DATE &lt;= @PAYMENTDATE&#xD;&#xA;   AND TERM_CERTAIN_END_DATE IS NOT NULL AND &#xD;&#xA;    TERM_CERTAIN_END_DATE BETWEEN @PAYMENTDATE AND @LASTDAYOFTHEMONTH&#xD;&#xA;   AND PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;   --PIR 1067&#xD;&#xA;   AND PA.ACCOUNT_RELATION_VALUE &lt;&gt; 'PART' AND &#xD;&#xA;   (PA.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN ('RTMT','DSBL','QDRO')&#xD;&#xA;   OR (PA.BENEFIT_ACCOUNT_TYPE_VALUE = 'QDRO' AND &#xD;&#xA;  EXISTS(SELECT * FROM SGT_DRO_BENEFIT_DETAILS DB INNER JOIN SGT_DRO_APPLICATION DA &#xD;&#xA;    ON DA.DRO_APPLICATION_ID = DB.DRO_APPLICATION_ID &#xD;&#xA;    WHERE DB.DRO_BENEFIT_ID = PA.DRO_APPLICATION_DETAIL_ID AND PA.PERSON_ID &lt;&gt; DA.ALTERNATE_PAYEE_ID)))&#xD;&#xA; ) AS TSEND&#xD;&#xA; ON PAYEE.PAYEE_ACCOUNT_ID = TSEND.PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalMonthlyBenefitPaymentbyItemReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT ITEM_DESCRIPTION,[2] AS MPIPP_Amount,[7] AS L52_Amount,[8] AS L161_Amount,[3] AS L600_Amount,[4] AS L666_Amount,[6] AS L700_Amount,ITEM_TYPE_DIRECTION , ALLOW_ROLLOVER_CODE_VALUE,PAYMENT_DATE,ITEMTYPE,ITEM_PRIORITY&#xD;&#xA;FROM (&#xD;&#xA;SELECT PHH.PLAN_ID,PIT.ITEM_TYPE_DESCRIPTION AS ITEM_DESCRIPTION, SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT,PIT.ITEM_TYPE_DIRECTION, PIT.ALLOW_ROLLOVER_CODE_VALUE, PIT.ITEM_PRIORITY,PAYMENT_DATE,&#xD;&#xA;  CASE WHEN PIT.ITEM_PRIORITY IN (1,3,5,7,9,11,13,19) THEN 'MTLY' &#xD;&#xA; WHEN PIT.ITEM_PRIORITY IN (2,4,6,8,10,12) THEN 'ONTP' &#xD;&#xA; WHEN PIT.ITEM_PRIORITY = 21 THEN 'PENS' ELSE 'OTHR' END AS ITEMTYPE &#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK) &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD WITH(NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID AND DEDUCTION_VALUE &lt;&gt; 'UPDT'&#xD;&#xA;GROUP BY PIT.ITEM_TYPE_DESCRIPTION,PIT.ITEM_TYPE_DIRECTION,PHH.PLAN_ID, PIT.ALLOW_ROLLOVER_CODE_VALUE, PIT.ITEM_PRIORITY, PHH.PAYMENT_DATE&#xD;&#xA;) AS TBL&#xD;&#xA;PIVOT&#xD;&#xA;(&#xD;&#xA; MAX(TBL.AMOUNT) FOR TBL.PLAN_ID  IN (&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;) &#xD;&#xA;) AS PVT&#xD;&#xA;ORDER BY &#xD;&#xA;CASE WHEN ITEM_PRIORITY IN (1,3,5,7,9,11,13,19) THEN 1 &#xD;&#xA;WHEN ITEM_PRIORITY IN (2,4,6,8,10,12) THEN 2 &#xD;&#xA;WHEN ITEM_PRIORITY = 21 THEN 3 &#xD;&#xA;ELSE 4 END">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalACHRegisterReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  DISTINCT&#xD;&#xA; TPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;         CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) &#xD;&#xA;             THEN ISNULL(TRAN_ORG.MPI_ORG_ID,'') +' /'+ TPA.MPI_PERSON_ID  ELSE --TEMP.MPI_PERSON_ID END&#xD;&#xA;                      CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.MPI_ORG_ID ELSE CAST(P.MPI_PERSON_ID AS VARCHAR(10)) END +&#xD;&#xA;                CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'RACH' AND PHD.FBO_CO IS NOT NULL THEN ' / '+ TPA.MPI_PERSON_ID ELSE '' END &#xD;&#xA;       END &#xD;&#xA;  AS MPID_ORGANIZATIONID, &#xD;&#xA;     CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) &#xD;&#xA;             THEN ISNULL( TRAN_ORG.ORG_NAME,'') +' FBO:'+ TPA.PAYEE_NAME  ELSE --TEMP.MPI_PERSON_ID END&#xD;&#xA;                    CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_NAME + ' '+ ISNULL(PHD.FBO_CO,'') -- prod pir 249&#xD;&#xA;                    ELSE ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END +&#xD;&#xA;                CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'RACH' AND TPA.TRANSFER_ORG_ID = 0 AND&#xD;&#xA;                PHD.FBO_CO IS NOT NULL THEN ' '+PHD.FBO_CO ELSE '' END &#xD;&#xA;       END      &#xD;&#xA;     AS PAYEENAME_ORGANIZATIONNAME,&#xD;&#xA;  TPA.PLAN_NAME,&#xD;&#xA;  TPA.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP,&#xD;&#xA;  TPA.BENEFIT_ACCOUNT_TYPE_VALUE AS BENEFIT_TYPE,&#xD;&#xA;  TPA.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION,&#xD;&#xA;  SUM(ITEM_TYPE_DIRECTION * AMOUNT) AS NET_AMOUNT,&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS GROSS_AMOUNT,--ASK ONCE&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT, &#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS FEDERAL_TAX_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS PENSION_RECEIVABLE,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS CHILDORSPOUSAL_SUPPORT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS TAX_LEVY,&#xD;&#xA;        PHD.BANK_NAME,PHD.ACCOUNT_TYPE_VALUE AS ACCOUNT_TYPE,PHD.ROUTING_NUMBER,PHD.ACCOUNT_NUMBER&#xD;&#xA;        , PHH.PAYMENT_DATE&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;                  AND PHD.PAYMENT_METHOD_VALUE IN ('RACH','ACH')--ASK ONCE ABOUT CRITERIA&#xD;&#xA;INNER JOIN TEMP_TABLE_FOR_PAYMENT TPA WITH(NOLOCK) ON TPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHDE.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_REISSUE_DETAIL RD ON RD.PAYMENT_REISSUE_DETAIL_ID = TPA.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK) ON PHH.PERSON_ID=P.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON PHH.ORG_ID=ORG.ORG_ID&#xD;&#xA;      --LEFT OUTER JOIN SGS_CODE_VALUE CVACCOUNTTYPEVALUE WITH(NOLOCK)  ON PHD.ACCOUNT_TYPE_ID= CVACCOUNTTYPEVALUE.CODE_ID AND PHD.ACCOUNT_TYPE_VALUE = CVACCOUNTTYPEVALUE.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION TRAN_ORG ON TRAN_ORG.ORG_ID=TPA.TRANSFER_ORG_ID&#xD;&#xA;WHERE PHH.PAYMENT_SCHEDULE_ID= @PAYMENTSCHEDULEID&#xD;&#xA;GROUP BY TPA.PLAN_NAME,TPA.ACCOUNT_RELATION_VALUE,TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;  PHH.PERSON_ID,P.MPI_PERSON_ID,ORG.MPI_ORG_ID,ORG.ORG_NAME,P.LAST_NAME,P.FIRST_NAME,P.MIDDLE_NAME,PHD.PAYMENT_METHOD_VALUE,FBO_CO,&#xD;&#xA;  PHD.BANK_NAME,PHD.ACCOUNT_TYPE_VALUE,PHD.ROUTING_NUMBER,PHD.ACCOUNT_NUMBER, PHH.PAYMENT_DATE, TPA.MPI_PERSON_ID,TPA.PERSON_ID,TPA.TRANSFER_ORG_ID,&#xD;&#xA;  TRAN_ORG.ORG_ID,TRAN_ORG.MPI_ORG_ID,TRAN_ORG.ORG_NAME,TPA.PAYEE_NAME,TPA.PAYMENT_REISSUE_DETAIL_ID, TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalCheckRegisterReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT&#xD;&#xA;&#xD;&#xA;        CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) THEN ISNULL(TRAN_ORG.MPI_ORG_ID,'') +' /'+ TPA.MPI_PERSON_ID  &#xD;&#xA;     ELSE --TEMP.MPI_PERSON_ID END&#xD;&#xA;    CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.MPI_ORG_ID ELSE CAST(P.MPI_PERSON_ID AS VARCHAR(10)) END +&#xD;&#xA;    CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'RCHK' AND PHD.FBO_CO IS NOT NULL THEN ' / '+ ISNULL(TPA.MPI_PERSON_ID,TPA.MPI_ORG_ID) &#xD;&#xA;    ELSE '' END  --PIR 964&#xD;&#xA;  END AS MPID_OrgainzationID, &#xD;&#xA;&#xD;&#xA;  CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) THEN ISNULL( TRAN_ORG.ORG_NAME,'') +' FBO:'+ TPA.PAYEE_NAME  &#xD;&#xA;  ELSE --TEMP.MPI_PERSON_ID END&#xD;&#xA;                    CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_NAME + ' '+ ISNULL(PHD.FBO_CO,'') -- prod pir 249&#xD;&#xA;                    ELSE ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END +&#xD;&#xA;     CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'RCHK' AND TPA.TRANSFER_ORG_ID = 0 AND PHD.FBO_CO IS NOT NULL THEN ' '+PHD.FBO_CO &#xD;&#xA;     ELSE '' END &#xD;&#xA;        END AS PayeeName_OrganizationName,&#xD;&#xA;  &#xD;&#xA;  TPA.PLAN_NAME,&#xD;&#xA;  TPA.ACCOUNT_RELATION_VALUE AS Account_Relationship,&#xD;&#xA;  TPA.BENEFIT_ACCOUNT_TYPE_VALUE AS Benefit_Type,&#xD;&#xA;  TPA.BENEFIT_OPTION_VALUE AS Benefit_Option,&#xD;&#xA;  SUM(ITEM_TYPE_DIRECTION * AMOUNT) AS NET_AMOUNT,&#xD;&#xA;    --SUM(ISNULL(PHDE.AMOUNT,0)*PIT.ITEM_TYPE_DIRECTION) AS Gross_Amount,&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS Gross_Amount, &#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS State_Tax_Amount, &#xD;&#xA;  &#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS Federal_Tax_Amount,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS Pension_Receivable,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS ChildORSpousal_Support,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS Tax_Levy,&#xD;&#xA;        PHD.CHECK_NUMBER AS Cheque_Number,&#xD;&#xA;        PHH.PAYMENT_DATE,&#xD;&#xA;        P.LAST_NAME,&#xD;&#xA;  CASE WHEN TPA.FUNDS_TYPE_VALUE IS NOT NULL THEN TPA.PLAN_NAME +' - '+ TPA.FUNDS_TYPE_VALUE ELSE TPA.PLAN_NAME END AS PLAN_NAME_SUB&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;   AND PHD.PAYMENT_METHOD_VALUE IN ('CHK','RCHK')&#xD;&#xA;INNER JOIN TEMP_TABLE_FOR_PAYMENT TPA ON TPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHDE.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_REISSUE_DETAIL RD ON Rd.PAYMENT_REISSUE_DETAIL_ID = TPA.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON P ON PHH.PERSON_ID=P.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION ORG ON PHH.ORG_ID=ORG.ORG_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION TRAN_ORG&#xD;&#xA;                              ON TRAN_ORG.ORG_ID=TPA.TRANSFER_ORG_ID&#xD;&#xA;&#xD;&#xA;WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENT_SCHEDULE_ID&#xD;&#xA;&#xD;&#xA;GROUP BY TPA.PLAN_NAME,TPA.ACCOUNT_RELATION_VALUE,TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;  PHH.PERSON_ID,P.MPI_PERSON_ID,ORG.MPI_ORG_ID,ORG.ORG_NAME,P.LAST_NAME,P.FIRST_NAME,P.MIDDLE_NAME,PHD.PAYMENT_METHOD_VALUE,FBO_CO,&#xD;&#xA;  PHD.CHECK_NUMBER,PHH.PAYMENT_DATE,TPA.MPI_PERSON_ID,TPA.PERSON_ID,TPA.TRANSFER_ORG_ID,&#xD;&#xA;  TRAN_ORG.ORG_ID,TRAN_ORG.MPI_ORG_ID,TRAN_ORG.ORG_NAME,TPA.PAYEE_NAME,TPA.PAYMENT_REISSUE_DETAIL_ID, TPA.FUNDS_TYPE_VALUE,TPA.MPI_ORG_ID --PIR 964&#xD;&#xA;order by P.LAST_NAME, PHD.CHECK_NUMBER">
      <parameters>
        <parameter ID="@PAYMENT_SCHEDULE_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalErrorReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;IF @CHOICE = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT PAYEE_ACCOUNT_ID,PayeeName_OrganizationName,Account_Relationship,PLAN_NAME,DESCRIPTION AS PAYEE_STATUS,&#xD;&#xA;Errors1+Errors2+Errors3+Errors4 +Errors5+ Errors6 as Error,Comment1 as Comment, MPID_OrganizationID, @PAYMENTDATE AS PAYMENT_DATE, USERID,&#xD;&#xA;BENEFIT_ACCOUNT_TYPE_VALUE,ISNULL(DATE_OF_DEATH,'') AS DATE_OF_DEATH,&#xD;&#xA;CASE WHEN RETIREE_INCR_FLAG = NULL OR RETIREE_INCR_FLAG = 'N' THEN '' ELSE RETIREE_INCR_FLAG END  AS RETIREE_INCR_FLAG&#xD;&#xA;,STATUS_EFFECTIVE_DATE,@STATUS_EFFECTIVE_DATE_FROM AS STATUS_EFFECTIVE_DATE_FROM , @STATUS_EFFECTIVE_DATE_TO AS STATUS_EFFECTIVE_DATE_TO,BenefitOption&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;      Distinct PA.PAYEE_ACCOUNT_ID,&#xD;&#xA;      CASE WHEN PER.MPI_PERSON_ID IS NOT NULL then ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END AS PayeeName_OrganizationName,&#xD;&#xA;      CASE WHEN PER.MPI_PERSON_ID IS NOT NULL then PER.MPI_PERSON_ID ELSE ORG.MPI_ORG_ID END AS MPID_OrganizationID,&#xD;&#xA;      PA.ACCOUNT_RELATION_VALUE AS Account_Relationship, SPLN.PLAN_CODE AS PLAN_NAME,CV.DESCRIPTION,&#xD;&#xA;      CASE WHEN (PERADDR.ADDR_STATE_VALUE ='CA' AND TF.TAX_OPTION_ID IS  NULL) THEN 'No Federal Tax Option Is Present, '  ELSE '' END AS Errors1,--ASK ND REVIEW&#xD;&#xA;      CASE WHEN TS.TAX_OPTION_ID IS NULL THEN +'No State Tax Option Is Present, ' ELSE '' END AS Errors2,&#xD;&#xA;      CASE WHEN PERADDR.ADDRESS_ID IS NULL THEN +'No mailing Address Present, ' ELSE '' END AS Errors3,&#xD;&#xA;      CASE WHEN PAPI.FINAL_AMT &lt; 0 THEN +'Final Benifit Amount Is Less Than Zero, ' ELSE '' END AS Errors4,&#xD;&#xA;      CASE WHEN (PERADDR.ADDR_STATE_VALUE &lt;&gt;'CA' AND TS.TAX_OPTION_ID IS NOT NULL) THEN +'CA State Tax Can Be Added CA Person.' ELSE '' END AS Errors5,&#xD;&#xA;      CASE WHEN PAS.REVIEW_STATUS_REASON_VALUE = 'NACH' THEN ACH.DESCRIPTION ELSE '' END AS Errors6,&#xD;&#xA;   CASE WHEN PERADDR.ADDRESS_ID IS NOT NULL AND PERADDR.START_DATE &gt;= PAS.STATUS_EFFECTIVE_DATE THEN +'New Mailing Address Added, ' ELSE '' END AS Comment1,&#xD;&#xA;      PAS.MODIFIED_BY AS USERID,&#xD;&#xA;   PA.BENEFIT_ACCOUNT_TYPE_VALUE,PER.DATE_OF_DEATH,PA.RETIREE_INCR_FLAG,PAS.STATUS_EFFECTIVE_DATE,CVOPTION.DESCRIPTION AS BenefitOption&#xD;&#xA;          &#xD;&#xA;      FROM SGT_PAYEE_ACCOUNT PA (NOLOCK)&#xD;&#xA;&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) &#xD;&#xA;                 ON PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID AND PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;        (    SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;            FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK)&#xD;&#xA;            WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;            ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC&#xD;&#xA;        )&#xD;&#xA;      INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BACCT(NOLOCK)&#xD;&#xA;                 ON PA.PAYEE_BENEFIT_ACCOUNT_ID = BACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING TF (NOLOCK)&#xD;&#xA;                 ON PA.PAYEE_ACCOUNT_ID = TF.PAYEE_ACCOUNT_ID  AND TF.TAX_IDENTIFIER_VALUE = 'FDRL'&#xD;&#xA;                  AND TF.START_DATE &lt;= @PAYMENTDATE AND (TF.END_DATE IS NULL OR TF.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;      LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING TS (NOLOCK)&#xD;&#xA;                 ON PA.PAYEE_ACCOUNT_ID = TS.PAYEE_ACCOUNT_ID AND TS.TAX_IDENTIFIER_VALUE = 'STAT'&#xD;&#xA;                 AND TS.START_DATE &lt;= @PAYMENTDATE AND (TS.END_DATE IS NULL OR TS.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;      &#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID=PA.PLAN_BENEFIT_ID &#xD;&#xA;      INNER JOIN SGT_PLAN SPLN WITH(NOLOCK) ON SPLN.PLAN_ID=PBXR.PLAN_ID &#xD;&#xA;      INNER JOIN SGS_CODE_VALUE CV (NOLOCK) ON PAS.STATUS_ID= CV.CODE_ID AND PAS.STATUS_VALUE = CV.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGS_CODE_VALUE ACH ON PAS.REVIEW_STATUS_REASON_VALUE = ACH.CODE_VALUE&#xD;&#xA;      INNER JOIN SGS_CODE_VALUE CVOPTION (NOLOCK) ON PBXR.BENEFIT_OPTION_ID = CVOPTION.CODE_ID AND PBXR.BENEFIT_OPTION_VALUE = CVOPTION.CODE_VALUE&#xD;&#xA;      --INNER JOIN SGS_CODE_VALUE CVRELATION (NOLOCK) ON PA.ACCOUNT_RELATION_ID= CVRELATION.CODE_ID AND PA.ACCOUNT_RELATION_VALUE = CVRELATION.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON PER(NOLOCK) ON PA.PERSON_ID = PER.PERSON_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION ORG(NOLOCK) ON PA.ORG_ID = ORG.ORG_ID&#xD;&#xA;       LEFT OUTER JOIN &#xD;&#xA;          (SELECT  P.PERSON_ID,PA1.ADDRESS_ID,&#xD;&#xA;                   PA1.ADDR_LINE_1 AS ADDR_LINE_1,&#xD;&#xA;                   PA1.ADDR_LINE_2 AS ADDR_LINE_2,&#xD;&#xA;                   PA1.ADDR_CITY  AS ADDR_CITY,&#xD;&#xA;                   PA1.ADDR_STATE_ID  AS ADDR_STATE_ID,&#xD;&#xA;                   CASE WHEN PAC.ADDRESS_TYPE_VALUE='MAIL' OR PAC.ADDRESS_TYPE_VALUE IS NULL  THEN 1 ELSE 2 END AS ADDRESS_TYPE,&#xD;&#xA;                   PA1.ADDR_STATE_VALUE AS ADDR_STATE_VALUE,&#xD;&#xA;                   PA1.ADDR_COUNTRY_ID  AS ADDR_COUNTRY_ID,&#xD;&#xA;                   PA1.ADDR_COUNTRY_VALUE  AS ADDR_COUNTRY_VALUE,&#xD;&#xA;                   PA1.ADDR_ZIP_CODE AS ADDR_ZIP_CODE,&#xD;&#xA;                   PA1.ADDR_ZIP_4_CODE  AS ADDR_ZIP_4_CODE,&#xD;&#xA;                   PA1.FOREIGN_PROVINCE  AS FOREIGN_PROVINCE,&#xD;&#xA;                   PA1.FOREIGN_POSTAL_CODE  AS FOREIGN_POSTAL_CODE,&#xD;&#xA;       PA1.START_DATE&#xD;&#xA;                   FROM SGT_PERSON P &#xD;&#xA;                   LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   &#xD;&#xA;                   ON P.PERSON_ID  = PA1.PERSON_ID  &#xD;&#xA;                   AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;                   LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA1.ADDRESS_ID=PAC.ADDRESS_ID&#xD;&#xA;                   AND PAC.ADDRESS_TYPE_VALUE='MAIL'&#xD;&#xA;                          &#xD;&#xA;            )AS PERADDR ON PERADDR.PERSON_ID=PA.PERSON_ID&#xD;&#xA;        LEFT OUTER JOIN &#xD;&#xA;        (&#xD;&#xA;            SELECT PAPIT.PAYEE_ACCOUNT_ID,SUM(ISNULL(PAPIT.AMOUNT,0)*PIT.ITEM_TYPE_DIRECTION) FINAL_AMT&#xD;&#xA;            FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT &#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PAPIT.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;            WHERE PAPIT.START_DATE &lt;= @PAYMENTDATE AND (PAPIT.END_DATE IS NULL OR PAPIT.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;            --AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK' &#xD;&#xA;            GROUP BY PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;        ) AS PAPI ON PA.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;        &#xD;&#xA;WHERE PAS.STATUS_VALUE  IN ('REVW') AND &#xD;&#xA;  CONVERT(DATE,PAS.STATUS_EFFECTIVE_DATE) BETWEEN @STATUS_EFFECTIVE_DATE_FROM AND @STATUS_EFFECTIVE_DATE_TO&#xD;&#xA;  AND ((@PLAN_ID = 1 AND SPLN.PLAN_ID = @PLAN_ID) OR ((@PLAN_ID &lt;&gt; 1 AND SPLN.PLAN_ID &lt;&gt; 1))) &#xD;&#xA; --BENEFIT_BEGIN_DATE &lt;=  @PAYMENTDATE&#xD;&#xA; --AND (BENEFIT_END_DATE IS NULL OR BENEFIT_END_DATE &gt;  @PAYMENTDATE)&#xD;&#xA;    )TM ORDER BY STATUS_EFFECTIVE_DATE,MPID_OrganizationID, PayeeName_OrganizationName&#xD;&#xA;END&#xD;&#xA;ELSE&#xD;&#xA;BEGIN    &#xD;&#xA;    --UNION &#xD;&#xA;    &#xD;&#xA;SELECT PAYEE_ACCOUNT_ID,PayeeName_OrganizationName,Account_Relationship,PLAN_NAME,DESCRIPTION AS PAYEE_STATUS,AddressError+Error1+ERROR AS ERROR,Comment, MPID_OrganizationID, USERID,&#xD;&#xA;BENEFIT_ACCOUNT_TYPE_VALUE,ISNULL(DATE_OF_DEATH,'') AS DATE_OF_DEATH,&#xD;&#xA;CASE WHEN RETIREE_INCR_FLAG = NULL OR RETIREE_INCR_FLAG = 'N' THEN '' ELSE RETIREE_INCR_FLAG END  AS RETIREE_INCR_FLAG&#xD;&#xA;,STATUS_EFFECTIVE_DATE,@STATUS_EFFECTIVE_DATE_FROM AS STATUS_EFFECTIVE_DATE_FROM , @STATUS_EFFECTIVE_DATE_TO AS STATUS_EFFECTIVE_DATE_TO,BenefitOption&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;      DISTINCT PA.PAYEE_ACCOUNT_ID,&#xD;&#xA;      CASE WHEN PER.MPI_PERSON_ID IS NOT NULL then ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END AS PayeeName_OrganizationName,&#xD;&#xA;      CASE WHEN PER.MPI_PERSON_ID IS NOT NULL then PER.MPI_PERSON_ID ELSE ORG.MPI_ORG_ID END AS MPID_OrganizationID,&#xD;&#xA;      PA.ACCOUNT_RELATION_VALUE AS Account_Relationship, SPLN.PLAN_CODE AS PLAN_NAME,CV.DESCRIPTION,&#xD;&#xA;      CASE WHEN PERADDR.ADDRESS_ID IS NULL THEN 'No mailing Address Present, ' ELSE '' END AddressError,&#xD;&#xA;       Isnull(CVREASON.DESCRIPTION,'') AS ERROR,&#xD;&#xA;&#x9;   isnull(CVTermination.DESCRIPTION,'') AS Error1,&#xD;&#xA;   CASE WHEN PERADDR.ADDRESS_ID IS NOT NULL AND PERADDR.START_DATE &gt;= PAS.STATUS_EFFECTIVE_DATE THEN +'New Mailing Address Added, ' ELSE '' END  as Comment,&#xD;&#xA;      PAS.MODIFIED_BY AS USERID,&#xD;&#xA;   PA.BENEFIT_ACCOUNT_TYPE_VALUE,PER.DATE_OF_DEATH,PA.RETIREE_INCR_FLAG,PAS.STATUS_EFFECTIVE_DATE,&#xD;&#xA;   CVOPTION.DESCRIPTION AS BenefitOption&#xD;&#xA;      &#xD;&#xA;      FROM SGT_PAYEE_ACCOUNT PA (NOLOCK)&#xD;&#xA;      LEFT OUTER JOIN &#xD;&#xA;                (&#xD;&#xA;                    SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;                    LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE B WITH(NOLOCK) ON A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                    WHERE ISNULL(B.SCHEDULE_TYPE_VALUE,'MTLY') =  'MTLY' AND A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                    -- TAKE ALL OLD PAYMENTS BEFORE THE LAST PAYMENT DATE AND MAKE SURE NO PAYMENTS ARE MADE EARLIER&#xD;&#xA;                 )    PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;      &#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA;         AND PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;        (    SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;            FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;            WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;            ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC&#xD;&#xA;        )&#xD;&#xA;      &#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID=PA.PLAN_BENEFIT_ID &#xD;&#xA;      INNER JOIN SGT_PLAN SPLN WITH(NOLOCK) ON SPLN.PLAN_ID=PBXR.PLAN_ID &#xD;&#xA;      INNER JOIN SGS_CODE_VALUE CV (NOLOCK) ON PAS.STATUS_ID= CV.CODE_ID AND PAS.STATUS_VALUE = CV.CODE_VALUE&#xD;&#xA;      INNER JOIN SGS_CODE_VALUE CVOPTION (NOLOCK) ON PBXR.BENEFIT_OPTION_ID = CVOPTION.CODE_ID AND PBXR.BENEFIT_OPTION_VALUE = CVOPTION.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGS_CODE_VALUE CVTermination (NOLOCK) ON PAS.TERMINATED_STATUS_REASON_ID= CVTermination.CODE_ID AND PAS.TERMINATED_STATUS_REASON_VALUE = CVTermination.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGS_CODE_VALUE CVREASON (NOLOCK) ON PAS.SUSPENSION_STATUS_REASON_ID = CVREASON.CODE_ID AND PAS.SUSPENSION_STATUS_REASON_VALUE = CVREASON.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON PER(NOLOCK) ON PA.PERSON_ID = PER.PERSON_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION ORG(NOLOCK) ON PA.ORG_ID = ORG.ORG_ID&#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;          (SELECT  P.PERSON_ID,PA1.ADDRESS_ID,&#xD;&#xA;                   PA1.ADDR_LINE_1 AS ADDR_LINE_1,&#xD;&#xA;                   PA1.ADDR_LINE_2 AS ADDR_LINE_2,&#xD;&#xA;                   PA1.ADDR_CITY  AS ADDR_CITY,&#xD;&#xA;                   PA1.ADDR_STATE_ID  AS ADDR_STATE_ID,&#xD;&#xA;                   CASE WHEN PAC.ADDRESS_TYPE_VALUE='MAIL' OR PAC.ADDRESS_TYPE_VALUE IS NULL  THEN 1 ELSE 2 END AS ADDRESS_TYPE,&#xD;&#xA;                   PA1.ADDR_STATE_VALUE AS ADDR_STATE_VALUE,&#xD;&#xA;                   PA1.ADDR_COUNTRY_ID  AS ADDR_COUNTRY_ID,&#xD;&#xA;                   PA1.ADDR_COUNTRY_VALUE  AS ADDR_COUNTRY_VALUE,&#xD;&#xA;                   PA1.ADDR_ZIP_CODE AS ADDR_ZIP_CODE,&#xD;&#xA;                   PA1.ADDR_ZIP_4_CODE  AS ADDR_ZIP_4_CODE,&#xD;&#xA;                   PA1.FOREIGN_PROVINCE  AS FOREIGN_PROVINCE,&#xD;&#xA;                   PA1.FOREIGN_POSTAL_CODE  AS FOREIGN_POSTAL_CODE,&#xD;&#xA;       PA1.START_DATE&#xD;&#xA;                   FROM SGT_PERSON P &#xD;&#xA;                   LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   &#xD;&#xA;                   ON P.PERSON_ID  = PA1.PERSON_ID  &#xD;&#xA;                   AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;                   LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA1.ADDRESS_ID=PAC.ADDRESS_ID&#xD;&#xA;                   AND PAC.ADDRESS_TYPE_VALUE='MAIL'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;                          &#xD;&#xA;            )AS PERADDR ON PERADDR.PERSON_ID=PA.PERSON_ID&#xD;&#xA;        &#xD;&#xA;WHERE PAS.STATUS_VALUE  IN ('SPND','CNCL') &#xD;&#xA; AND CONVERT(DATE,PAS.STATUS_EFFECTIVE_DATE) BETWEEN @STATUS_EFFECTIVE_DATE_FROM AND @STATUS_EFFECTIVE_DATE_TO&#xD;&#xA; AND ((@PLAN_ID = 1 AND SPLN.PLAN_ID = @PLAN_ID) OR ((@PLAN_ID &lt;&gt; 1 AND SPLN.PLAN_ID &lt;&gt; 1)))&#xD;&#xA;    --AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL &#xD;&#xA;    --AND BENEFIT_BEGIN_DATE &lt;=  @PAYMENTDATE&#xD;&#xA;    --AND (BENEFIT_END_DATE IS NULL OR BENEFIT_END_DATE &gt;  @PAYMENTDATE)&#xD;&#xA;    )TM &#xD;&#xA;&#x9; order by STATUS_EFFECTIVE_DATE,MPID_OrganizationID, PayeeName_OrganizationName&#xD;&#xA;    END">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@CHOICE" sfwDataType="string" />
        <parameter ID="@STATUS_EFFECTIVE_DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@STATUS_EFFECTIVE_DATE_TO" sfwDataType="DateTime" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalOutstanding" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;       CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_ID ELSE CAST(P.PERSON_ID AS VARCHAR(10)) END AS MPID_OrganizationID,&#xD;&#xA;       CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_NAME ELSE ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END +&#xD;&#xA;    CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'RACH' AND PHD.FBO_CO IS NOT NULL THEN ' '+PHD.FBO_CO ELSE '' END AS PayeeName_OrganizationName,&#xD;&#xA;    PHD.NET_AMOUNT,PHD.CHECK_NUMBER &#xD;&#xA;       FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH&#xD;&#xA;          INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD &#xD;&#xA;                     ON  PHDSH.PAYMENT_HISTORY_DISTRIBUTION_ID=PHD.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;          INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH &#xD;&#xA;                     ON PHH.PAYMENT_HISTORY_HEADER_ID=PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;          INNER JOIN sgs_code_value cv &#xD;&#xA;                     ON cv.code_id=PHD.DISTRIBUTION_STATUS_ID and cv.code_value=PHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;          LEFT OUTER JOIN SGT_PERSON P &#xD;&#xA;                     ON PHH.PERSON_ID=P.PERSON_ID&#xD;&#xA;          LEFT OUTER JOIN SGT_ORGANIZATION ORG &#xD;&#xA;                     ON PHH.ORG_ID=ORG.ORG_ID&#xD;&#xA;          INNER JOIN TEMP_TABLE_FOR_PAYMENT TPA &#xD;&#xA;                     ON TPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;where cv.data2='OUTS' and PHH.payment_schedule_id=@PAYMENTSCHEDULEID">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="TrialMonthlyReciepantCount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @LASTPAYMENTDATE DATETIME&#xD;&#xA;DECLARE @LASTCUTOFFDATEDATE DATETIME&#xD;&#xA;DECLARE @CURRENTCUTOFFDATE DATETIME&#xD;&#xA;&#xD;&#xA;SET @LASTPAYMENTDATE = DATEADD(M,-1,@PAYMENTDATE)&#xD;&#xA;SELECT @LASTCUTOFFDATEDATE = ISNULL(PAYMENT_SETUP_CUTOFF_DATE,PROCESS_DATE) FROM SGT_PAYMENT_SCHEDULE WHERE PAYMENT_DATE = @LASTPAYMENTDATE AND SCHEDULE_TYPE_VALUE = 'MTLY' AND STATUS_VALUE = 'PRCD'&#xD;&#xA;&#xD;&#xA;SELECT @CURRENTCUTOFFDATE = ISNULL(PAYMENT_SETUP_CUTOFF_DATE,PROCESS_START_TIME) FROM SGT_PAYMENT_SCHEDULE WHERE PAYMENT_DATE = @PAYMENTDATE AND SCHEDULE_TYPE_VALUE = 'MTLY'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT  DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@PAYMENTDATE),0)) AS Effective_Date, COMMENTS&#xD;&#xA;,SUM(PYMT_COUNT) AS PYMT_COUNT&#xD;&#xA;,SUM(PART_COUNT) AS PART_COUNT&#xD;&#xA;,SUM(SURV_COUNT) AS SURV_COUNT&#xD;&#xA;,SUM(PYMT_COUNT+SURV_COUNT) AS TOTAL&#xD;&#xA;,@PAYMENTDATE AS PAYMENT_DATE&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA; SELECT  'DECEASED' AS COMMENTS,PA.PERSON_ID AS PAYEE_PERSON,BENACCT.PERSON_ID AS PART_PERSON&#xD;&#xA; ,COUNT(0) AS PYMT_COUNT&#xD;&#xA; ,COUNT(DISTINCT PA.PERSON_ID) AS PART_COUNT&#xD;&#xA; , 0 AS SURV_COUNT&#xD;&#xA; FROM  SGT_PAYEE_ACCOUNT PA&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BENACCT ON  PA.PAYEE_BENEFIT_ACCOUNT_ID = BENACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS ON  PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;AND PAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE PA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA; INNER JOIN  SGT_PERSON PER ON  PA.PERSON_ID = PER.PERSON_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR ON  PA.PLAN_BENEFIT_ID = PBXR.PLAN_BENEFIT_ID AND  PLAN_ID &lt;&gt; 1&#xD;&#xA; WHERE PAS.STATUS_VALUE IN ('SPND') AND @LASTCUTOFFDATEDATE &lt; PAS.STATUS_EFFECTIVE_DATE AND  @CURRENTCUTOFFDATE &gt;= PAS.STATUS_EFFECTIVE_DATE AND PER.DATE_OF_DEATH IS NOT NULL AND PBXR.BENEFIT_OPTION_VALUE NOT IN ('LUMP')&#xD;&#xA; AND PA.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN  ('DDPT','DDPR')&#xD;&#xA; GROUP BY PA.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA;&#xD;&#xA; UNION&#xD;&#xA; &#xD;&#xA; SELECT 'DECEASED' AS COMMENTS,PA.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA; ,0 AS PYMT_COUNT&#xD;&#xA; ,0 AS PART_COUNT&#xD;&#xA; , COUNT(0) AS SURV_COUNT&#xD;&#xA; FROM  SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BENACCT ON  PA.PAYEE_BENEFIT_ACCOUNT_ID = BENACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS ON  PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;AND PAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE PA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA; INNER JOIN  SGT_PERSON PER ON  PA.PERSON_ID = PER.PERSON_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR ON  PA.PLAN_BENEFIT_ID = PBXR.PLAN_BENEFIT_ID AND  PLAN_ID &lt;&gt; 1&#xD;&#xA; WHERE PAS.STATUS_VALUE IN ('SPND') AND @LASTCUTOFFDATEDATE &lt; PAS.STATUS_EFFECTIVE_DATE AND  @CURRENTCUTOFFDATE &gt;= PAS.STATUS_EFFECTIVE_DATE AND PER.DATE_OF_DEATH IS NOT NULL AND PBXR.BENEFIT_OPTION_VALUE NOT IN ('LUMP')&#xD;&#xA; AND PA.BENEFIT_ACCOUNT_TYPE_VALUE IN  ('DDPT','DDPR')&#xD;&#xA; GROUP BY PA.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA;) DECEASEDTBL&#xD;&#xA;GROUP BY COMMENTS&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  @PAYMENTDATE AS Effective_Date, COMMENTS&#xD;&#xA;,SUM(PYMT_COUNT) AS PYMT_COUNT&#xD;&#xA;,SUM(PART_COUNT) AS PART_COUNT&#xD;&#xA;,SUM(SURV_COUNT) AS SURV_COUNT&#xD;&#xA;,SUM(PYMT_COUNT+SURV_COUNT) AS TOTAL&#xD;&#xA;,@PAYMENTDATE AS PAYMENT_DATE&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA; SELECT  'NEW' AS COMMENTS,TEMP.PERSON_ID AS PAYEE_PERSON,BENACCT.PERSON_ID AS PART_PERSON&#xD;&#xA; ,COUNT(0) AS PYMT_COUNT&#xD;&#xA; ,COUNT(DISTINCT TEMP.PERSON_ID) AS PART_COUNT&#xD;&#xA; , 0 AS SURV_COUNT&#xD;&#xA; FROM  TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BENACCT ON  TEMP.PAYEE_BENEFIT_ACCOUNT_ID = BENACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR XR ON TEMP.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA; LEFT OUTER JOIN &#xD;&#xA;    (&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;WHERE A.PAYMENT_DATE &lt;= @LASTPAYMENTDATE &#xD;&#xA;    ) PREVPHH ON  PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA; WHERE TEMP.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN  ('DDPT','DDPR') AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL AND TEMP.BENEFIT_OPTION_VALUE NOT IN ('LUMP')&#xD;&#xA; GROUP BY TEMP.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA; UNION&#xD;&#xA; SELECT  'NEW' AS COMMENTS,TEMP.PERSON_ID AS PAYEE_PERSON,BENACCT.PERSON_ID AS PART_PERSON&#xD;&#xA; ,0 AS PYMT_COUNT&#xD;&#xA; ,0 AS PART_COUNT&#xD;&#xA; , COUNT(0) AS SURV_COUNT&#xD;&#xA; FROM  TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BENACCT ON TEMP.PAYEE_BENEFIT_ACCOUNT_ID = BENACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN &#xD;&#xA;    (&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)      &#xD;&#xA;&#x9;&#x9;WHERE A.PAYMENT_DATE &lt;= @LASTPAYMENTDATE      &#xD;&#xA;    ) PREVPHH&#xD;&#xA; ON  PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA; WHERE TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR') AND  PREVPHH.PAYEE_ACCOUNT_ID IS NULL AND TEMP.BENEFIT_OPTION_VALUE NOT IN ('LUMP')&#xD;&#xA; GROUP BY TEMP.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA;) NEWTBL&#xD;&#xA;GROUP BY COMMENTS&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  @PAYMENTDATE AS Effective_Date, COMMENTS&#xD;&#xA;,SUM(PYMT_COUNT) AS PYMT_COUNT&#xD;&#xA;,SUM(PART_COUNT) AS PART_COUNT&#xD;&#xA;,SUM(SURV_COUNT) AS SURV_COUNT&#xD;&#xA;,SUM(PYMT_COUNT+SURV_COUNT) AS TOTAL&#xD;&#xA;,@PAYMENTDATE AS PAYMENT_DATE&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA; SELECT  'RECURRING' AS COMMENTS,TEMP.PERSON_ID AS PAYEE_PERSON,BENACCT.PERSON_ID AS PART_PERSON&#xD;&#xA; ,COUNT(0) AS PYMT_COUNT&#xD;&#xA; ,COUNT(DISTINCT TEMP.PERSON_ID) AS PART_COUNT&#xD;&#xA; , 0 AS SURV_COUNT&#xD;&#xA; FROM  TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BENACCT ON  TEMP.PAYEE_BENEFIT_ACCOUNT_ID = BENACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR XR ON TEMP.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA; LEFT OUTER JOIN &#xD;&#xA;    (&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)      &#xD;&#xA;&#x9;&#x9;WHERE A.PAYMENT_DATE &lt;= @LASTPAYMENTDATE&#xD;&#xA;    ) PREVPHH&#xD;&#xA;  ON  PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA; WHERE  TEMP.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN  ('DDPT','DDPR') AND  PREVPHH.PAYEE_ACCOUNT_ID IS NOT NULL AND TEMP.BENEFIT_OPTION_VALUE NOT IN ('LUMP')&#xD;&#xA; GROUP BY TEMP.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA; UNION&#xD;&#xA; SELECT  'RECURRING' AS COMMENTS,TEMP.PERSON_ID AS PAYEE_PERSON,BENACCT.PERSON_ID AS PART_PERSON&#xD;&#xA; ,0 AS PYMT_COUNT&#xD;&#xA; ,0 AS PART_COUNT&#xD;&#xA; , COUNT(0) AS SURV_COUNT&#xD;&#xA; FROM  TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BENACCT ON  TEMP.PAYEE_BENEFIT_ACCOUNT_ID = BENACCT.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR XR ON TEMP.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA; LEFT OUTER JOIN &#xD;&#xA;    (&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;WHERE A.PAYMENT_DATE &lt;= @LASTPAYMENTDATE&#xD;&#xA;    ) PREVPHH&#xD;&#xA;  ON  PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA; WHERE  TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN  ('DDPT','DDPR') AND PREVPHH.PAYEE_ACCOUNT_ID IS NOT NULL AND TEMP.BENEFIT_OPTION_VALUE NOT IN ('LUMP')&#xD;&#xA; GROUP BY TEMP.PERSON_ID,BENACCT.PERSON_ID&#xD;&#xA;) RECURRINGTBL&#xD;&#xA;GROUP BY COMMENTS">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="DeleteBackUpMonthly" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;DECLARE @BACKUPTABLEPREFIX VARCHAR(500)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT @BACKUPTABLEPREFIX = LTRIM(RTRIM(BACKUP_TABLE_PREFIX))+'%' FROM SGT_PAYMENT_SCHEDULE &#xD;&#xA; WHERE STATUS_VALUE = 'PRCD' AND PAYMENT_SCHEDULE_ID = @LASTPAYMENTSCHEDULEID&#xD;&#xA;&#xD;&#xA;DECLARE @ROWCOUNTER INT, @MAXROWS INT&#xD;&#xA;&#xD;&#xA;SET @ROWCOUNTER  = 1&#xD;&#xA;SET @MAXROWS = 0 &#xD;&#xA;&#xD;&#xA;DECLARE @TARGET_TABLE VARCHAR(2000)&#xD;&#xA;&#xD;&#xA;IF @BACKUPTABLEPREFIX IS NOT NULL BEGIN&#xD;&#xA; &#xD;&#xA; IF OBJECT_ID('TEMPDB..#TEMPDROPPREVIOUSBACKUP') IS NOT NULL&#xD;&#xA;  DROP TABLE #TEMPDROPPREVIOUSBACKUP &#xD;&#xA;&#xD;&#xA; CREATE TABLE #TEMPDROPPREVIOUSBACKUP &#xD;&#xA; (&#xD;&#xA;  PRIMARY_KEY INT IDENTITY(1,1) NOT NULL PRIMARY KEY, &#xD;&#xA;  NAME VARCHAR(500)&#xD;&#xA; )&#xD;&#xA;&#xD;&#xA; INSERT INTO #TEMPDROPPREVIOUSBACKUP &#xD;&#xA;  SELECT NAME AS NAME &#xD;&#xA;   FROM SYS.OBJECTS WHERE NAME LIKE @BACKUPTABLEPREFIX &#xD;&#xA;&#xD;&#xA; SET @MAXROWS = @@ROWCOUNT   &#xD;&#xA; &#xD;&#xA;  IF @MAXROWS  &gt; 0 BEGIN&#xD;&#xA;&#xD;&#xA;  WHILE @MAXROWS &gt; 0 AND @ROWCOUNTER &lt;= @MAXROWS BEGIN&#xD;&#xA;    &#xD;&#xA;   SET @TARGET_TABLE  = NULL&#xD;&#xA;&#xD;&#xA;   SELECT @TARGET_TABLE  = NAME&#xD;&#xA;    FROM #TEMPDROPPREVIOUSBACKUP &#xD;&#xA;    WHERE PRIMARY_KEY = @ROWCOUNTER&#xD;&#xA;  &#xD;&#xA;   IF @TARGET_TABLE IS NOT NULL BEGIN&#xD;&#xA;    IF @TARGET_TABLE IS NOT NULL BEGIN&#xD;&#xA;     SET @TARGET_TABLE = 'DROP TABLE ' + @TARGET_TABLE&#xD;&#xA;      --PRINT @TARGET_TABLE &#xD;&#xA;     EXECUTE (@TARGET_TABLE )        &#xD;&#xA;    END   &#xD;&#xA;    SET @ROWCOUNTER = @ROWCOUNTER + 1 &#xD;&#xA;   END&#xD;&#xA;   END&#xD;&#xA; END&#xD;&#xA;END&#xD;&#xA;SET NOCOUNT OFF&#xD;&#xA;SELECT 1">
      <parameters>
        <parameter ID="@LASTPAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetDeceasedParticipantsPayeeAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA&#xD;&#xA;ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX&#xD;&#xA;ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID&#xD;&#xA;WHERE (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID =SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;ORDER BY Q.MODIFIED_DATE DESC) IN ('CMPL') AND SPA.PERSON_ID=@PERSON_ID AND SPBX.PLAN_ID = @PLAN_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalMasterPaymentReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="drop table if exists #RESULT&#xD;&#xA;SELECT CASE WHEN PHDN.PAYMENT_METHOD_VALUE = 'ACH' OR PHDN.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE = 'CHK' OR PHDN.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;&#x9;WHEN PHDN.PAYMENT_METHOD_VALUE = 'WIRE' OR PHDN.PAYMENT_METHOD_VALUE = 'RWIRE' THEN 'WIRE'&#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;    ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA; , CASE WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'Items with no Distribution records'&#xD;&#xA;   ELSE PMET.DESCRIPTION &#xD;&#xA;   END AS PAYMENT_METHOD_DESCR&#xD;&#xA; , PL.PLAN_NAME&#xD;&#xA; , PA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA; , CASE WHEN PA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND PA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'Death (Post-Retirement)' &#xD;&#xA;     WHEN PA.RETIREMENT_TYPE_VALUE = 'MIND' THEN 'Minimum Distribution' ELSE  BTYP.DESCRIPTION END AS BENEFIT_ACCOUNT_TYPE_DESCR&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION AS ACCOUNT_RELATION_DESCR&#xD;&#xA; , ISNULL(MASTER_PAYMENT_GROUP_VALUE, 'BLNK') AS MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA; , phh.PERSON_ID&#xD;&#xA; , phh.PAYEE_ACCOUNT_ID&#xD;&#xA; , case &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXAN', 'NXAN', 'FDAN', 'STAN', 'CHLD', 'LEVY') or pit.MASTER_PAYMENT_GROUP_VALUE is null then 'ANNUITANT' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRF', 'NXRF', 'FDRF', 'STRF') then 'REFUNDS' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRL', 'NXRL') then 'ROLLOVER' &#xD;&#xA;   end PAYMENT_CATEGORY&#xD;&#xA; , case when PREVPH.PAYEE_ACCOUNT_ID is null then 'New' else 'Recurring' end PAYMENT_TYPE&#xD;&#xA; , PHD.AMOUNT*ITEM_TYPE_DIRECTION as AMOUNT&#xD;&#xA; , PHH.PAYMENT_DATE&#xD;&#xA;into #RESULT&#xD;&#xA;FROM &#xD;&#xA; DBO.SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH &#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN (&#xD;&#xA;  SELECT DISTINCT PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_VALUE,PAYMENT_METHOD_ID FROM &#xD;&#xA;   SGT_PAYMENT_HISTORY_DISTRIBUTION WHERE PAYMENT_METHOD_VALUE IN ('ACH','CHK','WIRE')&#xD;&#xA; ) AS PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN DBO.SGT_PLAN(NOLOCK) PL ON PHH.PLAN_ID = PL.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN DBO.SGT_PAYEE_ACCOUNT(NOLOCK) PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PMET ON PHDN.PAYMENT_METHOD_ID = PMET.CODE_ID &#xD;&#xA;   AND PHDN.PAYMENT_METHOD_VALUE = PMET.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) BTYP ON PA.BENEFIT_ACCOUNT_TYPE_ID = BTYP.CODE_ID&#xD;&#xA;   AND  PA.BENEFIT_ACCOUNT_TYPE_VALUE = BTYP.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) ACREL ON PA.ACCOUNT_RELATION_ID = ACREL.CODE_ID&#xD;&#xA;   AND  PA.ACCOUNT_RELATION_VALUE = ACREL.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PAYIT ON PIT.MASTER_PAYMENT_GROUP_ID = PAYIT.CODE_ID &#xD;&#xA;   AND PIT.MASTER_PAYMENT_GROUP_VALUE = PAYIT.CODE_VALUE&#xD;&#xA;outer apply(&#xD;&#xA;    select top 1 phh1.PAYEE_ACCOUNT_ID&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;&#x9;inner join dbo.SGT_PAYMENT_SCHEDULE ps on ps.PAYMENT_SCHEDULE_ID = phh1.PAYMENT_SCHEDULE_ID and ps.SCHEDULE_TYPE_VALUE = 'MTLY'&#xD;&#xA;&#x9;where 1=1&#xD;&#xA;&#x9;&#x9;and phh1.PAYEE_ACCOUNT_ID = phh.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;and phh1.PAYMENT_DATE &lt; phh.PAYMENT_DATE&#xD;&#xA;&#x9;order by PHH1.PAYMENT_HISTORY_HEADER_ID desc&#xD;&#xA;) prevph&#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @SCHEDULE_ID AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET'&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT CASE WHEN PHDN.PAYMENT_METHOD_VALUE = 'ACH' OR PHDN.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE = 'CHK' OR PHDN.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;&#x9;WHEN PHDN.PAYMENT_METHOD_VALUE = 'WIRE' OR PHDN.PAYMENT_METHOD_VALUE = 'RWIRE' THEN 'WIRE'&#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;    ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA; , CASE WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'Items with no Distribution records'&#xD;&#xA;   ELSE PMET.DESCRIPTION &#xD;&#xA;   END AS PAYMENT_METHOD_DESCR&#xD;&#xA; , PL.PLAN_NAME&#xD;&#xA; , PA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA; , CASE WHEN PA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND PA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'Death (Post-Retirement)' &#xD;&#xA;   WHEN PA.RETIREMENT_TYPE_VALUE = 'MIND' THEN 'Minimum Distribution' ELSE  BTYP.DESCRIPTION END AS BENEFIT_ACCOUNT_TYPE_DESCR&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION AS ACCOUNT_RELATION_DESCR&#xD;&#xA; , ISNULL(MASTER_PAYMENT_GROUP_VALUE, 'BLNK') AS MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA; , phh.PERSON_ID&#xD;&#xA; , phh.PAYEE_ACCOUNT_ID&#xD;&#xA; , case &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXAN', 'NXAN', 'FDAN', 'STAN', 'CHLD', 'LEVY') or pit.MASTER_PAYMENT_GROUP_VALUE is null then 'ANNUITANT' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRF', 'NXRF', 'FDRF', 'STRF') then 'REFUNDS' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRL', 'NXRL') then 'ROLLOVER' &#xD;&#xA;   end PAYMENT_CATEGORY&#xD;&#xA; , case when PREVPH.PAYEE_ACCOUNT_ID is null then 'New' else 'Recurring' end PAYMENT_TYPE&#xD;&#xA; , PHD.AMOUNT*ITEM_TYPE_DIRECTION as AMOUNT&#xD;&#xA; , PHH.PAYMENT_DATE&#xD;&#xA;FROM &#xD;&#xA; DBO.SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH &#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN (&#xD;&#xA;  SELECT DISTINCT PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_VALUE,PAYMENT_METHOD_ID,ORG_ID FROM &#xD;&#xA;   SGT_PAYMENT_HISTORY_DISTRIBUTION WHERE PAYMENT_METHOD_VALUE IN ('RACH','RCHK','RWIRE')&#xD;&#xA; ) AS PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID AND PHDN.ORG_ID = PHH.ORG_ID&#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN DBO.SGT_PLAN(NOLOCK) PL ON PHH.PLAN_ID = PL.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN DBO.SGT_PAYEE_ACCOUNT(NOLOCK) PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PMET ON PHDN.PAYMENT_METHOD_ID = PMET.CODE_ID&#xD;&#xA;   AND PHDN.PAYMENT_METHOD_VALUE = PMET.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) BTYP ON PA.BENEFIT_ACCOUNT_TYPE_ID = BTYP.CODE_ID&#xD;&#xA;   AND PA.BENEFIT_ACCOUNT_TYPE_VALUE = BTYP.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) ACREL ON PA.ACCOUNT_RELATION_ID = ACREL.CODE_ID&#xD;&#xA;   AND PA.ACCOUNT_RELATION_VALUE = ACREL.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PAYIT ON PIT.MASTER_PAYMENT_GROUP_ID = PAYIT.CODE_ID&#xD;&#xA;   AND PIT.MASTER_PAYMENT_GROUP_VALUE = PAYIT.CODE_VALUE&#xD;&#xA;outer apply(&#xD;&#xA;    select top 1 phh1.PAYEE_ACCOUNT_ID&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;&#x9;inner join dbo.SGT_PAYMENT_SCHEDULE ps on ps.PAYMENT_SCHEDULE_ID = phh1.PAYMENT_SCHEDULE_ID and ps.SCHEDULE_TYPE_VALUE = 'MTLY'&#xD;&#xA;&#x9;where 1=1&#xD;&#xA;&#x9;&#x9;and phh1.PAYEE_ACCOUNT_ID = phh.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;and phh1.PAYMENT_DATE &lt; phh.PAYMENT_DATE&#xD;&#xA;&#x9;order by PHH1.PAYMENT_HISTORY_HEADER_ID desc&#xD;&#xA;) prevph&#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @SCHEDULE_ID AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'CRET'&#xD;&#xA;&#xD;&#xA;drop table if exists #FINAL&#xD;&#xA;;with s as (&#xD;&#xA;select &#xD;&#xA;&#x9;r.PLAN_NAME, r.PAYMENT_METHOD_DESCR, r.BENEFIT_ACCOUNT_TYPE_DESCR, r.ACCOUNT_RELATION_DESCR, r.PAYMENT_CATEGORY, r.PAYMENT_TYPE,&#xD;&#xA;&#x9;count(distinct r.PERSON_ID) TOTAL_PAYEE_COUNT,&#xD;&#xA;&#x9;count(distinct r.PAYEE_ACCOUNT_ID) TOTAL_COUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'TX%' then r.AMOUNT else 0 end) TAXABLE_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'NX%' then r.AMOUNT else 0 end) NON_TAXABLE_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'FD%' then r.AMOUNT else 0 end) FEDERAL_TAX_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'ST%' then r.AMOUNT else 0 end) STATE_TAX_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE = 'CHLD' then r.AMOUNT else 0 end) CHILD_SUPPORT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE = 'LEVY' then r.AMOUNT else 0 end) TAX_LEVY,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE = 'BLNK' then r.AMOUNT else 0 end) OTHERS,&#xD;&#xA;&#x9;r.PAYMENT_DATE&#xD;&#xA;from #RESULT r&#xD;&#xA;group by r.PLAN_NAME, r.PAYMENT_METHOD_DESCR, r.BENEFIT_ACCOUNT_TYPE_DESCR, r.ACCOUNT_RELATION_DESCR, r.PAYMENT_CATEGORY, r.PAYMENT_TYPE, r.PAYMENT_DATE&#xD;&#xA;)&#xD;&#xA;select &#xD;&#xA;&#x9;PLAN_NAME, PAYMENT_METHOD_DESCR, BENEFIT_ACCOUNT_TYPE_DESCR, ACCOUNT_RELATION_DESCR, PAYMENT_CATEGORY, PAYMENT_TYPE, TOTAL_PAYEE_COUNT, TOTAL_COUNT, &#xD;&#xA;&#x9;(TAXABLE_AMOUNT + NON_TAXABLE_AMOUNT) GROSS_AMOUNT, TAXABLE_AMOUNT, NON_TAXABLE_AMOUNT, FEDERAL_TAX_AMOUNT, STATE_TAX_AMOUNT, &#xD;&#xA;    CHILD_SUPPORT, TAX_LEVY, OTHERS, PAYMENT_DATE &#xD;&#xA;into #FINAL&#xD;&#xA;from s&#xD;&#xA;where 1=1&#xD;&#xA;&#x9;and (TAXABLE_AMOUNT + NON_TAXABLE_AMOUNT) &gt; 0&#xD;&#xA;&#xD;&#xA;select &#xD;&#xA;&#x9;PLAN_NAME, PAYMENT_METHOD_DESCR, BENEFIT_ACCOUNT_TYPE_DESCR, ACCOUNT_RELATION_DESCR, PAYMENT_CATEGORY, PAYMENT_TYPE, TOTAL_PAYEE_COUNT, TOTAL_COUNT, GROSS_AMOUNT, &#xD;&#xA;&#x9;TAXABLE_AMOUNT, NON_TAXABLE_AMOUNT, FEDERAL_TAX_AMOUNT, STATE_TAX_AMOUNT, CHILD_SUPPORT, TAX_LEVY, OTHERS, PAYMENT_DATE&#xD;&#xA;from #FINAL f&#xD;&#xA;order by &#xD;&#xA;  PLAN_NAME, PAYMENT_METHOD_DESCR, BENEFIT_ACCOUNT_TYPE_DESCR, ACCOUNT_RELATION_DESCR, PAYMENT_CATEGORY, PAYMENT_TYPE, PAYMENT_DATE">
      <parameters>
        <parameter ID="@SCHEDULE_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalMasterBenefitPaymentReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="drop table if exists #RESULT&#xD;&#xA;SELECT CASE WHEN PHDN.PAYMENT_METHOD_VALUE = 'ACH' OR PHDN.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE = 'CHK' OR PHDN.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;&#x9;WHEN PHDN.PAYMENT_METHOD_VALUE = 'WIRE' OR PHDN.PAYMENT_METHOD_VALUE = 'RWIRE' THEN 'WIRE'&#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;    ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA; , CASE WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'Items with no Distribution records'&#xD;&#xA;   ELSE PMET.DESCRIPTION &#xD;&#xA;   END AS PAYMENT_METHOD_DESCR&#xD;&#xA; , PL.PLAN_NAME&#xD;&#xA; , PA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA; , CASE WHEN PA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND PA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'Death (Post-Retirement)' &#xD;&#xA;     WHEN PA.RETIREMENT_TYPE_VALUE = 'MIND' THEN 'Minimum Distribution' ELSE  BTYP.DESCRIPTION END AS BENEFIT_ACCOUNT_TYPE_DESCR&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION AS ACCOUNT_RELATION_DESCR&#xD;&#xA; , ISNULL(MASTER_PAYMENT_GROUP_VALUE, 'BLNK') AS MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA; , phh.PERSON_ID&#xD;&#xA; , phh.PAYEE_ACCOUNT_ID&#xD;&#xA; , case &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXAN', 'NXAN', 'FDAN', 'STAN', 'CHLD', 'LEVY') or pit.MASTER_PAYMENT_GROUP_VALUE is null then 'ANNUITANT' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRF', 'NXRF', 'FDRF', 'STRF') then 'REFUNDS' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRL', 'NXRL') then 'ROLLOVER' &#xD;&#xA;   end PAYMENT_CATEGORY&#xD;&#xA; , case when PREVPH.PAYEE_ACCOUNT_ID is null then 'New' else 'Recurring' end PAYMENT_TYPE&#xD;&#xA; , PHD.AMOUNT*ITEM_TYPE_DIRECTION as AMOUNT&#xD;&#xA; , PHH.PAYMENT_DATE&#xD;&#xA;into #RESULT&#xD;&#xA;FROM &#xD;&#xA; DBO.SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH &#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN (&#xD;&#xA;  SELECT DISTINCT PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_VALUE,PAYMENT_METHOD_ID FROM &#xD;&#xA;   SGT_PAYMENT_HISTORY_DISTRIBUTION WHERE PAYMENT_METHOD_VALUE IN ('ACH','CHK','WIRE')&#xD;&#xA; ) AS PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN DBO.SGT_PLAN(NOLOCK) PL ON PHH.PLAN_ID = PL.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN DBO.SGT_PAYEE_ACCOUNT(NOLOCK) PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PMET ON PHDN.PAYMENT_METHOD_ID = PMET.CODE_ID &#xD;&#xA;   AND PHDN.PAYMENT_METHOD_VALUE = PMET.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) BTYP ON PA.BENEFIT_ACCOUNT_TYPE_ID = BTYP.CODE_ID&#xD;&#xA;   AND  PA.BENEFIT_ACCOUNT_TYPE_VALUE = BTYP.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) ACREL ON PA.ACCOUNT_RELATION_ID = ACREL.CODE_ID&#xD;&#xA;   AND  PA.ACCOUNT_RELATION_VALUE = ACREL.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PAYIT ON PIT.MASTER_PAYMENT_GROUP_ID = PAYIT.CODE_ID &#xD;&#xA;   AND PIT.MASTER_PAYMENT_GROUP_VALUE = PAYIT.CODE_VALUE&#xD;&#xA;outer apply(&#xD;&#xA;    select top 1 phh1.PAYEE_ACCOUNT_ID&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;&#x9;inner join dbo.SGT_PAYMENT_SCHEDULE ps on ps.PAYMENT_SCHEDULE_ID = phh1.PAYMENT_SCHEDULE_ID and ps.SCHEDULE_TYPE_VALUE = 'MTLY'&#xD;&#xA;&#x9;where 1=1&#xD;&#xA;&#x9;&#x9;and phh1.PAYEE_ACCOUNT_ID = phh.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;and phh1.PAYMENT_DATE &lt; phh.PAYMENT_DATE&#xD;&#xA;&#x9;order by PHH1.PAYMENT_HISTORY_HEADER_ID desc&#xD;&#xA;) prevph&#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @SCHEDULE_ID AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET'&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT CASE WHEN PHDN.PAYMENT_METHOD_VALUE = 'ACH' OR PHDN.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE = 'CHK' OR PHDN.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;&#x9;WHEN PHDN.PAYMENT_METHOD_VALUE = 'WIRE' OR PHDN.PAYMENT_METHOD_VALUE = 'RWIRE' THEN 'WIRE'&#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;    ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA; , CASE WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'Items with no Distribution records'&#xD;&#xA;   ELSE PMET.DESCRIPTION &#xD;&#xA;   END AS PAYMENT_METHOD_DESCR&#xD;&#xA; , PL.PLAN_NAME&#xD;&#xA; , PA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA; , CASE WHEN PA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND PA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'Death (Post-Retirement)' &#xD;&#xA;   WHEN PA.RETIREMENT_TYPE_VALUE = 'MIND' THEN 'Minimum Distribution' ELSE  BTYP.DESCRIPTION END AS BENEFIT_ACCOUNT_TYPE_DESCR&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION AS ACCOUNT_RELATION_DESCR&#xD;&#xA; , ISNULL(MASTER_PAYMENT_GROUP_VALUE, 'BLNK') AS MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA; , phh.PERSON_ID&#xD;&#xA; , phh.PAYEE_ACCOUNT_ID&#xD;&#xA; , case &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXAN', 'NXAN', 'FDAN', 'STAN', 'CHLD', 'LEVY') or pit.MASTER_PAYMENT_GROUP_VALUE is null then 'ANNUITANT' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRF', 'NXRF', 'FDRF', 'STRF') then 'REFUNDS' &#xD;&#xA;&#x9;when pit.MASTER_PAYMENT_GROUP_VALUE in ('TXRL', 'NXRL') then 'ROLLOVER' &#xD;&#xA;   end PAYMENT_CATEGORY&#xD;&#xA; , case when PREVPH.PAYEE_ACCOUNT_ID is null then 'New' else 'Recurring' end PAYMENT_TYPE&#xD;&#xA; , PHD.AMOUNT*ITEM_TYPE_DIRECTION as AMOUNT&#xD;&#xA; , PHH.PAYMENT_DATE&#xD;&#xA;FROM &#xD;&#xA; DBO.SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH &#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN (&#xD;&#xA;  SELECT DISTINCT PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_VALUE,PAYMENT_METHOD_ID,ORG_ID FROM &#xD;&#xA;   SGT_PAYMENT_HISTORY_DISTRIBUTION WHERE PAYMENT_METHOD_VALUE IN ('RACH','RCHK','RWIRE')&#xD;&#xA; ) AS PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID AND PHDN.ORG_ID = PHH.ORG_ID&#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN DBO.SGT_PLAN(NOLOCK) PL ON PHH.PLAN_ID = PL.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN DBO.SGT_PAYEE_ACCOUNT(NOLOCK) PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PMET ON PHDN.PAYMENT_METHOD_ID = PMET.CODE_ID&#xD;&#xA;   AND PHDN.PAYMENT_METHOD_VALUE = PMET.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) BTYP ON PA.BENEFIT_ACCOUNT_TYPE_ID = BTYP.CODE_ID&#xD;&#xA;   AND PA.BENEFIT_ACCOUNT_TYPE_VALUE = BTYP.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) ACREL ON PA.ACCOUNT_RELATION_ID = ACREL.CODE_ID&#xD;&#xA;   AND PA.ACCOUNT_RELATION_VALUE = ACREL.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PAYIT ON PIT.MASTER_PAYMENT_GROUP_ID = PAYIT.CODE_ID&#xD;&#xA;   AND PIT.MASTER_PAYMENT_GROUP_VALUE = PAYIT.CODE_VALUE&#xD;&#xA;outer apply(&#xD;&#xA;    select top 1 phh1.PAYEE_ACCOUNT_ID&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;&#x9;inner join dbo.SGT_PAYMENT_SCHEDULE ps on ps.PAYMENT_SCHEDULE_ID = phh1.PAYMENT_SCHEDULE_ID and ps.SCHEDULE_TYPE_VALUE = 'MTLY'&#xD;&#xA;&#x9;where 1=1&#xD;&#xA;&#x9;&#x9;and phh1.PAYEE_ACCOUNT_ID = phh.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;and phh1.PAYMENT_DATE &lt; phh.PAYMENT_DATE&#xD;&#xA;&#x9;order by PHH1.PAYMENT_HISTORY_HEADER_ID desc&#xD;&#xA;) prevph&#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @SCHEDULE_ID AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'CRET'&#xD;&#xA;&#xD;&#xA;drop table if exists #FINAL&#xD;&#xA;;with s as (&#xD;&#xA;select &#xD;&#xA;&#x9;r.PLAN_NAME, r.PAYMENT_METHOD_DESCR, r.BENEFIT_ACCOUNT_TYPE_DESCR, r.ACCOUNT_RELATION_DESCR, r.PAYMENT_CATEGORY, r.PAYMENT_TYPE,&#xD;&#xA;&#x9;count(distinct r.PERSON_ID) TOTAL_PAYEE_COUNT,&#xD;&#xA;&#x9;count(distinct r.PAYEE_ACCOUNT_ID) TOTAL_COUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'TX%' then r.AMOUNT else 0 end) TAXABLE_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'NX%' then r.AMOUNT else 0 end) NON_TAXABLE_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'FD%' then r.AMOUNT else 0 end) FEDERAL_TAX_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE like 'ST%' then r.AMOUNT else 0 end) STATE_TAX_AMOUNT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE = 'CHLD' then r.AMOUNT else 0 end) CHILD_SUPPORT,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE = 'LEVY' then r.AMOUNT else 0 end) TAX_LEVY,&#xD;&#xA;&#x9;sum(case when r.MASTER_PAYMENT_GROUP_VALUE = 'BLNK' then r.AMOUNT else 0 end) OTHERS,&#xD;&#xA;&#x9;r.PAYMENT_DATE&#xD;&#xA;from #RESULT r&#xD;&#xA;group by r.PLAN_NAME, r.PAYMENT_METHOD_DESCR, r.BENEFIT_ACCOUNT_TYPE_DESCR, r.ACCOUNT_RELATION_DESCR, r.PAYMENT_CATEGORY, r.PAYMENT_TYPE, r.PAYMENT_DATE&#xD;&#xA;)&#xD;&#xA;select &#xD;&#xA;&#x9;PLAN_NAME, PAYMENT_METHOD_DESCR, BENEFIT_ACCOUNT_TYPE_DESCR, ACCOUNT_RELATION_DESCR, PAYMENT_CATEGORY, PAYMENT_TYPE, TOTAL_PAYEE_COUNT, TOTAL_COUNT, &#xD;&#xA;&#x9;(TAXABLE_AMOUNT + NON_TAXABLE_AMOUNT) GROSS_AMOUNT, TAXABLE_AMOUNT, NON_TAXABLE_AMOUNT, FEDERAL_TAX_AMOUNT, STATE_TAX_AMOUNT, &#xD;&#xA;    CHILD_SUPPORT, TAX_LEVY, OTHERS, PAYMENT_DATE &#xD;&#xA;into #FINAL&#xD;&#xA;from s&#xD;&#xA;where 1=1&#xD;&#xA;&#x9;and (TAXABLE_AMOUNT + NON_TAXABLE_AMOUNT) &gt; 0&#xD;&#xA;&#xD;&#xA;select &#xD;&#xA;&#x9;BENEFIT_ACCOUNT_TYPE_DESCR, ACCOUNT_RELATION_DESCR, &#xD;&#xA;    sum(case when PAYMENT_TYPE = 'New' then TOTAL_PAYEE_COUNT else 0 end) PAYEE_COUNT_NEW,&#xD;&#xA;&#x9;sum(case when PAYMENT_TYPE = 'New' then TOTAL_COUNT else 0 end) COUNT_NEW,&#xD;&#xA;&#x9;sum(case when PAYMENT_TYPE = 'New' then GROSS_AMOUNT else 0 end) GROSS_AMOUNT_NEW,&#xD;&#xA;    sum(case when PAYMENT_TYPE = 'Recurring' then TOTAL_PAYEE_COUNT else 0 end) PAYEE_COUNT_RECURRING,&#xD;&#xA;&#x9;sum(case when PAYMENT_TYPE = 'Recurring' then TOTAL_COUNT else 0 end) COUNT_RECURRING,&#xD;&#xA;&#x9;sum(case when PAYMENT_TYPE = 'Recurring' then GROSS_AMOUNT else 0 end) GROSS_AMOUNT_RECURRING&#xD;&#xA;from #FINAL f&#xD;&#xA;group by BENEFIT_ACCOUNT_TYPE_DESCR, ACCOUNT_RELATION_DESCR&#xD;&#xA;order by&#xD;&#xA;&#x9;case &#xD;&#xA;&#x9;&#x9;when BENEFIT_ACCOUNT_TYPE_DESCR = 'Retirement' then 1 when BENEFIT_ACCOUNT_TYPE_DESCR = 'Disability' then 2 when BENEFIT_ACCOUNT_TYPE_DESCR = 'Minimum Distribution' then 3&#xD;&#xA;&#x9;&#x9;when BENEFIT_ACCOUNT_TYPE_DESCR = 'Death (Pre-Retirement)' then 4 when BENEFIT_ACCOUNT_TYPE_DESCR = 'Death (Post-Retirement)' then 5 when BENEFIT_ACCOUNT_TYPE_DESCR = 'QDRO Calculation' then 6&#xD;&#xA;&#x9;&#x9;when BENEFIT_ACCOUNT_TYPE_DESCR = 'Withdrawal' then 7 else 10&#xD;&#xA;&#x9;end,&#xD;&#xA;&#x9;case &#xD;&#xA;&#x9;&#x9;when ACCOUNT_RELATION_DESCR = 'Participant Account' then 1 when ACCOUNT_RELATION_DESCR = 'Joint Annuitant' then 2 when ACCOUNT_RELATION_DESCR = 'Beneficiary Account' then 3&#xD;&#xA;&#x9;&#x9;when ACCOUNT_RELATION_DESCR = 'Alternate Payee' then 4 else 10&#xD;&#xA;&#x9;end">
      <parameters>
        <parameter ID="@SCHEDULE_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfParticipantHasPendingDRO" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select COUNT(*) from SGW_PROCESS_INSTANCE &#xD;&#xA;where PROCESS_ID = 1&#xD;&#xA;and STATUS_VALUE in ('INPC', 'UNPC')&#xD;&#xA;and PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountsForRetirementAffidavitBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT CASE WHEN PA.END_DATE IS NOT NULL AND PA.END_DATE &lt;= GETDATE() THEN 'N' ELSE 'Y' END VALID_ADDR_FLAG ,&#xD;&#xA;  SP.MPI_PERSON_ID,&#xD;&#xA;  SP.LAST_NAME + ' ' +  SP.FIRST_NAME AS PARTICIPANT_NAME,&#xD;&#xA;  SBA.PERSON_ID,RETIREMENT_DATE AS idtRetireMentDate,&#xD;&#xA;  SBA.BENEFIT_TYPE_VALUE AS BENEFIT_ACCOUNT_TYPE_VALUE , &#xD;&#xA;  SBAD.BENEFIT_SUBTYPE_VALUE AS RETIREMENT_TYPE_VALUE,&#xD;&#xA;  SPBX.BENEFIT_OPTION_VALUE,&#xD;&#xA;  GETDATE() AS istrCurrentDate,&#xD;&#xA;  ( SELECT SUM(AMOUNT) &#xD;&#xA; FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE SPAPIT&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPAPIT.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPA.PERSON_ID = SP.PERSON_ID AND SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID AND SBAD.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.STATUS_VALUE NOT IN('CMPL','CNCL','SPND') AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA; WHERE SPAPIT.PAYMENT_ITEM_TYPE_ID IN(1,21) AND SPAPIT.END_DATE IS NULL&#xD;&#xA;  ) AS idecIAPBenefitAmount,&#xD;&#xA;  @RETIRMENT_DATE_FROM AS RETIRMENT_DATE_FROM , @RETIRMENT_DATE_TO AS RETIRMENT_DATE_TO,*&#xD;&#xA;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND SPBX.PLAN_ID=1 &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SBA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA on PA.PERSON_ID = Sp.PERSON_ID&#xD;&#xA;and PA.ADDRESS_ID = (Select top(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q &#xD;&#xA;      INNER JOIN SGT_PERSON_ADDRESS_CHKLIST T ON Q.ADDRESS_ID = T.ADDRESS_ID&#xD;&#xA;      where Q.PERSON_ID = sp.PERSON_ID and T.ADDRESS_TYPE_VALUE = 'MAIL' Order by q. ADDRESS_ID DESC)&#xD;&#xA;WHERE APPLICATION_DETAIL_STATUS_VALUE = 'APPR' AND SBAD.BENEFIT_SUBTYPE_VALUE IN ('NORM','REDE','SPLR','URED','LATE')&#xD;&#xA;AND SBA.BENEFIT_TYPE_VALUE = 'RTMT' AND CONVERT(DATE,RETIREMENT_DATE) BETWEEN @RETIRMENT_DATE_FROM AND @RETIRMENT_DATE_TO&#xD;&#xA;ORDER BY SP.LAST_NAME">
      <parameters>
        <parameter ID="@RETIRMENT_DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@RETIRMENT_DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountsForVerificationOfHoursBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PA.*, CVOPTION.DESCRIPTION as BENEFIT_OPTION, CVRELATION.DESCRIPTION AS ACCOUNT_RELATIONSHIP,PER.MPI_PERSON_ID,     &#xD;&#xA;  CASE WHEN PER.MPI_PERSON_ID IS NOT NULL then ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END AS PAYEE_NAME,&#xD;&#xA;  CVBENEFITTYPE.DESCRIPTION AS BENEFIT_TYPE, CVRETIREMENTTYPE.DESCRIPTION AS RETIREMENT_TYPE, SBA.RETIREMENT_DATE&#xD;&#xA;  , CVFUNDTYPE.DESCRIPTION AS FUND_TYPE,@PAYMENT_DATE_REPORT as PAYMENT_DATE_REPORT, 0.0 as IAP_HOURS&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA (NOLOCK) &#xD;&#xA;&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS(NOLOCK) ON PAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA;      LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID=PA.PLAN_BENEFIT_ID &#xD;&#xA;      LEFT OUTER JOIN SGT_PLAN SPLN WITH(NOLOCK) ON SPLN.PLAN_ID = PBXR.PLAN_ID &#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON PER(NOLOCK) ON PA.PERSON_ID = PER.PERSON_ID&#xD;&#xA;   LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = PA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;   LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA(NOLOCK) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID      &#xD;&#xA;      LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD WITH(NOLOCK) ON SBCD.BENEFIT_CALCULATION_DETAIL_ID = PA.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_HEADER SBCH ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBCD.BENEFIT_CALCULATION_HEADER_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_QDRO_CALCULATION_DETAIL SQCD WITH(NOLOCK) ON SQCD.QDRO_CALCULATION_DETAIL_ID = PA.DRO_CALCULATION_DETAIL_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_QDRO_CALCULATION_HEADER SQCH ON SQCH.QDRO_CALCULATION_HEADER_ID = SQCD.QDRO_CALCULATION_HEADER_ID&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CVOPTION (nolock) ON PBXR.BENEFIT_OPTION_ID = CVOPTION.CODE_ID AND PBXR.BENEFIT_OPTION_VALUE = CVOPTION.CODE_VALUE&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CVRELATION (nolock) ON PA.ACCOUNT_RELATION_ID= CVRELATION.CODE_ID AND PA.ACCOUNT_RELATION_VALUE = CVRELATION.CODE_VALUE&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CVBENEFITTYPE (nolock) ON PA.BENEFIT_ACCOUNT_TYPE_ID= CVBENEFITTYPE.CODE_ID AND PA.BENEFIT_ACCOUNT_TYPE_VALUE = CVBENEFITTYPE.CODE_VALUE&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CVRETIREMENTTYPE (nolock) ON PA.RETIREMENT_TYPE_ID= CVRETIREMENTTYPE.CODE_ID AND PA.RETIREMENT_TYPE_VALUE = CVRETIREMENTTYPE.CODE_VALUE&#xD;&#xA;   LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = PA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;   LEFT OUTER JOIN SGS_CODE_VALUE CVFUNDTYPE (nolock) ON SPBA.FUNDS_TYPE_ID= CVFUNDTYPE.CODE_ID AND SPBA.FUNDS_TYPE_VALUE = CVFUNDTYPE.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN &#xD;&#xA;                        (&#xD;&#xA;                              SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;                              LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE B WITH(NOLOCK) ON A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                              WHERE A.PAYMENT_SCHEDULE_ID = B.PAYMENT_SCHEDULE_ID&#xD;&#xA;                        )    PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;     WHERE PAS.STATUS_VALUE  IN ('APRD') &#xD;&#xA;     AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL&#xD;&#xA;     AND PAYEE_ACCOUNT_STATUS_ID  = &#xD;&#xA;            (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;                  FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;                  WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;                  ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC,PAS1.PAYEE_ACCOUNT_STATUS_ID DESC&#xD;&#xA;            )     &#xD;&#xA;     AND PBXR.PLAN_ID = 1 &#xD;&#xA;     AND ACCOUNT_RELATION_VALUE = 'PART'&#xD;&#xA;     AND BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DSBL' AND RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND'">
      <parameters>
        <parameter ID="@PAYMENT_DATE_REPORT" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="TrialPayeeListReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('TEMPDB..#TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE #TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;MPID_OrganizationID,&#xD;&#xA;PayeeName_OrganizationName,&#xD;&#xA;ACCOUNT_RELATIONSHIP,&#xD;&#xA;BENEFIT_ACCOUNT_TYPE,&#xD;&#xA;BENEFIT_OPTION,&#xD;&#xA;REP.GROSS_AMOUNT, &#xD;&#xA;REP.FEDERAL_TAX_AMOUNT,&#xD;&#xA;REP.STATE_TAX_AMOUNT,&#xD;&#xA;REP.NET_AMOUNT,&#xD;&#xA;FUND_TYPE,&#xD;&#xA;PER_ADDRESS,&#xD;&#xA;ACCOUNT_NUMBER,&#xD;&#xA;@PAYMENTDATE AS PAYMENT_DATE,&#xD;&#xA;PAYEE_ACCOUNT_ID,&#xD;&#xA;REP.PAYEE_LAST_NAME&#xD;&#xA;INTO #TEMP_TABLE_FOR_REPORT&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;&#xD;&#xA;      SELECT PAYEE_ACCOUNT_ID,&#xD;&#xA;      ISNULL(MPI_PERSON_ID,MPI_ORG_ID) AS MPID_OrganizationID,&#xD;&#xA;      CASE WHEN MPI_PERSON_ID IS NULL THEN ORGANIZATION_NAME ELSE PAYEE_NAME END AS PayeeName_OrganizationName,&#xD;&#xA;      PAYEE_LAST_NAME,&#xD;&#xA;      PAYEE_NAME,BENEFIT_ACCOUNT_TYPE,&#xD;&#xA;      BENEFIT_OPTION,&#xD;&#xA;      ACCOUNT_RELATIONSHIP, &#xD;&#xA;      SUM(GROSS_AMOUNT) AS GROSS_AMOUNT,&#xD;&#xA;      SUM(NET_AMOUNT) AS NET_AMOUNT,&#xD;&#xA;      SUM(STATE_TAX_AMOUNT) AS STATE_TAX_AMOUNT,&#xD;&#xA;      SUM(FEDERAL_TAX_AMOUNT) AS FEDERAL_TAX_AMOUNT,&#xD;&#xA;      FUND_TYPE,&#xD;&#xA;      PER_ADDRESS,&#xD;&#xA;      ACCOUNT_NUMBER&#xD;&#xA;                  &#xD;&#xA;      FROM (     &#xD;&#xA;            SELECT TEMP.PAYEE_ACCOUNT_ID,&#xD;&#xA;   --PIR 964 IAP CHILD SUPPORT&#xD;&#xA;            CASE WHEN CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL THEN ISNULL( CHILD_SUPP.MPI_ORG_ID,CHILD_SUPP.MPI_PERSON_ID) +' /'+ TEMP.MPI_PERSON_ID &#xD;&#xA;     WHEN (TEMP.TRANSFER_ORG_ID &gt; 0 AND TEMP.PERSON_ID &gt; 0) THEN ISNULL( TRAN_ORG.MPI_ORG_ID,'') +' /'+ TEMP.MPI_PERSON_ID  ELSE TEMP.MPI_PERSON_ID END AS MPI_PERSON_ID,&#xD;&#xA;            --TEMP.MPI_PERSON_ID, &#xD;&#xA;            TEMP.MPI_ORG_ID,&#xD;&#xA;            CASE WHEN TEMP.ORG_ID &gt; 0 THEN TEMP.ORGANIZATION_NAME + ' ' + ISNULL(RTRIM('C/O '+ORG_ADD.CARE_OF),'') ELSE TEMP.ORGANIZATION_NAME END AS ORGANIZATION_NAME,&#xD;&#xA;            TEMP.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP,&#xD;&#xA;            TEMP.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION,&#xD;&#xA;            --, TEMP.PAYEE_NAME&#xD;&#xA;            CASE WHEN TEMP.PAYEE_LAST_NAME IS NULL THEN TEMP.ORGANIZATION_NAME ELSE TEMP.PAYEE_LAST_NAME END AS PAYEE_LAST_NAME,&#xD;&#xA;   --PIR 964 IAP CHILD SUPPORT&#xD;&#xA;            CASE WHEN CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL THEN ISNULL(CHILD_SUPP.ORG_NAME,CHILD_SUPP.PERSON_NAME) +' /' + ISNULL(RTRIM(TEMP.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TEMP.PAYEE_LAST_NAME)),'') + ' FBO:' + CHILD_SUPP.ACCOUNT_NUMBER&#xD;&#xA;   WHEN (TEMP.TRANSFER_ORG_ID &gt; 0 AND TEMP.PERSON_ID &gt; 0) THEN ISNULL( TRAN_ORG.ORG_NAME,'') +' FBO:'+ ISNULL(RTRIM(TEMP.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TEMP.PAYEE_LAST_NAME)),'') ELSE ISNULL(RTRIM(TEMP.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TEMP.PAYEE_LAST_NAME)),'') END AS PAYEE_NAME,&#xD;&#xA;            TEMP.BENEFIT_ACCOUNT_TYPE_VALUE AS BENEFIT_ACCOUNT_TYPE,&#xD;&#xA;&#xD;&#xA;   SUM(&#xD;&#xA;    CASE WHEN ((PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK') &#xD;&#xA;                     THEN &#xD;&#xA;      CASE WHEN PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN PIT.ITEM_TYPE_DIRECTION*(ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) --PIR 994&#xD;&#xA;      ELSE PIT.ITEM_TYPE_DIRECTION*PAPI.AMOUNT &#xD;&#xA;      END&#xD;&#xA;    ELSE  &#xD;&#xA;      CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN (ROUND(RETRO.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) &#xD;&#xA;      ELSE 0 &#xD;&#xA;      END --PIR 994 &#xD;&#xA;    END&#xD;&#xA;                            &#xD;&#xA;                ) +  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS GROSS_AMOUNT,&#xD;&#xA;                  &#xD;&#xA;             SUM(&#xD;&#xA;     CASE WHEN TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' &#xD;&#xA;     THEN &#xD;&#xA;      CASE WHEN PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) --PIR 994&#xD;&#xA;      ELSE ITEM_TYPE_DIRECTION * PAPI.AMOUNT &#xD;&#xA;      END&#xD;&#xA;     ELSE&#xD;&#xA;      CASE WHEN PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN (ITEM_TYPE_DIRECTION * (ROUND(RETRO.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) --PIR 994&#xD;&#xA;      ELSE 0 &#xD;&#xA;      END &#xD;&#xA;     END)&#xD;&#xA;     +  SUM(CASE WHEN CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL AND PIT.PAYMENT_ITEM_TYPE_ID = 42 THEN ISNULL(PAPI.AMOUNT,0) ELSE 0 END)--PIR 964 IAP CHILD SUPPORT&#xD;&#xA;      AS NET_AMOUNT,&#xD;&#xA;&#xD;&#xA;             SUM(&#xD;&#xA;     CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID &lt;&gt; 36 AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) &#xD;&#xA;       WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 36 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)))&#xD;&#xA;&#x9;   WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 40 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) --rid 81331&#xD;&#xA;       ELSE 0 END) AS STATE_TAX_AMOUNT, --PIR 994 --PIR 825&#xD;&#xA;&#xD;&#xA;             SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' AND PAPI.PAYMENT_ITEM_TYPE_ID &lt;&gt; 35 AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) &#xD;&#xA;        WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 35 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)))&#xD;&#xA;&#x9;&#x9;WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 39 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) --rid 81331&#xD;&#xA;        ELSE 0 END) AS FEDERAL_TAX_AMOUNT,--PIR 994 --PIR 825&#xD;&#xA;&#xD;&#xA;             SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS PENSION_RECEIVABLE,&#xD;&#xA;               'Y' AS INDICATOR,&#xD;&#xA;               SPBA.FUNDS_TYPE_VALUE AS FUND_TYPE,&#xD;&#xA;&#xD;&#xA;             CASE WHEN CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL THEN CHILD_SUPP.ACCOUNT_NUMBER ELSE TEMP.ACCOUNT_NUMBER END AS ACCOUNT_NUMBER,&#xD;&#xA;&#xD;&#xA;             CASE WHEN CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL THEN CASE WHEN ISNULL(CHILD_SUPP.PERSON_ID,0) &gt; 0 THEN PERADDR.PER_ADDRESS ELSE TRAN_ORG_ADD.TRAN_ORG_ADDRESS END&#xD;&#xA;    WHEN (TEMP.TRANSFER_ORG_ID &gt; 0 AND TEMP.PERSON_ID &gt; 0) THEN  ISNULL('C/O '+TEMP.TRANSFER_ORG_CONTACT_NAME + ', ','')+TRAN_ORG_ADD.TRAN_ORG_ADDRESS  &#xD;&#xA;             ELSE &#xD;&#xA;                  CASE WHEN TEMP.PERSON_ID IS NOT NULL THEN  PERADDR.PER_ADDRESS ELSE ORG_ADD.ORG_ADDRESS END &#xD;&#xA;             END AS PER_ADDRESS&#xD;&#xA;&#xD;&#xA;     FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;     -- Reissue Amount Fix&#xD;&#xA;     LEFT JOIN SGT_PAYMENT_REISSUE_DETAIL PRD ON PRD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;     LEFT JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL PRID ON PRD.PAYMENT_REISSUE_DETAIL_ID = PRID.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;     INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;     INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;     INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;     LEFT OUTER JOIN SGS_CODE_VALUE CVDFUNDTYPE WITH(NOLOCK) ON CVDFUNDTYPE.CODE_ID = SPBA.FUNDS_TYPE_ID AND CVDFUNDTYPE.CODE_VALUE = SPBA.FUNDS_TYPE_VALUE&#xD;&#xA;&#xD;&#xA;     LEFT OUTER JOIN &#xD;&#xA;  (SELECT PARP.PAYEE_ACCOUNT_ID,PARP.PAYMENT_OPTION_VALUE,PARPD.* &#xD;&#xA;          FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT PARP &#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT_DETAIL PARPD ON PARPD.PAYEE_ACCOUNT_RETRO_PAYMENT_ID = PARP.PAYEE_ACCOUNT_RETRO_PAYMENT_ID&#xD;&#xA;          AND ISNULL(PARP.IS_OVERPAYMENT_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;          AND PARP.START_DATE &lt;&gt; ISNULL(PARP.END_DATE,'99991231') &#xD;&#xA;          AND (PARP.END_DATE IS NULL OR PARP.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;          AND PARP.PAYMENT_HISTORY_HEADER_ID IS NULL&#xD;&#xA;     ) AS RETRO ON RETRO.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND RETRO.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#xD;&#xA;     LEFT OUTER JOIN SGT_ORGANIZATION TRAN_ORG ON TRAN_ORG.ORG_ID=TEMP.TRANSFER_ORG_ID&#xD;&#xA;     LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;             AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;             AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;  --PIR 964 IAP CHILD SUPPORT&#xD;&#xA;  LEFT OUTER JOIN&#xD;&#xA;  (&#xD;&#xA;   SELECT SPAD.PAYEE_ACCOUNT_ID,SPAD.PERSON_ID,SPAD.ORG_ID,SPAD.AMOUNT,SPAD.ACCOUNT_NUMBER,SP.MPI_PERSON_ID,O.MPI_ORG_ID,&#xD;&#xA;   ISNULL(RTRIM(SP.FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(SP.LAST_NAME)),'') AS PERSON_NAME,&#xD;&#xA;   ISNULL(RTRIM(LTRIM(O.ORG_NAME)),'') AS ORG_NAME&#xD;&#xA;   FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT_DEDUCTION SPAD ON SPA.PAYEE_ACCOUNT_ID = SPAD.PAYEE_ACCOUNT_ID AND (SPAD.START_DATE &lt;= @PAYMENTDATE) AND (SPAD.END_DATE IS NULL OR SPAD.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;   LEFT OUTER JOIN SGT_PERSON SP ON SPAD.PERSON_ID = SP.PERSON_ID&#xD;&#xA;   LEFT OUTER JOIN SGT_ORGANIZATION O ON SPAD.ORG_ID = O.ORG_ID&#xD;&#xA;   INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;   INNER JOIN SGT_PLAN_BENEFIT_XR XR ON XR.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND XR.PLAN_ID = 1&#xD;&#xA;   INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID AND ISNULL(CHILD_SUPPORT_FLAG,'N') = 'Y' AND SBA.BENEFIT_TYPE_VALUE = 'WDRL' &#xD;&#xA;                      &#xD;&#xA;   )CHILD_SUPP ON TEMP.PAYEE_ACCOUNT_ID = CHILD_SUPP.PAYEE_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;     LEFT OUTER JOIN &#xD;&#xA;     (&#xD;&#xA;         SELECT  PA1.PERSON_ID,                                  &#xD;&#xA;                                 ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_2 + ',','')&#xD;&#xA;                                 &#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001' &#xD;&#xA;                                        THEN ISNULL(PA1.ADDR_CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.ADDR_STATE_VALUE + '  ','')                        &#xD;&#xA;                                           + ISNULL(PA1.ADDR_ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ADDR_ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;                                           + ISNULL(PA1.ADDR_ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.ADDR_CITY + ',','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS PER_ADDRESS&#xD;&#xA;                           FROM SGT_PERSON_ADDRESS PA1   &#xD;&#xA;                                       LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.ADDR_STATE_ID AND CVDSTATE.CODE_VALUE = PA1.ADDR_STATE_VALUE&#xD;&#xA;                                 LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.ADDR_COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.ADDR_COUNTRY_VALUE&#xD;&#xA;                           INNER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA1.ADDRESS_ID=PAC.ADDRESS_ID&#xD;&#xA;                           AND PAC.ADDRESS_TYPE_VALUE='MAIL'&#xD;&#xA;                           WHERE  PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;        AND PAC.ADDRESS_TYPE_VALUE IS NOT NULL -- need to review&#xD;&#xA;      )AS PERADDR ON ((CHILD_SUPP.PAYEE_ACCOUNT_ID IS NULL AND PERADDR.PERSON_ID=TEMP.PERSON_ID) OR (CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL AND ISNULL(CHILD_SUPP.PERSON_ID,0) &gt; 0 AND PERADDR.PERSON_ID=CHILD_SUPP.PERSON_ID))--PIR 964 IAP CHILD SUPPORT&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN &#xD;&#xA;      ( &#xD;&#xA;              SELECT  P.ORG_ID, &#xD;&#xA;                                 ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_2 + ',','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001' &#xD;&#xA;                                        THEN ISNULL(PA1.CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.STATE_VALUE + '  ','')                        &#xD;&#xA;                                           + ISNULL(PA1.ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;             + ISNULL(PA1.ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.CITY + ',','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS TRAN_ORG_ADDRESS&#xD;&#xA;                           FROM SGT_ORGANIZATION P &#xD;&#xA;                           LEFT OUTER JOIN SGT_ORG_ADDRESS PA1 ON  P.ORG_ID  = PA1.ORG_ID  &#xD;&#xA;        AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;        AND PA1.ADDRESS_TYPE_VALUE in ('MAIL','PYAM')&#xD;&#xA;         LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.STATE_ID AND CVDSTATE.CODE_VALUE = PA1.STATE_VALUE&#xD;&#xA;                           LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.COUNTRY_VALUE                           &#xD;&#xA;                          &#xD;&#xA;            )AS TRAN_ORG_ADD ON ((CHILD_SUPP.PAYEE_ACCOUNT_ID IS NULL AND TRAN_ORG_ADD.ORG_ID=TRAN_ORG.ORG_ID) OR (CHILD_SUPP.PAYEE_ACCOUNT_ID IS NOT NULL AND ISNULL(CHILD_SUPP.ORG_ID,0) &gt; 0 AND TRAN_ORG_ADD.ORG_ID=CHILD_SUPP.ORG_ID))--PIR 964 IAP CHILD SUPPORT&#xD;&#xA;&#xD;&#xA;       LEFT OUTER JOIN &#xD;&#xA;       (&#xD;&#xA;         SELECT  P.ORG_ID, &#xD;&#xA;                                 ISNULL('C/O '+P.CARE_OF + ', ','')&#xD;&#xA;                                 +ISNULL(PA1.ADDR_LINE_1 + ', ','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_2 + ', ','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001'  &#xD;&#xA;                                        THEN ISNULL(PA1.CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.STATE_VALUE + '  ', '')                        &#xD;&#xA;                                           + ISNULL(PA1.ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;             + ISNULL(PA1.ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.CITY + ', ','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ', ','') END AS ORG_ADDRESS,&#xD;&#xA;                                           P.CARE_OF&#xD;&#xA;                           FROM SGT_ORGANIZATION P &#xD;&#xA;                           LEFT OUTER JOIN SGT_ORG_ADDRESS PA1 ON  P.ORG_ID  = PA1.ORG_ID  &#xD;&#xA;        AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;        AND PA1.ADDRESS_TYPE_VALUE in ('MAIL','PYAM')&#xD;&#xA;         LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.STATE_ID AND CVDSTATE.CODE_VALUE = PA1.STATE_VALUE&#xD;&#xA;                           LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.COUNTRY_VALUE                                                     &#xD;&#xA;         )AS ORG_ADD ON ORG_ADD.ORG_ID=TEMP.ORG_ID&#xD;&#xA; &#xD;&#xA;         WHERE&#xD;&#xA;                  PAPI.START_DATE &lt;&gt; ISNULL(PAPI.END_DATE,'99991231') &#xD;&#xA;                  AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)           &#xD;&#xA;                  AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO')&#xD;&#xA;                  AND &#xD;&#xA;                  (&#xD;&#xA;                       (ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') &lt;&gt; 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N')&lt;&gt;'Y')&#xD;&#xA;                         OR &#xD;&#xA;&#xD;&#xA;                      ((RETRO.PAYMENT_OPTION_VALUE = 'SPCK' OR  (ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') = 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N') = 'Y') OR&#xD;&#xA;                        ISNULL(TEMP.INCLUDE_IN_ADHOC_FLAG,'N') = 'Y' OR (TEMP.BENEFIT_OPTION_VALUE = 'LUMP' AND ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') = 'N' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N') = 'N'))&#xD;&#xA;                        AND ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE,'') NOT IN ('PTOS','PTRO','RLOG','TORG')) &#xD;&#xA;                   )&#xD;&#xA;                  -- Reissue Amount Fix&#xD;&#xA;                  AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID,0) OR PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA;&#xD;&#xA;    GROUP BY TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.ACCOUNT_RELATION_VALUE, TEMP.MPI_ORG_ID, TEMP.ACCOUNT_NUMBER,&#xD;&#xA;                        TEMP.ORGANIZATION_NAME, TEMP.BENEFIT_OPTION_VALUE,BENEFIT_ACCOUNT_TYPE_VALUE, SPBA.FUNDS_TYPE_VALUE,PER_ADDRESS,&#xD;&#xA;                        TEMP.TRANSFER_ORG_ID,TRAN_ORG.MPI_ORG_ID,TEMP.PERSON_ID,TRAN_ORG.ORG_NAME,TRAN_ORG_ADD.TRAN_ORG_ADDRESS,TEMP.TRANSFER_ORG_CONTACT_NAME,ORG_ADD.ORG_ADDRESS, TEMP.PAYEE_LAST_NAME, TEMP.PAYEE_FIRST_NAME,ORG_ADD.CARE_OF,TEMP.ORG_ID,&#xD;&#xA;      CHILD_SUPP.PAYEE_ACCOUNT_ID ,CHILD_SUPP.ACCOUNT_NUMBER,CHILD_SUPP.PERSON_ID,CHILD_SUPP.ORG_ID,CHILD_SUPP.PERSON_NAME,CHILD_SUPP.ORG_NAME,CHILD_SUPP.MPI_ORG_ID,CHILD_SUPP.MPI_PERSON_ID--PIR 964 IAP CHILD SUPPORT&#xD;&#xA;             HAVING SUM(ITEM_TYPE_DIRECTION * PAPI.AMOUNT) &gt;= 0&#xD;&#xA;&#xD;&#xA;UNION ALL &#xD;&#xA;            &#xD;&#xA;                  SELECT TEMP.PAYEE_ACCOUNT_ID,&#xD;&#xA;                  --TEMP.MPI_PERSON_ID, &#xD;&#xA;                  CASE WHEN (TEMP.TRANSFER_ORG_ID &gt; 0 AND TEMP.PERSON_ID &gt; 0) THEN ISNULL( TRAN_ORG.MPI_ORG_ID,'') +' /'+ TEMP.MPI_PERSON_ID  ELSE TEMP.MPI_PERSON_ID END AS MPI_PERSON_ID,&#xD;&#xA;                  TEMP.MPI_ORG_ID&#xD;&#xA;                  , CASE WHEN TEMP.ORG_ID &gt; 0 THEN TEMP.ORGANIZATION_NAME + ' ' + ISNULL(RTRIM(ORG_ADD.CARE_OF),'') ELSE TEMP.ORGANIZATION_NAME END AS ORGANIZATION_NAME&#xD;&#xA;                  , TEMP.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP&#xD;&#xA;                  , TEMP.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION&#xD;&#xA;                  --, TEMP.PAYEE_NAME&#xD;&#xA;                  ,CASE WHEN TEMP.PAYEE_LAST_NAME IS NULL THEN TEMP.ORGANIZATION_NAME ELSE TEMP.PAYEE_LAST_NAME END AS PAYEE_LAST_NAME&#xD;&#xA;                  ,CASE WHEN (TEMP.TRANSFER_ORG_ID &gt; 0 AND TEMP.PERSON_ID &gt; 0) THEN ISNULL( TRAN_ORG.ORG_NAME,'') +' FBO:'+ ISNULL(RTRIM(TEMP.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TEMP.PAYEE_LAST_NAME)),'') ELSE ISNULL(RTRIM(TEMP.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TEMP.PAYEE_LAST_NAME)),'') END AS PAYEE_NAME&#xD;&#xA;                  , TEMP.BENEFIT_ACCOUNT_TYPE_VALUE AS BENEFIT_ACCOUNT_TYPE&#xD;&#xA;                  , SUM(CASE WHEN ((PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED')) &#xD;&#xA;                                    THEN &#xD;&#xA;          CASE WHEN PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN PIT.ITEM_TYPE_DIRECTION*(ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) --PIR 994&#xD;&#xA;            ELSE PIT.ITEM_TYPE_DIRECTION*PAPI.AMOUNT&#xD;&#xA;            END&#xD;&#xA;      ELSE  0  &#xD;&#xA;                        END&#xD;&#xA;                            &#xD;&#xA;                        ) + SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS GROSS_AMOUNT&#xD;&#xA;                  , SUM(CASE WHEN PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) ELSE ITEM_TYPE_DIRECTION * PAPI.AMOUNT END) AS NET_AMOUNT--PIR 994&#xD;&#xA;                  , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID &lt;&gt; 36 AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) &#xD;&#xA;        WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 36 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)))&#xD;&#xA;&#x9;&#x9;WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 40 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) --rid 81331 &#xD;&#xA;        ELSE 0 &#xD;&#xA;      END) AS STATE_TAX_AMOUNT --PIR 994 --PIR 825&#xD;&#xA;                  , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX'  AND PAPI.PAYMENT_ITEM_TYPE_ID &lt;&gt; 35 AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) &#xD;&#xA;        WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX'  AND PAPI.PAYMENT_ITEM_TYPE_ID = 35 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)))&#xD;&#xA;&#x9;&#x9;WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX'  AND PAPI.PAYMENT_ITEM_TYPE_ID = 39 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) --rid 81331&#xD;&#xA;        ELSE 0 &#xD;&#xA;      END) AS FEDERAL_TAX_AMOUNT--PIR 994 --PIR 825&#xD;&#xA;                  , SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS PENSION_RECEIVABLE&#xD;&#xA;                  , 'Y' AS INDICATOR&#xD;&#xA;                  , SPBA.FUNDS_TYPE_VALUE AS FUND_TYPE&#xD;&#xA;                  , TEMP.ACCOUNT_NUMBER&#xD;&#xA;                  , CASE WHEN (TEMP.TRANSFER_ORG_ID &gt; 0 AND TEMP.PERSON_ID &gt; 0) THEN ISNULL('C/O '+TEMP.TRANSFER_ORG_CONTACT_NAME + ', ','')+ TRAN_ORG_ADD.TRAN_ORG_ADDRESS  &#xD;&#xA;                               ELSE &#xD;&#xA;                               CASE WHEN TEMP.PERSON_ID IS NOT NULL THEN  PERADDR.PER_ADDRESS ELSE ORG_ADD.ORG_ADDRESS END &#xD;&#xA;                               END &#xD;&#xA;                        AS PER_ADDRESS&#xD;&#xA;            FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_REISSUE_DETAIL RD ON RD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID  &#xD;&#xA;                  INNER JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL RID ON RID.PAYMENT_REISSUE_DETAIL_ID = RD.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;                  INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                  LEFT OUTER JOIN SGS_CODE_VALUE CVDFUNDTYPE WITH(NOLOCK) ON CVDFUNDTYPE.CODE_ID = SPBA.FUNDS_TYPE_ID AND CVDFUNDTYPE.CODE_VALUE = SPBA.FUNDS_TYPE_VALUE&#xD;&#xA;                  LEFT OUTER JOIN SGT_ORGANIZATION TRAN_ORG&#xD;&#xA;                              ON TRAN_ORG.ORG_ID=TEMP.TRANSFER_ORG_ID&#xD;&#xA;                  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;                  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;             AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;                   AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)     &#xD;&#xA;        LEFT OUTER JOIN &#xD;&#xA;            (SELECT  PA1.PERSON_ID, &#xD;&#xA;                                 ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_2 + ',','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001'  &#xD;&#xA;                                        THEN ISNULL(PA1.ADDR_CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.ADDR_STATE_VALUE + '  ','')                        &#xD;&#xA;                                           + ISNULL(PA1.ADDR_ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ADDR_ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;                                           + ISNULL(PA1.ADDR_ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.ADDR_CITY + ',','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS PER_ADDRESS&#xD;&#xA;                           FROM SGT_PERSON_ADDRESS PA1   &#xD;&#xA;                                       LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.ADDR_STATE_ID AND CVDSTATE.CODE_VALUE = PA1.ADDR_STATE_VALUE&#xD;&#xA;                                 LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.ADDR_COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.ADDR_COUNTRY_VALUE&#xD;&#xA;                           LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA1.ADDRESS_ID=PAC.ADDRESS_ID&#xD;&#xA;                           AND PAC.ADDRESS_TYPE_VALUE='MAIL'&#xD;&#xA;                           WHERE  PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;            )AS PERADDR ON PERADDR.PERSON_ID=TEMP.PERSON_ID&#xD;&#xA;            LEFT OUTER JOIN &#xD;&#xA;                   (SELECT  P.ORG_ID, &#xD;&#xA;                                   ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_1 + ',','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_2 + ',','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001'  &#xD;&#xA;                                        THEN ISNULL(PA1.CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.STATE_VALUE + ' ','')                        &#xD;&#xA;                                           + ISNULL(PA1.ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;                                           + ISNULL(PA1.ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.CITY + ',','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS TRAN_ORG_ADDRESS&#xD;&#xA;                           FROM SGT_ORGANIZATION P &#xD;&#xA;                           LEFT OUTER JOIN SGT_ORG_ADDRESS PA1   &#xD;&#xA;                           ON  P.ORG_ID  = PA1.ORG_ID  &#xD;&#xA;                           AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;         AND PA1.ADDRESS_TYPE_VALUE in ('MAIL','PYAM')&#xD;&#xA;           LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.STATE_ID AND CVDSTATE.CODE_VALUE = PA1.STATE_VALUE&#xD;&#xA;                                 LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.COUNTRY_VALUE                           &#xD;&#xA;                          &#xD;&#xA;            )AS TRAN_ORG_ADD ON TRAN_ORG_ADD.ORG_ID=TRAN_ORG.ORG_ID&#xD;&#xA;            &#xD;&#xA;            LEFT OUTER JOIN &#xD;&#xA;                   (SELECT  P.ORG_ID, &#xD;&#xA;                                 ISNULL('C/O '+P.CARE_OF + ', ','')&#xD;&#xA;                                 +ISNULL(PA1.ADDR_LINE_1 + ', ','')&#xD;&#xA;                                 + ISNULL(PA1.ADDR_LINE_2 + ', ','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001' &#xD;&#xA;                                        THEN ISNULL(PA1.CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.STATE_VALUE + ' ','')                        &#xD;&#xA;                                           + ISNULL(PA1.ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PA1.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;             + ISNULL(PA1.ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PA1.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PA1.CITY + ', ','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ', ','') END AS ORG_ADDRESS,&#xD;&#xA;                                           P.CARE_OF&#xD;&#xA;                           FROM SGT_ORGANIZATION P &#xD;&#xA;                           LEFT OUTER JOIN SGT_ORG_ADDRESS PA1   &#xD;&#xA;                           ON  P.ORG_ID  = PA1.ORG_ID  &#xD;&#xA;                           AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;         AND PA1.ADDRESS_TYPE_VALUE in ('MAIL','PYAM')&#xD;&#xA;           LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PA1.STATE_ID AND CVDSTATE.CODE_VALUE = PA1.STATE_VALUE&#xD;&#xA;                                 LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PA1.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PA1.COUNTRY_VALUE                           &#xD;&#xA;                          &#xD;&#xA;            )AS ORG_ADD ON ORG_ADD.ORG_ID=TEMP.ORG_ID&#xD;&#xA;            WHERE&#xD;&#xA;                  PAPI.START_DATE &lt;&gt; ISNULL(PAPI.END_DATE,'99991231') &#xD;&#xA;                  AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;                  AND&#xD;&#xA;                   TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO')&#xD;&#xA;                  --AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK'&#xD;&#xA;                  AND &#xD;&#xA;                  (&#xD;&#xA;                       (ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE,'') = 'PTOS' OR ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE,'') = 'TORG') &#xD;&#xA;                   )&#xD;&#xA;                                     -- Reissue Amount Fix&#xD;&#xA;                  AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID,0) OR RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA;               GROUP BY TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.ACCOUNT_RELATION_VALUE, TEMP.MPI_ORG_ID, TEMP.ACCOUNT_NUMBER,&#xD;&#xA;                        TEMP.ORGANIZATION_NAME, TEMP.BENEFIT_OPTION_VALUE,TEMP.BENEFIT_ACCOUNT_TYPE_VALUE, SPBA.FUNDS_TYPE_VALUE,PER_ADDRESS,&#xD;&#xA;                        TEMP.TRANSFER_ORG_ID,TRAN_ORG.MPI_ORG_ID,TEMP.PERSON_ID,TRAN_ORG.ORG_NAME,TRAN_ORG_ADD.TRAN_ORG_ADDRESS,ORG_ADD.ORG_ADDRESS&#xD;&#xA;                        ,TEMP.TRANSFER_ORG_CONTACT_NAME, TEMP.PAYEE_LAST_NAME, TEMP.PAYEE_FIRST_NAME,ORG_ADD.CARE_OF,TEMP.ORG_ID&#xD;&#xA;                        &#xD;&#xA;  UNION ALL&#xD;&#xA;&#xD;&#xA;            SELECT TEMP.PAYEE_ACCOUNT_ID, NULL AS MPI_PERSON_ID , SO.MPI_ORG_ID +' /'+ISNULL(TEMP.MPI_PERSON_ID,TEMP.MPI_ORG_ID) --PIR 964&#xD;&#xA;                  , SO.ORG_NAME +' FBO:' + CASE WHEN TEMP.PAYEE_FIRST_NAME IS NULL AND TEMP.PAYEE_FIRST_NAME IS NULL AND TEMP.ORGANIZATION_NAME IS NOT NULL THEN  ISNULL(RTRIM(LTRIM(TEMP.ORGANIZATION_NAME)),'') ELSE ISNULL(RTRIM(TEMP.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(TEMP.PAYEE_LAST_NAME)),'') END--PIR 964&#xD;&#xA;                  , TEMP.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP&#xD;&#xA;                  , TEMP.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION&#xD;&#xA;                  , CASE WHEN TEMP.PAYEE_LAST_NAME IS NULL THEN TEMP.ORGANIZATION_NAME ELSE TEMP.PAYEE_LAST_NAME END AS PAYEE_LAST_NAME&#xD;&#xA;                  , NULL AS PAYEE_NAME&#xD;&#xA;                  , TEMP.BENEFIT_ACCOUNT_TYPE_VALUE AS BENEFIT_ACCOUNT_TYPE&#xD;&#xA;                  , SUM(CASE WHEN ((PIT.ITEM_TYPE_DIRECTION = 1 OR PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED')) &#xD;&#xA;                                    THEN &#xD;&#xA;          CASE WHEN PIT.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)) --PIR 994&#xD;&#xA;          ELSE &#xD;&#xA;          PIT.ITEM_TYPE_DIRECTION*PAPI.AMOUNT&#xD;&#xA;          END&#xD;&#xA;            ELSE  0  &#xD;&#xA;                             END&#xD;&#xA;                            &#xD;&#xA;                        ) + SUM(CASE WHEN PIT1.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT1.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS GROSS_AMOUNT&#xD;&#xA;                  , SUM(CASE WHEN PIT1.ITEM_TYPE_CODE &lt;&gt; 'ITEM54' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) ELSE PIT1.ITEM_TYPE_DIRECTION * PAPI.AMOUNT END) AS NET_AMOUNT--PIR 994&#xD;&#xA;                  , SUM(CASE WHEN PIT1.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID &lt;&gt; 36 AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) &#xD;&#xA;        WHEN PIT1.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 36  AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)))&#xD;&#xA;&#x9;&#x9;WHEN PIT1.PAYEE_DETAIL_GROUP_VALUE = 'STTX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 40  AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) -- rid 81331&#xD;&#xA;        ELSE 0 END) AS STATE_TAX_AMOUNT --PIR 994 --PIR 825&#xD;&#xA;                  , SUM(CASE WHEN PIT1.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' AND PAPI.PAYMENT_ITEM_TYPE_ID &lt;&gt; 35 AND TEMP.RETRO_PAYMENT_OPTION_VALUE &lt;&gt; 'SPCK' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) &#xD;&#xA;        WHEN PIT1.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 35 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2)))&#xD;&#xA;&#x9;&#x9;WHEN PIT1.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' AND PAPI.PAYMENT_ITEM_TYPE_ID = 39 AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK' THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT*(((100-ISNULL(PITY.WITHHOLDING_PERCENTAGE,0))/100)),2))) -- rid 81331&#xD;&#xA;        ELSE 0 END) AS FEDERAL_TAX_AMOUNT--PIR 994 --PIR 825&#xD;&#xA;                  , SUM(CASE WHEN PIT1.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (PIT1.ITEM_TYPE_DIRECTION * PAPI.AMOUNT) ELSE 0 END) AS PENSION_RECEIVABLE&#xD;&#xA;                  , 'Y' AS INDICATOR&#xD;&#xA;                  , SPBA.FUNDS_TYPE_VALUE AS FUND_TYPE&#xD;&#xA;                  , PARD.ACCOUNT_NUMBER&#xD;&#xA;                  ,              ISNULL(PARD.CONTACT_NAME + ',','')&#xD;&#xA;                                 + ISNULL(PARD.ADDR_LINE_1 + ',','')&#xD;&#xA;                                 + ISNULL(PARD.ADDR_LINE_2 + ',','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001' &#xD;&#xA;                                        THEN ISNULL(PARD.CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PARD.STATE_VALUE + ' ','')                        &#xD;&#xA;                                           + ISNULL(PARD.ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PARD.ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN '-'&#xD;&#xA;            ELSE '' END &#xD;&#xA;                                           + ISNULL( PARD.ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PARD.CITY + ',','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ',','') END AS PER_ADDRESS&#xD;&#xA;                               &#xD;&#xA;              &#xD;&#xA;&#xD;&#xA;            FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 WITH(NOLOCK) ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID AND  PARD.STATUS_VALUE = 'ACTV'&#xD;&#xA;                  INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID WITH(NOLOCK) ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID&#xD;&#xA;                           AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;                  --INNER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH On SPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;                  INNER JOIN SGT_ORGANIZATION SO On PARD.ROLLOVER_ORG_ID = SO.ORG_ID&#xD;&#xA;                  INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                  LEFT OUTER JOIN SGS_CODE_VALUE CVDFUNDTYPE WITH(NOLOCK) ON CVDFUNDTYPE.CODE_ID = SPBA.FUNDS_TYPE_ID AND CVDFUNDTYPE.CODE_VALUE = SPBA.FUNDS_TYPE_VALUE&#xD;&#xA;                 &#xD;&#xA;                  LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH(NOLOCK) &#xD;&#xA;                  ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;             AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE)&#xD;&#xA;                  AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;                  LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PARD.STATE_ID AND CVDSTATE.CODE_VALUE = PARD.STATE_VALUE&#xD;&#xA;                  LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PARD.COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PARD.COUNTRY_VALUE&#xD;&#xA;                  -- Reissue Amount Fix&#xD;&#xA;                  LEFT JOIN SGT_PAYMENT_REISSUE_DETAIL PRD ON PRD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;      LEFT JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL PRID ON PRD.PAYMENT_REISSUE_DETAIL_ID = PRID.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;            WHERE &#xD;&#xA;                  PAPI.START_DATE &lt;&gt; ISNULL(PAPI.END_DATE,'99991231')  &#xD;&#xA;                  AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;                  --AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL  &#xD;&#xA;                  AND &#xD;&#xA;                  PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED'&#xD;&#xA;            --COND: 1,2,3,4&#xD;&#xA;                  AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT', 'DSBL','DDPR', 'DDPT', 'WDRL', 'QDRO')&#xD;&#xA;                  --AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK'&#xD;&#xA;                  AND ((ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') &lt;&gt; 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG,'N')&lt;&gt;'Y')&#xD;&#xA;                        OR &#xD;&#xA;                        (ISNULL(PAPI.REISSUE_ITEM_FLAG,'N') = 'Y' AND TEMP.REISSUE_ITEM_FLAG='Y'))&#xD;&#xA;                  --AND SPHH.ORG_ID IS NOT NULL  &#xD;&#xA;                                    -- Reissue Amount Fix&#xD;&#xA;                  AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID,0) OR PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA;            GROUP BY TEMP.PAYEE_ACCOUNT_ID,TEMP.MPI_PERSON_ID, TEMP.BENEFIT_ACCOUNT_TYPE_VALUE, SO.MPI_ORG_ID, PARD.ACCOUNT_NUMBER,&#xD;&#xA;                        SO.ORG_NAME, TEMP.ACCOUNT_RELATION_VALUE, TEMP.BENEFIT_OPTION_VALUE, SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;                        PARD.ADDR_LINE_1,PARD.ADDR_LINE_2,CITY,CVDSTATE.DESCRIPTION,CVDCOUNTY.DESCRIPTION,CVDCOUNTY.CODE_VALUE,PARD.ZIP_CODE,PARD.ZIP_4_CODE,PARD.SEND_TO_PARTICIPANT,PARD.STATE_VALUE&#xD;&#xA;                        ,PARD.CONTACT_NAME, TEMP.PAYEE_LAST_NAME, TEMP.PAYEE_FIRST_NAME, TEMP.ORGANIZATION_NAME,TEMP.MPI_ORG_ID --PIR 964&#xD;&#xA;&#xD;&#xA;      ) MA &#xD;&#xA;      GROUP BY PAYEE_ACCOUNT_ID,MPI_PERSON_ID, MPI_ORG_ID, PAYEE_NAME,INDICATOR, ORGANIZATION_NAME, BENEFIT_ACCOUNT_TYPE,&#xD;&#xA;      BENEFIT_OPTION,ACCOUNT_RELATIONSHIP,BENEFIT_ACCOUNT_TYPE, FUND_TYPE, PER_ADDRESS, ACCOUNT_NUMBER, PAYEE_LAST_NAME&#xD;&#xA;) REP&#xD;&#xA;where GROSS_AMOUNT&gt;0 &#xD;&#xA;ORDER BY PAYEE_LAST_NAME&#xD;&#xA;&#xD;&#xA;Update PHD &#xD;&#xA;set &#xD;&#xA;PHD.PayeeName_OrganizationName = &#xD;&#xA;(CASE WHEN PHD.PayeeName_OrganizationName like ('%FBO%') THEN PayeeName_OrganizationName  ELSE  Contact_Name  END) ,&#xD;&#xA;PER_ADDRESS= (CASE WHEN PHD.PayeeName_OrganizationName like ('%FBO%') THEN PHD.PER_ADDRESS  ELSE  PAYEE.PER_ADDRESS  END)  &#xD;&#xA;from &#xD;&#xA; #TEMP_TABLE_FOR_REPORT PHD&#xD;&#xA;Inner Join &#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA; ISNULL(RTRIM(PA.PAYEE_FIRST_NAME),'') + ' ' + ISNULL(RTRIM(LTRIM(PA.PAYEE_LAST_NAME)),'') +' '+ 'C/O '+ pc.contact_name  + case when PC.CONTACT_TYPE_VALUE = 'POAP' then ' POA' else '' end  as Contact_Name, &#xD;&#xA;PAYEE_ACCOUNT_ID,&#xD;&#xA;                                   ISNULL('C/O '+ pc.contact_name + ', ','')&#xD;&#xA;                                  + ISNULL(PC.ADDR_LINE_1 + ', ','')&#xD;&#xA;                                 + ISNULL(PC.ADDR_LINE_2 + ', ','')&#xD;&#xA;                                 + CASE WHEN CVDCOUNTY.CODE_VALUE = '0001'  &#xD;&#xA;                                        THEN ISNULL(PC.ADDR_CITY + ' ','')&#xD;&#xA;                                           + ISNULL(PC.ADDR_STATE_VALUE + ' ', '')                        &#xD;&#xA;                                           + ISNULL(PC.ADDR_ZIP_CODE ,'')&#xD;&#xA;                                           + CASE WHEN LTRIM(RTRIM(ISNULL (PC.ADDR_ZIP_4_CODE , ''))) &lt;&gt; ''&#xD;&#xA;            THEN ' - '&#xD;&#xA;            ELSE '' END &#xD;&#xA;                                           + ISNULL(PC.ADDR_ZIP_4_CODE + '','')&#xD;&#xA;                                        ELSE ISNULL(PC.FOREIGN_POSTAL_CODE + ' ','')&#xD;&#xA;                                           + ISNULL(PC.ADDR_CITY + ', ','')&#xD;&#xA;                                           + ISNULL(CVDCOUNTY.DESCRIPTION + ', ','') END AS PER_ADDRESS&#xD;&#xA;FROM TEMP_TABLE_FOR_PAYMENT PA WITH(NOLOCK) &#xD;&#xA;INNER Join SGT_PERSON P WITH(NOLOCK) &#xD;&#xA;ON PA.PERSON_ID = P.PERSON_ID &#xD;&#xA;INNER Join SGT_PERSON_CONTACT PC WITH(NOLOCK) &#xD;&#xA;ON P.PERSON_ID = PC.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATE WITH(NOLOCK) ON CVDSTATE.CODE_ID = PC.ADDR_STATE_ID AND CVDSTATE.CODE_VALUE = PC.ADDR_STATE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDCOUNTY WITH(NOLOCK) ON CVDCOUNTY.CODE_ID = PC.ADDR_COUNTRY_ID AND CVDCOUNTY.CODE_VALUE = PC.ADDR_COUNTRY_VALUE                           &#xD;&#xA;--AND( PC.EFFECTIVE_START_DATE &lt;= @PAYMENTDATE) AND (PC.EFFECTIVE_END_DATE IS NULL OR PC.EFFECTIVE_END_DATE &gt;= @PAYMENTDATE) --PIR 390&#xD;&#xA;WHERE (PC.EFFECTIVE_START_DATE &lt;= @PAYMENTDATE) AND (PC.EFFECTIVE_END_DATE IS NULL OR PC.EFFECTIVE_END_DATE &gt;= @PAYMENTDATE) AND PC.CONTACT_TYPE_VALUE in ('POAP','GRDN','FMIN','COAP')  --RID 115325 adding conservator type also &#xD;&#xA;AND PC.STATUS_VALUE='VALD'&#xD;&#xA;) as PAYEE&#xD;&#xA;On PAYEE.PAYEE_ACCOUNT_ID = PHD.PAYEE_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;Select * from #TEMP_TABLE_FOR_REPORT &#xD;&#xA;ORDER BY PAYEE_LAST_NAME&#xD;&#xA;&#xD;&#xA;DROP TABLE #TEMP_TABLE_FOR_REPORT">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UpdateAdhocFlagWithBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE SGT_PAYEE_ACCOUNT&#xD;&#xA;SET INCLUDE_IN_ADHOC_FLAG='N',&#xD;&#xA;MODIFIED_DATE = GETDATE(),MODIFIED_BY = 'OPUS Batch',UPDATE_SEQ = UPDATE_SEQ+1 &#xD;&#xA;WHERE PAYEE_ACCOUNT_ID IN&#xD;&#xA;(SELECT PHH.PAYEE_ACCOUNT_ID FROM TEMP_TABLE_FOR_PAYMENT TPA&#xD;&#xA;      INNER JOIN  SGT_PAYEE_ACCOUNT PA&#xD;&#xA;      ON TPA.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;      ON PHH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID&#xD;&#xA;      WHERE PA.INCLUDE_IN_ADHOC_FLAG='Y'&#xD;&#xA;      AND PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID)">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetCountOfPaymentMade" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select count(*) from SGT_PAYMENT_HISTORY_HEADER PHH with(nolock)&#xD;&#xA;inner join SGT_PAYMENT_HISTORY_DISTRIBUTION PHD with(nolock)&#xD;&#xA;on PHH.PAYMENT_HISTORY_HEADER_ID=PHD.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;WHERE PHH.PAYEE_ACCOUNT_ID=@PAYEE_ACCOUNT_ID AND PHH.PERSON_ID=@PERSON_ID &#xD;&#xA;AND DISTRIBUTION_STATUS_VALUE IN ('OUTS','CLRD','RSUD')">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountsForIAPPaymentAdjustmentBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="  IF OBJECT_ID('TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA; SELECT * INTO TEMP_TABLE_FOR_REPORT&#xD;&#xA;FROM  &#xD;&#xA; SGT_PAYEE_ACCOUNT PA&#xD;&#xA; &#xD;&#xA; WHERE ADJUSTMENT_PAYMENT_ELIGIBLE_FLAG='Y' &#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN ('CNCL','SPND') &#xD;&#xA; &#xD;&#xA; select PA.*,BCH.*,BCDTL.*,PER.*,PACH.* from SGT_PAYEE_ACCOUNT PA &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL BCDTL WITH(NOLOCK) &#xD;&#xA;            ON BCDTL.BENEFIT_CALCULATION_DETAIL_ID = PA.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_HEADER BCH WITH(NOLOCK) &#xD;&#xA;            ON BCDTL.BENEFIT_CALCULATION_HEADER_ID = BCH.BENEFIT_CALCULATION_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA WITH(NOLOCK) &#xD;&#xA;            ON PBA.PAYEE_BENEFIT_ACCOUNT_ID = PA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT PACH WITH(NOLOCK) &#xD;&#xA;            ON PACH.PERSON_ACCOUNT_ID = PBA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON PER WITH(NOLOCK) &#xD;&#xA;            ON PER.PERSON_ID = PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PBXR &#xD;&#xA;               ON PA.PLAN_BENEFIT_ID=PBXR.PLAN_BENEFIT_ID&#xD;&#xA;               AND PBXR.PLAN_ID=1&#xD;&#xA;            &#xD;&#xA;where ADJUSTMENT_PAYMENT_ELIGIBLE_FLAG='Y' AND PA.BENEFIT_CALCULATION_DETAIL_ID  IS not NULL&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN ('CNCL','SPND')">
      <parameters />
    </query>
    <query ID="LoadPaymentDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;Declare @GOLIVEDATE  DATETIME&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;      TOP 1 @GOLIVEDATE = DATA1&#xD;&#xA;    FROM SGS_CODE_VALUE  WITH(NOLOCK) &#xD;&#xA;    WHERE CODE_ID = 52 and CODE_VALUE = 'GLDT'&#xD;&#xA;Print  @GOLIVEDATE   &#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;&#xD;&#xA;      YEAR(PHH.PAYMENT_DATE) AS PAYMENT_YEAR,PHH.PAYEE_ACCOUNT_ID,&#xD;&#xA;      &#xD;&#xA;      CAST(CAST(YEAR(PHH.PAYMENT_DATE) AS VARCHAR(4)) + '/' + '01' + '/01' AS DATETIME) AS PAYMENTYEARSTARTDATE,&#xD;&#xA;      &#xD;&#xA;      DATEADD(DD,-1,DATEADD(YY,1,CAST(CAST(YEAR(PHH.PAYMENT_DATE) AS VARCHAR(4)) + '/' + '01' + '/01' AS DATETIME))) AS PAYMENTYEARENDDATE,&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND REISSUE_ITEMS_FLAG = 'N' &#xD;&#xA;             THEN (PHD.AMOUNT * PIT.ITEM_TYPE_DIRECTION) ELSE 0 END)   AS GROSS_AMOUNT,&#xD;&#xA;            &#xD;&#xA;      SUM(CASE WHEN CHECK_GROUP_CODE_VALUE = 'DEDT' AND ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'RRED'  &#xD;&#xA;                  THEN AMOUNT ELSE 0 END) AS DEDUCTION_AMOUNT,&#xD;&#xA;      &#xD;&#xA;      SUM(CASE WHEN TAXABLE_ITEM_FLAG = 'Y'AND (ITEM_TYPE_DIRECTION = 1 OR ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' /*VINOVIN - added*/&#xD;&#xA;                  THEN (PHD.AMOUNT * PIT.ITEM_TYPE_DIRECTION)&#xD;&#xA;                  ELSE 0 END)  AS TAXABLE_AMOUNT,&#xD;&#xA;    &#xD;&#xA;    SUM(CASE WHEN TAXABLE_ITEM_FLAG &lt;&gt; 'Y' AND (ITEM_TYPE_DIRECTION = 1 OR ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET'  /*VINOVIN - added*/&#xD;&#xA;                  THEN (AMOUNT * ITEM_TYPE_DIRECTION) ELSE 0 END) AS NONTAXABLE_AMOUNT,&#xD;&#xA;     SUM(CASE WHEN TAXABLE_ITEM_FLAG &lt;&gt; 'Y' AND (ITEM_TYPE_DIRECTION = 1 OR ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' AND PHH.PAYMENT_DATE&gt;@GOLIVEDATE /*VINOVIN - added*/&#xD;&#xA;                  THEN (AMOUNT * ITEM_TYPE_DIRECTION) ELSE 0 END) AS NONTAXABLE_AMOUNT_FOR_REMAINING,             &#xD;&#xA;      SUM(ITEM_TYPE_DIRECTION * AMOUNT ) AS NET_AMOUNT,&#xD;&#xA;      &#xD;&#xA;      SUM(CASE WHEN TAXABLE_ITEM_FLAG = 'Y' AND ALLOW_ROLLOVER_CODE_VALUE = 'CRET'&#xD;&#xA;                  THEN PHD.AMOUNT ELSE 0 END)  AS TAXABLE_ROLLOVER_AMOUNT,&#xD;&#xA;                  &#xD;&#xA;    SUM(CASE WHEN (TAXABLE_ITEM_FLAG &lt;&gt; 'Y' AND ALLOW_ROLLOVER_CODE_VALUE = 'CRET')&#xD;&#xA;                  THEN AMOUNT ELSE 0 END) AS NONTAXABLE_ROLLOVER_AMOUNT&#xD;&#xA;                  &#xD;&#xA;      FROM SGT_PAYMENT_HISTORY_HEADER PHH(NOLOCK)&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD(NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD WITH(NOLOCK) ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;            LEFT OUTER JOIN SGT_PAYMENT_SCHEDULE SPS ON SPS.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID&#xD;&#xA;            &#xD;&#xA;      WHERE PHH.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID &#xD;&#xA;            AND PHH.PAYMENT_DATE &lt;= @LASTPAYMENTDATE&#xD;&#xA;            AND SPHD.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD')  AND (SPHD.OLD_DISTRIBUTION_ID IS NULL OR &#xD;&#xA;   (SPHD.OLD_DISTRIBUTION_ID IS NOT NULL AND EXISTS(SELECT * FROM SGT_PAYMENT_HISTORY_DISTRIBUTION Q WHERE Q.PAYMENT_HISTORY_DISTRIBUTION_ID = SPHD.OLD_DISTRIBUTION_ID AND Q.DISTRIBUTION_STATUS_VALUE = 'CDRE')))&#xD;&#xA;      GROUP BY YEAR(PHH.PAYMENT_DATE ),PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      ORDER BY YEAR(PHH.PAYMENT_DATE ) DESC">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
        <parameter ID="@LASTPAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadPayeeAccountForActiveRetiree" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND PLAN_YEAR = @PLAN_YEAR AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*,  --WI 14763 RID 118342&#xD;&#xA;CASE WHEN ROLLOVER_ELI = 'Y' AND RetireeIncAmt &gt;= 750 THEN 'Y' ELSE 'N' END AS ROLLOVER_ELIGIBLE,&#xD;&#xA;CASE WHEN ROLLOVER_GRP = 'Rollover' AND RetireeIncAmt &gt;= 750 THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_Group,&#xD;&#xA;ISNULL((SELECT TOP 1&#xD;&#xA;CASE WHEN PHD.PAYMENT_METHOD_VALUE IN ('RCHK','RACH') AND  PHD.DISTRIBUTION_STATUS_VALUE = 'CLRD' THEN 'Y' ELSE 'N' END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SP.PERSON_ID, PAYMENT_METHOD_VALUE, DISTRIBUTION_STATUS_VALUE),'N') AS IS_ROLLOVER, -- For Tax Calculations,&#xD;&#xA;&#xD;&#xA;(SELECT TOP 1 SO.ORG_NAME FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;INNER JOIN SGT_ORGANIZATION SO ON SO.ORG_ID = PARD.ROLLOVER_ORG_ID&#xD;&#xA;WHERE SPA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SPA.PERSON_ID,SO.ORG_NAME) AS CONTACT_NAME ,@INC_PERCT AS PERCENT_INCREASE&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;INTO #RESULT  --WI 14763 RID 118342&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 --OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')&#xD;&#xA; ) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 --OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')&#xD;&#xA; ) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'N' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA; &#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt;  DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))) &#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;    &#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; , SPHD.PAYMENT_METHOD_VALUE AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;--RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DDPR','DSBL') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND ((((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;     -- --CHANGE 09102013&#xD;&#xA; (((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(SBA.RETIREMENT_DATE) &lt; @PLAN_YEAR) or (YEAR(SBA.RETIREMENT_DATE) = @PLAN_YEAR and month(SBA.RETIREMENT_DATE) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT'))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;--and (SPA.TERM_CERTAIN_END_DATE is null or (MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;--and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) AND&#xD;&#xA;--CHANGE 09102013&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;where PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;,SPA.REEMPLOYED_FLAG&#xD;&#xA;,SBA.RETIREMENT_DATE&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;, SPARTI.SSN   --WI 14763 RID 118342&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 --OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')&#xD;&#xA; ) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 --OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')&#xD;&#xA; ) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA; THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'Y' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;&#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; , SPHD.PAYMENT_METHOD_VALUE AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;--RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ((SDBD.DRO_MODEL_VALUE = 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; 10))))&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(spa.BENEFIT_BEGIN_DATE) &lt; @PLAN_YEAR) or (YEAR(spa.BENEFIT_BEGIN_DATE) = @PLAN_YEAR and month(spa.BENEFIT_BEGIN_DATE) &lt; 10)))))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SDBD.ALT_PAYEE_INCREASE = 'Y' AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y'  or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND&#xD;&#xA; (SPA.TERM_CERTAIN_END_DATE is null or &#xD;&#xA; (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR) &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA; or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;,SPA.REEMPLOYED_FLAG&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;, SPARTI.SSN  --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;) TEMP &#xD;&#xA;--WHERE TEMP.MPI_PERSON_ID IN ('M01385318','M01385448','M30065371','M30067122','M30067146','M30067385','M30288627','M30288590','M30289760','M30289672','M30302072','M30382687')&#xD;&#xA;--WHERE TEMP.MPI_PERSON_ID in (&#xD;&#xA;--'M30302155',&#xD;&#xA;--'M30288593',&#xD;&#xA;--'M01519121',&#xD;&#xA;--'M30288593',&#xD;&#xA;--'M01391638',&#xD;&#xA;--'M01390726',&#xD;&#xA;--'M01385893',&#xD;&#xA;--'M01401624',&#xD;&#xA;--'M01405359',&#xD;&#xA;--'M01410538',&#xD;&#xA;--'M01395170'&#xD;&#xA;--)&#xD;&#xA;&#xD;&#xA;--WI 14763 RID 118342&#xD;&#xA;SELECT * FROM (&#xD;&#xA;SELECT R.*, CASE WHEN U.UNIONGROUPCODE IS NULL THEN 'X' ELSE UnionGroupCode END AS UNIONGROUPCODE FROM #RESULT R&#xD;&#xA;LEFT OUTER JOIN Pillars.DBO.UNIONS U ON CAST(R.UNIONCODE AS INT) = U.UNIONCODE&#xD;&#xA;) X&#xD;&#xA;WHERE @APPROVED_GROUP = 'N' OR &#xD;&#xA;(@APPROVED_GROUP = 'Y' AND EXISTS (SELECT 1 FROM SGT_RETIREE_INCREASE_GROUP_CONTRACT WITH(NOLOCK)&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y' AND UNION_GROUP_CODE = X.UNIONGROUPCODE) )&#xD;&#xA;">
      <parameters>
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
        <parameter ID="@APPROVED_GROUP" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetPlanYrForRetireeInc" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SJSP.* from SGS_JOB_SCHEDULE SBS&#xD;&#xA;JOIN SGS_JOB_SCHEDULE_DETAIL SBSD ON SBS.JOB_SCHEDULE_ID = SBSD.JOB_SCHEDULE_ID&#xD;&#xA;JOIN SGS_JOB_SCHEDULE_PARAMS SJSP ON SBSD.JOB_SCHEDULE_DETAIL_ID = SJSP.JOB_SCHEDULE_DETAIL_ID&#xD;&#xA;WHERE SBS.JOB_SCHEDULE_ID = @JOB_SCHEDULE_ID">
      <parameters>
        <parameter ID="@JOB_SCHEDULE_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalIAPMasterPaymentReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT Payment_Method,&#xD;&#xA;  Payment_Method_Value,&#xD;&#xA;  Payment_Method_desc,&#xD;&#xA;  Plan_Name,&#xD;&#xA;  Benefit_Account_Type_Descr,&#xD;&#xA;  Account_Relation_Descr,&#xD;&#xA;  ISNULL(TXRF,0) AS Taxable_Refund,&#xD;&#xA;  ISNULL(NXRF,0) AS Non_Taxable_Refund,&#xD;&#xA;  ISNULL(FDRF,0) AS Federal_tax_Refund,&#xD;&#xA;  ISNULL(STRF,0) AS State_tax_Refund,&#xD;&#xA;  ISNULL(TXRL,0) AS Taxable_Rollover,&#xD;&#xA;  ISNULL(NXRL,0) AS Non_Taxable_Rollover,&#xD;&#xA;  ISNULL(TXAN,0) AS Taxable_Annuitant,&#xD;&#xA;  ISNULL(NXAN,0) AS Non_Taxable_Annuitant,&#xD;&#xA;  ISNULL(FDAN,0) AS Federal_tax_Annuitant,&#xD;&#xA;  ISNULL(STAN,0) AS State_tax_Annuitant,&#xD;&#xA;  ISNULL(CHLD,0) AS Child_Support,&#xD;&#xA;  ISNULL(LEVY,0) AS Tax_Levy, &#xD;&#xA;  ISNULL(BLNK,0) AS Others&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA; SELECT CASE WHEN PHDN.PAYMENT_METHOD_VALUE = 'ACH' OR PHDN.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE = 'CHK' OR PHDN.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;    ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA; , CASE WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'Items with no Distribution records'&#xD;&#xA;   ELSE PMET.DESCRIPTION &#xD;&#xA;   END AS PAYMENT_METHOD_DESC&#xD;&#xA; , PL.PLAN_NAME, PA.BENEFIT_ACCOUNT_TYPE_VALUE, BTYP.DESCRIPTION AS BENEFIT_ACCOUNT_TYPE_DESCR&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION AS ACCOUNT_RELATION_DESCR&#xD;&#xA; , ISNULL(MASTER_PAYMENT_GROUP_VALUE, 'BLNK') AS MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA; , SUM(PHD.AMOUNT*ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;FROM &#xD;&#xA; DBO.SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH &#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN (&#xD;&#xA;  SELECT DISTINCT PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_VALUE,PAYMENT_METHOD_ID FROM &#xD;&#xA;   SGT_PAYMENT_HISTORY_DISTRIBUTION WHERE PAYMENT_METHOD_VALUE IN ('ACH','CHK')&#xD;&#xA; ) AS PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN DBO.SGT_PLAN(NOLOCK) PL ON PHH.PLAN_ID = PL.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN DBO.SGT_PAYEE_ACCOUNT(NOLOCK) PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PMET ON PHDN.PAYMENT_METHOD_ID = PMET.CODE_ID &#xD;&#xA;   AND PHDN.PAYMENT_METHOD_VALUE = PMET.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) BTYP ON PA.BENEFIT_ACCOUNT_TYPE_ID = BTYP.CODE_ID&#xD;&#xA;   AND  PA.BENEFIT_ACCOUNT_TYPE_VALUE = BTYP.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) ACREL ON PA.ACCOUNT_RELATION_ID = ACREL.CODE_ID&#xD;&#xA;   AND  PA.ACCOUNT_RELATION_VALUE = ACREL.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PAYIT ON PIT.MASTER_PAYMENT_GROUP_ID = PAYIT.CODE_ID &#xD;&#xA;   AND PIT.MASTER_PAYMENT_GROUP_VALUE = PAYIT.CODE_VALUE&#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @SCHEDULE_ID AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET'&#xD;&#xA;GROUP BY PHDN.PAYMENT_METHOD_VALUE,PMET.DESCRIPTION&#xD;&#xA; , PL.PLAN_NAME, PA.BENEFIT_ACCOUNT_TYPE_VALUE, BTYP.DESCRIPTION&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION&#xD;&#xA; , MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT CASE WHEN PHDN.PAYMENT_METHOD_VALUE = 'ACH' OR PHDN.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE = 'CHK' OR PHDN.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;    WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;    ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA; , CASE WHEN PHDN.PAYMENT_METHOD_VALUE IS NULL THEN 'Items with no Distribution records'&#xD;&#xA;   ELSE PMET.DESCRIPTION &#xD;&#xA;   END AS PAYMENT_METHOD_DESC&#xD;&#xA; , PL.PLAN_NAME, PA.BENEFIT_ACCOUNT_TYPE_VALUE, BTYP.DESCRIPTION AS BENEFIT_ACCOUNT_TYPE_DESCR&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION AS ACCOUNT_RELATION_DESCR&#xD;&#xA; , ISNULL(MASTER_PAYMENT_GROUP_VALUE, 'BLNK') AS MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA; , SUM(PHD.AMOUNT*ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;FROM &#xD;&#xA; DBO.SGT_PAYMENT_HISTORY_HEADER(NOLOCK) PHH &#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL(NOLOCK) PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN (&#xD;&#xA;  SELECT DISTINCT PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_VALUE,PAYMENT_METHOD_ID,ORG_ID FROM &#xD;&#xA;   SGT_PAYMENT_HISTORY_DISTRIBUTION WHERE PAYMENT_METHOD_VALUE IN ('RACH','RCHK')&#xD;&#xA; ) AS PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID AND PHDN.ORG_ID = PHH.ORG_ID&#xD;&#xA; INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN DBO.SGT_PLAN(NOLOCK) PL ON PHH.PLAN_ID = PL.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN DBO.SGT_PAYEE_ACCOUNT(NOLOCK) PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PMET ON PHDN.PAYMENT_METHOD_ID = PMET.CODE_ID&#xD;&#xA;   AND PHDN.PAYMENT_METHOD_VALUE = PMET.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) BTYP ON PA.BENEFIT_ACCOUNT_TYPE_ID = BTYP.CODE_ID&#xD;&#xA;   AND PA.BENEFIT_ACCOUNT_TYPE_VALUE = BTYP.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) ACREL ON PA.ACCOUNT_RELATION_ID = ACREL.CODE_ID&#xD;&#xA;   AND PA.ACCOUNT_RELATION_VALUE = ACREL.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN DBO.SGS_CODE_VALUE(NOLOCK) PAYIT ON PIT.MASTER_PAYMENT_GROUP_ID = PAYIT.CODE_ID&#xD;&#xA;   AND PIT.MASTER_PAYMENT_GROUP_VALUE = PAYIT.CODE_VALUE&#xD;&#xA;WHERE ISNULL(PHH.PAYMENT_SCHEDULE_ID,0) = @SCHEDULE_ID AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'CRET'&#xD;&#xA;GROUP BY PHDN.PAYMENT_METHOD_VALUE,PMET.DESCRIPTION&#xD;&#xA; , PL.PLAN_NAME, PA.BENEFIT_ACCOUNT_TYPE_VALUE, BTYP.DESCRIPTION&#xD;&#xA; , PA.ACCOUNT_RELATION_VALUE, ACREL.DESCRIPTION&#xD;&#xA; , MASTER_PAYMENT_GROUP_VALUE&#xD;&#xA;) A&#xD;&#xA; PIVOT (SUM(AMOUNT) FOR MASTER_PAYMENT_GROUP_VALUE IN ([TXRF],[NXRF],[FDRF],[STRF],[TXRL],[NXRL],[TXAN],[NXAN],[FDAN],[STAN],&#xD;&#xA; [CHLD],[LEVY],[BLNK])) AS PVT">
      <parameters>
        <parameter ID="@SCHEDULE_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="ReemployedParticipantsFromEADB" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA; SP.SSN,&#xD;&#xA; SP.PERSON_ID,&#xD;&#xA; SP.DATE_OF_BIRTH,&#xD;&#xA; SP.FIRST_NAME ,&#xD;&#xA; SP.LAST_NAME,&#xD;&#xA; SP.MIDDLE_NAME,&#xD;&#xA; SP.MPI_PERSON_ID,&#xD;&#xA; SP.NAME_PREFIX_VALUE  ,&#xD;&#xA; SBAD.JOINT_ANNUITANT_ID,&#xD;&#xA; SB.DATE_OF_BIRTH BEN_DOB, &#xD;&#xA; SPBA.PERSON_ACCOUNT_ID,&#xD;&#xA; SPBX.PLAN_ID,&#xD;&#xA; SPBX.BENEFIT_OPTION_VALUE,&#xD;&#xA; SBA.RETIREMENT_DATE,&#xD;&#xA; SBA.BENEFIT_TYPE_VALUE,&#xD;&#xA; SBA.BENEFIT_APPLICATION_ID,&#xD;&#xA; SBCD.EE_DERIVED_BENEFIT_AMOUNT,&#xD;&#xA; SBAD.BENEFIT_SUBTYPE_VALUE,&#xD;&#xA; SPBA.STARTING_TAXABLE_AMOUNT,SPBA.STARTING_NONTAXABLE_AMOUNT,&#xD;&#xA; SBCD.VESTED_EE_AMOUNT,&#xD;&#xA; SBCD.VESTED_EE_INTEREST,&#xD;&#xA; SPA.* ,&#xD;&#xA; SBCD.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA;FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)   &#xD;&#xA;  INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID  &#xD;&#xA;  INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID  &#xD;&#xA;  INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID  &#xD;&#xA;  INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL&#xD;&#xA;  LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD WITH(NOLOCK) ON SBCD.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;  LEFT JOIN SGT_PERSON SB ON SB.PERSON_ID = SBAD.JOINT_ANNUITANT_ID&#xD;&#xA;WHERE&#xD;&#xA;(REEMPLOYED_FLAG_FROM_EADB = 'Y' OR REEMPLOYED_FLAG = 'Y')  AND&#xD;&#xA;(REEMPLOYMENT_OVERRIDE_FLAG &lt;&gt; 'Y' OR REEMPLOYMENT_OVERRIDE_FLAG IS NULL) AND&#xD;&#xA;(SPAS.SUSPENSION_STATUS_REASON_VALUE &lt;&gt; 'REE2' OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' OR SPA.RETIREE_INCR_FLAG IS NULL)&#xD;&#xA;AND ((SPBX.PLAN_ID &lt;&gt; 1 AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')) OR (SPBX.PLAN_ID = 1 AND SPAS.STATUS_VALUE NOT IN ('CNCL')))">
      <parameters />
    </query>
    <query ID="GetPreviousStatusForDeathNotification" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;WHERE SPA.PERSON_ID = @PERSON_ID AND &#xD;&#xA; ((SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;AND Q.TERMINATED_STATUS_REASON_VALUE = 'DETH' ORDER BY &#xD;&#xA;Q.MODIFIED_DATE DESC) IN ('CMPL') OR &#xD;&#xA;(SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;AND  Q.TERMINATED_STATUS_REASON_VALUE = 'DETH' ORDER BY &#xD;&#xA;Q.MODIFIED_DATE DESC) IN ('SPND'))">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetRetireeIncreaseAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PIT.AMOUNT FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PIT&#xD;&#xA;ON SPA.PAYEE_ACCOUNT_ID = PIT.PAYEE_ACCOUNT_ID&#xD;&#xA;WHERE SPA.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID AND PIT.PAYMENT_ITEM_TYPE_ID = 48&#xD;&#xA;AND SPA.REFERENCE_ID &gt; 0">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetReemployedParticipants" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SPA.*,SPAS.STATUS_VALUE,SBA.RETIREMENT_DATE,SPBX.PLAN_ID, SBA.MIN_DISTRIBUTION_DATE as idtMin_Distribution_Date&#xD;&#xA;INTO #TEMP&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID AND SPBX.PLAN_ID IN (1,2)&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL &#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT') AND (SPA.RETIREMENT_TYPE_VALUE IS NULL OR SPA.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND') &#xD;&#xA;AND ((SPBX.PLAN_ID = 2 AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')) OR (SPBX.PLAN_ID = 1 AND SPAS.STATUS_VALUE NOT IN ('CNCL'))) AND SP.DATE_OF_DEATH IS NULL AND SP.DATE_OF_BIRTH IS NOT NULL AND (YEAR(GETDATE()) - 1 - YEAR(DATE_OF_BIRTH)) &gt;= 65&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'N' &#xD;&#xA; &#xD;&#xA;&#xD;&#xA;SELECT  * FROM #TEMP WHERE PERSON_ID IN&#xD;&#xA;(&#xD;&#xA; SELECT DISTINCT T.PERSON_ID&#xD;&#xA; FROM [PILLARS].[DBO].[MPI_WorkHistory] R&#xD;&#xA; --INNER JOIN EADB..HOURS H ON R.REPORTID = H.REPORTID&#xD;&#xA; INNER JOIN SGT_PERSON SP ON SP.MPI_PERSON_ID = R.MPIPersonId&#xD;&#xA; INNER JOIN #TEMP T ON T.PERSON_ID = SP.PERSON_ID AND T.PLAN_ID = 2&#xD;&#xA; WHERE  R.EMPACCOUNTNO NOT IN (14002,13363,3596,3597,12904) AND R.HoursStatus = 0 &#xD;&#xA; AND R.ComputationYear = YEAR(GETDATE()) - 1  AND R.FromDate &gt; T.RETIREMENT_DATE&#xD;&#xA; GROUP BY T.PERSON_ID&#xD;&#xA; HAVING SUM(ISNULL(R.HoursWorked,0)) &gt;= 870&#xD;&#xA;) ORDER BY PLAN_ID DESC,PERSON_ID&#xD;&#xA;&#xD;&#xA;DROP TABLE #TEMP">
      <parameters />
    </query>
    <query ID="GetReEmployedParticipantInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;  sbad.JOINT_ANNUITANT_ID,spou.DATE_OF_BIRTH BEN_DOB, SP.DATE_OF_DEATH,&#xD;&#xA; sp.MPI_PERSON_ID,&#xD;&#xA;  sp.SSN,sp.PERSON_ID,sp.DATE_OF_BIRTH,sp.FIRST_NAME,sp.LAST_NAME,sp.GENDER_VALUE,sp.NAME_PREFIX_VALUE,sp.MARITAL_STATUS_VALUE,&#xD;&#xA;  sb.PERSON_ID,sb.DATE_OF_BIRTH,&#xD;&#xA;  &#xD;&#xA;  spba.person_account_Id,&#xD;&#xA;  spbx.PLAN_ID,spbx.BENEFIT_OPTION_VALUE,pln.PLAN_CODE, &#xD;&#xA; sba.RETIREMENT_DATE,sba.BENEFIT_TYPE_VALUE,sba.BENEFIT_APPLICATION_ID,sbcd.EE_DERIVED_BENEFIT_AMOUNT,&#xD;&#xA; sbad.BENEFIT_SUBTYPE_VALUE,sbcd.VESTED_EE_AMOUNT,sbcd.VESTED_EE_INTEREST,&#xD;&#xA; spba.STARTING_NONTAXABLE_AMOUNT,spba.STARTING_TAXABLE_AMOUNT,&#xD;&#xA; spa.*,sbcd.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA;FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT spa WITH(NOLOCK) &#xD;&#xA;  join sgt_person sp WITH(NOLOCK)&#xD;&#xA;  ON sp.PERSON_ID = spa.PERSON_ID &#xD;&#xA;  join SGT_BENEFIT_APPLICATION_DETAIL sbad WITH(NOLOCK)&#xD;&#xA;  ON sbad.BENEFIT_APPLICATION_DETAIL_ID = spa.BENEFIT_APPLICATION_DETAIL_ID &#xD;&#xA;  join SGT_BENEFIT_APPLICATION sba WITH(NOLOCK)&#xD;&#xA;  ON sba.BENEFIT_APPLICATION_ID = sbad.BENEFIT_APPLICATION_ID &#xD;&#xA;  join SGT_PLAN_BENEFIT_XR spbx on&#xD;&#xA;  spbx.PLAN_BENEFIT_ID = spa.PLAN_BENEFIT_ID&#xD;&#xA;  join SGT_PAYEE_BENEFIT_ACCOUNT spba WITH(NOLOCK)&#xD;&#xA;  ON spba.PAYEE_BENEFIT_ACCOUNT_ID = spa.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;  join SGT_PLAN  pln on&#xD;&#xA;  pln.PLAN_ID = spbx.PLAN_ID&#xD;&#xA;  left join SGT_PERSON SPOU on SPOU.PERSON_ID = sbad.JOINT_ANNUITANT_ID&#xD;&#xA;  left join SGT_BENEFIT_CALCULATION_DETAIL sbcd on&#xD;&#xA;  sbcd.BENEFIT_CALCULATION_DETAIL_ID = spa.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;  left join SGT_PERSON SB on SB.PERSON_ID = sbad.JOINT_ANNUITANT_ID&#xA;WHERE&#xA;  spa.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetRefPayeeAccountId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;WHERE &#xD;&#xA;SPA.PAYEE_BENEFIT_ACCOUNT_ID =&#xD;&#xA; (SELECT Q.PAYEE_BENEFIT_ACCOUNT_ID FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT Q WHERE Q.PAYEE_ACCOUNT_ID&#xD;&#xA;   = @PAYEE_ACCOUNT_ID)&#xD;&#xA;   AND &#xD;&#xA;   SPA.BENEFIT_APPLICATION_DETAIL_ID = (SELECT Q.BENEFIT_APPLICATION_DETAIL_ID FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT Q WHERE Q.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID)&#xD;&#xA;   AND SPA.PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBenefitOptionsFromDetailId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_BENEFIT_CALCULATION_OPTIONS where BENEFIT_CALCULATION_DETAIL_ID = @BENEFIT_CALCULATION_DETAIL_ID">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetReEmployedToResumeBenefits" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT&#xD;&#xA; SP.SSN,SP.PERSON_ID,SP.MPI_PERSON_ID,SP.DATE_OF_BIRTH,SP.FIRST_NAME + ' ' + SP.LAST_NAME AS FULL_NAME,SPBX.PLAN_ID,SPBX.BENEFIT_OPTION_VALUE,PLN.PLAN_CODE,&#xD;&#xA; SBA.RETIREMENT_DATE,SBA.BENEFIT_TYPE_VALUE,SBA.BENEFIT_APPLICATION_ID,SBAD.BENEFIT_SUBTYPE_VALUE,&#xD;&#xA; SPA.*&#xD;&#xA;FROM&#xD;&#xA; SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA; INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID &#xD;&#xA; INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID &#xD;&#xA; INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA; INNER JOIN SGT_PLAN  PLN ON PLN.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;WHERE REEMPLOYED_FLAG  = 'Y' AND REEMPLOYED_FLAG_AS_OF_DATE IS NOT NULL AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')">
      <parameters />
    </query>
    <query ID="GetPayeeAccountsForIAPPaymentAdjustmentBatchQdro" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT &#xD;&#xA; PA.*,&#xD;&#xA; DA.*,&#xD;&#xA; DTL.*,PER.*,PACH.*,SQCD.* from SGT_PAYEE_ACCOUNT PA &#xD;&#xA;JOIN SGT_DRO_BENEFIT_DETAILS DTL WITH(NOLOCK) &#xD;&#xA;            ON DTL.DRO_BENEFIT_ID = PA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;JOIN SGT_DRO_APPLICATION DA WITH(NOLOCK) &#xD;&#xA;            ON DTL.DRO_APPLICATION_ID = DA.DRO_APPLICATION_ID&#xD;&#xA;JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA WITH(NOLOCK) &#xD;&#xA;            ON PBA.PAYEE_BENEFIT_ACCOUNT_ID = PA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;JOIN SGT_PERSON_ACCOUNT PACH WITH(NOLOCK) &#xD;&#xA;            ON PACH.PERSON_ACCOUNT_ID = PBA.PERSON_ACCOUNT_ID&#xD;&#xA;JOIN SGT_PERSON PER WITH(NOLOCK) &#xD;&#xA;            ON PER.PERSON_ID = PA.PERSON_ID&#xD;&#xA;JOIN SGT_PLAN_BENEFIT_XR PBXR &#xD;&#xA;               ON PA.PLAN_BENEFIT_ID=PBXR.PLAN_BENEFIT_ID&#xD;&#xA;               AND PBXR.PLAN_ID=1&#xD;&#xA;left Join SGT_QDRO_CALCULATION_DETAIL SQCD &#xD;&#xA;               ON SQCD.QDRO_CALCULATION_DETAIL_ID = PA.DRO_CALCULATION_DETAIL_ID            &#xD;&#xA;where ADJUSTMENT_PAYMENT_ELIGIBLE_FLAG='Y'&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA;ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN ('CNCL','SPND')">
      <parameters />
    </query>
    <query ID="LoadBenefitOverpayment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT&#xD;&#xA;WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID&#xD;&#xA;AND IS_OVERPAYMENT_FLAG = 'Y'">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="ResumeBenefitToUpdatePaymentItems" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  sbco.*,&#xA; sbch.BENEFIT_TYPE_VALUE,&#xA; spbx.BENEFIT_OPTION_VALUE,&#xA; spbx.PLAN_ID,&#xD;&#xA; sbcd.IAP_BALANCE_AMOUNT,&#xA; sbcd.MONTHLY_EXCLUSION_AMOUNT,&#xD;&#xA; sbcd.EE_DERIVED_BENEFIT_AMOUNT&#xA;FROM&#xA;  SGT_BENEFIT_CALCULATION_OPTIONS sbco WITH(NOLOCK) &#xA;  join SGT_PLAN_BENEFIT_XR spbx WITH(NOLOCK)&#xA;  ON sbco.PLAN_BENEFIT_ID = spbx.PLAN_BENEFIT_ID &#xA;  join SGT_BENEFIT_CALCULATION_DETAIL sbcd WITH(NOLOCK)&#xA;  ON sbcd.BENEFIT_CALCULATION_DETAIL_ID = sbco.BENEFIT_CALCULATION_DETAIL_ID &#xA;  join SGT_BENEFIT_CALCULATION_HEADER sbch WITH(NOLOCK)&#xA;  ON sbch.BENEFIT_CALCULATION_HEADER_ID = sbcd.BENEFIT_CALCULATION_HEADER_ID &#xA;WHERE&#xA;  sbcd.BENEFIT_CALCULATION_DETAIL_ID = @BENEFIT_CALCULATION_DETAIL_ID">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeAccountRetroPayments" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT&#xD;&#xA;WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID&#xD;&#xA;AND (IS_OVERPAYMENT_FLAG &lt;&gt; 'Y' OR IS_OVERPAYMENT_FLAG IS NULL)">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeBenefitAccountID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select PAYEE_BENEFIT_ACCOUNT_ID,PERSON_ID FROM SGT_PAYEE_ACCOUNT WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountForSuspensionDeathNotification" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;WHERE SPA.PERSON_ID = @PERSON_ID &#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL','CNCL','SPND')">
      <parameters>
        <parameter ID="@PERSON_ID" />
      </parameters>
    </query>
    <query ID="GetParticipantsMEA" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP(1) SPAPIT.AMOUNT FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE SPAPIT&#xD;&#xA;ON SPA.PAYEE_ACCOUNT_ID = SPAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_ITEM_TYPE SPIT&#xD;&#xA;ON SPAPIT.PAYMENT_ITEM_TYPE_ID = SPIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE SPA.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID AND&#xD;&#xA;  SPIT.ITEM_TYPE_CODE = 'ITEM2' AND &#xD;&#xA;  (SPAPIT.END_DATE IS NULL OR SPAPIT.END_DATE &gt; GETDATE())">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfParticipantIsDead" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT COUNT(*) FROM SGT_DEATH_NOTIFICATION SDN &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SDN.PERSON_ID &#xD;&#xA;WHERE SDN.DEATH_NOTIFICATION_STATUS_VALUE = 'CRTF' &#xD;&#xA;AND SP.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND SP.PERSON_ID = @PERSON_ID&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetCalculationOptionsFromDetailId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select top(1) * from SGT_BENEFIT_CALCULATION_OPTIONS where BENEFIT_CALCULATION_DETAIL_ID = @BENEFIT_CALCULATION_DETAIL_ID">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetEEAmtAndEEContribution" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;select SUM( EE_CONTRIBUTION_AMOUNT) as EE_CONTRIBUTION_AMOUNT ,sum(EE_INT_AMOUNT) as EE_INT_AMOUNT, PBA.PERSON_ID&#xD;&#xA;from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION PARC&#xD;&#xA;join SGT_PAYEE_BENEFIT_ACCOUNT PBA on PBA.PERSON_ACCOUNT_ID = PARC.PERSON_ACCOUNT_ID &#xD;&#xA;join SGT_PAYEE_ACCOUNT PA on PA.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;join SGT_PERSON p on p.PERSON_ID = PBA.PERSON_ID&#xD;&#xA;where PA.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID&#xD;&#xA;group by PBA.PERSON_ID&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAcctFromPayeeBenAcct" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPBX.PLAN_ID as iintPlanId,SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SBA &#xD;&#xA;ON SBA.PAYEE_BENEFIT_ACCOUNT_ID=SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID=SPA.PLAN_BENEFIT_ID&#xD;&#xA;WHERE SBA.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckAjustmentCalExists" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_BENEFIT_CALCULATION_HEADER sbch&#xD;&#xA;join sgt_benefit_Calculation_detail sbcd on sbch.benefit_Calculation_header_id = sbcd.benefit_Calculation_header_id&#xD;&#xA;where person_id = @person_id and plan_id = @plan_id&#xD;&#xA;and calculation_type_value = 'ADCL' and status_value in ('APPR','PEND')">
      <parameters>
        <parameter ID="@person_id" sfwDataType="int" />
        <parameter ID="@plan_id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetLatestPayeeAccounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  SPA.PAYEE_ACCOUNT_ID,&#xA; P.MPI_PERSON_ID  AS istrMPID,&#xA; SPAX.PLAN_ID  AS iintPlanId,&#xA; SP.PLAN_NAME  AS istrPlanDescription,&#xA; SCV.DESCRIPTION  AS istrStatusDesc &#xA;FROM&#xA;  SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)   &#xA;  join SGT_PERSON P WITH(NOLOCK)&#xA;  ON P.PERSON_ID = SPA.PERSON_ID  &#xA;  JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK)  &#xA;  ON SPAS.PAYEE_ACCOUNT_ID  = SPA.PAYEE_ACCOUNT_ID  &#xA;  JOIN SGT_PLAN_BENEFIT_XR SPAX WITH(NOLOCK)  &#xA;  ON SPAX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID  &#xA;  LEFT OUTER JOIN   SGS_CODE_VALUE SCV WITH(NOLOCK)  &#xA;  ON SCV.CODE_VALUE = SPAS.STATUS_VALUE AND&#xA;  SCV.CODE_ID = SPAS.STATUS_ID   &#xA;  JOIN SGT_PLAN SP WITH(NOLOCK) &#xA;  ON SP.PLAN_ID = SPAX.PLAN_ID &#xA;WHERE&#xA;  SPA.PERSON_ID = @PERSON_ID  AND&#xA;  SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT&#xA;  TOP (1) PAYEE_ACCOUNT_STATUS_ID &#xA;FROM&#xA;  SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  &#xA;WHERE&#xA;  Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xA;ORDER  BY   MODIFIED_DATE DESC)">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountsForIAPPaymAdjustmentBatchCONV" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT &#xD;&#xA; (CASE WHEN BCH.RETIREMENT_DATE IS NULL THEN BCH.WITHDRAWAL_DATE  ELSE  BCH.RETIREMENT_DATE  END) &#xD;&#xA;AS RETIREMENT_DATE,PA.*,&#xD;&#xA; BCH.*,&#xD;&#xA; BCDTL.*,PER.*,PACH.* from SGT_PAYEE_ACCOUNT PA &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL BCDTL WITH(NOLOCK) &#xD;&#xA;            ON BCDTL.BENEFIT_APPLICATION_DETAIL_ID = PA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION BCH WITH(NOLOCK) &#xD;&#xA;            ON BCDTL.BENEFIT_APPLICATION_ID = BCH.BENEFIT_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA WITH(NOLOCK) &#xD;&#xA;            ON PBA.PAYEE_BENEFIT_ACCOUNT_ID = PA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT PACH WITH(NOLOCK) &#xD;&#xA;            ON PACH.PERSON_ACCOUNT_ID = PBA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON PER WITH(NOLOCK) &#xD;&#xA;            ON PER.PERSON_ID = PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PBXR &#xD;&#xA;               ON PA.PLAN_BENEFIT_ID=PBXR.PLAN_BENEFIT_ID&#xD;&#xA;               AND PBXR.PLAN_ID=1&#xD;&#xA;            &#xD;&#xA;where ADJUSTMENT_PAYMENT_ELIGIBLE_FLAG='Y' AND PA.BENEFIT_CALCULATION_DETAIL_ID IS  NULL&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID &#xD;&#xA;ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN ('CNCL','SPND')">
      <parameters />
    </query>
    <query ID="GetCalculationCreatedForParticipant" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select sbcd.* from SGT_BENEFIT_CALCULATION_DETAIL sbcd WITH(NOLOCK) join&#xD;&#xA;SGT_BENEFIT_CALCULATION_HEADER sbch WITH(NOLOCK) on &#xD;&#xA;sbch.BENEFIT_CALCULATION_HEADER_ID = sbcd.BENEFIT_CALCULATION_HEADER_ID&#xD;&#xA;join SGT_PLAN_BENEFIT_XR spbx WITH(NOLOCK) on spbx.PLAN_ID = sbcd.PLAN_ID&#xD;&#xA;where sbch.CALCULATION_TYPE_VALUE in('FINL','ADCL')  and&#xD;&#xA; sbch.STATUS_VALUE = 'APPR' and sbcd.BENEFIT_APPLICATION_DETAIL_ID = @BENEFIT_APPLICATION_DETAIL_ID">
      <parameters>
        <parameter ID="@BENEFIT_APPLICATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfSpouseIsDead" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_DEATH_NOTIFICATION SDN&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID=SDN.PERSON_ID&#xD;&#xA;WHERE SDN.DEATH_NOTIFICATION_STATUS_VALUE='CRTF'&#xD;&#xA;AND SP.DATE_OF_DEATH IS NOT NULL&#xD;&#xA;AND SP.PERSON_ID IN&#xD;&#xA;(&#xD;&#xA; SELECT JOINT_ANNUITANT_ID FROM SGT_BENEFIT_APPLICATION_DETAIL&#xD;&#xA; WHERE BENEFIT_APPLICATION_DETAIL_ID=@BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;)">
      <parameters>
        <parameter ID="@BENEFIT_APPLICATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountForPersonOverview" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PAYEE_ACCOUNT_ID,SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.RETIREMENT_TYPE_VALUE,SCVP.DESCRIPTION AS istrBenefitOptionValue &#xD;&#xA;,SP.PLAN_NAME AS istrPlanDescription,SP.PLAN_ID as iintPlanId,spa.BENEFIT_BEGIN_DATE AS idtRTMTDate,&#xD;&#xA;CASE WHEN SBA.BENEFIT_TYPE_VALUE &lt;&gt; 'WDRL' THEN SBA.RETIREMENT_DATE ELSE SBA.WITHDRAWAL_DATE END AS idtRetireMentDate,&#xD;&#xA;SCVS.DESCRIPTION AS istrStatusDesc,SCVS.CODE_VALUE AS istrStatus,SPA.ACCOUNT_RELATION_VALUE,SPA.RETIREE_INCR_FLAG,&#xD;&#xA;SBA.BENEFIT_APPLICATION_ID iintBenefitApplicationID,SPBA.FUNDS_TYPE_VALUE as istrFundType,&#xD;&#xA;SPA.BENEFIT_APPLICATION_DETAIL_ID--PIR 985&#xD;&#xA;,CHILD_SUPPORT_FLAG AS istrChildSupportFlag --PIR 965&#xD;&#xA;,EMERGENCY_ONETIME_PAYMENT_FLAG AS istrCovidFlag --RequestID:99406&#xD;&#xA;, CASE WHEN SBA.WITHDRAWAL_TYPE_VALUE LIKE 'HS%' THEN 'Y' ELSE 'N' END AS istrHardshipWithdrawal&#xD;&#xA;FROM SGT_PAYEE_BENEFIT_ACCOUNT SPBA &#xD;&#xA;LEFT JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID=SPBA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;LEFT JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID=SPA.PLAN_BENEFIT_ID &#xD;&#xA;LEFT JOIN SGS_CODE_VALUE SCVP ON SCVP.CODE_ID = SPBX.BENEFIT_OPTION_ID AND SCVP.CODE_VALUE = SPBX.BENEFIT_OPTION_VALUE &#xD;&#xA;LEFT JOIN SGT_PLAN SP ON SP.PLAN_ID=SPBX.PLAN_ID &#xD;&#xA;LEFT JOIN SGS_CODE_VALUE SCVS ON SCVS.CODE_ID = SPAS.STATUS_ID AND SCVS.CODE_VALUE = SPAS.STATUS_VALUE &#xD;&#xA;LEFT JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID=SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID=SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;WHERE (SPBA.PERSON_ID = @PERSON_ID OR SPA.PERSON_ID = @PERSON_ID)&#xD;&#xA;AND &#xD;&#xA;(SPAS.PAYEE_ACCOUNT_STATUS_ID &#xD;&#xA;= (SELECT TOP(1) PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;ORDER BY PAYEE_ACCOUNT_STATUS_ID DESC))">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetIsEarlyToDisabilityCount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_BENEFIT_APPLICATION SBA &#xD;&#xA;WHERE SBA.BENEFIT_TYPE_VALUE ='DSBL' &#xD;&#xA;AND SBA.APPLICATION_STATUS_VALUE = 'PEND' &#xD;&#xA;AND SBA.PERSON_ID = @PERSON_ID &#xD;&#xA;AND SBA.DISABILITY_CONVERSION_DATE IS NOT NULL">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountStatusByCalculationDetailID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PERSON_ID, SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD WITH(NOLOCK) ON SBCD.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_CALCULATION_HEADER SBCH WITH(NOLOCK) ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBCD.BENEFIT_CALCULATION_HEADER_ID&#xD;&#xA;WHERE SBCD.BENEFIT_CALCULATION_DETAIL_ID = @BENEFIT_CALCULATION_DETAIL_ID&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL', 'CNCL')">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalIAPSummaryReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT  &#xD;&#xA;     CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'ACH' OR PHD.PAYMENT_METHOD_VALUE = 'RACH' THEN 'ACH' &#xD;&#xA;  WHEN PHD.PAYMENT_METHOD_VALUE = 'CHK' OR PHD.PAYMENT_METHOD_VALUE = 'RCHK' THEN 'CHK' &#xD;&#xA;  WHEN PHD.PAYMENT_METHOD_VALUE IS NULL THEN 'ZZZ' &#xD;&#xA;  ELSE '' END AS PAYMENT_METHOD,&#xD;&#xA;  PHH.PAYMENT_DATE,&#xD;&#xA;  SUM(ITEM_TYPE_DIRECTION * AMOUNT) AS NET_AMOUNT,&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS GROSS_AMOUNT,&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT, &#xD;&#xA;     SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;     FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;     INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;     INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;     INNER JOIN TEMP_TABLE_FOR_PAYMENT TPA WITH(NOLOCK) ON TPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;     INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHDE.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;     WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;GROUP BY &#xD;&#xA;  PHD.PAYMENT_METHOD_VALUE,PHH.PAYMENT_DATE">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetDistributionStatusValue" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select top 2 SPHDSH.DISTRIBUTION_STATUS_HISTORY_ID,SPHDSH.DISTRIBUTION_STATUS_VALUE from SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SPHDSH&#xD;&#xA;JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYMENT_HISTORY_HEADER_ID=SPHDSH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE SPHH.PAYEE_ACCOUNT_ID=@PAYEE_ACCOUNT_ID&#xD;&#xA;ORDER BY SPHDSH.MODIFIED_DATE DESC">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetEEderived" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;  sp.SSN,&#xD;&#xA; sp.PERSON_ID,&#xD;&#xA; sp.DATE_OF_BIRTH,&#xD;&#xA; sp.FIRST_NAME ,&#xD;&#xA; sp.LAST_NAME,&#xD;&#xA; sp.MIDDLE_NAME,&#xD;&#xA; sp.MPI_PERSON_ID,&#xD;&#xA; sp.NAME_PREFIX_VALUE  ,&#xD;&#xA; sbad.JOINT_ANNUITANT_ID,&#xD;&#xA;   sb.DATE_OF_BIRTH BEN_DOB, &#xD;&#xA; spba.person_account_Id,&#xD;&#xA; spbx.PLAN_ID,&#xD;&#xA; spbx.BENEFIT_OPTION_VALUE,&#xD;&#xA; sba.RETIREMENT_DATE,&#xD;&#xA; sba.BENEFIT_TYPE_VALUE,&#xD;&#xA; sba.BENEFIT_APPLICATION_ID,&#xD;&#xA; sbcd.EE_DERIVED_BENEFIT_AMOUNT,&#xD;&#xA; sbad.BENEFIT_SUBTYPE_VALUE,&#xD;&#xA; spba.STARTING_TAXABLE_AMOUNT,spba.STARTING_NONTAXABLE_AMOUNT,&#xD;&#xA; sbcd.VESTED_EE_AMOUNT,&#xD;&#xA; sbcd.VESTED_EE_INTEREST,&#xD;&#xA; spa.* ,&#xD;&#xA; sbcd.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA; &#xD;&#xA;FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT spa WITH(NOLOCK)   &#xD;&#xA;  join sgt_person sp WITH(NOLOCK) &#xD;&#xA;  ON sp.PERSON_ID = spa.PERSON_ID  &#xD;&#xA;  join SGT_BENEFIT_APPLICATION_DETAIL sbad WITH(NOLOCK) &#xD;&#xA;  ON sbad.BENEFIT_APPLICATION_DETAIL_ID = spa.BENEFIT_APPLICATION_DETAIL_ID  &#xD;&#xA;  join SGT_BENEFIT_APPLICATION sba WITH(NOLOCK) &#xD;&#xA;  ON sba.BENEFIT_APPLICATION_ID = sbad.BENEFIT_APPLICATION_ID  &#xD;&#xA;  join SGT_PLAN_BENEFIT_XR spbx WITH(NOLOCK)&#xD;&#xA;  ON spbx.PLAN_BENEFIT_ID = spa.PLAN_BENEFIT_ID &#xD;&#xA;  join SGT_PAYEE_BENEFIT_ACCOUNT spba WITH(NOLOCK)&#xD;&#xA;  ON spba.PAYEE_BENEFIT_ACCOUNT_ID = spa.PAYEE_BENEFIT_ACCOUNT_ID left &#xD;&#xA;  join SGT_BENEFIT_CALCULATION_DETAIL sbcd WITH(NOLOCK)&#xD;&#xA;  ON sbcd.BENEFIT_CALCULATION_DETAIL_ID = spa.BENEFIT_CALCULATION_DETAIL_ID &#xD;&#xA;  join SGT_PAYEE_ACCOUNT_STATUS spas on spas.PAYEE_ACCOUNT_ID = spa.PAYEE_ACCOUNT_ID and &#xD;&#xA;  spas.PAYEE_ACCOUNT_STATUS_ID = (select top(1) Q.PAYEE_ACCOUNT_STATUS_ID from SGT_PAYEE_ACCOUNT_STATUS Q where q.PAYEE_ACCOUNT_ID = spa.PAYEE_ACCOUNT_ID order by Q.MODIFIED_DATE desc)&#xD;&#xA;  left join SGT_PERSON SB ON SB.PERSON_ID = sbad.JOINT_ANNUITANT_ID&#xD;&#xA;WHERE&#xD;&#xA;spa.PAYEE_ACCOUNT_ID=@PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPaymentCount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_PAYMENT_HISTORY_HEADER PHH with(nolock)&#xD;&#xA;inner join SGT_PAYMENT_HISTORY_DISTRIBUTION PHD with(nolock)&#xD;&#xA;on PHH.PAYMENT_HISTORY_HEADER_ID=PHD.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;WHERE PHH.PAYEE_ACCOUNT_ID=@PAYEE_ACCOUNT_ID AND PHH.PERSON_ID=@PERSON_ID &#xD;&#xA;AND DISTRIBUTION_STATUS_VALUE IN ('OUTS','CLRD','RSUD')">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="RetireeIncreaseLookup" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM &#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;SPA.PAYEE_ACCOUNT_ID, &#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;--SPP.MPI_PERSON_ID,&#xD;&#xA;SPP.MPI_PERSON_ID AS PARTICIPANT_MPI_ID,&#xD;&#xA;PLN.PLAN_ID,PLN.PLAN_CODE, &#xD;&#xA;SPAS.STATUS_ID, SPAS.STATUS_VALUE, &#xD;&#xA;SPAS1.STATUS_ID AS PSTATUS_ID, SPAS1.STATUS_VALUE AS PSTATUS_VALUE, &#xD;&#xA;SPA.RETIREE_INCR_FLAG,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_CODE = 'ITEM48'&#xD;&#xA;    THEN (PAPIT.AMOUNT * PIT.ITEM_TYPE_DIRECTION) ELSE 0 END)   AS GROSS_AMOUNT,&#xD;&#xA;SUM(PIT.ITEM_TYPE_DIRECTION * PAPIT.AMOUNT ) AS NET_AMOUNT,&#xD;&#xA;SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN ISNULL(PAPIT.AMOUNT,0.0) ELSE 0 END) AS FEDRAL_TAX,&#xD;&#xA;SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN ISNULL(PAPIT.AMOUNT,0.0) ELSE 0 END) AS STATE_TAX,&#xD;&#xA;CASE WHEN ISNULL(SPA.REFERENCE_ID,0) = 0 THEN 0 ELSE SPA.REFERENCE_ID END AS REFERENCE_ID,&#xD;&#xA;DATEPART(YYYY,SPA.BENEFIT_BEGIN_DATE)AS YEAR,SPAD.AMOUNT DEDUCTION_AMOUNT,&#xD;&#xA;--SUM(CASE WHEN PIT.CHECK_GROUP_CODE_VALUE = 'DEDT' AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'RRED'  &#xD;&#xA;--         AND PAPIT.END_DATE IS NULL &#xD;&#xA;--         THEN PAPIT.AMOUNT ELSE 0 END) AS DEDUCTION_AMOUNT,&#xD;&#xA;&#xD;&#xA;CASE WHEN SPARD.STATUS_VALUE = 'ACTV' THEN 'Y' ELSE 'N' END AS ROLLOVER_FLAG,&#xD;&#xA;CASE WHEN SPARD.STATUS_VALUE = 'ACTV' THEN SPARD.CREATED_DATE ELSE null END AS CREATED_DATE,&#xD;&#xA;CASE WHEN SPARD.STATUS_VALUE = 'ACTV' THEN SPARD.CREATED_DATE ELSE null END AS CREATED_DATE1,&#xD;&#xA;--CASE WHEN SPARD.STATUS_VALUE = 'ACTV' THEN SPARD.CREATED_DATE ELSE null END AS ROLLOVER_CREATED_DATE,&#xD;&#xA;SPAS1.STATUS_VALUE AS MONTHLY_STATUS_VALUE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT WITH(NOLOCK) &#xD;&#xA;ON PAPIT.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPIT.END_DATE is null or PAPIT.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,YEAR(SPA.BENEFIT_BEGIN_DATE))))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS1 WITH(NOLOCK) ON SPAS1.PAYEE_ACCOUNT_ID = SPA.REFERENCE_ID&#xD;&#xA;AND SPAS1.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS2 (NOLOCK) WHERE PAS2.PAYEE_ACCOUNT_ID = SPA.REFERENCE_ID ORDER BY PAS2.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_DEDUCTION SPAD ON SPAD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPAD.END_DATE IS NULL&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PLNBXR WITH(NOLOCK) ON PLNBXR.PLAN_BENEFIT_ID= SPA.PLAN_BENEFIT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN PLN WITH(NOLOCK) ON PLN.PLAN_ID = PLNBXR.PLAN_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL SPARD WITH(NOLOCK) ON SPARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPARD.STATUS_VALUE = 'ACTV'&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAT WITH(NOLOCK) ON SPAT.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPP WITH(NOLOCK) ON SPP.PERSON_ID =CASE WHEN  SPAT.PERSON_ID IS NULL THEN SPAT.BENEFECIARY_OF_PERSON_ID ELSE SPAT.PERSON_ID END &#xD;&#xA;WHERE SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK) WHERE PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;AND RETIREE_INCR_FLAG = 'Y' --AND YEAR(SPA.BENEFIT_BEGIN_DATE) = 2013&#xD;&#xA;GROUP BY&#xD;&#xA;SPA.PAYEE_ACCOUNT_ID, &#xD;&#xA;PLN.PLAN_ID,PLN.PLAN_CODE, &#xD;&#xA;SPAS.STATUS_ID, SPAS.STATUS_VALUE, &#xD;&#xA;SPA.RETIREE_INCR_FLAG,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;SPA.BENEFIT_BEGIN_DATE,&#xD;&#xA;SPA.REFERENCE_ID,&#xD;&#xA;SPARD.CREATED_DATE,&#xD;&#xA;SPARD.STATUS_VALUE,&#xD;&#xA;SPP.MPI_PERSON_ID,&#xD;&#xA;SPAS1.STATUS_ID,&#xD;&#xA;SPAS1.STATUS_VALUE,&#xD;&#xA;SPAD.AMOUNT&#xD;&#xA;)TEMP&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetRetireeIncPayeeFromAppDetail" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SPA.* from SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;where SPA.BENEFIT_APPLICATION_DETAIL_ID = (select BENEFIT_APPLICATION_DETAIL_ID from SGT_PAYEE_ACCOUNT REF WITH(NOLOCK) where REF.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID) &#xD;&#xA;OR SPA.DRO_APPLICATION_DETAIL_ID = (select DRO_APPLICATION_DETAIL_ID from SGT_PAYEE_ACCOUNT REF WITH(NOLOCK) where REF.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID) &#xD;&#xA;and RETIREE_INCR_FLAG = 'Y'&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="RecalculateRetirementBenefitsBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('tempdb..#CONTRIBUTION') is Not Null DROP TABLE #CONTRIBUTION;&#xD;&#xA;SELECT MPIPersonId, wh.ComputationYear, SUM(WH.PensionHours) AS PENSION_HOURS, CASE WHEN SUM(wh.PensionHours)&gt;= 400 THEN 'Y' ELSE 'N' END AS QUALIFIED_YEAR&#xD;&#xA;INTO #CONTRIBUTION&#xD;&#xA;FROM [PILLARS].[dbo].[MPI_WorkHistory] wh &#xD;&#xA;WHERE  wh.EmpAccountNo NOT IN (14002,13363,3596,3597,12904) AND wh.HoursStatus = 0 &#xD;&#xA;AND WH.ComputationYear BETWEEN YEAR(@FromDate) AND (YEAR(@ToDate)-1)&#xD;&#xA;GROUP BY MPIPersonId, wh.ComputationYear &#xD;&#xA;HAVING SUM(wh.PensionHours) &gt; 0 &#xD;&#xA;ORDER BY MPIPersonId, wh.ComputationYear&#xD;&#xA;&#xD;&#xA;SELECT DISTINCT SPA.*,@FromDate AS FROM_DATE,@ToDate AS TO_DATE,SPAS.STATUS_VALUE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA (NoLock)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS (NoLock) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD (NoLock) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA (NoLock) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX (NoLock) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID AND SPBX.PLAN_ID = 2&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA (NoLock) ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL&#xD;&#xA;INNER JOIN SGT_PERSON PTP (NoLock) ON SPBA.PERSON_ID = PTP.PERSON_ID --ADDED TO CHECK HOURS&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DSBL','DDPT') AND (SPA.RETIREMENT_TYPE_VALUE IS NULL OR SPA.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND')&#xD;&#xA;AND SBA.RETIREMENT_DATE BETWEEN @FromDate AND @ToDate &#xD;&#xA;AND EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID)&#xD;&#xA;AND NOT (EXISTS (SELECT 1 FROM SGT_PENSION_ACTUARY (NoLock) WHERE ISNULL(BENEFICIARY_FLAG,'') = '' AND BENEFICIARY_SSN IS NULL AND PERSON_SSN = PTP.MPI_PERSON_ID AND PLAN_NAME='MPIPP' AND BREAK_YEARS = (YEAR(@ToDate)-1)) AND SPA.BENEFIT_BEGIN_DATE &gt;= '01/01/2024')&#xD;&#xA;AND ISNULL(SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,'')&lt;&gt;'Y'&#xD;&#xA;AND (EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID AND QUALIFIED_YEAR = 'Y')&#xD;&#xA;&#x9;OR (SELECT TOP 1 ISNULL(TOTAL_QUALIFIED_YEARS,0) FROM SGT_PENSION_ACTUARY (NoLock)&#xD;&#xA;&#x9;WHERE MD_FLAG IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME = 'MPIPP' ORDER BY PENSION_ACTUARY_ID DESC) &gt; 20 )&#xD;&#xA;AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')&#xD;&#xA;UNION&#xD;&#xA;SELECT DISTINCT SPA.*,@FromDate AS FROM_DATE,@ToDate AS TO_DATE,SPAS.STATUS_VALUE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA (NoLock)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS (NoLock) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q (NoLock) WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDAD (NoLock) ON SDAD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA (NoLock) ON SDA.DRO_APPLICATION_ID = SDAD.DRO_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX (NoLock) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID AND SPBX.PLAN_ID = 2&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA (NoLock) ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL&#xD;&#xA;INNER JOIN SGT_PERSON PTP (NoLock) ON SPBA.PERSON_ID = PTP.PERSON_ID --ADDED TO CHECK HOURS&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (SPA.RETIREMENT_TYPE_VALUE IS NULL OR SPA.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND')&#xD;&#xA;AND  SDA.DRO_COMMENCEMENT_DATE BETWEEN @FromDate AND @ToDate&#xD;&#xA;AND EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID)&#xD;&#xA;AND NOT (EXISTS (SELECT 1 FROM SGT_PENSION_ACTUARY (NoLock) WHERE ISNULL(BENEFICIARY_FLAG,'') = '' AND BENEFICIARY_SSN IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME='MPIPP' AND BREAK_YEARS = (YEAR(@ToDate)-1)) AND SPA.BENEFIT_BEGIN_DATE &gt;= '01/01/2024')&#xD;&#xA;AND (EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID AND QUALIFIED_YEAR = 'Y')&#xD;&#xA;&#x9;OR (SELECT TOP 1 ISNULL(TOTAL_QUALIFIED_YEARS,0) FROM SGT_PENSION_ACTUARY  (NoLock)&#xD;&#xA;&#x9;WHERE MD_FLAG IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME = 'MPIPP' ORDER BY PENSION_ACTUARY_ID DESC) &gt; 20 )&#xD;&#xA;AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')&#xD;&#xA;UNION&#xD;&#xA;SELECT DISTINCT SPA.*,@FromDate AS FROM_DATE,@ToDate AS TO_DATE,SPAS.STATUS_VALUE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA  (NoLock)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS (NoLock) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q (NoLock) WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD (NoLock) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA (NoLock) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX (NoLock) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID AND SPBX.PLAN_ID = 2&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT  SPBA (NoLock) ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL&#xD;&#xA;INNER JOIN SGT_PERSON PTP (NoLock) ON SPBA.PERSON_ID = PTP.PERSON_ID --ADDED TO CHECK HOURS&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR') AND (SPA.RETIREMENT_TYPE_VALUE IS NULL OR SPA.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND')&#xD;&#xA;AND SBA.RETIREMENT_DATE BETWEEN @FromDate AND @ToDate&#xD;&#xA;AND EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID)&#xD;&#xA;AND NOT (EXISTS (SELECT 1 FROM SGT_PENSION_ACTUARY (NoLock) WHERE ISNULL(BENEFICIARY_FLAG,'') = '' AND BENEFICIARY_SSN IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME='MPIPP' AND BREAK_YEARS = (YEAR(@ToDate)-1)) AND SPA.BENEFIT_BEGIN_DATE &gt;= '01/01/2024')&#xD;&#xA;AND ISNULL(SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,'')&lt;&gt;'Y'&#xD;&#xA;AND (EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID AND QUALIFIED_YEAR = 'Y')&#xD;&#xA;&#x9;OR (SELECT TOP 1 ISNULL(TOTAL_QUALIFIED_YEARS,0) FROM SGT_PENSION_ACTUARY  (NoLock)&#xD;&#xA;&#x9;WHERE MD_FLAG IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME = 'MPIPP' ORDER BY PENSION_ACTUARY_ID DESC) &gt; 20 )&#xD;&#xA;AND SPAS.STATUS_VALUE NOT IN ('CNCL')&#xD;&#xA;UNION&#xD;&#xA;SELECT DISTINCT SPA.*,@FromDate AS FROM_DATE,@ToDate AS TO_DATE,SPAS.STATUS_VALUE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA (NoLock)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS (NoLock) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q (NoLock) WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD (NoLock) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA (NoLock) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX (NoLock) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID AND SPBX.PLAN_ID = 2 AND SPBX.BENEFIT_OPTION_VALUE = 'LUMP'&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA (NoLock) ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL&#xD;&#xA;INNER JOIN SGT_PERSON PTP (NoLock) ON SPBA.PERSON_ID = PTP.PERSON_ID --ADDED TO CHECK HOURS&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT') AND (SPA.RETIREMENT_TYPE_VALUE IS NULL OR SPA.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND')&#xD;&#xA;AND SBA.RETIREMENT_DATE BETWEEN @FromDate AND @ToDate&#xD;&#xA;AND EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID)&#xD;&#xA;AND NOT (EXISTS (SELECT 1 FROM SGT_PENSION_ACTUARY (NoLock) WHERE ISNULL(BENEFICIARY_FLAG,'') = '' AND BENEFICIARY_SSN IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME='MPIPP' AND BREAK_YEARS = (YEAR(@ToDate)-1)) AND SPA.BENEFIT_BEGIN_DATE &gt;= '01/01/2024')&#xD;&#xA;AND ISNULL(SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,'')&lt;&gt;'Y'&#xD;&#xA;AND (EXISTS (SELECT 1 FROM #CONTRIBUTION WHERE MPIPersonId = PTP.MPI_PERSON_ID AND QUALIFIED_YEAR = 'Y')&#xD;&#xA;&#x9;OR (SELECT TOP 1 ISNULL(TOTAL_QUALIFIED_YEARS,0) FROM SGT_PENSION_ACTUARY (NoLock)&#xD;&#xA;&#x9;WHERE MD_FLAG IS NULL AND PERSON_SSN = PTP.SSN AND PLAN_NAME = 'MPIPP' ORDER BY PENSION_ACTUARY_ID DESC) &gt; 20 )&#xD;&#xA;AND SPAS.STATUS_VALUE NOT IN ('CNCL')">
      <parameters>
        <parameter ID="@FromDate" sfwDataType="DateTime" />
        <parameter ID="@ToDate" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadSoftErrors" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select sm.DISPLAY_MESSAGE,sm.SEVERITY_ID,sm.SEVERITY_VALUE, spae.* from SGT_PAYEE_ACCOUNT_ERROR spae WITH(NOLOCK)&#xD;&#xA;join SGS_MESSAGES sm WITH(NOLOCK) on sm.MESSAGE_ID = spae.MESSAGE_ID&#xD;&#xA;where spae.PAYEE_ACCOUNT_PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" />
      </parameters>
    </query>
    <query ID="InsertPayeeAccountSoftErrors" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF EXISTS (SELECT * FROM SGT_PAYEE_ACCOUNT_ERROR WHERE [MESSAGE_ID]=@Massage_Id)&#xD;&#xA;    UPDATE SGT_PAYEE_ACCOUNT_ERROR SET &#xD;&#xA;   [MODIFIED_BY]= @Created_By&#xD;&#xA;   ,[MODIFIED_DATE]=GETDATE()&#xD;&#xA;ELSE&#xD;&#xA;&#xD;&#xA; INSERT INTO [opus].[dbo].[SGT_PAYEE_ACCOUNT_ERROR]&#xD;&#xA;           ([PAYEE_ACCOUNT_PERSON_ID]&#xD;&#xA;           ,[MESSAGE_ID]&#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ])&#xD;&#xA;     VALUES&#xD;&#xA;           (@Person_Id&#xD;&#xA;           ,@Massage_Id&#xD;&#xA;           ,@Created_By&#xD;&#xA;           ,GETDATE()&#xD;&#xA;           ,@Created_By&#xD;&#xA;           ,GETDATE()&#xD;&#xA;           ,0)">
      <parameters>
        <parameter ID="@Person_Id" sfwDataType="int" />
        <parameter ID="@Massage_Id" sfwDataType="int" />
        <parameter ID="@Created_By" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountIDByBenefitCalculationID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PAYEE_ACCOUNT_ID, SPBX.PLAN_ID, SPAS.STATUS_VALUE, &#xD;&#xA; CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SP.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS istrMDAge,&#xD;&#xA;SP.*&#xD;&#xA;FROM SGT_BENEFIT_CALCULATION_HEADER SBCH&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBCH.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID and ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT MAX(PAYEE_ACCOUNT_STATUS_ID) FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SBAD.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;WHERE SBCH.BENEFIT_CALCULATION_HEADER_ID = @BENEFIT_CALCULATION_HEADER_ID and (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL', 'CNCL')">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_HEADER_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetMinimumDistributionPayeeAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT top 1 SPA.* FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON XR.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID --Ticket - 72115&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS&#xD;&#xA;ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID &#xD;&#xA; AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1) PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID=SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;WHERE SPA.PERSON_ID = @PERSON_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND SPA.RETIREMENT_TYPE_VALUE = 'MIND' AND SPAS.STATUS_VALUE = 'CMPL'&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') &lt;&gt; 'Y' AND XR.PLAN_ID = @PLAN_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAlternatePayeeAccountForSuspensionDeathNotification" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD on SPA.DRO_APPLICATION_DETAIL_ID=SDBD.DRO_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA on SDA.DRO_APPLICATION_ID=SDBD.DRO_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA on SPBA.PAYEE_BENEFIT_ACCOUNT_ID=SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;WHERE SPBA.PERSON_ID =  @PERSON_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'QDRO'&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL','CNCL','SPND') AND SDBD.DRO_MODEL_VALUE IN ('STRF', 'SSUP')">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAlternatePayeeAccountStatusForDeathNotification" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA; INNER JOIN  SGT_DRO_BENEFIT_DETAILS SDBD on SPA.DRO_APPLICATION_DETAIL_ID=SDBD.DRO_BENEFIT_ID&#xD;&#xA; INNER JOIN  SGT_DRO_APPLICATION SDA on SDA.DRO_APPLICATION_ID=SDBD.DRO_APPLICATION_ID&#xD;&#xA; INNER JOIN  SGT_PAYEE_BENEFIT_ACCOUNT SPBA on SPBA.PAYEE_BENEFIT_ACCOUNT_ID=SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;WHERE SPBA.PERSON_ID =  @PERSON_ID  AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'QDRO'&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY &#xD;&#xA;Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL','CNCL') AND SDBD.DRO_MODEL_VALUE IN ('STRF', 'SSUP')">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetQDROAndLocalPayeeAccountsForParticipant" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SPA.* FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID NOT IN (1,2)&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT') AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') AND SPA.PERSON_ID = @PERSON_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT DISTINCT SPA.* FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') AND SPAS.MODIFIED_BY = @MODIFIED_BY AND SPBA.PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@MODIFIED_BY" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountForRetirementAffidavit" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT CASE WHEN PA.END_DATE IS NOT NULL AND PA.END_DATE &lt;= GETDATE() THEN 'N' ELSE 'Y' END VALID_ADDR_FLAG ,&#xD;&#xA;  SP.MPI_PERSON_ID,&#xD;&#xA;  SP.LAST_NAME + ' ' +  SP.FIRST_NAME AS PARTICIPANT_NAME,&#xD;&#xA;  SBA.PERSON_ID,RETIREMENT_DATE AS idtRetireMentDate,&#xD;&#xA;  SBA.BENEFIT_TYPE_VALUE AS BENEFIT_ACCOUNT_TYPE_VALUE , &#xD;&#xA;  SBAD.BENEFIT_SUBTYPE_VALUE AS RETIREMENT_TYPE_VALUE,&#xD;&#xA;  GETDATE() AS istrCurrentDate,&#xD;&#xA;  ( SELECT SUM(AMOUNT) &#xD;&#xA; FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE SPAPIT&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPAPIT.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPA.PERSON_ID = SP.PERSON_ID AND SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID AND SBAD.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.STATUS_VALUE NOT IN('CMPL','CNCL','SPND') AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA; WHERE SPAPIT.PAYMENT_ITEM_TYPE_ID IN(1,21) AND SPAPIT.END_DATE IS NULL&#xD;&#xA;  ) AS idecIAPBenefitAmount,&#xD;&#xA;  *&#xD;&#xA;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND SPBX.PLAN_ID=1 &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SBA.PERSON_ID AND SP.PERSON_ID = @PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA on PA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;and PA.ADDRESS_ID = (Select top(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q &#xD;&#xA;      INNER JOIN SGT_PERSON_ADDRESS_CHKLIST T ON Q.ADDRESS_ID = T.ADDRESS_ID&#xD;&#xA;      where Q.PERSON_ID = sp.PERSON_ID and T.ADDRESS_TYPE_VALUE = 'MAIL' Order by q. ADDRESS_ID DESC)&#xD;&#xA;WHERE APPLICATION_DETAIL_STATUS_VALUE = 'APPR' AND SBAD.BENEFIT_SUBTYPE_VALUE IN ('NORM','REDE','SPLR','URED','LATE') &#xD;&#xA;AND SBA.BENEFIT_TYPE_VALUE = 'RTMT'&#xD;&#xA;ORDER BY SP.LAST_NAME">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBenefitOptionValueFromBenefitDtlId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP 1 XR.BENEFIT_OPTION_VALUE,JA.DATE_OF_DEATH,JA.PERSON_ID FROM SGT_BENEFIT_APPLICATION_DETAIL SBAD&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SBAD.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_PERSON JA ON SBAD.JOINT_ANNUITANT_ID = JA.PERSON_ID&#xD;&#xA;WHERE SBAD.BENEFIT_APPLICATION_DETAIL_ID = @BENEFIT_APPLICATION_DETAIL_ID">
      <parameters>
        <parameter ID="@BENEFIT_APPLICATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBenefitOptionValueFromBenefitApplId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP 1 XR.BENEFIT_OPTION_VALUE,JA.DATE_OF_DEATH,JA.PERSON_ID &#xD;&#xA;FROM SGT_BENEFIT_APPLICATION_DETAIL SBAD&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SBAD.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_PERSON JA ON SBAD.JOINT_ANNUITANT_ID = JA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;WHERE SBA.BENEFIT_APPLICATION_ID = @BENEFIT_APPLICATION_ID">
      <parameters>
        <parameter ID="@BENEFIT_APPLICATION_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAgeAndPlanFrmCalcId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" --RID 65237&#xD;&#xA; SELECT SBCH.*,D.PLAN_ID, &#xD;&#xA; CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SP.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MDAge&#xD;&#xA;FROM SGT_BENEFIT_CALCULATION_HEADER SBCH&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBCH.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SBCH.PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_CALCULATION_DETAIL D ON SBCH.BENEFIT_CALCULATION_HEADER_ID = D.BENEFIT_CALCULATION_HEADER_ID&#xD;&#xA;WHERE SBCH.BENEFIT_CALCULATION_HEADER_ID = @BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA;">
      <parameters>
        <parameter ID="@BENEFIT_CALCULATION_HEADER_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateBenefitOptionOnConversion" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" UPDATE SGT_PAYEE_ACCOUNT &#xD;&#xA; SET PLAN_BENEFIT_ID = (SELECT PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR WHERE PLAN_ID = @PLAN_ID &#xD;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND BENEFIT_OPTION_VALUE = 'LIFE')&#xD;&#xA; WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; ">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetRetireeEligibilityList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="/*&#xD;&#xA;RETIREE HEALTH ELIGIBILITY REPORT&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP_ELIG_SAVE', 'U') IS NOT NULL&#xD;&#xA;  DROP TABLE #TEMP_ELIG_SAVE; &#xD;&#xA;  &#xD;&#xA;CREATE TABLE #TEMP_ELIG_SAVE  &#xD;&#xA;    (  &#xD;&#xA;&#x9;&#x9;[Source] VARCHAR(20),&#xD;&#xA;&#x9;&#x9;RETIREMENT_HEALTH_DATE DATETIME,  &#xD;&#xA;        MPI_PERSON_ID VARCHAR(20),&#xD;&#xA;&#x9;&#x9;PERSON_ID INT,&#xD;&#xA;&#x9;&#x9;SSN VARCHAR(256),&#xD;&#xA;&#x9;&#x9;LAST_NAME VARCHAR(50), &#xD;&#xA;&#x9;&#x9;FIRST_NAME VARCHAR(35),&#xD;&#xA;&#x9;&#x9;[NAME] VARCHAR(85),&#xD;&#xA;&#x9;&#x9;[Address] VARCHAR(200),&#xD;&#xA;&#x9;&#x9;DATE_OF_BIRTH DATETIME,&#xD;&#xA;&#x9;&#x9;RETIREMENT_DATE DATETIME,&#xD;&#xA;&#x9;&#x9;SSADATE DATETIME,&#xD;&#xA;&#x9;&#x9;PAYMENTDATE DATETIME,&#xD;&#xA;&#x9;&#x9;UNIONCODE VARCHAR(25),&#xD;&#xA;&#x9;&#x9;RETIREMENT_HEALTH_ONLY VARCHAR(10),&#xD;&#xA;&#x9;&#x9;MPIPERSONID VARCHAR(20),&#xD;&#xA;&#x9;&#x9;LASTNAME VARCHAR(50), &#xD;&#xA;&#x9;&#x9;FIRSTNAME VARCHAR(50),&#xD;&#xA;&#x9;&#x9;ADDR_LINE_1 VARCHAR(60),&#xD;&#xA;&#x9;&#x9;ADDR_LINE_2 VARCHAR(60),&#xD;&#xA;&#x9;&#x9;ADDR_CITY VARCHAR(50),&#xD;&#xA;&#x9;&#x9;ADDR_STATE_VALUE VARCHAR(4),&#xD;&#xA;&#x9;&#x9;ADDR_ZIP_CODE VARCHAR(5),&#xD;&#xA;    )  &#xD;&#xA;&#xD;&#xA;INSERT INTO #TEMP_ELIG_SAVE &#xD;&#xA;SELECT [Source], RETIREMENT_HEALTH_DATE, MPI_PERSON_ID, PERSON_ID, SSN, LAST_NAME, FIRST_NAME, LAST_NAME + ' '+ FIRST_NAME AS [NAME], [Address], DATE_OF_BIRTH&#xD;&#xA;&#x9;,RETIREMENT_DATE, SSADATE, PAYMENTDATE, UNIONCODE, RETIREMENT_HEALTH_ONLY, &#xD;&#xA;&#x9;MPIPERSONID, LASTNAME, FIRSTNAME,ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_VALUE, ADDR_ZIP_CODE &#xD;&#xA;FROM(&#xD;&#xA;/*Get anyone who is currently receiving Pension payments (or at least someone that has a Payee Account set up)&#xD;&#xA;&#x9;, their RETIREE_INCR_FLAG = NO, &#xD;&#xA;&#x9;, the BENEFIT_ACCOUNT_TYPE_VALUE is not a Withdrawal,&#xD;&#xA;&#x9;, the HEALTH_ELIGIBLE_FLAG = YES&#xD;&#xA;&#x9;, the RETIREMENT_HEALTH_DATE &gt;= @PAYMENTDATE OR the RETIREMENT_HEALTH_DATE IS NULL&#xD;&#xA;*/&#xD;&#xA;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;'Source' = 'DS1'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--MW:  ADDED SOURCE TO IDENTIFY WHERE PEOPLE ARE COMING FROM &#xD;&#xA;&#x9;&#x9;&#x9;,SP.RETIREMENT_HEALTH_DATE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--MW:  ADDED &#xD;&#xA;         &#x9;,SP.MPI_PERSON_ID+' '+right(SP.SSN,4) AS MPI_PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;,SP.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;, SP.SSN&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;    , SP.LAST_NAME &#xD;&#xA;&#x9;&#x9;&#x9;, SP.FIRST_NAME&#xD;&#xA;&#x9;&#x9;    , SPADD.ADDR_LINE_1 +' ' + ISNULL(SPADD.ADDR_LINE_2,'') +' '+ SPADD.ADDR_CITY+' '+ SPADD.ADDR_STATE_VALUE+' '+SPADD.ADDR_ZIP_CODE AS Address&#xD;&#xA;&#x9;&#x9;&#x9;, SP.DATE_OF_BIRTH&#xD;&#xA;&#x9;&#x9;    , SBA.RETIREMENT_DATE&#xD;&#xA;&#x9;&#x9;    ,CASE WHEN SBA.BENEFIT_TYPE_VALUE = 'DSBL' THEN SBA.ENTITLEMENT_DATE END AS SSADATE&#xD;&#xA;&#x9;&#x9;    , @PAYMENTDATE AS PAYMENTDATE&#xD;&#xA;&#x9;&#x9;    , UNIONCODE = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( SP.SSN, DATEADD(YEAR, -1, @PAYMENTDATE), @PAYMENTDATE )&#xD;&#xA;&#x9;&#x9;&#x9;, CASE WHEN (SP.RETIREMENT_HEALTH_DATE IS NOT NULL OR  SP.RETIREMENT_HEALTH_DATE &lt;&gt; '') THEN 'Yes'&#xD;&#xA;&#x9;&#x9;&#x9;  ELSE 'No' END RETIREMENT_HEALTH_ONLY&#xD;&#xA;&#x9;&#x9;&#x9;,SP.MPI_PERSON_ID AS MPIPERSONID&#xD;&#xA;&#x9;&#x9;&#x9;,SP.LAST_NAME AS LASTNAME&#xD;&#xA;&#x9;&#x9;&#x9;,SP.FIRST_NAME AS FIRSTNAME&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_LINE_1&#xD;&#xA;&#x9;&#x9;&#x9;,ISNULL(SPADD.ADDR_LINE_2,'') as ADDR_LINE_2&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_CITY&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_STATE_VALUE&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_ZIP_CODE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;              AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;       INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;&#x9;   INNER JOIN SGT_PERSON_ADDRESS SPADD ON SP.PERSON_ID = SPADD.PERSON_ID AND SPADD.END_DATE IS NULL&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA;       INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;       INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;       INNER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SPA.BENEFIT_ACCOUNT_TYPE_ID = SCV.CODE_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = SCV.CODE_VALUE &#xD;&#xA;       INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PHH.PAYMENT_DATE = @PAYMENTDATE&#xD;&#xA;       LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER PHH1 ON PHH.PAYEE_ACCOUNT_ID = PHH1.PAYEE_ACCOUNT_ID AND PHH1.PAYMENT_DATE &lt; @PAYMENTDATE &#xD;&#xA;WHERE ISNULL(ONETIME_PAYMENT_FLAG,'N') = 'N' AND ISNULL(RETIREE_INCR_FLAG,'N') = 'N' AND PHH1.PAYMENT_HISTORY_HEADER_ID IS NULL AND SPAS.STATUS_VALUE &lt;&gt; 'CNCL' AND PHH.PAYMENT_DATE = @PAYMENTDATE&#xD;&#xA;       AND ISNULL(SPA.ACCOUNT_RELATION_VALUE,'') = 'PART' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND  ISNULL(SP.HEALTH_ELIGIBLE_FLAG,'N') &lt;&gt; 'N'&#xD;&#xA;&#x9;   AND (SBAD.BENEFIT_SUBTYPE_VALUE IS NULL OR SBAD.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND')&#xD;&#xA;&#x9;   AND (SP.RETIREMENT_HEALTH_DATE &gt;= @PAYMENTDATE OR SP.RETIREMENT_HEALTH_DATE IS NULL)&#xD;&#xA;&#x9;  &#xD;&#xA;&#xD;&#xA;UNION --Distinct&#xD;&#xA;--Get anyone whose has a RETIREMENT_HEALTH_DATE that matches the @PAYMENTDATE input date and their HEALTH_ELIGIBLE_FLAG = YES.  &#xD;&#xA;--Pulls in their latest address too. &#xD;&#xA;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;'Source' = 'DS2'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--MW:  ADDED SOURCE TO IDENTIFY WHERE PEOPLE ARE COMING FROM &#xD;&#xA;&#x9;&#x9;&#x9;,SP.RETIREMENT_HEALTH_DATE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--MW:  ADDED &#xD;&#xA;         &#x9; ,SP.MPI_PERSON_ID+' '+right(SP.SSN,4) AS MPI_PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;,SP.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;, SP.SSN&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;    , SP.LAST_NAME &#xD;&#xA;&#x9;&#x9;&#x9;, SP.FIRST_NAME &#xD;&#xA;&#x9;&#x9;    , SPADD.ADDR_LINE_1 +' ' + ISNULL(SPADD.ADDR_LINE_2,'') +' '+ SPADD.ADDR_CITY+' '+ SPADD.ADDR_STATE_VALUE+' '+SPADD.ADDR_ZIP_CODE AS Address&#xD;&#xA;&#x9;&#x9;&#x9;, SP.DATE_OF_BIRTH&#xD;&#xA;&#x9;&#x9;    , 'RETIREMENT_DATE' = SP.RETIREMENT_HEALTH_DATE&#x9;&#x9;--MW:  EXPLICITLY FORCED COLUMN NAME SINCE IT WAS ALREADY DOING IT IMPLICITLY IN THE SELECT STATEMENT ON TOP&#xD;&#xA;&#x9;&#x9;    ,ISNULL(null,null) AS SSADATE&#xD;&#xA;&#x9;&#x9;    , @PAYMENTDATE AS PAYMENTDATE&#xD;&#xA;&#x9;&#x9;    , UNIONCODE = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( SP.SSN, DATEADD(YEAR, -1, @PAYMENTDATE), @PAYMENTDATE )&#xD;&#xA;&#x9;&#x9;&#x9;, CASE WHEN (SP.RETIREMENT_HEALTH_DATE IS NOT NULL OR  SP.RETIREMENT_HEALTH_DATE &lt;&gt; '') THEN 'Yes'&#xD;&#xA;&#x9;&#x9;&#x9;  ELSE 'No' END RETIREMENT_HEALTH_ONLY&#xD;&#xA;&#x9;&#x9;&#x9;,SP.MPI_PERSON_ID AS MPIPERSONID&#xD;&#xA;&#x9;&#x9;&#x9;,SP.LAST_NAME AS LASTNAME&#xD;&#xA;&#x9;&#x9;&#x9;,SP.FIRST_NAME AS FIRSTNAME&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_LINE_1&#xD;&#xA;&#x9;&#x9;&#x9;,ISNULL(SPADD.ADDR_LINE_2,'') as ADDR_LINE_2&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_CITY&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_STATE_VALUE&#xD;&#xA;&#x9;&#x9;&#x9;,SPADD.ADDR_ZIP_CODE&#xD;&#xA;FROM SGT_PERSON SP &#xD;&#xA;&#x9;  INNER JOIN SGT_PERSON_ADDRESS SPADD ON SP.PERSON_ID = SPADD.PERSON_ID AND SPADD.END_DATE IS NULL&#xD;&#xA;WHERE SP.RETIREMENT_HEALTH_DATE = @PAYMENTDATE  AND  ISNULL(SP.HEALTH_ELIGIBLE_FLAG,'N') &lt;&gt; 'N'&#xD;&#xA;&#x9;  ) A&#xD;&#xA;ORDER BY A.LAST_NAME&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;***********************************************************************************************&#xD;&#xA;The Following code is for the 30 day version of the RetireeHealthEligibilityReport.  AKA:  30 Day Retire Health Eligibility Report Batch batch job (uses entCorTracking.LoadHealthEligibilityForNextMonth)&#xD;&#xA;It populates the TEMP_30_DAY_HEALTH_ELIGIBILITY table which that report uses. &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;START&#xD;&#xA;***********************************************************************************************&#xD;&#xA;*/&#xD;&#xA;--If it's the first time running the report for this @PAYMENTDATE (which shouldn't happen since the 30 Day Retire Health Eligibility Report Batch batch job should run on the 1st of the month automatically),&#xD;&#xA;--then insert the records into table TEMP_30_DAY_HEALTH_ELIGIBILITY&#xD;&#xA;IF NOT EXISTS (SELECT * FROM TEMP_30_DAY_HEALTH_ELIGIBILITY WHERE PAYMENTDATE = @PAYMENTDATE) &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;INSERT INTO TEMP_30_DAY_HEALTH_ELIGIBILITY  &#xD;&#xA;&#x9;SELECT MPI_PERSON_ID, MPIPERSONID, PERSON_ID, FIRST_NAME, LAST_NAME, &#xD;&#xA;&#x9;&#x9;[DATE_OF_BIRTH], [Address],&#xD;&#xA;&#x9;&#x9;[UNIONCODE] = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( SSN, DATEADD(YEAR, -1, @PAYMENTDATE), @PAYMENTDATE ), &#xD;&#xA;&#x9;&#x9;[RETIREMENT_HEALTH_ONLY], [ADDR_LINE_1], [ADDR_LINE_2], [ADDR_CITY], [ADDR_STATE_VALUE], [ADDR_ZIP_CODE],&#xD;&#xA;&#x9;&#x9;RETIREMENT_DATE, SSADATE, RETIREMENT_HEALTH_DATE, @PAYMENTDATE, 'OPUS Batch', GETDATE(), 'OPUS Batch', GETDATE(), NULL, NULL, 0&#xD;&#xA;&#x9;FROM #TEMP_ELIG_SAVE&#xD;&#xA;END&#xD;&#xA;ELSE&#xD;&#xA;BEGIN&#xD;&#xA;&#x9;--If any CANCELLATIONS, Update the LATE_CANCELLATION_DATE value&#xD;&#xA;&#x9;UPDATE TEMP_30_DAY_HEALTH_ELIGIBILITY &#xD;&#xA;&#x9;SET LATE_CANCELLATION_DATE = GETDATE(), MODIFIED_DATE = GETDATE()&#xD;&#xA;&#x9;WHERE MPI_PERSON_ID IN &#xD;&#xA;&#x9;(&#xD;&#xA;&#x9;&#x9;SELECT MPI_PERSON_ID FROM TEMP_30_DAY_HEALTH_ELIGIBILITY WHERE (PAYMENTDATE = @PAYMENTDATE AND LATE_CANCELLATION_DATE IS NULL)&#xD;&#xA;&#x9;&#x9;EXCEPT&#xD;&#xA;&#x9;&#x9;SELECT MPI_PERSON_ID FROM #TEMP_ELIG_SAVE&#xD;&#xA;&#x9;)&#xD;&#xA;&#xD;&#xA;&#x9;--If any ADDITIONS, Insert record(s) and set the LATE_ADDITION_DATE value&#xD;&#xA;&#x9;INSERT INTO TEMP_30_DAY_HEALTH_ELIGIBILITY  &#xD;&#xA;&#x9;SELECT MPI_PERSON_ID, MPIPERSONID, PERSON_ID, FIRST_NAME, LAST_NAME, &#xD;&#xA;&#x9;&#x9;[DATE_OF_BIRTH], [Address], &#xD;&#xA;&#x9;&#x9;[UNIONCODE] = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( SSN, DATEADD(YEAR, -1, @PAYMENTDATE), @PAYMENTDATE ), &#xD;&#xA;&#x9;&#x9;[RETIREMENT_HEALTH_ONLY], [ADDR_LINE_1], [ADDR_LINE_2], [ADDR_CITY], [ADDR_STATE_VALUE], [ADDR_ZIP_CODE],&#xD;&#xA;&#x9;&#x9;RETIREMENT_DATE, SSADATE, RETIREMENT_HEALTH_DATE, @PAYMENTDATE, 'OPUS Batch', GETDATE(), 'OPUS Batch', GETDATE(), GETDATE(), NULL, 0&#xD;&#xA;&#x9;FROM #TEMP_ELIG_SAVE&#xD;&#xA;&#x9;WHERE MPI_PERSON_ID IN &#xD;&#xA;&#x9;(&#xD;&#xA;&#x9;&#x9;SELECT MPI_PERSON_ID FROM #TEMP_ELIG_SAVE&#xD;&#xA;&#x9;&#x9;EXCEPT&#xD;&#xA;&#x9;&#x9;SELECT MPI_PERSON_ID FROM TEMP_30_DAY_HEALTH_ELIGIBILITY WHERE PAYMENTDATE = @PAYMENTDATE&#xD;&#xA;&#x9;)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;--We need to lock down the 30 day report when this report runs&#xD;&#xA;UPDATE TEMP_30_DAY_HEALTH_ELIGIBILITY&#xD;&#xA;SET THIRTY_DAY_REPORT_LOCK = 1&#xD;&#xA;WHERE PAYMENTDATE = @PAYMENTDATE &#xD;&#xA;/*&#xD;&#xA;***********************************************************************************************&#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;***********************************************************************************************&#xD;&#xA;*/&#xD;&#xA;--Return results to Eligibility report&#xD;&#xA;SELECT MPI_PERSON_ID, PERSON_ID, [NAME], [Address], DATE_OF_BIRTH&#xD;&#xA;&#x9;,RETIREMENT_DATE, SSADATE, PAYMENTDATE, UNIONCODE, RETIREMENT_HEALTH_ONLY, &#xD;&#xA;&#x9;MPIPERSONID, LASTNAME, FIRSTNAME, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_VALUE, ADDR_ZIP_CODE &#xD;&#xA;FROM #TEMP_ELIG_SAVE  &#xD;&#xA;DROP TABLE #TEMP_ELIG_SAVE">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetPayrollStartAndEndDatesFromEADB" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF (SELECT TOP 1 CutOffDate  FROM Pillars..Period WHERE @GivenDate between QualifyingStartDate and QualifyingEndDate ORDER BY CutOffDate DESC) &lt;= GETDATE()&#xD;&#xA;SELECT TOP 1 QualifyingStartDate AS PAYROLL_START_DATE,QualifyingEndDate AS PAYROLL_END_DATE,CutOffDate  FROM PILLARS..Period WHERE @GivenDate between QualifyingStartDate and QualifyingEndDate ORDER BY CutOffDate DESC&#xD;&#xA;else&#xD;&#xA;SELECT TOP 1 QualifyingStartDate AS PAYROLL_START_DATE,QualifyingEndDate AS PAYROLL_END_DATE,CutOffDate  FROM PILLARS..Period WHERE CutOffDate &lt;= @GivenDate ORDER BY CutOffDate DESC&#xD;&#xA;">
      <parameters>
        <parameter ID="@GivenDate" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetJointBenefitOptionValueFromBenefitApplicationDetailId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT TOP 1 XR.BENEFIT_OPTION_VALUE,JA.DATE_OF_DEATH,JA.PERSON_ID &#xD;&#xA;FROM SGT_BENEFIT_APPLICATION_DETAIL SBAD&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SBAD.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_PERSON JA ON SBAD.JOINT_ANNUITANT_ID = JA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;WHERE SBAD.BENEFIT_APPLICATION_DETAIL_ID = @BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;">
      <parameters>
        <parameter ID="@BENEFIT_APPLICATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfMDApplicationExists" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT CASE when Count(1) &gt; 0 THEN 'Y' ELSE 'N' END AS MDFLAG from SGT_BENEFIT_APPLICATION BA &#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON BA.BENEFIT_APPLICATION_ID = BAD.BENEFIT_APPLICATION_ID &#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON BAD.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID  &#xD;&#xA;WHERE BA.PERSON_ID =@Person_Id AND BAD.BENEFIT_SUBTYPE_VALUE = 'MIND' AND BA.APPLICATION_STATUS_VALUE = 'APPR' &#xD;&#xA;AND BAD.APPLICATION_DETAIL_STATUS_VALUE ='APPR' AND XR.PLAN_ID=1">
      <parameters>
        <parameter ID="@Person_Id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeAccountIAPPaybacks" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" select * from SGT_IAP_HARDSHIP_PAYBACK (NOLOCK)&#xD;&#xA; where PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadIAPHardshipPaybackBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT  PBK.PAYEE_ACCOUNT_ID, SP.PERSON_ID, SP.MPI_PERSON_ID&#xD;&#xA;FROM SGT_IAP_HARDSHIP_PAYBACK PBK (NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PBK.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON  SPA.BENEFIT_APPLICATION_DETAIL_ID = BAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION BA ON BAD.BENEFIT_APPLICATION_ID = BA.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;WHERE BA.WITHDRAWAL_TYPE_VALUE ='HS25'">
      <parameters />
    </query>
    <query ID="GetQDROPayeeAccountStatusByCalculationDetailID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT SPA.PERSON_ID, SPA.PAYEE_ACCOUNT_ID FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN [dbo].[SGT_QDRO_CALCULATION_DETAIL] SBCD WITH(NOLOCK) ON SBCD.[QDRO_CALCULATION_DETAIL_ID] = SPA.[DRO_CALCULATION_DETAIL_ID]&#xD;&#xA;INNER JOIN [dbo].[SGT_QDRO_CALCULATION_HEADER] SBCH WITH(NOLOCK) ON SBCH.[QDRO_CALCULATION_HEADER_ID] = SBCD.QDRO_CALCULATION_HEADER_ID&#xD;&#xA;WHERE SBCD.QDRO_CALCULATION_DETAIL_ID = @QDRO_CALCULATION_DETAIL_ID&#xD;&#xA;AND (SELECT TOP 1 Q.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC) NOT IN  ('CMPL', 'CNCL')">
      <parameters>
        <parameter ID="@QDRO_CALCULATION_DETAIL_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="Approve10PercentIncreasePayeeAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS ON SPA.PAYEE_ACCOUNT_ID = PAS.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR PB ON SPA.PLAN_BENEFIT_ID = PB.PLAN_BENEFIT_ID&#xD;&#xA;WHERE PAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT MAX(PAYEE_ACCOUNT_STATUS_ID) FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID)&#xD;&#xA;&#x9;AND PAS.STATUS_EFFECTIVE_DATE &gt;='05/01/2021' AND PAS.MODIFIED_BY like '%BATCH[_]74[_]%'&#xD;&#xA;&#x9;AND PAS.STATUS_VALUE = 'REVW'&#xD;&#xA;ORDER BY SPA.PAYEE_ACCOUNT_ID">
      <parameters />
    </query>
    <query ID="CheckIfConvertToLifeDateExists" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_PAYEE_ACCOUNT &#xD;&#xA;WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID AND CONVERTED_TO_LIFE_DATE IS NOT NULL&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdatePopupToLifeConversionDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE SGT_PAYEE_ACCOUNT &#xD;&#xA; SET CONVERTED_TO_LIFE_DATE = @NEW_BENEFIT_OPTION_DATE, &#xD;&#xA;  PLAN_BENEFIT_ID = (SELECT PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR &#xD;&#xA;  WHERE PLAN_ID = @PLAN_ID AND BENEFIT_OPTION_VALUE = 'LIFE')&#xD;&#xA; WHERE PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID&#xD;&#xA; ">
      <parameters>
        <parameter ID="@NEW_BENEFIT_OPTION_DATE" sfwDataType="DateTime" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetTaxCalcMaritalStatus" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT CODE_VALUE, DESCRIPTION FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7032 AND CODE_VALUE IN ('SM','MQ','H')" />
    <query ID="TrialMonthlyBenefitPaymentGrandTotalReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="if OBJECT_ID('tempdb.dbo.#RESULT1') is not null&#xD;&#xA;&#x9;drop table #RESULT1&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;&#x9;PVT.ACH_CHECK_GROUP_VALUE CATEGORY,&#xD;&#xA;&#x9;CASE&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN 'Total Gross Amount'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN 'Total Federal Tax'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN 'Total State Tax'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN 'Total Child/Spousal Support'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN 'Total Pension Receivable'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN 'Total Tax Levy'&#xD;&#xA;&#x9;END GRAND_TOTAL,&#xD;&#xA;&#x9;SUM(ISNULL(PVT.CHK, 0)) CHK_REGISTER,&#xD;&#xA;&#x9;SUM(ISNULL(PVT.ACH, 0)) ACH_REGISTER,&#xD;&#xA;&#x9;SUM(ISNULL(PVT.WIRE, 0)) WIRE_REGISTER&#xD;&#xA;INTO #RESULT1&#xD;&#xA;FROM (&#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;PAYMENT_METHOD,&#xD;&#xA;&#x9;&#x9;SUM(AMOUNT) AS AMOUNT&#xD;&#xA;&#x9;FROM (&#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;PIT.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;TEMP.PAYMENT_METHOD,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN PIT.ITEM_TYPE_CODE != 'ITEM54'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT * (((100 - ISNULL(PITY.WITHHOLDING_PERCENTAGE, 0)) / 100)), 2)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE ITEM_TYPE_DIRECTION * PAPI.AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END) AS AMOUNT&#xD;&#xA;&#x9;&#x9;FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#x9;&#x9;INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_DEDUCTION PADR ON PADR.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN (&#xD;&#xA;&#x9;&#x9;&#x9;SELECT PARP.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;,PARP.PAYMENT_OPTION_VALUE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;,PARPD.*&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT PARP&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT_DETAIL PARPD ON PARPD.PAYEE_ACCOUNT_RETRO_PAYMENT_ID = PARP.PAYEE_ACCOUNT_RETRO_PAYMENT_ID AND ISNULL(PARP.IS_OVERPAYMENT_FLAG, 'N') &lt;&gt; 'Y' AND PARP.START_DATE &lt;&gt; ISNULL(PARP.END_DATE, '99991231') AND (PARP.END_DATE IS NULL OR PARP.END_DATE &gt;= @PAYMENTDATE) AND PARP.PAYMENT_HISTORY_HEADER_ID IS NULL&#xD;&#xA;&#x9;&#x9;&#x9;) AS RETRO ON RETRO.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND RETRO.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH (NOLOCK) ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE) AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;&#x9;&#x9;-- Reissue Amount Fix&#xD;&#xA;&#x9;&#x9;LEFT JOIN SGT_PAYMENT_REISSUE_DETAIL PRD ON PRD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;&#x9;&#x9;LEFT JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL PRID ON PRD.PAYMENT_REISSUE_DETAIL_ID = PRID.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;&#x9;&#x9;WHERE (@CheckStartDate = 1 OR PAPI.START_DATE &lt;= @PAYMENTDATE) AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE) AND (PAPI.START_DATE != ISNULL(PAPI.END_DATE, '99991231')) AND ((ISNULL(RETRO.PAYMENT_OPTION_VALUE, 'REGL') = 'REGL' AND ISNULL(TEMP.RETRO_PAYMENT_OPTION_VALUE, 'REGL') = 'REGL') OR (RETRO.PAYMENT_OPTION_VALUE = 'SPCK' AND TEMP.RETRO_PAYMENT_OPTION_VALUE = 'SPCK')) AND (((RETRO.PAYMENT_OPTION_VALUE IS NULL OR RETRO.PAYMENT_OPTION_VALUE = 'REGL') AND ((ISNULL(PAPI.REISSUE_ITEM_FLAG, 'N') &lt;&gt; 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG, 'N') &lt;&gt; 'Y'))) OR ((RETRO.PAYMENT_OPTION_VALUE = 'SPCK' OR (ISNULL(PAPI.REISSUE_ITEM_FLAG, 'N') = 'Y' AND ISNULL(TEMP.REISSUE_ITEM_FLAG, 'N') = 'Y') OR ISNULL(TEMP.INCLUDE_IN_ADHOC_FLAG, 'N') = 'Y' OR (TEMP.BENEFIT_OPTION_VALUE = 'LUMP' AND ISNULL(PAPI.REISSUE_ITEM_FLAG, 'N') = 'N' AND ISNULL(TEMP.REISSUE_ITEM_FLAG, 'N') = 'N')) AND ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE, '') NOT IN ('PTOS', 'PTRO', 'RLOG'))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;--AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK' /*this is to avoid pick up 13th and 14th check which we will cover in benefit adjst testcase */&#xD;&#xA;&#x9;&#x9;&#x9;--AND TEMP.PAYEE_ACCOUNT_ID in (11021,14080)&#xD;&#xA;&#x9;&#x9;&#x9;-- Reissue Amount Fix&#xD;&#xA;&#x9;&#x9;&#x9;AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID, 0) OR PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA;&#x9;&#x9;&#x9;AND TEMP.PLAN_ID BETWEEN 2 AND 8&#xD;&#xA;&#x9;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;&#x9;PIT.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;TEMP.PAYMENT_METHOD&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;UNION&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;PIT.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;TEMP.PAYMENT_METHOD,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN PIT.ITEM_TYPE_CODE != 'ITEM54'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN (ITEM_TYPE_DIRECTION * (ROUND(PAPI.AMOUNT * (((100 - ISNULL(PITY.WITHHOLDING_PERCENTAGE, 0)) / 100)), 2)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE ITEM_TYPE_DIRECTION * PAPI.AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END) AS AMOUNT&#xD;&#xA;&#x9;&#x9;FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYMENT_REISSUE_DETAIL RD ON RD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL RID ON RID.PAYMENT_REISSUE_DETAIL_ID = RD.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN DBO.SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE(NOLOCK) PAPI ON PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE(NOLOCK) PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH (NOLOCK) ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE) AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;        WHERE (@CheckStartDate = 1 OR PAPI.START_DATE &lt;= @PAYMENTDATE) AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE) AND (PAPI.START_DATE != ISNULL(PAPI.END_DATE, '99991231')) AND (ISNULL(TEMP.REISSUE_PAYMENT_TYPE_VALUE, '') = 'PTOS')&#xD;&#xA;&#x9;&#x9;&#x9;--AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK' /*this is to avoid pick up 13th and 14th check which we will cover in benefit adjst testcase */&#xD;&#xA;&#x9;&#x9;&#x9;--AND TEMP.PAYEE_ACCOUNT_ID in (11021,14080)&#xD;&#xA;&#x9;&#x9;&#x9;-- Reissue Amount Fix&#xD;&#xA;&#x9;&#x9;&#x9;AND (PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID, 0) OR RID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA;&#x9;&#x9;&#x9;AND TEMP.PLAN_ID BETWEEN 2 AND 8&#xD;&#xA;&#x9;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;&#x9;PIT.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;TEMP.PAYMENT_METHOD&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;UNION&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;--ROLLOVER ITEMS&#xD;&#xA;&#x9;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;&#x9;PIT1.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;TEMP.PAYMENT_METHOD,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN PIT1.ITEM_TYPE_CODE != 'ITEM54'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN (PIT1.ITEM_TYPE_DIRECTION * (ROUND(PAPIT.AMOUNT * (((100 - ISNULL(PITY.WITHHOLDING_PERCENTAGE, 0)) / 100)), 2)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE PIT1.ITEM_TYPE_DIRECTION * PAPIT.AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END) AS AMOUNT&#xD;&#xA;&#x9;&#x9;FROM TEMP_TABLE_FOR_PAYMENT TEMP&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON TEMP.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PAPIT.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT1 ON PIT.ROLLOVER_ITEM_CODE = PIT1.ITEM_TYPE_CODE&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_ITEM_DETAIL PARID ON PARD.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID = PARID.PAYEE_ACCOUNT_ROLLOVER_DETAIL_ID AND PAPIT.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = PARID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION PITY WITH (NOLOCK) ON PITY.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID AND PITY.WITHHOLDING_DATE_FROM &lt;= @PAYMENTDATE AND (PITY.WITHHOLDING_DATE_TO IS NULL OR PITY.WITHHOLDING_DATE_TO &gt;= @PAYMENTDATE) AND (PITY.WITHHOLDING_DATE_FROM &lt;&gt; PITY.WITHHOLDING_DATE_TO OR PITY.WITHHOLDING_DATE_TO IS NULL)&#xD;&#xA;&#x9;&#x9;-- Reissue Amount Fix&#xD;&#xA;&#x9;&#x9;LEFT JOIN SGT_PAYMENT_REISSUE_DETAIL PRD ON PRD.PAYMENT_REISSUE_DETAIL_ID = TEMP.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;&#x9;&#x9;LEFT JOIN SGT_PAYMENT_REISSUE_ITEM_DETAIL PRID ON PRD.PAYMENT_REISSUE_DETAIL_ID = PRID.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;&#x9;&#x9;WHERE (@CheckStartDate = 1 OR PAPIT.START_DATE &lt;= @PAYMENTDATE) AND (PAPIT.END_DATE IS NULL OR PAPIT.END_DATE &gt;= @PAYMENTDATE) AND (PAPIT.START_DATE != ISNULL(PAPIT.END_DATE, '99991231')) AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED' AND PARD.STATUS_VALUE = 'ACTV'&#xD;&#xA;&#x9;&#x9;&#x9;--AND PIT.CHECK_TYPE_VALUE &lt;&gt; 'SPCK'&#xD;&#xA;&#x9;&#x9;&#x9;AND (ISNULL(PAPIT.REISSUE_ITEM_FLAG, 'N') &lt;&gt; 'Y' OR @INCLUDEREISSUEITEM = 1)&#xD;&#xA;&#x9;&#x9;&#x9;--AND TEMP.PAYEE_ACCOUNT_ID in (11021,14080)&#xD;&#xA;&#x9;&#x9;&#x9;-- Reissue Amount Fix&#xD;&#xA;&#x9;&#x9;&#x9;AND (PAPIT.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID = ISNULL(PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID, 0) OR PRID.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NULL)&#xD;&#xA;&#x9;&#x9;&#x9;AND TEMP.PLAN_ID BETWEEN 2 AND 8&#xD;&#xA;&#x9;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;&#x9;PIT1.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;TEMP.PAYMENT_METHOD&#xD;&#xA;&#x9;&#x9;) AS RESULT&#xD;&#xA;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;PAYMENT_METHOD&#xD;&#xA;&#x9;) AS TBL&#xD;&#xA;PIVOT(MAX(TBL.AMOUNT) FOR TBL.PAYMENT_METHOD IN (&quot;CHK&quot;, &quot;ACH&quot;, &quot;WIRE&quot;)) AS PVT&#xD;&#xA;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;ACH_CHECK_GROUP_VALUE&#xD;&#xA;ORDER BY &#xD;&#xA;&#x9;CASE &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN 1 &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN 2&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN 3 &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN 4&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN 5 &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN 6&#xD;&#xA;&#x9;END&#xD;&#xA;&#xD;&#xA;if OBJECT_ID('tempdb.dbo.#FINAL') is not null&#xD;&#xA;&#x9;drop table #FINAL&#xD;&#xA;&#xD;&#xA;SELECT R1.CATEGORY, R1.GRAND_TOTAL, R1.CHK_REGISTER, R1.ACH_REGISTER, R1.WIRE_REGISTER&#xD;&#xA;INTO #FINAL&#xD;&#xA;--SELECT *&#xD;&#xA;FROM #RESULT1 R1&#xD;&#xA;&#xD;&#xA;INSERT INTO #FINAL&#xD;&#xA;SELECT 'NET' CATEGORY, 'Net Amount' GRAND_TOTAL, SUM(R1.CHK_REGISTER) CHK_REGISTER, SUM(R1.ACH_REGISTER) ACH_REGISTER, SUM(R1.WIRE_REGISTER) WIRE_REGISTER&#xD;&#xA;FROM #RESULT1 R1&#xD;&#xA;WHERE R1.CATEGORY IN ('GROS', 'RECV', 'FDTX', 'STTX')&#xD;&#xA;&#xD;&#xA;INSERT INTO #FINAL&#xD;&#xA;SELECT TOP 1 'CNT' CATEGORY, 'Total Count' GRAND_TOTAL, CHK.CHK_COUNT CHK_REGISTER, ACH.ACH_COUNT ACH_REGISTER, WIRE.WIRE_COUNT WIRE_REGISTER&#xD;&#xA;FROM TEMP_TABLE_FOR_PAYMENT T&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT COUNT(1) CHK_COUNT&#xD;&#xA;    FROM TEMP_TABLE_FOR_PAYMENT T&#xD;&#xA;    WHERE T.PAYMENT_METHOD = 'CHK'&#xD;&#xA;) CHK&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT COUNT(1) ACH_COUNT&#xD;&#xA;    FROM TEMP_TABLE_FOR_PAYMENT T&#xD;&#xA;    WHERE T.PAYMENT_METHOD = 'ACH'&#xD;&#xA;) ACH&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT COUNT(1) WIRE_COUNT&#xD;&#xA;    FROM TEMP_TABLE_FOR_PAYMENT T&#xD;&#xA;    WHERE T.PAYMENT_METHOD = 'WIRE'&#xD;&#xA;) WIRE&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;&#x9;F.CATEGORY, F.GRAND_TOTAL, F.CHK_REGISTER, F.ACH_REGISTER, F.WIRE_REGISTER, &#xD;&#xA;&#x9;F.CHK_REGISTER + F.ACH_REGISTER + F.WIRE_REGISTER REGISTER&#xD;&#xA;FROM #FINAL F&#xD;&#xA;ORDER BY &#xD;&#xA;&#x9;CASE &#xD;&#xA;&#x9;&#x9;WHEN CATEGORY = 'GROS' THEN 1 WHEN CATEGORY = 'FDTX' THEN 2 WHEN CATEGORY = 'STTX' THEN 3 WHEN CATEGORY = 'CHLD' THEN 4&#xD;&#xA;&#x9;&#x9;WHEN CATEGORY = 'RECV' THEN 5 WHEN CATEGORY = 'LAVY' THEN 6 WHEN CATEGORY = 'NET' THEN 7 WHEN CATEGORY = 'CNT' THEN 8&#xD;&#xA;&#x9;END">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@CheckStartDate" sfwDataType="int" />
        <parameter ID="@INCLUDEREISSUEITEM" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalMonthlyBenefitPaymentGrandTotalReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="if OBJECT_ID('tempdb.dbo.#RESULT1') is not null&#xD;&#xA;&#x9;drop table #RESULT1&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;&#x9;PVT.ACH_CHECK_GROUP_VALUE CATEGORY,&#xD;&#xA;&#x9;CASE&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN 'Total Gross Amount'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN 'Total Federal Tax'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN 'Total State Tax'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN 'Total Child/Spousal Support'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN 'Total Pension Receivable'&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN 'Total Tax Levy'&#xD;&#xA;&#x9;END GRAND_TOTAL,&#xD;&#xA;&#x9;SUM(ISNULL(PVT.CHK, 0)) CHK_REGISTER,&#xD;&#xA;&#x9;SUM(ISNULL(PVT.ACH, 0)) ACH_REGISTER,&#xD;&#xA;&#x9;SUM(ISNULL(PVT.WIRE, 0)) WIRE_REGISTER&#xD;&#xA;INTO #RESULT1&#xD;&#xA;FROM (&#xD;&#xA;&#x9;SELECT&#xD;&#xA;&#x9;&#x9;PIT.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;PHDN.PAYMENT_METHOD_VALUE,&#xD;&#xA;&#x9;&#x9;SUM(PHD.AMOUNT * PIT.ITEM_TYPE_DIRECTION) AMOUNT&#xD;&#xA;&#x9;FROM DBO.SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;&#x9;INNER JOIN DBO.SGT_PAYMENT_HISTORY_DETAIL PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;INNER JOIN DBO.SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN WITH(NOLOCK) ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;WHERE 1=1&#xD;&#xA;&#x9;&#x9;AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;&#x9;&#x9;AND PHDN.PAYMENT_METHOD_VALUE IN ('CHK', 'ACH', 'WIRE')&#xD;&#xA;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;PIT.ACH_CHECK_GROUP_VALUE,&#xD;&#xA;&#x9;&#x9;PHDN.PAYMENT_METHOD_VALUE&#xD;&#xA;&#x9;) AS TBL&#xD;&#xA;PIVOT(MAX(TBL.AMOUNT) FOR TBL.PAYMENT_METHOD_VALUE IN (&quot;CHK&quot;, &quot;ACH&quot;, &quot;WIRE&quot;)) AS PVT&#xD;&#xA;&#x9;GROUP BY &#xD;&#xA;&#x9;&#x9;PVT.ACH_CHECK_GROUP_VALUE&#xD;&#xA;ORDER BY &#xD;&#xA;&#x9;CASE &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN 1 &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN 2&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN 3 &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN 4&#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN 5 &#xD;&#xA;&#x9;&#x9;WHEN PVT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN 6&#xD;&#xA;&#x9;END&#xD;&#xA;&#xD;&#xA;if OBJECT_ID('tempdb.dbo.#FINAL') is not null&#xD;&#xA;&#x9;drop table #FINAL&#xD;&#xA;&#xD;&#xA;SELECT R1.CATEGORY, R1.GRAND_TOTAL, R1.CHK_REGISTER, R1.ACH_REGISTER, R1.WIRE_REGISTER&#xD;&#xA;INTO #FINAL&#xD;&#xA;--SELECT *&#xD;&#xA;FROM #RESULT1 R1&#xD;&#xA;&#xD;&#xA;INSERT INTO #FINAL&#xD;&#xA;SELECT 'NET' CATEGORY, 'Net Amount' GRAND_TOTAL, SUM(R1.CHK_REGISTER) CHK_REGISTER, SUM(R1.ACH_REGISTER) ACH_REGISTER, SUM(R1.WIRE_REGISTER) WIRE_REGISTER&#xD;&#xA;FROM #RESULT1 R1&#xD;&#xA;WHERE R1.CATEGORY IN ('GROS', 'RECV', 'FDTX', 'STTX')&#xD;&#xA;&#xD;&#xA;INSERT INTO #FINAL&#xD;&#xA;SELECT TOP 1 'CNT' CATEGORY, 'Total Count' GRAND_TOTAL, CHK.CHK_COUNT, ACH.ACH_COUNT, WIRE.WIRE_COUNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT COUNT(1) CHK_COUNT&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN1 WITH(NOLOCK) ON PHDN1.PAYMENT_HISTORY_HEADER_ID = PHH1.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;    WHERE PHH1.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID AND PHDN1.PAYMENT_METHOD_VALUE = 'CHK'&#xD;&#xA;) CHK&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT COUNT(1) ACH_COUNT&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN1 WITH(NOLOCK) ON PHDN1.PAYMENT_HISTORY_HEADER_ID = PHH1.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;    WHERE PHH1.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID AND PHDN1.PAYMENT_METHOD_VALUE = 'ACH'&#xD;&#xA;) ACH&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT COUNT(1) WIRE_COUNT&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN1 WITH(NOLOCK) ON PHDN1.PAYMENT_HISTORY_HEADER_ID = PHH1.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;    WHERE PHH1.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID AND PHDN1.PAYMENT_METHOD_VALUE = 'WIRE'&#xD;&#xA;) WIRE&#xD;&#xA;WHERE 1=1&#xD;&#xA;&#x9;AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;&#x9;F.CATEGORY, F.GRAND_TOTAL, F.CHK_REGISTER, F.ACH_REGISTER, F.WIRE_REGISTER, &#xD;&#xA;&#x9;F.CHK_REGISTER + F.ACH_REGISTER + F.WIRE_REGISTER REGISTER&#xD;&#xA;FROM #FINAL F&#xD;&#xA;ORDER BY &#xD;&#xA;&#x9;CASE &#xD;&#xA;&#x9;&#x9;WHEN CATEGORY = 'GROS' THEN 1 WHEN CATEGORY = 'FDTX' THEN 2 WHEN CATEGORY = 'STTX' THEN 3 WHEN CATEGORY = 'CHLD' THEN 4&#xD;&#xA;&#x9;&#x9;WHEN CATEGORY = 'RECV' THEN 5 WHEN CATEGORY = 'LAVY' THEN 6 WHEN CATEGORY = 'NET' THEN 7 WHEN CATEGORY = 'CNT' THEN 8&#xD;&#xA;&#x9;END">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalWireRegisterReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  DISTINCT&#xD;&#xA; TPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;         CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) &#xD;&#xA;             THEN ISNULL(TRAN_ORG.MPI_ORG_ID,'') +' /'+ TPA.MPI_PERSON_ID  ELSE --TEMP.MPI_PERSON_ID END&#xD;&#xA;                      CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.MPI_ORG_ID ELSE CAST(P.MPI_PERSON_ID AS VARCHAR(10)) END +&#xD;&#xA;                CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'WIRE' AND PHD.FBO_CO IS NOT NULL THEN ' / '+ TPA.MPI_PERSON_ID ELSE '' END &#xD;&#xA;       END &#xD;&#xA;  AS MPID_ORGANIZATIONID, &#xD;&#xA;     CASE WHEN (TPA.TRANSFER_ORG_ID &gt; 0 AND TPA.PERSON_ID &gt; 0) &#xD;&#xA;             THEN ISNULL( TRAN_ORG.ORG_NAME,'') +' FBO:'+ TPA.PAYEE_NAME  ELSE --TEMP.MPI_PERSON_ID END&#xD;&#xA;                    CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_NAME + ' '+ ISNULL(PHD.FBO_CO,'') -- prod pir 249&#xD;&#xA;                    ELSE ISNULL(LAST_NAME,'')+' '+ISNULL(FIRST_NAME,'') END +&#xD;&#xA;                CASE WHEN PHD.PAYMENT_METHOD_VALUE = 'WIRE' AND TPA.TRANSFER_ORG_ID = 0 AND&#xD;&#xA;                PHD.FBO_CO IS NOT NULL THEN ' '+PHD.FBO_CO ELSE '' END &#xD;&#xA;       END      &#xD;&#xA;     AS PAYEENAME_ORGANIZATIONNAME,&#xD;&#xA;  TPA.PLAN_NAME,&#xD;&#xA;  TPA.ACCOUNT_RELATION_VALUE AS ACCOUNT_RELATIONSHIP,&#xD;&#xA;  TPA.BENEFIT_ACCOUNT_TYPE_VALUE AS BENEFIT_TYPE,&#xD;&#xA;  TPA.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION,&#xD;&#xA;  SUM(ITEM_TYPE_DIRECTION * AMOUNT) AS NET_AMOUNT,&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'GROS' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS GROSS_AMOUNT,--ASK ONCE&#xD;&#xA;  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT, &#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS FEDERAL_TAX_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'RECV' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS PENSION_RECEIVABLE,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'CHLD' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS CHILDORSPOUSAL_SUPPORT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'LAVY' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS TAX_LEVY,&#xD;&#xA;        PHD.BANK_NAME,PHD.ACCOUNT_TYPE_VALUE AS ACCOUNT_TYPE,PHD.ABA_SWIFT_BANK_CODE,PHD.ACCOUNT_NUMBER&#xD;&#xA;        , PHH.PAYMENT_DATE&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;                  AND PHD.PAYMENT_METHOD_VALUE IN ('WIRE')--ASK ONCE ABOUT CRITERIA&#xD;&#xA;INNER JOIN TEMP_TABLE_FOR_PAYMENT TPA WITH(NOLOCK) ON TPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHDE.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_REISSUE_DETAIL RD ON RD.PAYMENT_REISSUE_DETAIL_ID = TPA.PAYMENT_REISSUE_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK) ON PHH.PERSON_ID=P.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON PHH.ORG_ID=ORG.ORG_ID&#xD;&#xA;      --LEFT OUTER JOIN SGS_CODE_VALUE CVACCOUNTTYPEVALUE WITH(NOLOCK)  ON PHD.ACCOUNT_TYPE_ID= CVACCOUNTTYPEVALUE.CODE_ID AND PHD.ACCOUNT_TYPE_VALUE = CVACCOUNTTYPEVALUE.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION TRAN_ORG ON TRAN_ORG.ORG_ID=TPA.TRANSFER_ORG_ID&#xD;&#xA;WHERE PHH.PAYMENT_SCHEDULE_ID= @PAYMENTSCHEDULEID&#xD;&#xA;GROUP BY TPA.PLAN_NAME,TPA.ACCOUNT_RELATION_VALUE,TPA.BENEFIT_ACCOUNT_TYPE_VALUE,TPA.BENEFIT_OPTION_VALUE,&#xD;&#xA;  PHH.PERSON_ID,P.MPI_PERSON_ID,ORG.MPI_ORG_ID,ORG.ORG_NAME,P.LAST_NAME,P.FIRST_NAME,P.MIDDLE_NAME,PHD.PAYMENT_METHOD_VALUE,FBO_CO,&#xD;&#xA;  PHD.BANK_NAME,PHD.ACCOUNT_TYPE_VALUE,PHD.ABA_SWIFT_BANK_CODE,PHD.ACCOUNT_NUMBER, PHH.PAYMENT_DATE, TPA.MPI_PERSON_ID,TPA.PERSON_ID,TPA.TRANSFER_ORG_ID,&#xD;&#xA;  TRAN_ORG.ORG_ID,TRAN_ORG.MPI_ORG_ID,TRAN_ORG.ORG_NAME,TPA.PAYEE_NAME,TPA.PAYMENT_REISSUE_DETAIL_ID, TPA.PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="FinalWIRETransferReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('TEMPDB.DBO.#RESULT') IS NOT NULL&#xD;&#xA;&#x9;DROP TABLE #RESULT&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;    PHH.PAYEE_ACCOUNT_ID,&#xD;&#xA;    PER.MPI_PERSON_ID,&#xD;&#xA;    PHD.RECIPIENT_NAME AS PAYEE_NAME,&#xD;&#xA;    PHD.BANK_NAME,&#xD;&#xA;    PHD.ABA_SWIFT_BANK_CODE,&#xD;&#xA;    PHD.ACCOUNT_NUMBER,&#xD;&#xA;    ORG1.ORG_NAME INTER_BANK_NAME,&#xD;&#xA;    ORG1.ABA_SWIFT_BANK_CODE INTER_ABA_SWIFT_BANK_CODE,&#xD;&#xA;    PHD.NET_AMOUNT,&#xD;&#xA;    APP.RETIREMENT_DATE,&#xD;&#xA;    PER.DATE_OF_DEATH,&#xD;&#xA;    WIRE.WIRE_START_DATE,&#xD;&#xA;    WIRE.WIRE_END_DATE,&#xD;&#xA;    CASE&#xD;&#xA;        WHEN WIRE.WIRE_END_DATE IS NOT NULL THEN 'END DATED'&#xD;&#xA;        WHEN PHD.PAYMENT_METHOD_VALUE &lt;&gt; ISNULL(PREVPH.PREV_PAYMENT_METHOD_VALUE, '') THEN 'NEW'&#xD;&#xA;        ELSE 'RECURRING'&#xD;&#xA;    END WIRE_CATEGORY,&#xD;&#xA;    PHH.PAYMENT_DATE&#xD;&#xA;INTO #RESULT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER WITH(NOLOCK) ON PER.PERSON_ID = PHH.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_WIRE_DETAIL WIRE WITH(NOLOCK)&#xD;&#xA;        ON WIRE.PAYEE_ACCOUNT_WIRE_DETAIL_ID = PHD.PAYEE_ACCOUNT_WIRE_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION ORG1 WITH(NOLOCK) ON ORG1.ORG_ID = WIRE.INTER_BANK_ORG_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL APPDTL(NOLOCK) ON PA.BENEFIT_APPLICATION_DETAIL_ID = APPDTL.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION APP(NOLOCK) ON APPDTL.BENEFIT_APPLICATION_ID = APP.BENEFIT_APPLICATION_ID&#xD;&#xA;OUTER APPLY(&#xD;&#xA;    SELECT TOP 1 WITH TIES PHD1.PAYMENT_METHOD_VALUE PREV_PAYMENT_METHOD_VALUE, PHH1.PAYMENT_DATE PREV_PAYMENT_DATE&#xD;&#xA;    FROM SGT_PAYMENT_HISTORY_HEADER PHH1 WITH(NOLOCK)&#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD1 WITH(NOLOCK) ON PHD1.PAYMENT_HISTORY_HEADER_ID = PHH1.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;    WHERE PHH1.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID AND PHH1.PAYMENT_DATE &lt; PHH.PAYMENT_DATE&#xD;&#xA;    ORDER BY PHD1.PAYMENT_HISTORY_DISTRIBUTION_ID DESC&#xD;&#xA;) PREVPH&#xD;&#xA;WHERE 1=1&#xD;&#xA;    AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;    AND PHD.PAYMENT_METHOD_VALUE = 'WIRE'&#xD;&#xA;&#xD;&#xA;SELECT *&#xD;&#xA;FROM #RESULT R&#xD;&#xA;ORDER BY CASE WHEN R.WIRE_CATEGORY = 'END DATED' THEN 1 WHEN R.WIRE_CATEGORY = 'NEW' THEN 2 ELSE 3 END">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetStateTaxIdentifier" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select CODE_VALUE,DESCRIPTION from SGS_CODE_VALUE where code_id = 7004 and CODE_VALUE &lt;&gt; 'FDRL'&#xD;&#xA;order by DESCRIPTION">
      <parameters />
    </query>
    <query ID="GetPersonIdsFromTempPaymentTable" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT PERSON_ID FROM TEMP_TABLE_FOR_PAYMENT WHERE PERSON_ID IS NOT NULL">
      <parameters />
    </query>
    <query ID="GetIAPHW_PayeeAccountListFromTempPaymentTable" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT T.PAYEE_ACCOUNT_ID &#xD;&#xA;FROM TEMP_TABLE_FOR_PAYMENT T&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA ON T.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON PA.BENEFIT_APPLICATION_DETAIL_ID = BAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION BA ON BAD.BENEFIT_APPLICATION_ID = BA.BENEFIT_APPLICATION_ID&#xD;&#xA;AND BA.BENEFIT_TYPE_VALUE = 'WDRL' AND BA.WITHDRAWAL_TYPE_VALUE LIKE 'HS%' AND BA.APPLICATION_STATUS_VALUE = 'APPR' &#xD;&#xA;WHERE T.PERSON_ID IS NOT NULL">
      <parameters />
    </query>
    <query ID="LoadTaxIdentifiersvalues" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Select CODE_VALUE,DESCRIPTION from SGS_CODE_VALUE where CODE_ID=7004 and CODE_VALUE ='FDRL'&#xD;&#xA;UNION&#xD;&#xA;SELECT  CASE WHEN PADD.ADDR_STATE_VALUE NOT IN ('NC','GA','OR','VA') THEN&#xD;&#xA;'STAT'&#xD;&#xA;WHEN OA.STATE_VALUE NOT IN ('NC','GA','OR','VA') THEN&#xD;&#xA;'STAT'&#xD;&#xA;ELSE&#xD;&#xA;CA.CODE_VALUE END AS CODE_VALUE,&#xD;&#xA;CASE WHEN PADD.ADDR_STATE_VALUE  NOT IN ('NC','GA','OR','VA') THEN&#xD;&#xA;'CA State Tax'&#xD;&#xA;WHEN OA.STATE_VALUE NOT IN ('NC','GA','OR','VA') THEN&#xD;&#xA;'CA State Tax'&#xD;&#xA;ELSE&#xD;&#xA;CA.DESCRIPTION END AS DESCRIPTION&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PADD ON PA.PERSON_ID = PADD.PERSON_ID AND PADD.END_DATE IS NULL&#xD;&#xA;--LEFT OUTER JOIN SGT_PERSON SP ON PA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;--LEFT OUTER JOIN SGT_ORGANIZATION O ON PA.ORG_ID = PA.ORG_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORG_ADDRESS OA ON OA.ORG_ID = PA.ORG_ID AND OA.END_DATE IS NULL&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CA ON  CA.CODE_ID = 7004 AND case when CA.CODE_VALUE = 'STAT' then 'CA' else SUBSTRING(CA.CODE_VALUE,1,2) end = PADD.ADDR_STATE_VALUE  &#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CU ON  CU.CODE_ID = 7004 AND case when CU.CODE_VALUE = 'STAT' then 'CA' else SUBSTRING(CU.CODE_VALUE,1,2) end = OA.STATE_VALUE &#xD;&#xA;WHERE  PA.PAYEE_ACCOUNT_ID =@aPayeeAccountId&#xD;&#xA;UNION&#xD;&#xA;select CV.CODE_VALUE,CV.DESCRIPTION from SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING PAT&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON PAT.TAX_IDENTIFIER_VALUE = CV.CODE_VALUE AND CV.CODE_ID = 7004&#xD;&#xA;WHERE PAT.PAYEE_ACCOUNT_ID = @aPayeeAccountId">
      <parameters>
        <parameter ID="@aPayeeAccountId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPaymentMode" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT CODE_VALUE AS METHOD_CODE,DESCRIPTION AS METHOD_TEXT from SGS_CODE_VALUE&#xD;&#xA;  WHERE CODE_ID=7039  AND CODE_VALUE IN ('ACH','CHK')">
      <parameters />
    </query>
    <query ID="LoadPayeeAccountForOnetimePayment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @EFFECTIVE_START_DATE DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT, @PLAN_YEAR INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE, @EFFECTIVE_START_DATE = EFFECTIVE_START_DATE, @PLAN_YEAR = ISNULL(PLAN_YEAR, YEAR(EFFECTIVE_START_DATE))&#xD;&#xA;FROM [SGT_ONETIME_RETIREE_PAYMENT_CONTRACT] WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#RESULT') IS NOT NULL&#xD;&#xA;&#x9;DROP TABLE #RESULT&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*&#xD;&#xA;, @INC_PERCT AS PERCENT_INCREASE&#xD;&#xA;INTO #RESULT  &#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME&#xD;&#xA; --, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , SPHD.PAYMENT_METHOD_VALUE AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= @EFFECTIVE_START_DATE) &#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DSBL') AND (RETIREMENT_TYPE_VALUE NOT IN ('MIND','DDPR') OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND (&#xD;&#xA;&#x9;&#x9;(((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) &#xD;&#xA;&#x9;  ) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;&#x9;( ((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) &#xD;&#xA;&#x9;  )&#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT')&#xD;&#xA;&#x9;)&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') &lt;&gt; 'Y'  AND ISNULL(SPA.ONETIME_PAYMENT_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or ( SPA.TERM_CERTAIN_END_DATE &gt; @EFFECTIVE_START_DATE &#xD;&#xA;and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM [SGT_ONETIME_RETIREE_PAYMENT_CONTRACT] WITH(NOLOCK) where EFFECTIVE_START_DATE = @EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY SP.MPI_PERSON_ID, SP.LAST_NAME, SP.FIRST_NAME, SP.MIDDLE_NAME, PL.PLAN_CODE, SPA.BENEFIT_BEGIN_DATE, SPARTI.DATE_OF_BIRTH, SCV.DESCRIPTION, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE, GUARANTEED_AMOUNT, SPA.PAYEE_ACCOUNT_ID, SPA.BENEFIT_ACCOUNT_TYPE_VALUE, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE, SPHD.PAYMENT_METHOD_VALUE, SPHD.CHECK_ACH_EFFECTIVE_DATE,SPA.REEMPLOYED_FLAG,SBA.RETIREMENT_DATE, SPARTI.SSN  &#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME&#xD;&#xA; --, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 &#xD;&#xA; ) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 &#xD;&#xA; ) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA; THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , SPHD.PAYMENT_METHOD_VALUE AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= @EFFECTIVE_START_DATE) &#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE NOT IN ('MIND','DDPR') or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ( (SDBD.DRO_MODEL_VALUE = 'STRF' AND  &#xD;&#xA;&#x9;   ((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) )&#xD;&#xA;&#x9;  )&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND &#xD;&#xA;&#x9;   ((@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) )&#xD;&#xA;&#x9;  ) )&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;--AND SDBD.ALT_PAYEE_INCREASE = 'Y' &#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') &lt;&gt; 'Y'  AND ISNULL(SPA.ONETIME_PAYMENT_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;AND&#xD;&#xA; (SPA.TERM_CERTAIN_END_DATE is null or ( SPA.TERM_CERTAIN_END_DATE &gt; @EFFECTIVE_START_DATE &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA; or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM [SGT_ONETIME_RETIREE_PAYMENT_CONTRACT] WITH(NOLOCK) WHERE EFFECTIVE_START_DATE = @EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY SP.MPI_PERSON_ID, SP.LAST_NAME, SP.FIRST_NAME, SP.MIDDLE_NAME, PL.PLAN_CODE, SPA.BENEFIT_BEGIN_DATE, SPARTI.DATE_OF_BIRTH, SCV.DESCRIPTION, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE, GUARANTEED_AMOUNT, SPA.PAYEE_ACCOUNT_ID, SPA.BENEFIT_ACCOUNT_TYPE_VALUE, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE, SPHD.PAYMENT_METHOD_VALUE, SPHD.CHECK_ACH_EFFECTIVE_DATE,SPA.REEMPLOYED_FLAG, SPARTI.SSN &#xD;&#xA;) TEMP &#xD;&#xA;&#xD;&#xA;SELECT * FROM #RESULT R&#xD;&#xA;WHERE NOT EXISTS (SELECT 1 FROM SGT_PAYEE_ACCOUNT PA WHERE PA.PERSON_ID = R.PERSON_ID AND ISNULL(PA.ONETIME_PAYMENT_FLAG,'N') = 'Y' AND PA.BENEFIT_BEGIN_DATE = @EFFECTIVE_START_DATE)&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#RESULT') IS NOT NULL&#xD;&#xA;&#x9;DROP TABLE #RESULT">
      <parameters />
    </query>
    <query ID="UpdateOnetimePaymentContractEndDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE [SGT_ONETIME_RETIREE_PAYMENT_CONTRACT] SET EFFECTIVE_END_DATE = GETDATE()&#xD;&#xA;WHERE EFFECTIVE_START_DATE = @EFFECTIVE_START_DATE AND EFFECTIVE_END_DATE IS NULL">
      <parameters>
        <parameter ID="@EFFECTIVE_START_DATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetEffectiveStartDateForOneTimePayment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP 1 EFFECTIVE_START_DATE FROM OPUS.DBO.[SGT_ONETIME_RETIREE_PAYMENT_CONTRACT] &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL&#xD;&#xA;ORDER BY EFFECTIVE_START_DATE DESC">
      <parameters />
    </query>
    <query ID="GetWithdrawalTypebyApplicationDetailId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT BA.WITHDRAWAL_TYPE_VALUE FROM SGT_BENEFIT_APPLICATION BA&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON BA.BENEFIT_APPLICATION_ID = BAD.BENEFIT_APPLICATION_ID&#xD;&#xA;WHERE BAD.BENEFIT_APPLICATION_DETAIL_ID =@benefit_application_detail_id">
      <parameters>
        <parameter ID="@benefit_application_detail_id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeAccountsByPersonID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; SPAS.STATUS_VALUE,&#xA;&#x9;SPA.BENEFIT_ACCOUNT_TYPE_VALUE  &#xA;FROM&#xA;&#x9;  SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK)  &#xA;&#x9; join SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)&#xA;&#x9; ON  SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID  &#xA;WHERE&#xA;     PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (NOLOCK) WHERE PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC)&#xA;&#x9; AND SPA.PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="ReEmpoymentParticipantInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA; SP.SSN,&#xD;&#xA; SP.PERSON_ID,&#xD;&#xA; SP.DATE_OF_BIRTH,&#xD;&#xA; SP.FIRST_NAME ,&#xD;&#xA; SP.LAST_NAME,&#xD;&#xA; SP.MIDDLE_NAME,&#xD;&#xA; SP.MPI_PERSON_ID,&#xD;&#xA; SP.NAME_PREFIX_VALUE  ,&#xD;&#xA; SBAD.JOINT_ANNUITANT_ID,&#xD;&#xA; SB.DATE_OF_BIRTH BEN_DOB, &#xD;&#xA; SPBA.PERSON_ACCOUNT_ID,&#xD;&#xA; SPBX.PLAN_ID,&#xD;&#xA; SPBX.BENEFIT_OPTION_VALUE,&#xD;&#xA; SBA.RETIREMENT_DATE,&#xD;&#xA; SBA.BENEFIT_TYPE_VALUE,&#xD;&#xA; SBA.BENEFIT_APPLICATION_ID,&#xD;&#xA; SBCD.EE_DERIVED_BENEFIT_AMOUNT,&#xD;&#xA; SBAD.BENEFIT_SUBTYPE_VALUE,&#xD;&#xA; SPBA.STARTING_TAXABLE_AMOUNT,SPBA.STARTING_NONTAXABLE_AMOUNT,&#xD;&#xA; SBCD.VESTED_EE_AMOUNT,&#xD;&#xA; SBCD.VESTED_EE_INTEREST,&#xD;&#xA; SPA.* ,&#xD;&#xA; SBCD.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA;FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)   &#xD;&#xA;  INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID  &#xD;&#xA;  INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID  &#xD;&#xA;  INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID  &#xD;&#xA;  INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL&#xD;&#xA;  LEFT OUTER JOIN SGT_BENEFIT_CALCULATION_DETAIL SBCD WITH(NOLOCK) ON SBCD.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND &#xD;&#xA; SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;  LEFT JOIN SGT_PERSON SB ON SB.PERSON_ID = SBAD.JOINT_ANNUITANT_ID&#xD;&#xA;WHERE&#xD;&#xA;(REEMPLOYED_FLAG_FROM_EADB = 'Y' OR REEMPLOYED_FLAG = 'Y')  AND&#xD;&#xA;(REEMPLOYMENT_OVERRIDE_FLAG &lt;&gt; 'Y' OR REEMPLOYMENT_OVERRIDE_FLAG IS NULL) AND&#xD;&#xA;(SPAS.SUSPENSION_STATUS_REASON_VALUE &lt;&gt; 'REE2' OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' OR SPA.RETIREE_INCR_FLAG IS NULL)&#xD;&#xA;AND ((SPBX.PLAN_ID &lt;&gt; 1 AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')) OR (SPBX.PLAN_ID = 1 AND SPAS.STATUS_VALUE NOT IN ('CNCL')))&#xD;&#xA;AND&#xD;&#xA;SP.PERSON_ID=@Person_id">
      <parameters>
        <parameter ID="@Person_id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="PayeeAccountAuditRequired" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;   spas.STATUS_VALUE,&#xA;&#x9;SP.MPI_PERSON_ID ,&#xA;&#x9;SPP.MPI_PERSON_ID ,&#xA;&#x9;SPP.MPI_PERSON_ID AS ParticipantID,&#xA;&#x9;SPA.PAYEE_ACCOUNT_ID,&#xA;&#x9;PLN.PLAN_ID,&#xA;&#x9;PLN.PLAN_CODE,&#xA;&#x9;SPA.BENEFIT_BEGIN_DATE &#xA;FROM&#xA;&#x9; SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)      &#xA;&#x9; LEFT OUTER JOIN     SGT_PERSON SP WITH(NOLOCK)  &#xA;&#x9; ON SP.PERSON_ID = SPA.PERSON_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_ORGANIZATION SO WITH(NOLOCK)  &#xA;&#x9; ON SO.ORG_ID = SPA.ORG_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK)  &#xA;&#x9; ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PAYMENT_DIRECTIVES PDS WITH(NOLOCK)  &#xA;&#x9; ON  PDS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND&#xA;&#x9; PDS.PAYMENT_DIRECTIVES_ID = (SELECT&#xA;&#x9;  Max(PAYMENT_DIRECTIVES_ID) &#xA;FROM&#xA;&#x9; SGT_PAYMENT_DIRECTIVES WITH(NOLOCK)                               &#xA;WHERE&#xA;&#x9; PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND&#xA;&#x9; IS_DELETED  = 'N' AND&#xA;&#x9; MORE_INFORMATION IS NOT NULL)   &#xA;&#x9; LEFT OUTER JOIN     SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK)  &#xA;&#x9; ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_BENEFIT_CALCULATION_DETAIL SBAC WITH(NOLOCK)  &#xA;&#x9; ON SBAC.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_BENEFIT_APPLICATION SBAPL WITH(NOLOCK)  &#xA;&#x9; ON SBAPL.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_BENEFIT_CALCULATION_HEADER SBCH WITH(NOLOCK)  &#xA;&#x9; ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBAC.BENEFIT_CALCULATION_HEADER_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK)  &#xA;&#x9; ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PERSON_ACCOUNT SPAT WITH(NOLOCK)  &#xA;&#x9; ON SPAT.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PERSON SPP WITH(NOLOCK)  &#xA;&#x9; ON SPP.PERSON_ID  = CASE WHEN  SPAT.PERSON_ID IS NULL THEN SPAT.BENEFECIARY_OF_PERSON_ID ELSE SPAT.PERSON_ID END     &#xA;&#x9; LEFT OUTER JOIN     SGT_DRO_BENEFIT_DETAILS SQAD WITH(NOLOCK)  &#xA;&#x9; ON SQAD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_QDRO_CALCULATION_DETAIL SQAC WITH(NOLOCK)  &#xA;&#x9; ON SQAC.QDRO_CALCULATION_DETAIL_ID = SPA.DRO_CALCULATION_DETAIL_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_DRO_APPLICATION SQAPL WITH(NOLOCK)  &#xA;&#x9; ON SQAPL.DRO_APPLICATION_ID = SQAD.DRO_APPLICATION_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_QDRO_CALCULATION_HEADER SQCH WITH(NOLOCK)  &#xA;&#x9; ON SQCH.QDRO_CALCULATION_HEADER_ID = SQAC.QDRO_CALCULATION_HEADER_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PLAN_BENEFIT_XR PLNBXR WITH(NOLOCK)  &#xA;&#x9; ON PLNBXR.PLAN_BENEFIT_ID =  SPA.PLAN_BENEFIT_ID     &#xA;&#x9; LEFT OUTER JOIN     SGT_PLAN PLN WITH(NOLOCK)  &#xA;&#x9; ON PLN.PLAN_ID = PLNBXR.PLAN_ID  &#xA;WHERE&#xA;&#x9; PAYEE_ACCOUNT_STATUS_ID = (SELECT&#xA;&#x9; TOP 1 PAYEE_ACCOUNT_STATUS_ID &#xA;FROM&#xA;&#x9; SGT_PAYEE_ACCOUNT_STATUS PAS1 WITH(NOLOCK)    &#xA;WHERE&#xA;&#x9; PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xA;ORDER BY     PAS1.STATUS_EFFECTIVE_DATE DESC) AND&#xA;&#x9;    sp.person_id = @PersonId AND&#xA;&#x9; pln.plan_id = @PlanId AND&#xA;&#x9; spa.benefit_account_type_value = 'RTMT' &#xA;ORDER BY     RETIREE_INCR_FLAG,&#xA;&#x9;ONETIME_PAYMENT_FLAG,&#xA;&#x9;PLN.PLAN_ID,&#xA;&#x9;SPA.PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PersonId" sfwDataType="int" />
        <parameter ID="@PlanId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="PayeeAccountApproved" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;   spas.STATUS_VALUE,&#xA;&#x9; SP.MPI_PERSON_ID ,&#xA;&#x9;SPP.MPI_PERSON_ID ,&#xA;&#x9;SPP.MPI_PERSON_ID AS ParticipantID,&#xA;&#x9;SPA.PAYEE_ACCOUNT_ID,&#xA;&#x9;PLN.PLAN_ID,&#xA;&#x9;PLN.PLAN_CODE,&#xA;&#x9;SPA.BENEFIT_BEGIN_DATE&#xA;FROM&#xA;&#x9; SGT_PAYEE_ACCOUNT SPA    &#xA;&#x9; LEFT OUTER JOIN   SGT_PERSON SP WITH(NOLOCK) &#xA;&#x9; ON SP.PERSON_ID = SPA.PERSON_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_ORGANIZATION SO WITH(NOLOCK) &#xA;&#x9; ON SO.ORG_ID = SPA.ORG_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) &#xA;&#x9; ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PAYMENT_DIRECTIVES PDS WITH(NOLOCK) &#xA;&#x9; ON  PDS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND&#xA;&#x9; PDS.PAYMENT_DIRECTIVES_ID = (SELECT&#xA;&#x9;  Max(PAYMENT_DIRECTIVES_ID) &#xA;FROM&#xA;&#x9; SGT_PAYMENT_DIRECTIVES WITH(NOLOCK)                              &#xA;WHERE&#xA;&#x9; PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND&#xA;&#x9; IS_DELETED  = 'N' AND&#xA;&#x9; MORE_INFORMATION IS NOT NULL) &#xA;&#x9; LEFT OUTER JOIN   SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) &#xA;&#x9; ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_BENEFIT_CALCULATION_DETAIL SBAC WITH(NOLOCK) &#xA;&#x9; ON SBAC.BENEFIT_CALCULATION_DETAIL_ID = SPA.BENEFIT_CALCULATION_DETAIL_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_BENEFIT_APPLICATION SBAPL WITH(NOLOCK) &#xA;&#x9; ON SBAPL.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_BENEFIT_CALCULATION_HEADER SBCH WITH(NOLOCK) &#xA;&#x9; ON SBCH.BENEFIT_CALCULATION_HEADER_ID = SBAC.BENEFIT_CALCULATION_HEADER_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) &#xA;&#x9; ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PERSON_ACCOUNT SPAT WITH(NOLOCK) &#xA;&#x9; ON SPAT.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PERSON SPP WITH(NOLOCK) &#xA;&#x9; ON SPP.PERSON_ID  = CASE WHEN  SPAT.PERSON_ID IS NULL THEN SPAT.BENEFECIARY_OF_PERSON_ID ELSE SPAT.PERSON_ID END   &#xA;&#x9; LEFT OUTER JOIN   SGT_DRO_BENEFIT_DETAILS SQAD WITH(NOLOCK) &#xA;&#x9; ON SQAD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_QDRO_CALCULATION_DETAIL SQAC WITH(NOLOCK) &#xA;&#x9; ON SQAC.QDRO_CALCULATION_DETAIL_ID = SPA.DRO_CALCULATION_DETAIL_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_DRO_APPLICATION SQAPL WITH(NOLOCK) &#xA;&#x9; ON SQAPL.DRO_APPLICATION_ID = SQAD.DRO_APPLICATION_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_QDRO_CALCULATION_HEADER SQCH WITH(NOLOCK) &#xA;&#x9; ON SQCH.QDRO_CALCULATION_HEADER_ID = SQAC.QDRO_CALCULATION_HEADER_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PLAN_BENEFIT_XR PLNBXR WITH(NOLOCK) &#xA;&#x9; ON PLNBXR.PLAN_BENEFIT_ID =  SPA.PLAN_BENEFIT_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PLAN PLN WITH(NOLOCK) &#xA;&#x9; ON PLN.PLAN_ID = PLNBXR.PLAN_ID  &#xA;WHERE&#xA;&#x9; PAYEE_ACCOUNT_STATUS_ID = (SELECT&#xA;&#x9; TOP 1 PAYEE_ACCOUNT_STATUS_ID &#xA;FROM&#xA;&#x9; SGT_PAYEE_ACCOUNT_STATUS PAS1 WITH(NOLOCK)   &#xA;WHERE&#xA;&#x9; PAS1.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID &#xA;ORDER BY   PAS1.STATUS_EFFECTIVE_DATE DESC) AND&#xA;    sp.person_id = @PersonId AND&#xA;&#x9; pln.plan_id = @PlanId AND&#xA;&#x9; SBAPL.BENEFIT_APPLICATION_ID=@BenefitApplicationId AND&#xA;&#x9; spa.benefit_account_type_value = 'RTMT'&#xA;&#x9; AND  spas.STATUS_VALUE = 'APRD'&#xA;ORDER BY   RETIREE_INCR_FLAG,&#xA;&#x9;ONETIME_PAYMENT_FLAG,&#xA;&#x9;PLN.PLAN_ID,&#xA;&#x9;SPA.PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PersonId" sfwDataType="int" />
        <parameter ID="@PlanId" sfwDataType="int" />
        <parameter ID="@BenefitApplicationId" sfwDataType="int" />
      </parameters>
    </query>
  </queries>
  <attributes>
    <attribute sfwValue="payee_account_id" sfwType="Column" sfwKeyNo="1" sfwIsIdentity="True" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="PayeeAccountId" sfwIsSequence="False" sfwCaption="ID" />
    <attribute sfwValue="person_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="PersonId" sfwIsSequence="False" sfwCaption="Person Id" />
    <attribute sfwValue="org_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="OrgId" sfwIsSequence="False" sfwCaption="Org Id" />
    <attribute sfwValue="benefit_application_detail_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="BenefitApplicationDetailId" sfwIsSequence="False" sfwCaption="Benefit Application Detail Id" />
    <attribute sfwValue="benefit_calculation_detail_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="BenefitCalculationDetailId" sfwIsSequence="False" sfwCaption="Benefit Calculation Detail Id" />
    <attribute sfwValue="dro_application_detail_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="DroApplicationDetailId" sfwIsSequence="False" sfwCaption="Dro Application Detail Id" />
    <attribute sfwValue="dro_calculation_detail_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="DroCalculationDetailId" sfwIsSequence="False" sfwCaption="Dro Calculation Detail Id" />
    <attribute sfwValue="payee_benefit_account_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="PayeeBenefitAccountId" sfwIsSequence="False" sfwCaption="Payee Benefit Account Id" />
    <attribute sfwType="Description" ID="BenefitAccountTypeDescription" sfwCaption="Benefit Account Type" sfwValue="benefit_account_type_description" />
    <attribute sfwValue="benefit_account_type_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="BenefitAccountTypeId" sfwCodeID="1502" sfwIsSequence="False" sfwCaption="Benefit Account Type" />
    <attribute sfwValue="benefit_account_type_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="BenefitAccountTypeValue" sfwIsSequence="False" sfwCaption="Benefit Account Type" />
    <attribute sfwType="Description" ID="RetirementTypeDescription" sfwCaption="Retirement Type" sfwValue="retirement_type_description" />
    <attribute sfwValue="retirement_type_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="RetirementTypeId" sfwCodeID="1501" sfwIsSequence="False" sfwCaption="Retirement Type" />
    <attribute sfwValue="retirement_type_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="RetirementTypeValue" sfwIsSequence="False" sfwCaption="Retirement Type" />
    <attribute sfwValue="benefit_begin_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="BenefitBeginDate" sfwIsSequence="False" sfwCaption="Benefit Begin Date" />
    <attribute sfwValue="benefit_end_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="BenefitEndDate" sfwIsSequence="False" sfwCaption="Benefit End Date" />
    <attribute sfwType="Description" ID="AccountRelationDescription" sfwCaption="Account Relation" sfwValue="account_relation_description" />
    <attribute sfwValue="account_relation_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="AccountRelationId" sfwCodeID="2003" sfwIsSequence="False" sfwCaption="Account Relation" />
    <attribute sfwValue="account_relation_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="AccountRelationValue" sfwIsSequence="False" sfwCaption="Account Relation" />
    <attribute sfwType="Description" ID="FamilyRelationDescription" sfwCaption="Family Relation" sfwValue="family_relation_description" />
    <attribute sfwValue="family_relation_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="FamilyRelationId" sfwCodeID="6000" sfwIsSequence="False" sfwCaption="Family Relation" />
    <attribute sfwValue="family_relation_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="FamilyRelationValue" sfwIsSequence="False" sfwCaption="Family Relation" />
    <attribute sfwValue="minimum_guarantee_amount" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="MinimumGuaranteeAmount" sfwIsSequence="False" sfwCaption="Minimum Guarantee Amount" />
    <attribute sfwValue="nontaxable_beginning_balance" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="NontaxableBeginningBalance" sfwIsSequence="False" sfwCaption="Nontaxable Beginning Balance" />
    <attribute sfwValue="plan_benefit_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="PlanBenefitId" sfwIsSequence="False" sfwCaption="Plan Benefit Id" />
    <attribute sfwValue="term_certain_end_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="TermCertainEndDate" sfwIsSequence="False" sfwCaption="Term Certain End Date" />
    <attribute sfwValue="created_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="False" ID="CreatedBy" sfwIsSequence="False" sfwCaption="Created By" />
    <attribute sfwValue="created_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="False" ID="CreatedDate" sfwIsSequence="False" sfwCaption="Created Date" />
    <attribute sfwValue="modified_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="False" ID="ModifiedBy" sfwIsSequence="False" sfwCaption="Modified By" />
    <attribute sfwValue="modified_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="False" ID="ModifiedDate" sfwIsSequence="False" sfwCaption="Modified Date" />
    <attribute sfwValue="update_seq" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="UpdateSeq" sfwIsSequence="False" sfwCaption="Update Seq" />
    <attribute sfwValue="transfer_org_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="TransferOrgId" sfwIsSequence="False" sfwCaption="Transfer Org Id" />
    <attribute sfwValue="verified_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="VerifiedFlag" sfwIsSequence="False" sfwCaption="Verified Flag" />
    <attribute sfwValue="adjustment_payment_eligible_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="AdjustmentPaymentEligibleFlag" sfwIsSequence="False" sfwCaption="Adjustment Payment Eligible Flag" />
    <attribute sfwValue="include_in_adhoc_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="IncludeInAdhocFlag" sfwIsSequence="False" sfwCaption="Include In Adhoc Flag" />
    <attribute sfwValue="review_payee_acc_for_retiree_inc_form" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="ReviewPayeeAccForRetireeIncForm" sfwIsSequence="False" sfwCaption="Review Payee Acc For Retiree Inc Form" />
    <attribute sfwValue="reemployed_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="ReemployedFlag" sfwIsSequence="False" sfwCaption="Reemployed Flag" />
    <attribute sfwValue="reference_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="ReferenceId" sfwIsSequence="False" sfwCaption="Reference Id" />
    <attribute sfwValue="reemployed_flag_from_eadb" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="ReemployedFlagFromEadb" sfwIsSequence="False" sfwCaption="Reemployed Flag From Eadb" />
    <attribute sfwValue="reemployed_flag_as_of_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="ReemployedFlagAsOfDate" sfwIsSequence="False" sfwCaption="Reemployed Flag As Of Date" />
    <attribute sfwValue="disability_conversion_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="DisabilityConversionFlag" sfwIsSequence="False" sfwCaption="Disability Conversion Flag" />
    <attribute sfwValue="accrued_benefit_to_be_paid_reeval_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="AccruedBenefitToBePaidReevalFlag" sfwIsSequence="False" sfwCaption="Accrued Benefit To Be Paid Reeval Flag" />
    <attribute sfwValue="reemployment_override_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="ReemploymentOverrideFlag" sfwIsSequence="False" sfwCaption="Reemployment Override Flag" />
    <attribute sfwValue="unreduced_benefit_amount" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="UnreducedBenefitAmount" sfwIsSequence="False" sfwCaption="Unreduced Benefit Amount" />
    <attribute sfwValue="ee_derived_benefit_amount" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="EeDerivedBenefitAmount" sfwIsSequence="False" sfwCaption="Ee Derived Benefit Amount" />
    <attribute sfwValue="remaining_non_taxable_from_conversion" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="RemainingNonTaxableFromConversion" sfwIsSequence="False" sfwCaption="Remaining Non Taxable From Conversion" />
    <attribute sfwValue="retiree_incr_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="RetireeIncrFlag" sfwIsSequence="False" sfwCaption="Retiree Incr Flag" />
    <attribute sfwValue="adverse_interest_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="AdverseInterestFlag" sfwIsSequence="False" sfwCaption="Adverse Interest Verified Flag" />
    <attribute sfwValue="transfer_org_contact_name" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="TransferOrgContactName" sfwIsSequence="False" sfwCaption="Transfer Org Contact Name" />
    <attribute sfwValue="verified_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="VerifiedBy" sfwCaption="Verified By" />
    <attribute sfwValue="verified_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="VerifiedDate" sfwCaption="Verified Date" />
    <attribute ID="objOrganization" sfwType="Object" sfwEntity="entOrganization" sfwValue="ibusOrganization" />
    <attribute ID="objPayee" sfwType="Object" sfwEntity="entPerson" sfwValue="ibusPayee" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountAchDetail" ID="lstPayeeAccountAchDetail" sfwValue="iclbPayeeAccountAchDetail" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountDeduction" ID="lstPayeeAccountDeduction" sfwValue="iclbPayeeAccountDeduction" />
    <attribute ID="objParticipant" sfwType="Object" sfwEntity="entPerson" sfwValue="ibusParticipant" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitOption" sfwValue="icdoPayeeAccount.istrBenefitOption" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitOptionPercent" sfwValue="istrBenefitOptionPercent" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPlanDescription" sfwValue="icdoPayeeAccount.istrPlanDescription" />
    <attribute ID="objBenefitApplication" sfwType="Object" sfwEntity="entBenefitApplication" sfwValue="ibusBenefitApplication" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeStatus" sfwValue="istrPayeeStatus" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintBenefitApplicationID" sfwValue="icdoPayeeAccount.iintBenefitApplicationID" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintDROApplicationID" sfwValue="icdoPayeeAccount.iintDROApplicationID" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintBenefitCalculationID" sfwValue="icdoPayeeAccount.iintBenefitCalculationID" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintDROCalculationID" sfwValue="icdoPayeeAccount.iintDROCalculationID" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRemainingMinimumGuaranteeAmount" sfwValue="idecRemainingMinimumGuaranteeAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRemainingNonTaxableBeginningBalance" sfwValue="idecRemainingNonTaxableBeginningBalance" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMoreInformation" sfwValue="istrMoreInformation" />
    <attribute ID="objPayeeBenefitAccount" sfwType="Object" sfwEntity="entPayeeBenefitAccount" sfwValue="ibusPayeeBenefitAccount" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtRetireMentDate" sfwValue="icdoPayeeAccount.idtRetireMentDate" />
    <attribute ID="objBenefitCalculationHeader" sfwType="Object" sfwEntity="entBenefitCalculationHeader" sfwValue="ibusBenefitCalculationHeader" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtPayeeLastBenefitPaymentDate" sfwValue="idtPayeeLastBenefitPaymentDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrossBenefitAmount" sfwValue="idecGrossBenefitAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextMonthTaxable" sfwValue="idecNextMonthTaxable" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextGrossPaymentACH" sfwValue="idecNextGrossPaymentACH" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextMonthNonTaxable" sfwValue="idecNextMonthNonTaxable" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRetroAdjustmentAmount" sfwValue="idecRetroAdjustmentAmount" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtNextBenefitPaymentDate" sfwValue="idtNextBenefitPaymentDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWithholdingPercentage" sfwValue="idecWithholdingPercentage" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeBreakDownChequeAChHeader" sfwValue="istrPayeeBreakDownChequeAChHeader" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextGrossPaymentRollOver" sfwValue="idecNextGrossPaymentRollOver" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRetroSpkAmount" sfwValue="idecRetroSpkAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextNetPaymentRollOver" sfwValue="idecNextNetPaymentRollOver" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRetroSpkFederalTaxWithHolding" sfwValue="idecRetroSpkFederalTaxWithHolding" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecFederalTaxWithHolding" sfwValue="idecFederalTaxWithHolding" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRetroSpkStateTaxWithHolding" sfwValue="idecRetroSpkStateTaxWithHolding" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecStateTaxWithHolding" sfwValue="idecStateTaxWithHolding" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRetroSpkNextNetPaymentACH" sfwValue="idecRetroSpkNextNetPaymentACH" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecDeduction" sfwValue="idecDeduction" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPensionReceivable" sfwValue="idecPensionReceivable" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextNetPaymentACH" sfwValue="idecNextNetPaymentACH" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountTaxWithholding" ID="lstPayeeAccountTaxWithholding" sfwValue="iclbPayeeAccountTaxWithholding" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountRolloverDetail" ID="lstPayeeAccountRolloverDetail" sfwValue="iclbPayeeAccountRolloverDetail" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrOrgMPID" sfwValue="icdoPayeeAccount.istrOrgMPID" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrOrgName" sfwValue="istrOrgName" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountRetroPayment" ID="lstPayeeAccountRetroPayment" sfwValue="iclbPayeeAccountRetroPayment" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountBenefitOverpayment" ID="lstPayeeAccountBenefitOverpayment" sfwValue="iclbPayeeAccountBenefitOverpayment" />
    <attribute sfwType="Collection" sfwEntity="entRepaymentSchedule" ID="lstRepaymentSchedule" sfwValue="iclbRepaymentSchedule" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountStatus" ID="lstPayeeAccountStatus" sfwValue="iclbPayeeAccountStatus" />
    <attribute sfwType="Collection" sfwEntity="entWithholdingInformation" ID="lstWithholdingInformation" sfwValue="iclbWithholdingInformation" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaidGrossAmount" sfwValue="idecPaidGrossAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaidTaxableAmount" sfwValue="idecPaidTaxableAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaidNonTaxableAmount" sfwValue="idecPaidNonTaxableAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaidTaxableRolloverAmount" sfwValue="idecPaidTaxableRolloverAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaidNonTaxableRolloverAmount" sfwValue="idecPaidNonTaxableRolloverAmount" />
    <attribute sfwType="Collection" sfwEntity="entPaymentHistoryHeader" ID="lstPaymentHistoryHeaderDetails" sfwValue="iclbPaymentHistoryHeaderDetails" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtIAPHardshipPaymentCheckDate" sfwValue="idtIAPHardshipPaymentCheckDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIAPPaybackStatus" sfwValue="istrIAPPaybackStatus" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPaybackPaymentsReceived" sfwValue="idecIAPPaybackPaymentsReceived" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtIAPPaybackMaximumDueDate" sfwValue="idtIAPPaybackMaximumDueDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPaybackRemainingUnPaidBalance" sfwValue="idecIAPPaybackRemainingUnPaidBalance" />
    <attribute sfwType="Collection" sfwEntity="entIapHardshipPayback" ID="lstIAPHardshipPayback" sfwValue="iclbIAPHardshipPayback" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSpecialInstructions" sfwValue="istrSpecialInstructions" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtAdhocPaymentDate" sfwValue="idtAdhocPaymentDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrModifiedBy" sfwValue="istrModifiedBy" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtLatestPaymentDirectiveCycleDate" sfwValue="idtLatestPaymentDirectiveCycleDate" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IstrWithdrawalPaymentDate" sfwValue="istrWithdrawalPaymentDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IdtPaymentCycleDate" sfwValue="idtPaymentCycleDate" />
    <attribute sfwType="Object" sfwEntity="entPayeeAccount" ID="obj" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintDeletedPaymentDirectiveId" sfwValue="iintDeletedPaymentDirectiveId" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrQualifiedSpouse" sfwValue="istrQualifiedSpouse" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintPlanId" sfwValue="icdoPayeeAccount.iintPlanId" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitOptionValue" sfwValue="icdoPayeeAccount.istrBenefitOptionValue" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaymentHistoryDetailGrossAmount" sfwValue="idecPaymentHistoryDetailGrossAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPaymentHistoryDetailGrossAmountAfterRollover" sfwValue="idecPaymentHistoryDetailGrossAmountAfterRollover" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrossAmt" sfwValue="icdoPayeeAccount.idecGrossAmt" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecFederalTax" sfwValue="icdoPayeeAccount.idecFederalTax" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecStateTax" sfwValue="icdoPayeeAccount.idecStateTax" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecDeductionAmt" sfwValue="icdoPayeeAccount.idecDeductionAmt" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNetAmount" sfwValue="icdoPayeeAccount.idecNetAmount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRolloverEligible" sfwValue="icdoPayeeAccount.istrRolloverEligible" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtRolloverCraetedDate" sfwValue="icdoPayeeAccount.idtRolloverCraetedDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeAccountCurrentStatus" sfwValue="icdoPayeeAccount.istrPayeeAccountCurrentStatus" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMonthlyPayeeAccountCurrentStatus" sfwValue="icdoPayeeAccount.istrMonthlyPayeeAccountCurrentStatus" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeName" sfwValue="icdoPayeeAccount.istrPayeeName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrParticipantName" sfwValue="icdoPayeeAccount.istrParticipantName" />
    <attribute ID="objCurrentPayeeAccount" sfwType="Object" sfwEntity="entPayeeAccountStatus" sfwValue="ibusCurrentPayeeAccount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrStatusDesc" sfwValue="icdoPayeeAccount.istrStatusDesc" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMPID" sfwValue="icdoPayeeAccount.istrMPID" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCurrentDate" sfwValue="istrCurrentDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIAPHardshipPaymentCheckDate" sfwValue="istrIAPHardshipPaymentCheckDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIAPPaybackMaximumDueDate" sfwValue="istrIAPPaybackMaximumDueDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2020Amount" sfwValue="idecIAPPayback2020Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2021Amount" sfwValue="idecIAPPayback2021Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2022Amount" sfwValue="idecIAPPayback2022Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2023Amount" sfwValue="idecIAPPayback2023Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2025Amount" sfwValue="idecIAPPayback2025Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2026Amount" sfwValue="idecIAPPayback2026Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2027Amount" sfwValue="idecIAPPayback2027Amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPayback2028Amount" sfwValue="idecIAPPayback2028Amount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNextBenefitPaymentDate" sfwValue="istrNextBenefitPaymentDate" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintIsRetrUnreducesLess65" sfwValue="aintIsRetrUnreducesLess65" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrStatusEffectiveDate" sfwValue="istrStatusEffectiveDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrLastBenefitPaymentDate" sfwValue="istrLastBenefitPaymentDate" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintPatrticpant" sfwValue="aintPatrticpant" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintNoOverPayement" sfwValue="aintNoOverPayement" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrDOD" sfwValue="istrDOD" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMonthEndDate" sfwValue="istrMonthEndDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNetBenefitAmt" sfwValue="idecNetBenefitAmt" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIsReclaimedFail" sfwValue="istrIsReclaimedFail" />
    <attribute sfwDataType="boolean" sfwType="Property" ID="IblnIsReportedBy" sfwValue="iblnIsReportedBy" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrReportedBy" sfwValue="istrReportedBy" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrReportedByInProper" sfwValue="istrReportedByInProper" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrDistrbutionStatus" sfwValue="istrDistrbutionStatus" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrStdPayeeFullName" sfwValue="istrStdPayeeFullName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrStdPayeeNameInProperCase" sfwValue="istrStdPayeeNameInProperCase" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAddress1" sfwValue="istrAddress1" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAddress2" sfwValue="istrAddress2" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCountryDescription" sfwValue="istrCountryDescription" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeDomesticStateIntlCountry" sfwValue="istrPayeeDomesticStateIntlCountry" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintPayeeIsUSA" sfwValue="iintPayeeIsUSA" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRetirementDate" sfwValue="istrRetirementDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRetirementMonthYear" sfwValue="istrRetirementMonthYear" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNextMonthAfterRetirementDate" sfwValue="istrNextMonthAfterRetirementDate" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintAchPresent" sfwValue="aintAchPresent" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintWithHoldingPresent" sfwValue="aintWithHoldingPresent" />
    <attribute sfwDataType="int" sfwType="Property" ID="AinthealthEligibleFlag" sfwValue="ainthealthEligibleFlag" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintHasRetirementHealthDate" sfwValue="aintHasRetirementHealthDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefirBeginDate" sfwValue="istrBenefirBeginDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRecepientName" sfwValue="istrRecepientName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAddrLine1" sfwValue="istrAddrLine1" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAddrLine2" sfwValue="istrAddrLine2" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrZipCode" sfwValue="istrZipCode" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCountryValue" sfwValue="istrCountryValue" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRecepientNameInProperCase" sfwValue="istrRecepientNameInProperCase" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeFullName" sfwValue="istrPayeeFullName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeNameProperCase" sfwValue="istrPayeeNameProperCase" />
    <attribute sfwDataType="boolean" sfwType="Property" ID="IblnIsBatch" sfwValue="iblnIsBatch" />
    <attribute sfwType="Collection" sfwEntity="entPaymentHistoryDistribution" ID="lstPaymentHistoryDistribution" sfwValue="iclbPaymentHistoryDistribution" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPAmount" sfwValue="idecIAPAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecFinalMonthlyBenefit" sfwValue="idecFinalMonthlyBenefit" />
    <attribute sfwDataType="int" sfwType="Property" ID="IstrBenefitOptionValueData" sfwValue="icdoPayeeAccount.istrBenefitOptionValueData" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitOptionJNS50" sfwValue="icdoPayeeAccount.istrBenefitOptionJNS50" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAddrLine3" sfwValue="istrAddrLine3" />
    <attribute sfwDataType="int" sfwType="Property" ID="LintCountryValue" sfwValue="lintCountryValue" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintCheckNumber" sfwValue="iintCheckNumber" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrEmployerName" sfwValue="istrEmployerName" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPHours4QtrAlloc" sfwValue="idecIAPHours4QtrAlloc" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtToDate" sfwValue="idtToDate" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtVerificationHoursEffectiveDate" sfwValue="idtVerificationHoursEffectiveDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="Istr30DaysAfterCurrDate" sfwValue="istr30DaysAfterCurrDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrossAmount" sfwValue="idecGrossAmount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRetroStartDate" sfwValue="istrRetroStartDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCheckDate" sfwValue="istrCheckDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrTransferOrgContactName" sfwValue="istrTransferOrgContactName" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIndividualAccPlanBalance" sfwValue="idecIndividualAccPlanBalance" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrossAmountAfterRollover" sfwValue="idecGrossAmountAfterRollover" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCity1" sfwValue="istrCity1" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrState" sfwValue="istrState" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPostalCode" sfwValue="istrPostalCode" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccount" ID="lstPayeeAccountForTable" sfwValue="iclbPayeeAccountForTable" />
    <attribute sfwDataType="string" sfwType="Property" ID="Istr1" sfwValue="istr1" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrToDate" sfwValue="istrToDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecLevyAmount" sfwValue="idecLevyAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecDefaultPayment" sfwValue="idecDefaultPayment" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecMonthlyBenefitPlusRetroActive" sfwValue="idecMonthlyBenefitPlusRetroActive" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtOriginalRetirementDate" sfwValue="idtOriginalRetirementDate" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtMinimumDistributionDate" sfwValue="idtMinimumDistributionDate" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtAdjustedRetirementDate" sfwValue="idtAdjustedRetirementDate" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtPaymentAdjustmentDate" sfwValue="idtPaymentAdjustmentDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumTotalShudHvPaid" sfwValue="idecSumTotalShudHvPaid" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumActuallyPaidForMonth" sfwValue="idecSumActuallyPaidForMonth" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumOverUnderPaymentPerMonth" sfwValue="idecSumOverUnderPaymentPerMonth" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumTotal" sfwValue="idecSumTotal" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumPayableForTheMonth" sfwValue="idecSumPayableForTheMonth" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumReimbrAmtInCurrentMonth" sfwValue="idecSumReimbrAmtInCurrentMonth" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrandTotal" sfwValue="idecGrandTotal" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrandTotalPayableForMonth" sfwValue="idecGrandTotalPayableForMonth" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrandTotalReimbrAmt" sfwValue="idecGrandTotalReimbrAmt" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecFlatPercent" sfwValue="idecFlatPercent" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecMonthlyAmtOfReduction" sfwValue="idecMonthlyAmtOfReduction" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumEEDerivedShudHvPaid" sfwValue="idecSumEEDerivedShudHvPaid" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumERDerivedShudHvPaid" sfwValue="idecSumERDerivedShudHvPaid" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumEEDerived" sfwValue="idecSumEEDerived" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecSumERDerived" sfwValue="idecSumERDerived" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtEstimatedEndDate" sfwValue="idtEstimatedEndDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecRetireeIncAmount" sfwValue="idecRetireeIncAmount" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintPlanYear" sfwValue="iintPlanYear" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrShowRollOver" sfwValue="istrShowRollOver" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCurrentDatePlus32Days" sfwValue="istrCurrentDatePlus32Days" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintRoutingNumber" sfwValue="iintRoutingNumber" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAccountNumber" sfwValue="istrAccountNumber" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecOverPaymentRepaid" sfwValue="idecOverPaymentRepaid" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintOverPaymentPriorPlanYear" sfwValue="aintOverPaymentPriorPlanYear" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintRetirementDateYear" sfwValue="aintRetirementDateYear" />
    <attribute sfwDataType="int" sfwType="Property" ID="LintAgeIndec" sfwValue="lintAgeIndec" />
    <attribute sfwType="CDOCollection" sfwEntity="entDummyWorkData" ID="lstPersonWorkHistory" sfwValue="iclbPersonWorkHistory" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrStateDescription" sfwValue="istrStateDescription" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecNextAmtDue" sfwValue="idecNextAmtDue" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMonthAftrEstimEndDate" sfwValue="istrMonthAftrEstimEndDate" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintCheckUVHP" sfwValue="aintCheckUVHP" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrDistributionType" sfwValue="istrDistributionType" />
    <attribute sfwDataType="int" sfwType="Property" ID="Aintretireeincr" sfwValue="aintretireeincr" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecGrossBenefitAmt" sfwValue="idecGrossBenefitAmt" />
    <attribute sfwDataType="int" sfwType="Property" ID="AintIAPflg" sfwValue="aintIAPflg" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecPreviousMonthlyGrossAmt" sfwValue="idecPreviousMonthlyGrossAmt" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecChangeInMonthlyGrossAmt" sfwValue="idecChangeInMonthlyGrossAmt" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtRetirementDate1" sfwValue="idtRetirementDate" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtLastBenefitPaymentDate" sfwValue="idtLastBenefitPaymentDate" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintMonthDiff" sfwValue="iintMonthDiff" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCheckPayeeRetroAdjustAmount" sfwValue="istrCheckPayeeRetroAdjustAmount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAnnunityName" sfwValue="istrAnnunityName" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecTotalAmount" sfwValue="idecTotalAmount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIAP" sfwValue="istrIAP" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRetro" sfwValue="istrRetro" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrACH" sfwValue="istrACH" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIAPPaybackLastChkNum" sfwValue="istrIAPPaybackLastChkNum" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtIAPPaybackLastChkDt" sfwValue="idtIAPPaybackLastChkDt" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPPaybackLastChkAmt" sfwValue="idecIAPPaybackLastChkAmt" />
    <attribute sfwDataType="int" sfwType="Property" ID="Aintmdflag" sfwValue="aintmdflag" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrDisabilityConvDate" sfwValue="istrDisabilityConvDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecReemploymentCreditedHours" sfwValue="idecReemploymentCreditedHours" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintReemploymentYear" sfwValue="iintReemploymentYear" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRolloverOrgName" sfwValue="istrRolloverOrgName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsRolloverOrgExists" sfwValue="isRolloverOrgExists" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsCOVID19PayFlag" sfwValue="isCOVID19PayFlag" />
    <attribute sfwDataType="string" sfwType="Property" ID="IblnAdjustmentPaymentEliglbleFlag" sfwValue="iblnAdjustmentPaymentEliglbleFlag" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrChildSupportBenefitStartDate" sfwValue="istrChildSupportBenefitStartDate" />
    <attribute ID="lstIAPPaybacksSummary" sfwType="Collection" sfwValue="iclbIAPPaybacksSummary" sfwEntity="entIapHardshipPayback" />
    <attribute ID="lstBenfError" sfwType="Collection" sfwValue="iclbBenfErrors" sfwEntity="entError" sfwPrivate="False" />
    <attribute sfwValue="converted_to_life_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="date" sfwDBDataType="date" sfwIsNull="True" ID="ConvertedToLifeDate" sfwCaption="Converted To Life Date" />
    <attribute sfwValue="onetime_payment_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="OnetimePaymentFlag" sfwIsSequence="False" sfwCaption="One time Payment Flag" />
    <attribute ID="IstrFundTypeorPlanCode" sfwDataType="string" sfwPrivate="False" sfwValue="istrFundTypeorPlanCode" sfwType="Property" />
    <attribute ID="IstrOrgAddress" sfwDataType="string" sfwPrivate="False" sfwValue="istrOrgAddress" sfwType="Property" />
    <attribute ID="IstrOrgAddress2" sfwDataType="string" sfwPrivate="False" sfwValue="istrOrgAddress2" sfwType="Property" />
    <attribute ID="IstrOrgCity" sfwDataType="string" sfwPrivate="False" sfwValue="istrOrgCity" sfwType="Property" />
    <attribute ID="IntSpouseConsent" sfwDataType="int" sfwPrivate="False" sfwValue="aintSpouseConsent" sfwType="Property" />
    <attribute sfwType="Collection" sfwEntity="entPayeeAccountWireDetail" ID="lstPayeeAccountWireDetail" sfwValue="iclbPayeeAccountWireDetail" />
    <attribute ID="IstrPaymentDate" sfwDataType="string" sfwValue="istrPaymentDate" sfwType="Property" />
    <attribute ID="IntIAPPlan" sfwDataType="int" sfwPrivate="False" sfwValue="aintIAPPlan" sfwType="Property" />
    <attribute ID="strBenefitOptionValueIAP" sfwDataType="string" sfwPrivate="False" sfwValue="strBenefitOptionValueIAP" sfwType="Property" />
    <attribute ID="BenefitDistributionType" sfwDataType="string" sfwPrivate="False" sfwValue="istrBenefitDistributionType" sfwType="Property" />
    <attribute ID="IstrRelativeVipFlag" sfwDataType="string" sfwPrivate="False" sfwValue="icdoPayeeAccount.istrRelativeVipFlag" sfwType="Property" />
    <attribute ID="lstParticipantAddress" sfwType="Collection" sfwValue="iclbParticipantAddress" sfwEntity="entPersonAddress" sfwPrivate="False" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNewAddress" sfwValue="istrNewAddress" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPreviousAddress" sfwValue="istrPreviousAddress" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrFullStateDescription" sfwValue="istrFullStateDescription" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMandatoryState" sfwValue="istrMandatoryState" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNonMandatoryState" sfwValue="istrNonMandatoryState" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNewState" sfwValue="istrNewState" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPrevState" sfwValue="istrPrevState" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="LdecFederalTaxWithHolding" sfwValue="idecCorrFederalTaxWithHolding" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="LdecStateTaxWithHolding" sfwValue="idecCorrStateTaxWithHolding" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardTaxIdentifier" sfwValue="istrWizardTaxIdentifier" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardStateTaxIdentifier" sfwValue="istrWizardStateTaxIdentifier" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardStateDescription" sfwValue="istrWizardStateDescription" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardMinDistributionType" sfwValue="istrWizardMinDistributionType" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardMaritalStatusValue" sfwValue="istrWizardMaritalStatusValue" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardTaxOptionValue" sfwValue="istrWizardTaxOptionValue" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardStep2b3" sfwValue="idecWizardStep2b3" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardStep3" sfwValue="idecWizardStep3" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardStep4A" sfwValue="idecWizardStep4A" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardStep4B" sfwValue="idecWizardStep4B" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardStep4C" sfwValue="idecWizardStep4C" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardadditional_tax_amount" sfwValue="idecWizardadditional_tax_amount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecWizardtax_percentage" sfwValue="idecWizardtax_percentage" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IWizardtax_allowance" sfwValue="iWizardtax_allowance" />
    <attribute sfwDataType="datetime" sfwType="Property" sfwIsNull="True" ID="IdtWizardStartDate" sfwValue="idtWizardStartDate" />
    <attribute sfwDataType="datetime" sfwType="Property" sfwIsNull="True" ID="IdtWizardEndDate" sfwValue="idtWizardEndDate" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintWizardPersonlExemption" sfwValue="iintWizardPersonlExemption" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintWizardVoluntary_Withholding" sfwValue="iintWizardVoluntary_Withholding" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintWizardAgeandBlindnessExemptions" sfwValue="iintWizardAgeandBlindnessExemptions" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardPaymentMethod" sfwValue="istrWizardPaymentMethod" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardBankAccountType" sfwValue="istrWizardBankAccountType" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardAccountNumber" sfwValue="istrWizardAccountNumber" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardRoutingNumber" sfwValue="istrWizardRoutingNumber" />
    <attribute sfwDataType="datetime" sfwType="Property" sfwIsNull="True" ID="IdtWizardAchStartDate" sfwValue="dtWizardAchStartDate" />
    <attribute sfwDataType="datetime" sfwType="Property" sfwIsNull="True" ID="IdtWizardAchEnddate" sfwValue="dtWizardAchEnddate" />
    <attribute ID="IintWizardBankOrgId" sfwDataType="int" sfwValue="iintWizardBankOrgId" sfwType="Property" />
    <attribute sfwDataType="string" sfwType="Property" ID="IistrWizardPrenoteFlag" sfwValue="istrWizardPrenoteFlag" />
    <attribute sfwDataType="datetime" sfwType="Property" sfwIsNull="True" ID="IdtWizardPreNoteCompletionDate" sfwValue="dtWizardPreNoteCompletionDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrWizardJointAccountFlag" sfwValue="istrWizardJointAccountFlag" />
  </attributes>
  <objectmethods>
    <method ID="btn_DeleteWithHoldingClick" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aintpayee_account_tax_withholding_id" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="btn_PaySurvivor" sfwReturnType="ArrayList" />
    <method ID="btn_ReCalculateBenefits" sfwReturnType="ArrayList" />
    <method ID="btn_Convert_Benefit_Option" sfwReturnType="ArrayList" />
    <method ID="btn_Remployment" sfwReturnType="ArrayList" />
    <method ID="btn_DeleteIAPHardshipPaybackDetailClick" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aintIAPPaybackDetailID" sfwDataType="int" />
        <parameter ID="adtCheckDate" sfwDataType="String" />
        <parameter ID="astrCheckNumber" sfwDataType="String" />
        <parameter ID="adecCheckAmount" sfwDataType="String" />
      </parameters>
    </method>
    <method ID="GeneratePaymentDirective" sfwReturnType="Byte[]">
      <parameters>
        <parameter ID="adtPaymentCycleDate" sfwDataType="Collection" />
        <parameter ID="aintDeletedPaymentDirectiveId" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="btn_DeleteLatestPaymentDirective" sfwReturnType="ArrayList" />
    <method ID="GetGeneratedPaymentDirectives" sfwReturnType="Collection" sfwEntity="entPaymentDirectives" />
    <method ID="GetDeletedPaymentDirectives" sfwReturnType="Collection" sfwEntity="entPaymentDirectives" />
    <method ID="GetMaritalStatusByTaxIdentifier" sfwReturnType="Collection" sfwObjectID="cdoCodeValue" sfwEntity="entCodeValue">
      <parameters>
        <parameter ID="astrCodeValue" sfwDataType="String" />
      </parameters>
    </method>
    <method ID="GetTaxOptionsByIdentifier" sfwReturnType="Collection" sfwObjectID="cdoCodeValue" sfwEntity="entCodeValue">
      <parameters>
        <parameter ID="astrCodeValue" sfwDataType="String" />
        <parameter ID="astrdistributiontypecodevalue" sfwDataType="String" />
        <parameter ID="astrTaxWithholdId" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="ReleaseWithholding" sfwReturnType="ArrayList" />
    <method ID="Cancel_RetirementApplication_Wizard" sfwReturnType="Void">
      <parameters />
    </method>
    <method ID="AddPayeeAccountNote">
      <parameters>
        <parameter ID="aintPayeeAccountId" sfwDataType="int" />
        <parameter ID="aintPlanId" sfwDataType="int" />
      </parameters>
    </method>
  </objectmethods>
  <methods />
  <lifecycle />
  <ExtraFields />
</entity>