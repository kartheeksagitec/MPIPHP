<entity ID="entAppMonitoring" sfwView="False" sfwActive="True" sfwType="EntityRule" sfwStatus="Review" sfwObjectID="busAppMonitoring">
  <attributes>
    <attribute ID="FromDate" sfwDataType="datetime" sfwPrivate="False" sfwValue="idtFromDate" sfwType="Property" />
    <attribute ID="ToDate" sfwDataType="datetime" sfwPrivate="False" sfwValue="idtToDate" sfwType="Property" />
    <attribute ID="LastMinutes" sfwDataType="int" sfwPrivate="False" sfwValue="iintLastMinutes" sfwType="Property" />
    <attribute ID="LastDays" sfwDataType="int" sfwPrivate="False" sfwValue="iintLastDays" sfwType="Property" />
  </attributes>
  <ExtraFields />
  <queries>
    <query ID="GetSummaryByWebServer" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; web_server_name ServerName,&#xA;&#x9;     count(*) RequestCount,&#xA;&#x9;     sum(time_in_ms) / count(*) AverageResponseTime,&#xA;&#x9;     max(start_time) LastRequest,&#xA;&#x9;     min(start_time) FirstRequest,&#xA;&#x9;     sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xA;&#x9;     sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xA;&#x9;             round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn WITH(NOLOCK) ,&#xA;&#x9;    sgs_act_log WITH(NOLOCK) &#xA;WHERE&#xA;&#x9;    web_server_name is not null   AND&#xA;&#x9;     start_time between @start_time AND&#xA;&#x9;   @end_time    &#xA;GROUP BY  web_server_name &#xA;ORDER BY  4 desc" sfwOracle="SELECT web_server_name ServerName,&#xD;&#xA;&#x9;      count(*) RequestCount,&#xD;&#xA;&#x9;      round(sum(time_in_ms) / count(*),2) AverageResponseTime,&#xD;&#xA;&#x9;      max(start_time) LastRequest,&#xD;&#xA;&#x9;      min(start_time) FirstRequest,&#xD;&#xA;&#x9;      sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;&#x9;      sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xD;&#xA;        ROUND(cast(count(*) as float) / case when ((max(start_time)-min(start_time))*24*60) = 0 then 1 else ((max(start_time)-min(start_time))*24*60) end, 2) Throughput&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn,&#xD;&#xA;&#x9;     sgs_act_log&#xD;&#xA;WHERE&#xD;&#xA;&#x9;    web_server_name is not null   AND&#xD;&#xA;&#x9;     start_time between @start_time AND   @end_time     &#xD;&#xA;GROUP BY web_server_name &#xD;&#xA;ORDER BY 4 desc">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetSummarByBusinessTransaction" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; sum(time_in_ms) / count(*) ResponseTime,&#xA;&#x9;       case when charindex('(',&#xA;&#x9;action_name) &gt; 0 then left(action_name,&#xA;&#x9;charindex('(',&#xA;&#x9;action_name)-1) else action_name end + '.' +         (case when isnull(action_target,&#xA;&#x9;'') = '' then action_source else action_target end) ActionName,&#xA;&#x9;  max(time_in_ms) MaxResponseTime,&#xA;&#x9;      count(*) Calls,&#xA;&#x9;       round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) CallsPerMin,&#xA;&#x9;      sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xA;&#x9;      sum(case when time_in_ms &gt; b.TRANSACTION_HIGH_LIMIT then 1 else 0 end) SlowCount &#xA;FROM&#xA;&#x9; sgs_act_log_inst_actn WITH(NOLOCK) ,&#xA;&#x9;    sgs_act_log b WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; web_server_name is not null  AND&#xA;&#x9; start_time between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  case when charindex('(',&#xA;&#x9;action_name) &gt; 0 then left(action_name,&#xA;&#x9;charindex('(',&#xA;&#x9;action_name)-1) else action_name end + '.' +       (case when isnull(action_target,&#xA;&#x9;'') = '' then action_source else action_target  end) &#xA;ORDER BY  max(time_in_ms) desc" sfwOracle="select Round(sum(time_in_ms) / count(*),2) ResponseTime, &#xD;&#xA;       case when instr(action_name,'(') &gt; 0 then COALESCE(substr(action_name, 0,case when instr(action_name,'(') =0 then instr(action_name,'(') else instr(action_name,'(')-1 end),'') else action_name end || '.' ||  &#xD;&#xA;       (case when COALESCE(action_target,'null') = 'null' then action_source else action_target end) ActionName,&#xD;&#xA;&#x9;   max(time_in_ms) MaxResponseTime,&#xD;&#xA;       count(*) Calls, &#xD;&#xA;       Round(cast(count(*) as float) / case when ((max(start_time)- min(start_time))*24*60) = 0 then 1 else ((max(start_time) - min(start_time))*24*60) end, 2) CallsPerMin,&#xD;&#xA;       sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;       sum(case when time_in_ms &gt; b.TRANSACTION_HIGH_LIMIT then 1 else 0 end) SlowCount&#xD;&#xA;from sgs_act_log_inst_actn,&#xD;&#xA;     sgs_act_log b&#xD;&#xA;where web_server_name is not null&#xD;&#xA;  and start_time between @start_time AND @end_time&#xD;&#xA;group by case when instr(action_name,'(') &gt; 0 then COALESCE(substr(action_name, 0,case when instr(action_name,'(') =0 then instr(action_name,'(') else instr(action_name,'(')-1 end),'') else action_name end || '.' ||  &#xD;&#xA;       (case when COALESCE(action_target,'null') = 'null' then action_source else action_target end)&#xD;&#xA;order by max(time_in_ms) desc">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetSummaryByDatabaseTransaction" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; query,&#xA;&#x9;      query_hash QueryHash,&#xA;&#x9;      count(*) Calls,&#xA;&#x9;    sum(time_in_ms) / count(*) ResponseTime,&#xA;&#x9;   max(time_in_ms) MaxTime,&#xA;&#x9;      sum(case when time_in_ms &gt; b.QUERY_LIMIT then 1 else 0 end) SlowCount  &#xA;FROM&#xA;&#x9; sgv_database_transaction a WITH(NOLOCK) ,&#xA;&#x9;sgs_act_log b WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; start_time between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  query,&#xA;&#x9;query_hash &#xA;ORDER BY  max(time_in_ms) desc;" sfwOracle="select to_char(query), query_hash QueryHash, count(*) Calls, cast(sum(time_in_ms) / count(*)as DECIMAL(30,2)) ResponseTime, max(time_in_ms) MaxTime, sum(case when time_in_ms &gt; b.QUERY_LIMIT then 1 else 0 end) SlowCount&#xD;&#xA;from sgv_database_transaction a, sgs_act_log b&#xD;&#xA;where start_time between @start_time and @end_time&#xD;&#xA;group by to_char(query), query_hash&#xD;&#xA;order by max(time_in_ms) desc">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="WebSummaryChartMinute" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; format(min(start_time),&#xA;&#x9;'HH:mm') StartTime,&#xA;&#x9;   WEB_SERVER_NAME ServerName,&#xA;&#x9;   count(*) 'ReqCount',&#xA;&#x9;sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;&#x9;          sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount  &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; WEB_SERVER_NAME is not null   AND&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  WEB_SERVER_NAME,&#xA;&#x9;      DATEPART(YEAR,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(MONTH,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(DAY,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(HOUR,&#xA;&#x9; START_TIME),&#xA;&#x9;(DATEPART(MINUTE,&#xA;&#x9; START_TIME) / 1) &#xA;ORDER BY  1,&#xA;&#x9;2,&#xA;&#x9;3" sfwOracle="select to_char(start_time,'HH') StartTime, &#xD;&#xA;WEB_SERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN&#xD;&#xA;where WEB_SERVER_NAME is not null&#xD;&#xA;and START_TIME between sysdate-200 and sysdate&#xD;&#xA;group by start_time,WEB_SERVER_NAME, &#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH'),TO_CHAR(START_TIME,'MI')&#xD;&#xA;order by 1, 2, 3">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="WebSummaryChartHour" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; format(min(start_time),&#xA;&#x9;'HH') StartTime,&#xA;&#x9;   WEB_SERVER_NAME ServerName,&#xA;&#x9;   count(*) 'ReqCount',&#xA;&#x9;sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;&#x9;          sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount  &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; WEB_SERVER_NAME is not null   AND&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  WEB_SERVER_NAME,&#xA;&#x9;      DATEPART(YEAR,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(MONTH,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(DAY,&#xA;&#x9; START_TIME),&#xA;&#x9;(DATEPART(HOUR,&#xA;&#x9; START_TIME) / 1)" sfwOracle="select to_char(start_time,'HH') StartTime, &#xD;&#xA;WEB_SERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN&#xD;&#xA;where WEB_SERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,WEB_SERVER_NAME, &#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH')">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="WebSummaryChartDay" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; format(min(start_time),&#xA;&#x9;'MM/dd/yyyy') StartTime,&#xA;&#x9;   WEB_SERVER_NAME ServerName,&#xA;&#x9;   count(*) 'ReqCount',&#xA;&#x9;sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;&#x9;          sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount  &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; WEB_SERVER_NAME is not null   AND&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  WEB_SERVER_NAME,&#xA;&#x9;      DATEPART(YEAR,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(MONTH,&#xA;&#x9; START_TIME),&#xA;&#x9;(DATEPART(DAY,&#xA;&#x9; START_TIME) / 1) &#xA;ORDER BY  1,&#xA;&#x9;2,&#xA;&#x9;3" sfwOracle="select to_char(start_time,'MM/dd/yyyy') StartTime, &#xD;&#xA;WEB_SERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN&#xD;&#xA;where WEB_SERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,WEB_SERVER_NAME, &#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD')&#xD;&#xA;order by 1, 2, 3">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetSummaryByAppServer" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; appserver_name ServerName,&#xA;&#x9;            count(*) RequestCount,&#xA;&#x9;            sum(time_in_ms) / count(*) AverageResponseTime,&#xA;&#x9;            max(start_time) LastRequest,&#xA;&#x9;            min(start_time) FirstRequest,&#xA;&#x9;            sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xA;&#x9;            sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xA;&#x9;             round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK) &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time AND&#xA;&#x9;  @end_time     &#xA;GROUP BY  appserver_name     &#xA;ORDER BY  4 desc" sfwOracle="SELECT appserver_name ServerName,&#xD;&#xA;             count(*) RequestCount,&#xD;&#xA;             Round(sum(time_in_ms) / count(*),2) AverageResponseTime,&#xD;&#xA;             max(start_time) LastRequest,&#xD;&#xA;             min(start_time) FirstRequest,&#xD;&#xA;             sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xD;&#xA;             sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xD;&#xA;              Round(cast(count(*) as float) / case when ((max(start_time) - min(start_time))*24*60) = 0 then 1 else ((max(start_time)- min(start_time))*24*60) end, 2) Throughput&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step,&#xD;&#xA;&#x9;    sgs_act_log &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time AND   @end_time&#xD;&#xA;GROUP BY appserver_name     &#xD;&#xA;ORDER BY 4 desc">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="AppSummaryChartMinute" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; format(min(start_time),&#xA;&#x9;'HH:mm') StartTime,&#xA;&#x9;   APPSERVER_NAME ServerName,&#xA;&#x9;   count(*) 'ReqCount',&#xA;&#x9;sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;&#x9;          sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount  &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN_STEP WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9; APPSERVER_NAME is not null   AND&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  APPSERVER_NAME,&#xA;&#x9;     DATEPART(YEAR,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(MONTH,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(DAY,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(HOUR,&#xA;&#x9; START_TIME),&#xA;&#x9;(DATEPART(MINUTE,&#xA;&#x9; START_TIME) / 1) &#xA;ORDER BY  1,&#xA;&#x9;2,&#xA;&#x9;3" sfwOracle="select to_char(start_time,'HH:mm') StartTime, &#xD;&#xA;&#x9;   APPSERVER_NAME ServerName, &#xD;&#xA;&#x9;   count(*) ReqCount, sum(TIME_IN_MS) / count(*) ResponseTime,&#xD;&#xA;           sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xD;&#xA;  from SGS_ACT_LOG_INST_ACTN_STEP&#xD;&#xA;  where APPSERVER_NAME is not null&#xD;&#xA;   and START_TIME between sysdate-200 and sysdate&#xD;&#xA;group by start_time,APPSERVER_NAME,&#xD;&#xA;     TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH'),TO_CHAR(START_TIME,'MI')&#xD;&#xA;order by 1, 2, 3">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="AppSummaryChartHour" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; format(min(start_time),&#xA;&#x9;'HH') StartTime,&#xA;&#x9;  APPSERVER_NAME ServerName,&#xA;&#x9;          count(*) 'ReqCount',&#xA;&#x9;sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;&#x9;         sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount  &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN_STEP WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9; APPSERVER_NAME is not null   AND&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  APPSERVER_NAME,&#xA;&#x9;     DATEPART(YEAR,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(MONTH,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(DAY,&#xA;&#x9; START_TIME),&#xA;&#x9;(DATEPART(HOUR,&#xA;&#x9; START_TIME) / 1) &#xA;ORDER BY  1,&#xA;&#x9;2,&#xA;&#x9;3" sfwOracle="select to_char(start_time,'HH') StartTime, &#xD;&#xA;APPSERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN_STEP&#xD;&#xA;where APPSERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,APPSERVER_NAME,&#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH')&#xD;&#xA;order by 1, 2, 3">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="AppSummaryChartDay" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; format(min(start_time),&#xA;&#x9;'MM/dd/yyyy') StartTime,&#xA;&#x9;   APPSERVER_NAME ServerName,&#xA;&#x9;   count(*) 'ReqCount',&#xA;&#x9;sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;&#x9;          sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount  &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN_STEP WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9; APPSERVER_NAME is not null   AND&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  APPSERVER_NAME,&#xA;&#x9;     DATEPART(YEAR,&#xA;&#x9; START_TIME),&#xA;&#x9;DATEPART(MONTH,&#xA;&#x9; START_TIME),&#xA;&#x9;(DATEPART(DAY,&#xA;&#x9; START_TIME) / 1) &#xA;ORDER BY  1,&#xA;&#x9;2,&#xA;&#x9;3" sfwOracle="select to_char(start_time,'MM/dd/yyyy') StartTime, &#xD;&#xA;APPSERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN_STEP&#xD;&#xA;where APPSERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,APPSERVER_NAME,&#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD')&#xD;&#xA;order by 1, 2, 3">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetWebServerList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; web_server_name ServerName,&#xA;&#x9;     count(*) RequestCount,&#xA;&#x9;     sum(time_in_ms) / count(*) AverageResponseTime,&#xA;&#x9;     max(start_time) LastRequest,&#xA;&#x9;     min(start_time) FirstRequest,&#xA;&#x9;     sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xA;&#x9;     sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xA;&#x9;             round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput               ,&#xA;&#x9;@start_time AS 'Start_time' ,&#xA;&#x9;@end_time AS 'End_time' &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn WITH(NOLOCK) ,&#xA;&#x9;    sgs_act_log WITH(NOLOCK) &#xA;WHERE&#xA;&#x9;    web_server_name is not null   AND&#xA;&#x9;     start_time between  @start_time  AND&#xA;&#x9;  @end_time       &#xA;GROUP BY  web_server_name &#xA;ORDER BY  4 desc" sfwOracle="SELECT web_server_name ServerName,&#xD;&#xA;&#x9;      count(*) RequestCount,&#xD;&#xA;&#x9;      round(sum(time_in_ms) / count(*),2) AverageResponseTime,&#xD;&#xA;&#x9;      max(start_time) LastRequest,&#xD;&#xA;&#x9;      min(start_time) FirstRequest,&#xD;&#xA;&#x9;      sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;&#x9;      sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xD;&#xA;        ROUND(cast(count(*) as float) / case when (( max(start_time)- min(start_time))*24*60) = 0 then 1 else ((max(start_time) - min(start_time))*24*60) end, 2) Throughput&#xD;&#xA;        ,@start_time as Start_time ,&#xD;&#xA;        @end_time as End_time&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn,&#xD;&#xA;&#x9;     sgs_act_log&#xD;&#xA;WHERE&#xD;&#xA;&#x9;    web_server_name is not null   AND&#xD;&#xA;&#x9;     start_time between @start_time AND @end_time&#xD;&#xA;GROUP BY web_server_name &#xD;&#xA;ORDER BY 4 desc">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetAppServerList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; appserver_name ServerName,&#xA;&#x9;            count(*) RequestCount,&#xA;&#x9;            sum(time_in_ms) / count(*) AverageResponseTime,&#xA;&#x9;            max(start_time) LastRequest,&#xA;&#x9;            min(start_time) FirstRequest,&#xA;&#x9;            sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xA;&#x9;            sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xA;&#x9;             round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0               then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput,&#xA;&#x9;             @start_time AS 'Start_time' ,&#xA;&#x9;@end_time AS 'End_time' &#xA;FROM&#xA;&#x9;            sgs_act_log_inst_actn_step  WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time         &#xA;GROUP BY  appserver_name     &#xA;ORDER BY  4 desc" sfwOracle="SELECT appserver_name ServerName,&#xD;&#xA;             count(*) RequestCount,&#xD;&#xA;             Round(sum(time_in_ms) / count(*)) AverageResponseTime,&#xD;&#xA;             max(start_time) LastRequest,&#xD;&#xA;             min(start_time) FirstRequest,&#xD;&#xA;             sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xD;&#xA;             sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xD;&#xA;              round(cast(count(*) as binary_double) / case when (max(start_time) - min(start_time)) * 1440 = 0 &#xD;&#xA;              then 1 else (max(start_time) - min(start_time)) * 1440 end, 2) Throughput,&#xD;&#xA;              @start_time  Start_time , @end_time End_time&#xD;&#xA;FROM        &#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time         &#xD;&#xA;GROUP BY appserver_name     &#xD;&#xA;ORDER BY 4 desc">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetWebServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;             count(*) NoOfRecords ,&#xA;&#x9;'RequestCount' AS Type ,&#xA;&#x9;@start_time AS 'startDate',&#xA;&#x9;@end_time AS 'endDate' &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time   union all SELECT&#xA;&#x9;  sum(case when ERROR_FLAG is null then 0 else 1 end) NoOfRecords ,&#xA;&#x9;'ErrorCount' ,&#xA;&#x9;@start_time AS 'startDate',&#xA;&#x9;@end_time AS 'endDate' &#xA;FROM&#xA;&#x9;    SGS_ACT_LOG_INST_ACTN WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time    union all SELECT&#xA;&#x9;             sum(case when time_in_ms &gt; TRANSACTION_LIMIT then 1 else 0 end) NoOfRecords ,&#xA;&#x9;'SlowCount' ,&#xA;&#x9;@start_time,&#xA;&#x9;@end_time &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time" sfwOracle="SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;             count(*) NoOfRecords &#xD;&#xA;&#x9;&#x9;&#x9;, 'RequestCount' as Type ,@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time   &#xD;&#xA;union &#x9;all&#x9;&#xD;&#xA; SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;  sum(case when ERROR_FLAG is null then 0 else 1 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9;, 'ErrorCount' ,@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    SGS_ACT_LOG_INST_ACTN ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time    &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;union all&#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;            &#xD;&#xA;&#x9;&#x9;&#x9; sum(case when time_in_ms &gt; TRANSACTION_LIMIT then 1 else 0 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9; ,'SlowCount' ,@start_time,@end_time&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time" sfwPostgre="SELECT COUNT(*) AS noofrecords, 'RequestCount' AS type, @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_act_log_inst_actn, dbo.sgs_act_log WHERE web_server_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time  UNION ALL SELECT SUM(CASE WHEN error_flag IS NULL THEN 0 ELSE 1 END) AS noofrecords, 'ErrorCount', @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_act_log_inst_actn, dbo.sgs_act_log WHERE web_server_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time  UNION ALL SELECT SUM(CASE WHEN time_in_ms &gt; transaction_limit THEN 1 ELSE 0 END) AS noofrecords, 'SlowCount', @start_time , @end_time  FROM dbo.sgs_act_log_inst_actn, dbo.sgs_act_log WHERE web_server_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time ">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetAppServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;             count(*) NoOfRecords ,&#xA;&#x9;'RequestCount' AS Type ,&#xA;&#x9;@start_time AS 'startDate',&#xA;&#x9;@end_time AS 'endDate' &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time union all SELECT&#xA;&#x9;  sum(case when error_message is null then 0 else 1 end) NoOfRecords ,&#xA;&#x9;'ErrorCount',&#xA;&#x9;@start_time AS 'startDate',&#xA;&#x9;@end_time AS 'endDate' &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time   union all SELECT&#xA;&#x9;             sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) NoOfRecords ,&#xA;&#x9;'SlowCount',&#xA;&#x9;@start_time AS 'startDate',&#xA;&#x9;@end_time AS 'endDate' &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time" sfwOracle="SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;             count(*) NoOfRecords &#xD;&#xA;&#x9;&#x9;&#x9;, 'RequestCount' as Type ,@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time &#xD;&#xA;union &#x9;all&#x9;&#xD;&#xA; SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;  sum(case when error_message is null then 0 else 1 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9;, 'ErrorCount',@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time   &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;union all&#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;            &#xD;&#xA;&#x9;&#x9;&#x9; sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9; ,'SlowCount',@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time" sfwPostgre="SELECT COUNT(*) AS noofrecords, 'RequestCount' AS type, @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_act_log_inst_actn_step, dbo.sgs_act_log WHERE appserver_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time  UNION ALL SELECT SUM(CASE WHEN error_message IS NULL THEN 0 ELSE 1 END) AS noofrecords, 'ErrorCount', @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_act_log_inst_actn_step, dbo.sgs_act_log WHERE appserver_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time  UNION ALL SELECT SUM(CASE WHEN time_in_ms &gt; appserver_limit THEN 1 ELSE 0 END) AS noofrecords, 'SlowCount', @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_act_log_inst_actn_step, dbo.sgs_act_log WHERE appserver_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time ">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetBPMServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select  DATEPART(HOUR, START_TIME) Time,  ACTION_TYPE , count(*) Count from SGW_BPM_TRACE_INST_ACTN WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;--where START_TIME between GETDATE() -1 and GETDATE()&#xD;&#xA;&#x9;&#x9;group by  DATEPART(Hour, START_TIME) , ACTION_TYPE" sfwOracle="select  TO_NUMBER(TO_CHAR(START_TIME, 'HOUR')) Time,  ACTION_TYPE , count(*) Count from SGW_BPM_TRACE_INST_ACTN &#xD;&#xA;&#x9;&#x9;group by  TO_NUMBER(TO_CHAR(START_TIME, 'Hour')) , ACTION_TYPE;" sfwPostgre="SELECT date_part('H', start_time::TIMESTAMP) AS time, action_type, COUNT(*) AS count FROM dbo.sgw_bpm_trace_inst_actn GROUP BY date_part('H', start_time::TIMESTAMP), action_type">
      <parameters />
    </query>
    <query ID="GetJobServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; count(*) 'Count'   ,&#xA;&#x9;'Allcount' AS Type  ,&#xA;&#x9;@start_time AS 'startDate' ,&#xA;&#x9; @end_time AS 'endDate' &#xA;FROM&#xA;&#x9; sgs_job_detail WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time union all SELECT&#xA;&#x9; count(*) AS 'Count' ,&#xA;&#x9;'MonitoredCount' AS Type  ,&#xA;&#x9;@start_time AS 'startDate' ,&#xA;&#x9; @end_time AS 'endDate' &#xA;FROM&#xA;&#x9; sgs_job_detail jdt WITH(NOLOCK) ,&#xA;&#x9;sgs_job_header jhd WITH(NOLOCK) ,&#xA;&#x9;sgs_job_schedule jsc WITH(NOLOCK) ,&#xA;&#x9;sgs_job_schedule_detail jsd WITH(NOLOCK) ,&#xA;&#x9;sgs_act_log_job_step aljs WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9; jdt.job_header_id = jhd.job_header_id   AND&#xA;&#x9; jhd.job_schedule_id = jsc.job_schedule_id   AND&#xA;&#x9; jsd.job_schedule_id = jhd.job_schedule_id   AND&#xA;&#x9; jsd.step_code = jdt.step_code   AND&#xA;&#x9; jsd.job_schedule_detail_id = aljs.job_schedule_detail_id    AND&#xA;&#x9; jdt.start_time between @start_time AND&#xA;&#x9; @end_time   union all SELECT&#xA;&#x9; count(*) 'Count' ,&#xA;&#x9;'SlowCount' AS Type ,&#xA;&#x9;@start_time AS 'startDate' ,&#xA;&#x9; @end_time AS 'endDate' &#xA;FROM&#xA;&#x9; sgs_job_detail_th WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; START_TIME between @start_time AND&#xA;&#x9; @end_time" sfwOracle="select count(*) &quot;Count&quot;   , 'Allcount' as Type  , @start_time as &quot;startDate&quot; ,  @end_time as &quot;endDate&quot; from sgs_job_detail where START_TIME between @start_time and @end_time&#xD;&#xA;&#x9;union all &#xD;&#xA;&#x9;select count(*) as &quot;Count&quot; , 'MonitoredCount' as Type  , @start_time as &quot;startDate&quot; ,  @end_time as &quot;endDate&quot; from sgs_job_detail jdt, sgs_job_header jhd,&#xD;&#xA;&#x9;&#x9;sgs_job_schedule jsc, sgs_job_schedule_detail jsd, sgs_act_log_job_step aljs &#xD;&#xA;&#x9;&#x9; where jdt.job_header_id = jhd.job_header_id&#xD;&#xA;&#x9;&#x9;   and jhd.job_schedule_id = jsc.job_schedule_id&#xD;&#xA;&#x9;&#x9;   and jsd.job_schedule_id = jhd.job_schedule_id&#xD;&#xA;&#x9;&#x9;   and jsd.step_code = jdt.step_code&#xD;&#xA;&#x9;&#x9;   and jsd.job_schedule_detail_id = aljs.job_schedule_detail_id &#xD;&#xA;&#x9;&#x9;   and jdt.start_time between @start_time and @end_time&#xD;&#xA;&#x9;&#x9;   union all &#xD;&#xA;&#x9;select count(*) &quot;Count&quot; , 'SlowCount' as Type , @start_time as &quot;startDate&quot; ,  @end_time as &quot;endDate&quot; from sgs_job_detail_th where START_TIME between @start_time and @end_time" sfwPostgre="SELECT COUNT(*) AS &quot;Count&quot;, 'Allcount' AS type, @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_job_detail WHERE start_time BETWEEN @start_time AND  @end_time  UNION ALL SELECT COUNT(*) AS &quot;Count&quot;, 'MonitoredCount' AS type, @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_job_detail AS jdt, dbo.sgs_job_header AS jhd, dbo.sgs_job_schedule AS jsc, dbo.sgs_job_schedule_detail AS jsd, dbo.sgs_act_log_job_step AS aljs WHERE jdt.job_header_id = jhd.job_header_id AND jhd.job_schedule_id = jsc.job_schedule_id AND jsd.job_schedule_id = jhd.job_schedule_id AND jsd.step_code = jdt.step_code AND jsd.job_schedule_detail_id = aljs.job_schedule_detail_id AND jdt.start_time BETWEEN @start_time AND  @end_time  UNION ALL SELECT COUNT(*) AS &quot;Count&quot;, 'SlowCount' AS type, @start_time  AS &quot;startDate&quot;, @end_time  AS &quot;endDate&quot; FROM dbo.sgs_job_detail_th WHERE start_time BETWEEN @start_time AND  @end_time ">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetDbActiveConnections" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; * &#xA;FROM&#xA;&#x9; (SELECT&#xA;&#x9; count(*) ActiveSession  &#xA;FROM&#xA;&#x9; sys.sysprocesses WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; DB_NAME(dbid) = 'GENESIS_UnitTest'and  spid&gt; 52  AND&#xA;&#x9; dbid&gt;0 AND&#xA;&#x9; len(hostname) &gt; 0) AS T1 ,&#xA;&#x9;(SELECT&#xA;&#x9; (mem.available_physical_memory_kb/(mem.total_physical_memory_kb*1.0)*100) Per_MemoryFree ,&#xA;&#x9;(mem.total_physical_memory_kb/1024) AS TotalAvailableMemory &#xA;FROM&#xA;&#x9; sys.dm_os_sys_memory mem WITH(NOLOCK)) AS t2,&#xA;&#x9;(SELECT&#xA;&#x9; count(*) AS ActiveRequests &#xA;FROM&#xA;&#x9; sys.dm_exec_requests WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; session_id &gt; 50 AND&#xA;&#x9; status &lt;&gt; 'background' AND&#xA;&#x9; status = 'running') AS t3" sfwOracle="select * from (Select count(*) ActiveSession From V$session),&#xD;&#xA;              (select&#xD;&#xA;                 min(value)/1024/1024 Per_MemoryFree&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name ='FREE_MEMORY_BYTES'),&#xD;&#xA;            (select&#xD;&#xA;             max(value)/1024/1024 TotalAvailableMemory&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name = 'PHYSICAL_MEMORY_BYTES'),&#xD;&#xA;            (select count(*) ActiveRequests from v$Session where sid &gt;50 and status='ACTIVE' and service_name='SYS$BACKGROUND')">
      <parameters />
    </query>
    <query ID="GetDBMissingIndex" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; top 50 migs.user_seeks AS [Estimated Index Uses],&#xA;&#x9;migs.avg_user_impact [Estimated Index Impact %],&#xA;&#x9;migs.avg_total_user_cost[Estimated Avg Query Cost],&#xA;&#x9;db_name(mid.database_id) AS DatabaseID,&#xA;&#x9;OBJECT_SCHEMA_NAME (mid.OBJECT_ID,&#xA;&#x9;mid.database_id) AS [SchemaName],&#xA;&#x9;OBJECT_NAME(mid.OBJECT_ID,&#xA;&#x9;mid.database_id) AS [TableName],&#xA;&#x9;'CREATE INDEX [IX_' + OBJECT_NAME(mid.OBJECT_ID,&#xA;&#x9;mid.database_id) + '_' + REPLACE(REPLACE(REPLACE(ISNULL(mid.equality_columns,&#xA;&#x9;''),&#xA;&#x9;',&#xA;&#x9;',&#xA;&#x9;'_'),&#xA;&#x9;'[',&#xA;&#x9;''),&#xA;&#x9;']',&#xA;&#x9;'') + CASE WHEN mid.equality_columns IS NOT NULL AND&#xA;&#x9; mid.inequality_columns IS NOT NULL THEN '_' ELSE ''  END + REPLACE(REPLACE(REPLACE(ISNULL(mid.inequality_columns,&#xA;&#x9;''),&#xA;&#x9;',&#xA;&#x9;',&#xA;&#x9;'_'),&#xA;&#x9;'[',&#xA;&#x9;''),&#xA;&#x9;']',&#xA;&#x9;'') + ']' + '&#xA;&#x9; ON ' + mid.statement + ' (' + ISNULL (mid.equality_columns,&#xA;&#x9;'') + CASE WHEN mid.equality_columns IS NOT NULL AND&#xA;&#x9; mid.inequality_columns IS NOT NULL THEN ',&#xA;&#x9;' ELSE '' END + ISNULL (mid.inequality_columns,&#xA;&#x9;'') + ')' + ISNULL (' INCLUDE (' + mid.included_columns + ') WITH (MAXDOP  = ?,&#xA;&#x9;FILLFACTOR = ?,&#xA;&#x9;ONLINE = ?,&#xA;&#x9;SORT_IN_TEMPDB = ?);',&#xA;&#x9;'') AS [Create TSQL],&#xA;&#x9;mid.equality_columns,&#xA;&#x9;mid.inequality_columns,&#xA;&#x9;mid.included_columns,&#xA;&#x9;migs.unique_compiles,&#xA;&#x9;migs.last_user_seek &#xA;FROM&#xA;&#x9; sys.dm_db_missing_index_group_stats AS migs WITH(NOLOCK)  &#xA;&#x9;INNER &#xA;&#x9; JOIN sys.dm_db_missing_index_groups AS mig WITH(NOLOCK) &#xA;&#x9; ON migs.group_handle = mig.index_group_handle &#xA;&#x9;INNER &#xA;&#x9; JOIN sys.dm_db_missing_index_details AS mid WITH(NOLOCK) &#xA;&#x9; ON mig.index_handle = mid.index_handle &#xA;ORDER BY  [Estimated Index Uses] DESC OPTION (RECOMPILE);">
      <parameters />
    </query>
    <query ID="GetWebserverCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;       count(*) RequestCount,&#xA;&#x9;     ISNULL(sum(CONVERT(BIGINT,&#xA;&#x9;time_in_ms)) / count(*),&#xA;&#x9;0) AverageResponseTime,&#xA;&#x9;     max(start_time) LastRequest,&#xA;&#x9;     min(start_time) FirstRequest,&#xA;&#x9;     ISNULL(sum(case when error_flag = 'y' then 1 else 0 end),&#xA;&#x9;0) ErrorCount,&#xA;&#x9;     ISNULL(sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end),&#xA;&#x9;0) SlowCount,&#xA;&#x9;             round(Cast(count(*) AS int) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput           ,&#xA;&#x9;@start_time AS 'start_time' ,&#xA;&#x9;@end_time  AS 'end_time' ,&#xA;&#x9; count(distinct web_server_name) AS WebServerCount &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn WITH(NOLOCK) ,&#xA;&#x9;    sgs_act_log WITH(NOLOCK) &#xA;WHERE&#xA;&#x9;    web_server_name is not null   AND&#xA;&#x9;     start_time between  @start_time  AND&#xA;&#x9;  @end_time" sfwOracle="SELECT Count(*)                                        RequestCount, &#xD;&#xA;       COALESCE(Round(Sum(time_in_ms) / Count(*)),0)                      AverageResponseTime, &#xD;&#xA;       Max(start_time)                                 LastRequest, &#xD;&#xA;       Min(start_time)                                 FirstRequest, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN error_message IS NULL THEN 0 &#xD;&#xA;             ELSE 1 &#xD;&#xA;           END),0)                                        ErrorCount, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN time_in_ms &gt; appserver_limit THEN 1 &#xD;&#xA;             ELSE 0 &#xD;&#xA;           END),0)                                        SlowCount, &#xD;&#xA;       ROUND(cast(Count(*) as number(10,2)) / CASE &#xD;&#xA;                                                 WHEN ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 = 0 THEN 1 &#xD;&#xA;                                                 ELSE ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 &#xD;&#xA;                                               END, 2) Throughput, &#xD;&#xA;       @start_time                                     start_time, &#xD;&#xA;       @end_time                                       end_time, &#xD;&#xA;       Count(DISTINCT appserver_name)                  AS WebServerCount &#xD;&#xA;FROM   sgs_act_log_inst_actn_step, &#xD;&#xA;       sgs_act_log &#xD;&#xA;WHERE  appserver_name IS NOT NULL &#xD;&#xA;       AND start_time BETWEEN @start_time AND @end_time &#xD;&#xA;ORDER  BY 4 DESC" sfwPostgre="SELECT COUNT(*) AS requestcount, COALESCE(SUM(CAST (time_in_ms AS BIGINT)) / COUNT(*), 0) AS averageresponsetime, MAX(start_time) AS lastrequest, MIN(start_time) AS firstrequest, COALESCE(SUM(CASE WHEN error_flag = 'y' THEN 1 ELSE 0 END), 0) AS errorcount, COALESCE(SUM(CASE WHEN time_in_ms &gt; transaction_limit THEN 1 ELSE 0 END), 0) AS slowcount, ROUND(CAST (COUNT(*) AS INTEGER) / CASE WHEN aws_sqlserver_ext.datediff('minute', MIN(start_time)::TIMESTAMP, MAX(start_time)::TIMESTAMP) = 0 THEN 1 ELSE aws_sqlserver_ext.datediff('minute', MIN(start_time)::TIMESTAMP, MAX(start_time)::TIMESTAMP) END, 2) AS throughput, @start_time  AS &quot;start_time&quot;, @end_time  AS &quot;end_time&quot;, COUNT(DISTINCT web_server_name) AS webservercount FROM dbo.sgs_act_log_inst_actn, dbo.sgs_act_log WHERE web_server_name IS NOT NULL AND start_time BETWEEN @start_time AND  @end_time ">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetAppServerSummaryCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;              count(*) RequestCount,&#xA;&#x9;            ISNULL(sum(time_in_ms) / count(*),&#xA;&#x9;0) AverageResponseTime,&#xA;&#x9;            max(start_time) LastRequest,&#xA;&#x9;            min(start_time) FirstRequest,&#xA;&#x9;            ISNULL(sum(case when error_message is null then 0 else 1 end),&#xA;&#x9;0) ErrorCount,&#xA;&#x9;            ISNULL(sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end),&#xA;&#x9;0) SlowCount,&#xA;&#x9;             round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput,&#xA;&#x9;              @start_time AS 'start_time' ,&#xA;&#x9;@end_time AS 'end_time' ,&#xA;&#x9; count(distinct appserver_name) AS WebServerCount &#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step  WITH(NOLOCK) ,&#xA;&#x9;   sgs_act_log WITH(NOLOCK)  &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time  AND&#xA;&#x9;  @end_time            &#xA;ORDER BY  4 desc" sfwOracle="SELECT Count(*)                                        RequestCount, &#xD;&#xA;       COALESCE(Round(Sum(time_in_ms) / Count(*)),0)                      AverageResponseTime, &#xD;&#xA;       Max(start_time)                                 LastRequest, &#xD;&#xA;       Min(start_time)                                 FirstRequest, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN error_message IS NULL THEN 0 &#xD;&#xA;             ELSE 1 &#xD;&#xA;           END),0)                                        ErrorCount, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN time_in_ms &gt; appserver_limit THEN 1 &#xD;&#xA;             ELSE 0 &#xD;&#xA;           END),0)                                        SlowCount, &#xD;&#xA;       ROUND(cast(Count(*) as number(10,2)) / CASE &#xD;&#xA;                                                 WHEN ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 = 0 THEN 1 &#xD;&#xA;                                                 ELSE ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 &#xD;&#xA;                                               END, 2) Throughput, &#xD;&#xA;       @start_time                                     start_time, &#xD;&#xA;       @end_time                                       end_time, &#xD;&#xA;       Count(DISTINCT appserver_name)                  AS WebServerCount &#xD;&#xA;FROM   sgs_act_log_inst_actn_step, &#xD;&#xA;       sgs_act_log &#xD;&#xA;WHERE  appserver_name IS NOT NULL &#xD;&#xA;       AND start_time BETWEEN @start_time AND @end_time &#xD;&#xA;ORDER  BY 4 DESC">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetJobServerSummaryCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; jd.status_id ,&#xA;&#x9;jd.STATUS_VALUE,&#xA;&#x9;cv.DESCRIPTION,&#xA;&#x9;count(*) 'count'  ,&#xA;&#x9;@start_time AS 'Start_time' ,&#xA;&#x9;@end_time AS 'End_time'  &#xA;FROM&#xA;&#x9; sgs_job_detail jd WITH(NOLOCK) &#xA;&#x9;INNER &#xA;&#x9; JOIN SGS_CODE_VALUE cv WITH(NOLOCK)  &#xA;&#x9; ON jd.STATUS_VALUE = cv.CODE_VALUE  AND&#xA;&#x9; jd.STATUS_ID = cv.CODE_ID &#xA;WHERE&#xA;&#x9; jd.START_TIME between @start_time AND&#xA;&#x9; @end_time &#xA;GROUP BY  jd.status_id,&#xA;&#x9; jd.STATUS_VALUE,&#xA;&#x9;cv.DESCRIPTION" sfwOracle="SELECT jd.status_id, &#xD;&#xA;       jd.status_value, &#xD;&#xA;       cv.description, &#xD;&#xA;       Count(*)    count, &#xD;&#xA;       @start_time  Start_time, &#xD;&#xA;       @end_time    End_time &#xD;&#xA;FROM   sgs_job_detail jd &#xD;&#xA;       INNER JOIN sgs_code_value cv &#xD;&#xA;               ON jd.status_value = cv.code_value &#xD;&#xA;                  AND jd.status_id = cv.code_id &#xD;&#xA;WHERE  jd.start_time BETWEEN @start_time AND @end_time &#xD;&#xA;GROUP  BY jd.status_id, &#xD;&#xA;          jd.status_value, &#xD;&#xA;          cv.description" sfwPostgre="SELECT jd.status_id, jd.status_value, cv.description, COUNT(*) AS &quot;count&quot;, @start_time  AS &quot;Start_time&quot;, @end_time  AS &quot;End_time&quot; FROM dbo.sgs_job_detail AS jd INNER JOIN dbo.sgs_code_value AS cv ON jd.status_value = cv.code_value AND jd.status_id = cv.code_id WHERE jd.start_time BETWEEN @start_time AND  @end_time  GROUP BY jd.status_id, jd.status_value, cv.description">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetDBCpuUtilization" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; available_physical_memory_kb/1024 AS &quot;Total Memory MB&quot;,&#xA;&#x9;available_physical_memory_kb/(total_physical_memory_kb*1.0)*100 AS &quot;% Memory Free&quot; &#xA;FROM&#xA;&#x9; sys.dm_os_sys_memory WITH(NOLOCK)" sfwOracle="select * from  (select&#xD;&#xA;             max(value)/1024/1024 &quot;Total Memory MB&quot;&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name = 'PHYSICAL_MEMORY_BYTES'),&#xD;&#xA;                 (select&#xD;&#xA;                 min(value)/1024/1024 &quot;% Memory Free&quot;&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name ='FREE_MEMORY_BYTES')">
      <parameters />
    </query>
    <query ID="GetDBFreeSize" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;volume_mount_point [Disk Mount Point], &#xD;&#xA;&#x9;&#x9;CONVERT(DECIMAL(18,2),total_bytes/1073741824.0) AS [Total Size in GB], ---1GB = 1073741824 bytes&#xD;&#xA;&#x9;&#x9;CONVERT(DECIMAL(18,2),available_bytes/1073741824.0) AS [Available Size in GB],  &#xD;&#xA;&#x9;&#x9;CAST(CAST(available_bytes AS FLOAT)/ CAST(total_bytes AS FLOAT) AS DECIMAL(18,2)) * 100 AS [Space Free %] &#xD;&#xA;FROM sys.master_files WITH(NOLOCK)&#xD;&#xA;CROSS APPLY sys.dm_os_volume_stats(database_id, file_id)">
      <parameters />
    </query>
    <query ID="GetGBMissingIndex" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT db.[name] AS [DatabaseName]&#xD;&#xA;    ,id.[object_id] AS [ObjectID]&#xD;&#xA;&#x9;,OBJECT_NAME(id.[object_id], db.[database_id]) AS [ObjectName]&#xD;&#xA;    ,id.[statement] AS [FullyQualifiedObjectName]&#xD;&#xA;    ,id.[equality_columns] AS [EqualityColumns]&#xD;&#xA;    ,id.[inequality_columns] AS [InEqualityColumns]&#xD;&#xA;    ,id.[included_columns] AS [IncludedColumns]&#xD;&#xA;    ,gs.[unique_compiles] AS [UniqueCompiles]&#xD;&#xA;    ,gs.[user_seeks] AS [UserSeeks]&#xD;&#xA;    ,gs.[user_scans] AS [UserScans]&#xD;&#xA;    ,gs.[last_user_seek] AS [LastUserSeekTime]&#xD;&#xA;    ,gs.[last_user_scan] AS [LastUserScanTime]&#xD;&#xA;    ,gs.[avg_total_user_cost] AS [AvgTotalUserCost]  -- Average cost of the user queries that could be reduced by the index in the group.&#xD;&#xA;    ,gs.[avg_user_impact] AS [AvgUserImpact]  -- The value means that the query cost would on average drop by this percentage if this missing index group was implemented.&#xD;&#xA;    ,gs.[system_seeks] AS [SystemSeeks]&#xD;&#xA;    ,gs.[system_scans] AS [SystemScans]&#xD;&#xA;    ,gs.[last_system_seek] AS [LastSystemSeekTime]&#xD;&#xA;    ,gs.[last_system_scan] AS [LastSystemScanTime]&#xD;&#xA;    ,gs.[avg_total_system_cost] AS [AvgTotalSystemCost]&#xD;&#xA;    ,gs.[avg_system_impact] AS [AvgSystemImpact]  -- Average percentage benefit that system queries could experience if this missing index group was implemented.&#xD;&#xA;    ,gs.[user_seeks] * gs.[avg_total_user_cost] * (gs.[avg_user_impact] * 0.01) AS [IndexAdvantage]&#xD;&#xA;    ,'CREATE INDEX [IX_' + OBJECT_NAME(id.[object_id], db.[database_id]) + '_' + REPLACE(REPLACE(REPLACE(ISNULL(id.[equality_columns], ''), ', ', '_'), '[', ''), ']', '') + CASE&#xD;&#xA;        WHEN id.[equality_columns] IS NOT NULL&#xD;&#xA;            AND id.[inequality_columns] IS NOT NULL&#xD;&#xA;            THEN '_'&#xD;&#xA;        ELSE ''&#xD;&#xA;        END + REPLACE(REPLACE(REPLACE(ISNULL(id.[inequality_columns], ''), ', ', '_'), '[', ''), ']', '') + '_' + LEFT(CAST(NEWID() AS [nvarchar](64)), 5) + ']' + ' ON ' + id.[statement] + ' (' + ISNULL(id.[equality_columns], '') + CASE&#xD;&#xA;        WHEN id.[equality_columns] IS NOT NULL&#xD;&#xA;            AND id.[inequality_columns] IS NOT NULL&#xD;&#xA;            THEN ','&#xD;&#xA;        ELSE ''&#xD;&#xA;        END + ISNULL(id.[inequality_columns], '') + ')' + ISNULL(' INCLUDE (' + id.[included_columns] + ')', '') AS [ProposedIndex]&#xD;&#xA;    ,CAST(CURRENT_TIMESTAMP AS [smalldatetime]) AS [CollectionDate]&#xD;&#xA;FROM [sys].[dm_db_missing_index_group_stats] gs WITH (NOLOCK)&#xD;&#xA;INNER JOIN [sys].[dm_db_missing_index_groups] ig WITH (NOLOCK) ON gs.[group_handle] = ig.[index_group_handle]&#xD;&#xA;INNER JOIN [sys].[dm_db_missing_index_details] id WITH (NOLOCK) ON ig.[index_handle] = id.[index_handle]&#xD;&#xA;INNER JOIN [sys].[databases] db WITH (NOLOCK) ON db.[database_id] = id.[database_id]&#xD;&#xA;WHERE  db.[database_id] = DB_ID()&#xD;&#xA;--AND OBJECT_NAME(id.[object_id], db.[database_id]) = 'YourTableName'&#xD;&#xA;ORDER BY ObjectName,  [AvgUserImpact] desc&#xD;&#xA;OPTION (RECOMPILE);">
      <parameters />
    </query>
    <query ID="GetAllDBActiveSession" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; * &#xA;FROM&#xA;&#x9; sys.sysprocesses WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; DB_NAME(dbid) = 'GENESIS_UnitTest'and  spid&gt; 50  AND&#xA;&#x9; dbid&gt;0 AND&#xA;&#x9; len(hostname) &gt; 0" sfwOracle="select * from v$Session where sid &gt;50">
      <parameters />
    </query>
    <query ID="GetDBAllActiveRequests" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; r.session_id,&#xA;&#x9;r.start_time,&#xA;&#x9;r.status,&#xA;&#x9;r.command ,&#xA;&#x9;t.* &#xA;FROM&#xA;&#x9; sys.dm_exec_requests AS r WITH(NOLOCK) CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS t" sfwOracle="select sid,status,command,SQL.* from v$Session&#xD;&#xA;CROSS APPLY V$SQLtext SQL;">
      <parameters />
    </query>
    <query ID="GetAllDBCpuTime" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; TOP 10 SUBSTRING(qt.TEXT,&#xA;&#x9;(qs.statement_start_offset/2)+1,&#xA;&#x9;((CASE qs.statement_end_offset WHEN -1 THEN DATALENGTH(qt.TEXT) ELSE qs.statement_end_offset END - qs.statement_start_offset)/2)+1),&#xA;&#x9;qs.execution_count,&#xA;&#x9;qs.total_logical_reads,&#xA;&#x9;qs.last_logical_reads,&#xA;&#x9;qs.total_logical_writes,&#xA;&#x9;qs.last_logical_writes,&#xA;&#x9;qs.total_worker_time,&#xA;&#x9;qs.last_worker_time,&#xA;&#x9;qs.total_elapsed_time/1000000 total_elapsed_time_in_S,&#xA;&#x9;qs.last_elapsed_time/1000000 last_elapsed_time_in_S,&#xA;&#x9;qs.last_execution_time,&#xA;&#x9;qp.query_plan &#xA;FROM&#xA;&#x9; sys.dm_exec_query_stats qs WITH(NOLOCK) CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) qt CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp &#xA;WHERE&#xA;&#x9;  db_name(qp.dbid) = 'GENESIS_UnitTest' &#xA;ORDER BY  qs.total_worker_time DESC --CPU time" sfwOracle="select SUBSTR(SqlMonitor.SQL_TEXT,stat.STARTS),stat.EXECUTIONS execution_count,SqlMonitor.DISK_READS logical_reads,stat.LAST_DISK_READS last_logical_read&#xD;&#xA;,stat.DISK_WRITES logical_write,stat.LAST_DISK_WRITES last_logical_writes, SqlMonitor.CPU_TIME total_worker_time,stat.ELAPSED_TIME total_elapsed_time_in_S,&#xD;&#xA;stat.LAST_ELAPSED_TIME last_elapsed_time_in_S,SqlMonitor.LAST_REFRESH_TIME last_execution_time&#xD;&#xA;from  V$SQL_PLAN_STATISTICS stat &#xD;&#xA;cross apply V$SQL_MONITOR SqlMonitor&#xD;&#xA;order by SqlMonitor.CPU_TIME DESC">
      <parameters />
    </query>
    <query ID="GetAllDBLogicalReads" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; TOP 10 SUBSTRING(qt.TEXT,&#xA;&#x9;(qs.statement_start_offset/2)+1,&#xA;&#x9;((CASE qs.statement_end_offset WHEN -1 THEN DATALENGTH(qt.TEXT) ELSE qs.statement_end_offset END - qs.statement_start_offset)/2)+1),&#xA;&#x9;qs.execution_count,&#xA;&#x9;qs.total_logical_reads,&#xA;&#x9;qs.last_logical_reads,&#xA;&#x9;qs.total_logical_writes,&#xA;&#x9;qs.last_logical_writes,&#xA;&#x9;qs.total_worker_time,&#xA;&#x9;qs.last_worker_time,&#xA;&#x9;qs.total_elapsed_time/1000000 total_elapsed_time_in_S,&#xA;&#x9;qs.last_elapsed_time/1000000 last_elapsed_time_in_S,&#xA;&#x9;qs.last_execution_time,&#xA;&#x9;qp.query_plan &#xA;FROM&#xA;&#x9; sys.dm_exec_query_stats qs WITH(NOLOCK) CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) qt CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp &#xA;WHERE&#xA;&#x9;  db_name(qp.dbid) = 'GENESIS_UnitTest' &#xA;ORDER BY  qs.total_logical_reads DESC  --logical reads" sfwOracle="select SUBSTR(SqlMonitor.SQL_TEXT,stat.STARTS),stat.EXECUTIONS execution_count,SqlMonitor.DISK_READS logical_reads,stat.LAST_DISK_READS last_logical_read&#xD;&#xA;,stat.DISK_WRITES logical_write,stat.LAST_DISK_WRITES last_logical_writes, SqlMonitor.CPU_TIME total_worker_time,stat.ELAPSED_TIME total_elapsed_time_in_S,&#xD;&#xA;stat.LAST_ELAPSED_TIME last_elapsed_time_in_S,SqlMonitor.LAST_REFRESH_TIME last_execution_time&#xD;&#xA;from  V$SQL_PLAN_STATISTICS stat &#xD;&#xA;cross apply V$SQL_MONITOR SqlMonitor&#xD;&#xA;order by SqlMonitor.DISK_READS DESC">
      <parameters />
    </query>
    <query ID="GetAllDBLogicalWrites" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; TOP 10 SUBSTRING(qt.TEXT,&#xA;&#x9;(qs.statement_start_offset/2)+1,&#xA;&#x9;((CASE qs.statement_end_offset WHEN -1 THEN DATALENGTH(qt.TEXT) ELSE qs.statement_end_offset END - qs.statement_start_offset)/2)+1),&#xA;&#x9;qs.execution_count,&#xA;&#x9;qs.total_logical_reads,&#xA;&#x9;qs.last_logical_reads,&#xA;&#x9;qs.total_logical_writes,&#xA;&#x9;qs.last_logical_writes,&#xA;&#x9;qs.total_worker_time,&#xA;&#x9;qs.last_worker_time,&#xA;&#x9;qs.total_elapsed_time/1000000 total_elapsed_time_in_S,&#xA;&#x9;qs.last_elapsed_time/1000000 last_elapsed_time_in_S,&#xA;&#x9;qs.last_execution_time,&#xA;&#x9;qp.query_plan &#xA;FROM&#xA;&#x9; sys.dm_exec_query_stats qs WITH(NOLOCK) CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) qt CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp &#xA;WHERE&#xA;&#x9;  db_name(qp.dbid) = 'GENESIS_UnitTest' &#xA;ORDER BY  qs.total_logical_writes DESC -- logical writes" sfwOracle="select SUBSTR(SqlMonitor.SQL_TEXT,stat.STARTS),stat.EXECUTIONS execution_count,SqlMonitor.DISK_READS logical_reads,stat.LAST_DISK_READS last_logical_read&#xD;&#xA;,stat.DISK_WRITES logical_write,stat.LAST_DISK_WRITES last_logical_writes, SqlMonitor.CPU_TIME total_worker_time,stat.ELAPSED_TIME total_elapsed_time_in_S,&#xD;&#xA;stat.LAST_ELAPSED_TIME last_elapsed_time_in_S,SqlMonitor.LAST_REFRESH_TIME last_execution_time&#xD;&#xA;from  V$SQL_PLAN_STATISTICS stat &#xD;&#xA;cross apply V$SQL_MONITOR SqlMonitor&#xD;&#xA;order by stat.DISK_WRITES DESC">
      <parameters />
    </query>
    <query ID="GetAllDBGrowthMonthly" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; top 12 [database_name] AS &quot;Database&quot;,&#xA;&#x9;--[backup_start_date] AS &quot;Month&quot;,&#xA;&#x9;DATEPART(month,&#xA;&#x9;[backup_start_date]) AS &quot;Month&quot;,&#xA;&#x9;AVG([backup_size]/1024/1024) AS &quot;BackupSizeMB&quot;,&#xA;&#x9;AVG([compressed_backup_size]/1024/1024) AS &quot;Compressed Backup Size MB&quot;,&#xA;&#x9;AVG([backup_size]/[compressed_backup_size]) AS &quot;Compression Ratio&quot; &#xA;FROM&#xA;&#x9; msdb.dbo.backupset WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; [database_name] = DB_NAME() AND&#xA;&#x9; [type] = 'D' &#xA;GROUP BY  [database_name],&#xA;&#x9;DATEPART(mm,&#xA;&#x9;[backup_start_date]) &#xA;ORDER BY  DATEPART(month,&#xA;&#x9;[backup_start_date])">
      <parameters>
        <parameter ID="@DataBaseName" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetUserWiseCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="declare @transaction_limit int  &#xD;&#xA;select @transaction_limit= transaction_limit from sgs_act_log;&#xD;&#xA;select inst.ACTOR_NAME ,&#xD;&#xA;count(*) as RequestCount,&#xD;&#xA;sum(time_in_ms) / count(*) AverageResponseTime,&#xD;&#xA;max(act.start_time) LastRequest,&#xD;&#xA;min(act.start_time) FirstRequest,&#xD;&#xA; sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;&#x9;      sum(case when time_in_ms &gt; @transaction_limit then 1 else 0 end) SlowCount,&#xD;&#xA;              round(cast(count(*) as float) / case when DateDiff(MINUTE, min(act.start_time), max(act.start_time)) = 0 then 1 else DateDiff(MINUTE, min(act.start_time), max(act.start_time)) end, 2) Throughput&#xD;&#xA;               ,@start_time as 'Start_time' , @end_time as 'End_time'&#xD;&#xA;from SGS_ACT_LOG_INST inst WITH(NOLOCK)&#xD;&#xA;inner join SGS_ACT_LOG_INST_ACTN act WITH(NOLOCK)&#xD;&#xA;on inst.ACT_LOG_INST_ID = act.ACT_LOG_INST_ID    &#xD;&#xA;where act.start_time between  @start_time  AND  @end_time   &#xD;&#xA;and  len(ACTOR_NAME ) &gt; 0&#xD;&#xA;group by inst.ACTOR_NAME" sfwOracle="SELECT INST.ACTOR_NAME,&#xD;&#xA;      COUNT(*) REQUESTCOUNT ,&#xD;&#xA;      SUM(TIME_IN_MS) / COUNT(*) AVERAGERESPONSETIME ,&#xD;&#xA;      MAX(ACT.START_TIME) LASTREQUEST,&#xD;&#xA;      MIN(ACT.START_TIME) FIRSTREQUEST,&#xD;&#xA;       SUM(CASE WHEN ERROR_FLAG = 'y' THEN 1 ELSE 0 END) ERRORCOUNT,&#xD;&#xA;              SUM(CASE WHEN TIME_IN_MS &gt; (SELECT transaction_limit  FROM sgs_act_log WHERE ROWNUM = 1) THEN 1 ELSE 0 END) SLOWCOUNT,&#xD;&#xA;                    ROUND(CAST(COUNT(*) AS BINARY_DOUBLE) / CASE WHEN (MAX(ACT.START_TIME) - MIN(ACT.START_TIME)) * 1440 = 0 THEN 1 ELSE (MAX(ACT.START_TIME) - MIN(ACT.START_TIME)) * 1440 END, 2) THROUGHPUT&#xD;&#xA;                     ,SYSDATE-2 AS START_TIME , SYSDATE AS END_TIME &#xD;&#xA;      FROM SGS_ACT_LOG_INST INST&#xD;&#xA;      INNER JOIN SGS_ACT_LOG_INST_ACTN ACT&#xD;&#xA;      ON INST.ACT_LOG_INST_ID = ACT.ACT_LOG_INST_ID    &#xD;&#xA;      WHERE ACT.START_TIME BETWEEN  SYSDATE-2  AND  SYSDATE   &#xD;&#xA;      AND  LENGTH(RTRIM(ACTOR_NAME )) &gt; 0&#xD;&#xA;      GROUP BY INST.ACTOR_NAME">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="AppSummaryChartDay" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'MM/dd/yyyy') StartTime, &#xA;&#x9;   APPSERVER_NAME ServerName, &#xA;&#x9;   count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;           sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN_STEP&#xA;  where APPSERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by APPSERVER_NAME,&#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), (DATEPART(DAY, START_TIME) / 1)&#xA;order by 1, 2, 3">
      <parameters>
        <parameter ID="@start_time" sfwDataType="DateTime" />
        <parameter ID="@end_time" sfwDataType="DateTime" />
      </parameters>
    </query>
  </queries>
  <constraint />
  <rules />
  <initialload />
  <softerror />
  <harderror />
  <validatedelete />
  <delete />
  <groupslist />
  <checklist />
  <methods>
    <method ID="LoadDashboard" sfwMethodType="Other" sfwMode="All">
      <item ID="GetDashboardDetails" sfwItemType="Method" sfwDataType="ArrayList" />
    </method>
    <method ID="RefreshWebserverData" sfwDescription="Refresh Webserver Data" sfwMethodType="Other" sfwMode="All">
      <item />
    </method>
    <method ID="LoadWebserdetail" sfwMethodType="Load" sfwMode="All">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="LoadAppserver" sfwMethodType="Load" sfwMode="All">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" Value="FromDate" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="LoadJobserver" sfwMethodType="Load" sfwMode="All">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="LoadBPMServer" sfwMethodType="Load" sfwMode="All">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="Property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
  </methods>
  <lifecycle />
  <objectmethods>
    <method ID="GetDashboardDetails" sfwReturnType="ArrayList">
      <parameters />
    </method>
    <method ID="SetDates" sfwReturnType="ArrayList" />
  </objectmethods>
</entity>