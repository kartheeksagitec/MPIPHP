<entity ID="entTempdata" sfwTableName="tempdata" sfwView="False">
  <queries>
    <query ID="rptPensionReportofDeath" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  &#xD;&#xA; DISTINCT SP.PERSON_ID&#xD;&#xA; , SP.LAST_NAME&#xD;&#xA; , SP.FIRST_NAME&#xD;&#xA; , SUBSTRING(dbo.fn_GET_DECRYPTED_TEXT(SSN),6,9)AS SS4&#xD;&#xA; , dbo.fn_GET_DECRYPTED_TEXT(SSN) AS DECRYPTED_SSN&#xD;&#xA; , SP.DATE_OF_DEATH&#xD;&#xA; , ABS(DATEDIFF(DAY,dbo.fn_GET_DECRYPTED_VALUE(SP.DATE_OF_BIRTH),SP.DATE_OF_DEATH)/365) AS AGE&#xD;&#xA; , CASE WHEN (SBA.BENEFIT_TYPE_VALUE = 'DSBL' OR SBA.BENEFIT_TYPE_VALUE = 'RTMT')&#xD;&#xA;   AND SBA.APPLICATION_STATUS_VALUE = 'APPR' THEN 'R' &#xD;&#xA;   WHEN SBA.BENEFIT_APPLICATION_ID IS NULL THEN 'A' END AS STATUS&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA; LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBA.PERSON_ID = SP.PERSON_ID&#xD;&#xA; AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA; AND SBA.BENEFIT_APPLICATION_ID = (SELECT TOP 1 BA.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION BA WITH(NOLOCK) &#xD;&#xA;         WHERE BA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;         AND (BA.BENEFIT_TYPE_VALUE = 'RTMT' OR BA.BENEFIT_TYPE_VALUE = 'DSBL'))&#xD;&#xA;WHERE &#xD;&#xA;MONTH(SP.DATE_OF_DEATH) = @MONTH&#xD;&#xA;AND YEAR(SP.DATE_OF_DEATH) = @YEAR&#xD;&#xA;AND SP.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,dbo.fn_GET_DECRYPTED_VALUE(DATE_OF_BIRTH),109) ,110) &lt;&gt; '01/01/1753'&#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;&#xD;&#xA;ORDER BY SP.LAST_NAME, SP.FIRST_NAME, SS4">
      <parameters>
        <parameter ID="@MONTH" sfwDataType="int" />
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptBenefitProcessCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;DECLARE @IN DATETIME &#xD;&#xA;DECLARE @MONTHRECORDS TABLE (MONTH_YEAR DATETIME, COL1 INT) &#xD;&#xA;SELECT @IN =  DATEADD(MM ,0,@FROM)&#xD;&#xA;&#xD;&#xA;WHILE (@TO&gt;@IN) &#xD;&#xA;BEGIN&#xD;&#xA;INSERT INTO @MONTHRECORDS (MONTH_YEAR , COL1) &#xD;&#xA;SELECT DATEADD(MM ,0,@IN),1  &#xD;&#xA;SET @IN= DATEADD(MM ,1,@IN)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;SELECT [MONTH], SUM(ESTIMATE_CREATED) AS ESTIMATES_CREATED, SUM(APPLICATION_RECEIVED) AS APPLICATIONS_RECEIVED, &#xD;&#xA;SUM(RETIREMENT_PROCESSED) AS RETIREMENTS_PROCESSED, SUM(AMOUNT) AS RETIREMENT_AMOUNT&#xD;&#xA;INTO DBO.TEMP_TABLE_FOR_REPORT&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;STUFF(CONVERT(VARCHAR(10),CREATED_DATE,103),1,3,'') AS [MONTH],&#xD;&#xA;COUNT(0) AS ESTIMATE_CREATED, &#xD;&#xA;0 AS RETIREMENT_PROCESSED,&#xD;&#xA;0 AS APPLICATION_RECEIVED,&#xD;&#xA;0 AS AMOUNT&#xD;&#xA;FROM SGT_BENEFIT_CALCULATION_HEADER WITH(NOLOCK)&#xD;&#xA;WHERE CALCULATION_TYPE_VALUE = 'ESTI' AND STATUS_VALUE &lt;&gt; 'CANC'&#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,CREATED_DATE,109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@FROM,109) ,110)   &#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,CREATED_DATE,109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@TO,109) ,110)&#xD;&#xA;GROUP BY STUFF(CONVERT(VARCHAR(10),CREATED_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;STUFF(CONVERT(VARCHAR(10),RETIREMENT_DATE,103),1,3,'') AS [MONTH],&#xD;&#xA;0 AS ESTIMATE_CREATED, &#xD;&#xA;COUNT(0) AS RETIREMENT_PROCESSED,&#xD;&#xA;0 AS APPLICATION_RECEIVED,&#xD;&#xA;0 AS AMOUNT&#xD;&#xA;FROM SGT_BENEFIT_APPLICATION WITH(NOLOCK)&#xD;&#xA;WHERE APPLICATION_STATUS_VALUE &lt;&gt; 'CANC'&#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,RETIREMENT_DATE,109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@FROM,109) ,110)   &#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,RETIREMENT_DATE,109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@TO,109) ,110)&#xD;&#xA;GROUP BY STUFF(CONVERT(VARCHAR(10),RETIREMENT_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;STUFF(CONVERT(VARCHAR(10),APPLICATION_RECEIVED_DATE,103),1,3,'') AS [MONTH],&#xD;&#xA;0 AS ESTIMATE_CREATED, &#xD;&#xA;0 AS RETIREMENT_PROCESSED,&#xD;&#xA;COUNT(0) AS APPLICATION_RECEIVED,&#xD;&#xA;0 AS AMOUNT&#xD;&#xA;FROM SGT_BENEFIT_APPLICATION WITH(NOLOCK)&#xD;&#xA;WHERE APPLICATION_STATUS_VALUE &lt;&gt; 'CANC'&#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,APPLICATION_RECEIVED_DATE,109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@FROM,109) ,110)   &#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,APPLICATION_RECEIVED_DATE,109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@TO,109) ,110)&#xD;&#xA;GROUP BY STUFF(CONVERT(VARCHAR(10),APPLICATION_RECEIVED_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;STUFF(CONVERT(VARCHAR(10),PAYMENT_DATE,103),1,3,'') AS [MONTH],&#xD;&#xA;0 AS ESTIMATE_CREATED, &#xD;&#xA;0 AS RETIREMENT_PROCESSED,&#xD;&#xA;0 AS APPLICATION_RECEIVED,&#xD;&#xA;SUM(PHDE.AMOUNT * PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE&#xD;&#xA;CONVERT(DATETIME,CONVERT(VARCHAR,PAYMENT_DATE,109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@FROM,109) ,110)   &#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,PAYMENT_DATE,109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@TO,109) ,110)&#xD;&#xA;GROUP BY STUFF(CONVERT(VARCHAR(10),PAYMENT_DATE,103),1,3,'')&#xD;&#xA;) A&#xD;&#xA;GROUP BY [MONTH]&#xD;&#xA;&#xD;&#xA;SELECT [MONTH], ISNULL(ESTIMATES_CREATED,0) AS ESTIMATES_CREATED, ISNULL(APPLICATIONS_RECEIVED,0) AS APPLICATIONS_RECEIVED, &#xD;&#xA;ISNULL(RETIREMENTS_PROCESSED,0) AS RETIREMENTS_PROCESSED, ISNULL(RETIREMENT_AMOUNT,0) AS RETIREMENT_AMOUNT FROM &#xD;&#xA;( &#xD;&#xA;SELECT TEMP.[MONTH],TEMP.ESTIMATES_CREATED, TEMP.APPLICATIONS_RECEIVED, &#xD;&#xA;TEMP.RETIREMENTS_PROCESSED, TEMP.RETIREMENT_AMOUNT&#xD;&#xA;FROM TEMP_TABLE_FOR_REPORT TEMP&#xD;&#xA;LEFT OUTER JOIN @MONTHRECORDS C ON C.COL1=1&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT STUFF(CONVERT(VARCHAR(10),MONTH_YEAR,103),1,3,'') AS [MONTH],NULL,NULL,NULL,NULL FROM @MONTHRECORDS&#xD;&#xA; WHERE &#xD;&#xA; STUFF(CONVERT(VARCHAR(10), MONTH_YEAR ,103),1,3,'') NOT IN &#xD;&#xA; (SELECT [MONTH] FROM TEMP_TABLE_FOR_REPORT WITH(NOLOCK)&#xD;&#xA; WHERE [MONTH] &gt;= STUFF(CONVERT(VARCHAR(10),@FROM,103),1,3,'') OR [MONTH] &lt;= STUFF(CONVERT(VARCHAR(10),@TO,103),1,3,''))&#xD;&#xA; &#xD;&#xA;)Q GROUP  BY [MONTH], ESTIMATES_CREATED, APPLICATIONS_RECEIVED, RETIREMENTS_PROCESSED, RETIREMENT_AMOUNT&#xD;&#xA;ORDER BY CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT)&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)&#xD;&#xA;&#xD;&#xA;DROP TABLE TEMP_TABLE_FOR_REPORT">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptDisabilityCounts&amp;AmountsbyMonth " sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;IF OBJECT_ID('TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;DECLARE @IN DATETIME &#xD;&#xA;SELECT @IN=  DATEADD(MM ,0,@FROM)&#xD;&#xA;&#xD;&#xA;DECLARE @MONTHRECORDS TABLE (MONTH_YEAR DATETIME, COL1 INT) &#xD;&#xA;&#xD;&#xA;WHILE (@TO&gt;@IN) &#xD;&#xA;BEGIN&#xD;&#xA;INSERT INTO @MONTHRECORDS (MONTH_YEAR , COL1) &#xD;&#xA;SELECT DATEADD(MM ,0,@IN),1&#xD;&#xA;SET @IN= DATEADD(MM ,1,@IN)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; [MONTH] = STUFF(CONVERT(VARCHAR(10), PHH.PAYMENT_DATE,103),1,3,'')  &#xD;&#xA; , COUNT(*) AS COUNT, SUM(PHDE.AMOUNT * PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA; , SCV.DESCRIPTION AS DISABLITY_TYPE&#xD;&#xA; , SP.PLAN_NAME AS PLAN_NAME&#xD;&#xA;INTO DBO.TEMP_TABLE_FOR_REPORT &#xD;&#xA;FROM &#xD;&#xA;(SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;&#xD;&#xA;          INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;          INNER JOIN SGT_PAYMENT_ITEM_TYPE  PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;          INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = PBXR.PLAN_BENEFIT_ID&#xD;&#xA;          INNER JOIN SGT_PLAN SP WITH (NOLOCK) ON SP.PLAN_ID = PBXR.PLAN_ID&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = RETIREMENT_TYPE_ID AND SCV.CODE_VALUE = SPA.RETIREMENT_TYPE_VALUE&#xD;&#xA;)    &#xD;&#xA;WHERE &#xD;&#xA;PHH.PAYMENT_DATE &gt;= @FROM AND PHH.PAYMENT_DATE &lt;= @TO AND &#xD;&#xA;SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DSBL'&#xD;&#xA;AND (@PLAN_ID IS NULL OR @PLAN_ID = '' OR @PLAN_ID = '0' OR @PLAN_ID = PBXR.PLAN_ID)&#xD;&#xA;GROUP BY SCV.DESCRIPTION, STUFF(CONVERT(VARCHAR(10), PHH.PAYMENT_DATE,103),1,3,''),SP.PLAN_NAME&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT [MONTH],ISNULL([COUNT],0) AS [COUNT], ISNULL(AMOUNT,0) AS AMOUNT, DISABLITY_TYPE, PLAN_NAME,&#xD;&#xA;ROW_NUMBER() OVER (ORDER BY (CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT))&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)) AS FOR_SORT&#xD;&#xA;FROM &#xD;&#xA;( &#xD;&#xA;SELECT TEMP.[MONTH],TEMP.[COUNT],TEMP.AMOUNT, TEMP.DISABLITY_TYPE, TEMP.PLAN_NAME &#xD;&#xA;FROM TEMP_TABLE_FOR_REPORT TEMP &#xD;&#xA;LEFT OUTER JOIN @MONTHRECORDS C ON C.COL1=1&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT STUFF(CONVERT(VARCHAR(10),MONTH_YEAR,103),1,3,'') AS [MONTH],NULL,NULL,NULL,NULL FROM @MONTHRECORDS&#xD;&#xA;WHERE &#xD;&#xA;STUFF(CONVERT(VARCHAR(10), MONTH_YEAR ,103),1,3,'') NOT IN &#xD;&#xA;( SELECT [MONTH] FROM TEMP_TABLE_FOR_REPORT WITH(NOLOCK)&#xD;&#xA;WHERE [MONTH] &gt;= STUFF(CONVERT(VARCHAR(10),@FROM,103),1,3,'') OR [MONTH] &lt;= STUFF(CONVERT(VARCHAR(10),@TO,103),1,3,'')&#xD;&#xA;GROUP BY [MONTH]) &#xD;&#xA;) Q&#xD;&#xA;&#xD;&#xA;GROUP BY [MONTH], DISABLITY_TYPE, PLAN_NAME, [COUNT], [AMOUNT]&#xD;&#xA;ORDER BY CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT)&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)&#xD;&#xA;&#xD;&#xA;DROP TABLE TEMP_TABLE_FOR_REPORT&#xD;&#xA;">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
        <parameter ID="@PLAN_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptIAPCounts&amp;AmountsbyMonthReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('DBO.TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE DBO.TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;DECLARE @IN DATETIME &#xD;&#xA;SELECT @IN=  DATEADD(MM ,0,@FROM)&#xD;&#xA;DECLARE @MONTHRECORDS TABLE (MONTH_YEAR DATETIME, COL1 INT) &#xD;&#xA;&#xD;&#xA;WHILE (@TO&gt;@IN) &#xD;&#xA;BEGIN&#xD;&#xA;INSERT INTO @MONTHRECORDS (MONTH_YEAR , COL1) &#xD;&#xA;SELECT DATEADD(MM ,0,@IN),1  &#xD;&#xA;SET @IN= DATEADD(MM ,1,@IN)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; [MONTH] = STUFF(CONVERT(VARCHAR(10), PHH.PAYMENT_DATE,103),1,3,'') &#xD;&#xA; , SCV.DESCRIPTION AS FUND_TYPE &#xD;&#xA; , COUNT(*) AS COUNT&#xD;&#xA; , SUM(PHDE.AMOUNT * PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA; , ROW_NUMBER() OVER (ORDER BY (SCV.DESCRIPTION)) AS ROWNUM&#xD;&#xA;INTO DBO.TEMP_TABLE_FOR_REPORT&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;          INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;          INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;          INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA;          INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;          LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPBA.FUNDS_TYPE_ID AND SCV.CODE_VALUE = SPBA.FUNDS_TYPE_VALUE&#xD;&#xA;)&#xD;&#xA;WHERE &#xD;&#xA;PHH.PAYMENT_DATE &gt;= @FROM AND PHH.PAYMENT_DATE &lt;= @TO&#xD;&#xA;AND PBXR.PLAN_ID = 1&#xD;&#xA;&#xD;&#xA;GROUP BY SCV.DESCRIPTION, STUFF(CONVERT(VARCHAR(10), PHH.PAYMENT_DATE,103),1,3,'')&#xD;&#xA;ORDER BY MONTH, FUND_TYPE&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT [MONTH] , FUND_TYPE , ISNULL([COUNT],0) AS [COUNT], ISNULL(AMOUNT,0) AS AMOUNT &#xD;&#xA;, ROW_NUMBER() OVER (ORDER BY (CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT))&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)) AS FOR_SORT &#xD;&#xA;FROM &#xD;&#xA;( &#xD;&#xA;SELECT [MONTH] , FUND_TYPE , [COUNT], AMOUNT&#xD;&#xA;FROM DBO.TEMP_TABLE_FOR_REPORT TEMP&#xD;&#xA;LEFT OUTER JOIN @MONTHRECORDS C ON C.COL1=1&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT STUFF(CONVERT(VARCHAR(10),MONTH_YEAR,103),1,3,'') AS [MONTH],NULL,NULL,NULL FROM @MONTHRECORDS&#xD;&#xA;WHERE &#xD;&#xA;STUFF(CONVERT(VARCHAR(10), MONTH_YEAR ,103),1,3,'') NOT IN &#xD;&#xA;( SELECT [MONTH] FROM DBO.TEMP_TABLE_FOR_REPORT WITH(NOLOCK)&#xD;&#xA;WHERE [MONTH] &gt;= STUFF(CONVERT(VARCHAR(10),@FROM,103),1,3,'') OR [MONTH] &lt;= STUFF(CONVERT(VARCHAR(10),@TO,103),1,3,'')&#xD;&#xA;GROUP BY [MONTH])&#xD;&#xA;) Q GROUP  BY [MONTH], FUND_TYPE, [COUNT], AMOUNT&#xD;&#xA;&#xD;&#xA;ORDER BY CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT)&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)&#xD;&#xA;&#xD;&#xA;DROP TABLE DBO.TEMP_TABLE_FOR_REPORT ">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptRe-employmentCountsbyMonth" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF @FROM &lt;&gt; '01/01/1900' AND @TO &lt;&gt; '01/01/1900'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT &#xD;&#xA;SP.FIRST_NAME + ' ' + SP.LAST_NAME AS NAME,&#xD;&#xA;SPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;SBA.RETIREMENT_DATE,&#xD;&#xA;SCV.DESCRIPTION AS BENEFIT_OPTION,&#xD;&#xA;PL.PLAN_NAME,&#xD;&#xA;SCV1.DESCRIPTION AS RETIREMENT_TYPE,&#xD;&#xA;SCV2.DESCRIPTION AS BENEFIT_TYPE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.STATUS_VALUE = 'SPND' AND SPAS.SUSPENSION_STATUS_REASON_VALUE IN('REE1','REE2','REE3','REE4','REE5','REED') AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID &#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID  &#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV ON XR.BENEFIT_OPTION_ID = SCV.CODE_ID AND XR.BENEFIT_OPTION_VALUE = SCV.CODE_VALUE&#xD;&#xA;INNER JOIN SGT_PLAN PL ON XR.PLAN_ID = PL.PLAN_ID AND PL.PLAN_ID &lt;&gt; 1&#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV1 ON SPA.RETIREMENT_TYPE_ID = SCV1.CODE_ID AND SPA.RETIREMENT_TYPE_VALUE = SCV1.CODE_VALUE&#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV2 ON SBA.BENEFIT_TYPE_ID = SCV2.CODE_ID AND SBA.BENEFIT_TYPE_VALUE = SCV2.CODE_VALUE&#xD;&#xA;WHERE SPAS.STATUS_EFFECTIVE_DATE &gt;= @FROM AND SPAS.STATUS_EFFECTIVE_DATE &lt;= @TO  &#xD;&#xA;GROUP BY&#xD;&#xA;SP.FIRST_NAME,&#xD;&#xA;SP.LAST_NAME,&#xD;&#xA;SPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;SBA.RETIREMENT_DATE,&#xD;&#xA;SCV.DESCRIPTION,&#xD;&#xA;PL.PLAN_NAME,&#xD;&#xA;SCV1.DESCRIPTION,&#xD;&#xA;SCV2.DESCRIPTION&#xD;&#xA;ORDER BY SP.FIRST_NAME + ' ' + SP.LAST_NAME&#xD;&#xA;END&#xD;&#xA;ELSE&#xD;&#xA;BEGIN&#xD;&#xA;SELECT &#xD;&#xA;SP.FIRST_NAME + ' ' + SP.LAST_NAME AS NAME,&#xD;&#xA;SPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;SBA.RETIREMENT_DATE,&#xD;&#xA;SCV.DESCRIPTION AS BENEFIT_OPTION,&#xD;&#xA;PL.PLAN_NAME,&#xD;&#xA;SCV1.DESCRIPTION AS RETIREMENT_TYPE,&#xD;&#xA;SCV2.DESCRIPTION AS BENEFIT_TYPE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.STATUS_VALUE = 'SPND' AND SPAS.SUSPENSION_STATUS_REASON_VALUE IN('REE1','REE2','REE3','REE4','REE5','REED') AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID &#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR XR WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID  &#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV ON XR.BENEFIT_OPTION_ID = SCV.CODE_ID AND XR.BENEFIT_OPTION_VALUE = SCV.CODE_VALUE&#xD;&#xA;INNER JOIN SGT_PLAN PL ON XR.PLAN_ID = PL.PLAN_ID AND PL.PLAN_ID &lt;&gt; 1&#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV1 ON SPA.RETIREMENT_TYPE_ID = SCV1.CODE_ID AND SPA.RETIREMENT_TYPE_VALUE = SCV1.CODE_VALUE&#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV2 ON SBA.BENEFIT_TYPE_ID = SCV2.CODE_ID AND SBA.BENEFIT_TYPE_VALUE = SCV2.CODE_VALUE&#xD;&#xA;GROUP BY&#xD;&#xA;SP.FIRST_NAME,&#xD;&#xA;SP.LAST_NAME,&#xD;&#xA;SPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;SBA.RETIREMENT_DATE,&#xD;&#xA;SCV.DESCRIPTION,&#xD;&#xA;PL.PLAN_NAME,&#xD;&#xA;SCV1.DESCRIPTION,&#xD;&#xA;SCV2.DESCRIPTION&#xD;&#xA;ORDER BY SP.FIRST_NAME + ' ' + SP.LAST_NAME&#xD;&#xA;END">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptRetireeList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--Note : Retiree List Report By Dates(online report) and New Retiree List Report (which gets generated from Payment Batch) shares same method , query and Report format.&#xD;&#xA;--Please make sure to change / test both the Reports whenever there is any change to the code , query or report design.&#xD;&#xA;&#xD;&#xA;--RID 71572 Added UnionCode and order by union and then name&#xD;&#xA;IF @SCHEDULEID = 0&#xD;&#xA;BEGIN&#xD;&#xA;&#x9;--Retiree List Report By Dates(online report)&#xD;&#xA;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;   SP.MPI_PERSON_ID&#xD;&#xA;&#x9; , SP.DATE_OF_BIRTH&#xD;&#xA;&#x9; , SP.LAST_NAME AS PAYEE_LAST_NAME&#xD;&#xA;&#x9; , SP.FIRST_NAME AS PAYEE_FIRST_NAME&#xD;&#xA;&#x9; , SBA.RETIREMENT_DATE&#xD;&#xA;&#x9; , CASE WHEN SBA.RETIREMENT_DATE &lt; @PAYMENTDATE THEN 'Yes' ELSE '' END AS RETRO&#xD;&#xA;&#x9; , CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL THEN 'Disability - Conversion'&#xD;&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,'N') = 'Y' THEN 'MD - RD Conversion'&#xD;&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(SBA.MIN_DISTRIBUTION_FLAG,'N') = 'Y' THEN 'Minimum Distribtion'&#xD;&#xA;&#x9;&#x9;&#x9;ELSE  SCV.DESCRIPTION END AS RETIREMENT_TYPE&#xD;&#xA;&#x9; , SUBSTRING(dbo.fn_GET_DECRYPTED_TEXT(SP.SSN),6,9) AS SS4&#xD;&#xA;&#x9; , @PAYMENTDATE AS PAYMENTDATE&#xD;&#xA;&#x9; , dbo.fn_GET_DECRYPTED_TEXT(SP.SSN) AS DECRYPTED_SSN&#xD;&#xA;&#x9; , UNIONCODE = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( SP.SSN, DATEADD(YEAR, -1, @PAYMENTDATE), @PAYMENTDATE )&#xD;&#xA;&#x9; INTO #TEMP&#xD;&#xA;&#x9; FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;&#x9;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;&#x9;INNER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SPA.BENEFIT_ACCOUNT_TYPE_ID = SCV.CODE_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = SCV.CODE_VALUE &#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PHH.PAYMENT_DATE = @PAYMENTDATE&#xD;&#xA;&#x9;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER PHH1 ON PHH.PAYEE_ACCOUNT_ID = PHH1.PAYEE_ACCOUNT_ID AND PHH1.PAYMENT_DATE &lt; @PAYMENTDATE&#xD;&#xA;&#x9;WHERE ISNULL(ONETIME_PAYMENT_FLAG,'N') = 'N' AND ISNULL(RETIREE_INCR_FLAG,'N') = 'N' AND PHH1.PAYMENT_HISTORY_HEADER_ID IS NULL AND SPAS.STATUS_VALUE &lt;&gt; 'CNCL' AND PHH.PAYMENT_DATE = @PAYMENTDATE&#xD;&#xA;&#x9;AND ISNULL(SPA.ACCOUNT_RELATION_VALUE,'') = 'PART' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' &#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;SELECT &#xD;&#xA;&#x9;TEMP.MPI_PERSON_ID&#xD;&#xA;&#x9;, TEMP.DATE_OF_BIRTH&#xD;&#xA;&#x9;, TEMP.PAYEE_LAST_NAME&#xD;&#xA;&#x9;, TEMP.PAYEE_FIRST_NAME&#xD;&#xA;&#x9;, TEMP.RETRO&#xD;&#xA;&#x9;, TEMP.RETIREMENT_DATE&#xD;&#xA;&#x9;, TEMP.RETIREMENT_TYPE&#xD;&#xA;&#x9;, TEMP.SS4&#xD;&#xA;&#x9;, TEMP.PAYMENTDATE&#xD;&#xA;&#x9;, TEMP.DECRYPTED_SSN&#xD;&#xA;&#x9;,u.UnionCode&#xD;&#xA;&#x9;, Occupation =  u.Name&#xD;&#xA;&#x9;FROM #TEMP TEMP&#xD;&#xA;&#x9;LEFT OUTER JOIN PILLARS.dbo.Unions u WITH (NOLOCK) on TEMP.UnionCode = u.UnionCode&#xD;&#xA;&#x9;ORDER BY OCCUPATION, TEMP.PAYEE_LAST_NAME, TEMP.PAYEE_FIRST_NAME, SS4&#xD;&#xA;&#xD;&#xA;&#x9;DROP TABLE #TEMP&#xD;&#xA;END&#xD;&#xA;ELSE&#xD;&#xA;BEGIN&#x9;&#xD;&#xA;&#x9;--New Retiree List Report(which gets generated from Payment Batch)&#xD;&#xA;&#x9;SELECT &#xD;&#xA;&#x9; TEMP.MPI_PERSON_ID&#xD;&#xA;&#x9; , SP.DATE_OF_BIRTH&#xD;&#xA;&#x9; , TEMP.PAYEE_LAST_NAME&#xD;&#xA;&#x9; , TEMP.PAYEE_FIRST_NAME&#xD;&#xA;&#x9; , TEMP.RETIREMENT_DATE&#xD;&#xA;&#x9; , CASE WHEN TEMP.RETIREMENT_DATE &lt; @PAYMENTDATE THEN 'Yes' ELSE '' END AS RETRO&#xD;&#xA;&#x9; , CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL THEN 'Disability - Conversion'&#xD;&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,'N') = 'Y' THEN 'MD - RD Conversion'&#xD;&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(SBA.MIN_DISTRIBUTION_FLAG,'N') = 'Y' THEN 'Minimum Distribtion'&#xD;&#xA;&#x9;&#x9;&#x9;ELSE  SCV.DESCRIPTION END AS RETIREMENT_TYPE&#xD;&#xA;&#x9; , SUBSTRING(dbo.fn_GET_DECRYPTED_TEXT(TEMP.SSN),6,9) AS SS4&#xD;&#xA;&#x9; , @PAYMENTDATE AS PAYMENTDATE&#xD;&#xA;&#x9; , dbo.fn_GET_DECRYPTED_TEXT(TEMP.SSN) AS DECRYPTED_SSN&#xD;&#xA;&#x9; , UNIONCODE = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( TEMP.SSN, DATEADD(YEAR, -1, @PAYMENTDATE), @PAYMENTDATE )&#xD;&#xA;&#x9;INTO #TEMP1&#xD;&#xA;&#x9;FROM TEMP_TABLE_FOR_PAYMENT TEMP WITH(NOLOCK)&#xD;&#xA;&#x9; LEFT OUTER JOIN SGT_PERSON SP ON TEMP.PERSON_ID = SP.PERSON_ID&#xD;&#xA;&#x9; INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON TEMP.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;&#x9; INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9; INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON TEMP.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;&#x9; INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;&#x9; LEFT OUTER JOIN &#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9; SELECT DISTINCT A.PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_HISTORY_HEADER  A WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9; WHERE ISNULL(A.PAYMENT_SCHEDULE_ID,0) &lt;&gt; @SCHEDULEID&#xD;&#xA;&#x9;&#x9;) PREVPHH ON PREVPHH.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9; LEFT OUTER JOIN SGS_CODE_VALUE BTP WITH(NOLOCK) ON TEMP.BENEFIT_ACCOUNT_TYPE_ID = BTP.CODE_ID AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE = BTP.CODE_VALUE&#xD;&#xA;&#x9; INNER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON TEMP.BENEFIT_ACCOUNT_TYPE_ID = SCV.CODE_ID AND TEMP.BENEFIT_ACCOUNT_TYPE_VALUE = SCV.CODE_VALUE &#xD;&#xA;&#x9; WHERE &#xD;&#xA;&#x9;PAPI.START_DATE &lt;= @PAYMENTDATE AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;&#x9;AND PREVPHH.PAYEE_ACCOUNT_ID IS NULL &#xD;&#xA;&#x9;AND TEMP.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA;&#x9;AND TEMP.ACCOUNT_RELATION_VALUE = 'PART'&#xD;&#xA;&#xD;&#xA;&#x9;GROUP BY TEMP.MPI_PERSON_ID,TEMP.PAYEE_FIRST_NAME, TEMP.PAYEE_LAST_NAME, TEMP.RETIREMENT_DATE,SCV.DESCRIPTION, TEMP.SSN,SBA.DISABILITY_CONVERSION_DATE,SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,SBA.MIN_DISTRIBUTION_FLAG,&#xD;&#xA;&#x9;SP.DATE_OF_BIRTH&#xD;&#xA;&#xD;&#xA;&#x9;SELECT &#xD;&#xA;&#x9;TEMP.MPI_PERSON_ID&#xD;&#xA;&#x9;, TEMP.DATE_OF_BIRTH&#xD;&#xA;&#x9;, TEMP.PAYEE_LAST_NAME&#xD;&#xA;&#x9;, TEMP.PAYEE_FIRST_NAME&#xD;&#xA;&#x9;, TEMP.RETRO&#xD;&#xA;&#x9;, TEMP.RETIREMENT_DATE&#xD;&#xA;&#x9;, TEMP.RETIREMENT_TYPE&#xD;&#xA;&#x9;, TEMP.SS4&#xD;&#xA;&#x9;, TEMP.PAYMENTDATE&#xD;&#xA;&#x9;, TEMP.DECRYPTED_SSN&#xD;&#xA;&#x9;,u.UnionCode&#xD;&#xA;&#x9;, Occupation =  u.Name&#xD;&#xA;&#x9;FROM #TEMP1 TEMP&#xD;&#xA;&#x9;LEFT OUTER JOIN PILLARS.dbo.Unions u WITH (NOLOCK) on TEMP.UnionCode = u.UnionCode&#xD;&#xA;&#x9;ORDER BY OCCUPATION, TEMP.PAYEE_LAST_NAME, TEMP.PAYEE_FIRST_NAME, SS4&#xD;&#xA;&#xD;&#xA;&#x9;DROP TABLE #TEMP1&#xD;&#xA;END">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@SCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptWorkflowBacklogReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;&#xD;&#xA;DECLARE @TEMPTABLE AS TABLE&#xD;&#xA;( MPID_ORGID VARCHAR(100),&#xD;&#xA; LASTNAME_ORGNAME VARCHAR(100),&#xD;&#xA; INITIATED DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(100), &#xD;&#xA; [ROLE] VARCHAR(100),  &#xD;&#xA; ELAPSED_TIME INT,&#xD;&#xA;    ACTIVITY_NAME VARCHAR(100), &#xD;&#xA;    ACTIVITY_ID INT,&#xD;&#xA;    USERNAME VARCHAR(100)&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @TEMPTABLE&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA; CASE WHEN SPI.PERSON_ID IS NULL THEN SO.MPI_ORG_ID ELSE SP.MPI_PERSON_ID END AS MPID&#xD;&#xA; , CASE WHEN SPI.PERSON_ID IS NULL THEN SO.ORG_NAME ELSE SP.LAST_NAME END AS LASTNAME_ORGNAME&#xD;&#xA; , (SAI.CREATED_DATE) AS INITIATED&#xD;&#xA; , CV.DESCRIPTION AS CURRENT_STATUS&#xD;&#xA; , ROL.ROLE_DESCRIPTION AS [ROLE]&#xD;&#xA; , ISNULL(DBO.GETWORKINGTIMEINMINUTES(SAI.CREATED_DATE, GETDATE()),0) AS ELAPSED_TIME&#xD;&#xA; , SA.DISPLAY_NAME AS ACTIVITY_NAME&#xD;&#xA; , SAI.ACTIVITY_ID&#xD;&#xA; , SAI.CHECKED_OUT_USER AS UserName&#xD;&#xA;&#xD;&#xA;FROM DBO.SGW_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA; LEFT JOIN SGS_CODE_VALUE CV WITH(NOLOCK) ON SAI.STATUS_ID=CV.CODE_ID AND SAI.STATUS_VALUE=CV.CODE_VALUE&#xD;&#xA; INNER JOIN SGW_ACTIVITY SA WITH(NOLOCK) ON SA.ACTIVITY_ID = SAI.ACTIVITY_ID&#xD;&#xA; INNER JOIN SGW_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA; LEFT JOIN SGT_PERSON SP WITH(NOLOCK) ON SPI.PERSON_ID=SP.PERSON_ID&#xD;&#xA; LEFT JOIN SGT_ORGANIZATION SO WITH(NOLOCK) ON SPI.ORG_ID=SO.ORG_ID&#xD;&#xA; LEFT JOIN SGS_ROLES ROL WITH(NOLOCK) ON SA.ROLE_ID=ROL.ROLE_ID&#xD;&#xA;&#xD;&#xA;WHERE &#xD;&#xA;SAI.STATUS_VALUE NOT IN ('CANC','PROC') &#xD;&#xA;&#xD;&#xA;SELECT MPID_ORGID,LASTNAME_ORGNAME,INITIATED,CURRENT_STATUS,[ROLE],&#xD;&#xA;CAST((ELAPSED_TIME)/480 AS VARCHAR(3)) AS ELAPSED_TIME, ACTIVITY_NAME, USERNAME &#xD;&#xA;FROM @TEMPTABLE T&#xD;&#xA;INNER JOIN SGW_ACTIVITY SA ON SA.ACTIVITY_ID = T.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGW_PROCESS SP ON SP.PROCESS_ID = SA.PROCESS_ID&#xD;&#xA;&#xD;&#xA;WHERE  CAST((ELAPSED_TIME)/480 AS VARCHAR(3)) &gt;= &#xD;&#xA;       CASE WHEN SP.PROCESS_ID IN(1,2,3,5,6,8,12,16,21,22) THEN 10&#xD;&#xA;       WHEN SP.PROCESS_ID IN(18,24) THEN 2&#xD;&#xA;       WHEN SP.PROCESS_ID IN(4,7,9,10,19,23) THEN 5&#xD;&#xA;       WHEN SP.PROCESS_ID IN(14,15,17) THEN 15&#xD;&#xA;      END&#xD;&#xA;ORDER BY ELAPSED_TIME/480 DESC,MPID_ORGID&#xD;&#xA;SET NOCOUNT OFF">
      <parameters />
    </query>
    <query ID="rptContinuingSurvivorBenefitCountsandAmounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;IF OBJECT_ID('TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;DECLARE @IN DATETIME &#xD;&#xA;SELECT @IN=  DATEADD(MM ,0,@FROM)&#xD;&#xA;DECLARE @MONTHRECORDS TABLE (MONTH_YEAR DATETIME, COL1 INT) &#xD;&#xA;&#xD;&#xA;WHILE (@TO&gt;@IN) &#xD;&#xA;BEGIN&#xD;&#xA;INSERT INTO @MONTHRECORDS (MONTH_YEAR , COL1) &#xD;&#xA;SELECT DATEADD(MM ,0,@IN),1  &#xD;&#xA;SET @IN= DATEADD(MM ,1,@IN)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; [MONTH] = STUFF(CONVERT(VARCHAR(10), PHH.PAYMENT_DATE,103),1,3,'')  &#xD;&#xA; , CASE WHEN SCV.DESCRIPTION = 'Retirement' THEN 'Death (Post-Retirement)' ELSE SCV.DESCRIPTION END AS BENEFIT_TYPE&#xD;&#xA; , COUNT(*) AS COUNT&#xD;&#xA; , SUM(PHDE.AMOUNT * PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA; , ROW_NUMBER() OVER (ORDER BY (SCV.DESCRIPTION)) AS ROWNUM&#xD;&#xA;&#xD;&#xA;INTO TEMP_TABLE_FOR_REPORT&#xD;&#xA;&#xD;&#xA;    FROM (&#xD;&#xA;    SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;          INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;       INNER JOIN SGT_PAYMENT_ITEM_TYPE  PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID=SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;          INNER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.BENEFIT_ACCOUNT_TYPE_ID AND SCV.CODE_VALUE = SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;          )&#xD;&#xA;    WHERE &#xD;&#xA;    PHH.PAYMENT_DATE &gt;= @FROM AND PHH.PAYMENT_DATE &lt;= @TO&#xD;&#xA;    AND (SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT')&#xD;&#xA;    OR SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND SPA.ACCOUNT_RELATION_VALUE = 'BENE')&#xD;&#xA; AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAS.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS WITH (NOLOCK)&#xD;&#xA;          WHERE SPAS.PAYEE_ACCOUNT_ID = PAS.PAYEE_ACCOUNT_ID &#xD;&#xA;          ORDER BY PAS.PAYEE_ACCOUNT_ID DESC)&#xD;&#xA; AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')&#xD;&#xA;    GROUP BY SCV.DESCRIPTION, STUFF(CONVERT(VARCHAR(10), PHH.PAYMENT_DATE,103),1,3,'')&#xD;&#xA;    ORDER BY [MONTH]&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;SELECT Q.[MONTH],Q.BENEFIT_TYPE,ISNULL(Q.[COUNT],0) AS [COUNT], ISNULL(Q.AMOUNT,0) AS AMOUNT,&#xD;&#xA;ROW_NUMBER() OVER (ORDER BY (CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT))&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)) AS FOR_SORT&#xD;&#xA;FROM &#xD;&#xA;( &#xD;&#xA;SELECT TEMP.[MONTH],TEMP.BENEFIT_TYPE,TEMP.[COUNT],TEMP.AMOUNT&#xD;&#xA;FROM TEMP_TABLE_FOR_REPORT TEMP&#xD;&#xA;LEFT OUTER JOIN @MONTHRECORDS C ON C.COL1=1&#xD;&#xA; &#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT STUFF(CONVERT(VARCHAR(10),MONTH_YEAR,103),1,3,'') AS [MONTH],NULL,NULL,NULL FROM @MONTHRECORDS&#xD;&#xA;WHERE &#xD;&#xA;STUFF(CONVERT(VARCHAR(10), MONTH_YEAR ,103),1,3,'') NOT IN &#xD;&#xA;(&#xD;&#xA;SELECT [MONTH]&#xD;&#xA;FROM TEMP_TABLE_FOR_REPORT WITH(NOLOCK)&#xD;&#xA;WHERE [MONTH] &gt;= STUFF(CONVERT(VARCHAR(10),@FROM,103),1,3,'') OR [MONTH] &lt;= STUFF(CONVERT(VARCHAR(10),@TO,103),1,3,'')&#xD;&#xA;GROUP BY [MONTH]&#xD;&#xA;)&#xD;&#xA;) Q &#xD;&#xA;GROUP BY Q.[MONTH],Q.BENEFIT_TYPE,Q.[COUNT],Q.AMOUNT &#xD;&#xA;ORDER BY CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT)&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)&#xD;&#xA;&#xD;&#xA;DROP TABLE TEMP_TABLE_FOR_REPORT">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptDeceasedRetireeCountsandAmounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('#TEMP_TABLE_FOR_REPORT') IS NOT NULL&#xD;&#xA;BEGIN&#xD;&#xA; DROP TABLE #TEMP_TABLE_FOR_REPORT&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;DECLARE @IN DATETIME &#xD;&#xA;SELECT @IN=  DATEADD(MM ,0,@FROM)&#xD;&#xA;&#xD;&#xA;DECLARE @MONTHRECORDS TABLE (MONTH_YEAR DATETIME, COL1 INT) &#xD;&#xA;&#xD;&#xA;WHILE (@TO&gt;@IN) &#xD;&#xA;BEGIN&#xD;&#xA;INSERT INTO @MONTHRECORDS (MONTH_YEAR , COL1) &#xD;&#xA;SELECT DATEADD(MM ,0,@IN),1&#xD;&#xA;SET @IN= DATEADD(MM ,1,@IN)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; [MONTH] = STUFF(CONVERT(VARCHAR(10), SP.DATE_OF_DEATH,103),1,3,'')&#xD;&#xA; , SCV.DESCRIPTION AS BENEFIT_OPTION&#xD;&#xA; , COUNT(SP.DATE_OF_DEATH) AS COUNTS&#xD;&#xA; , SUM(PHDE.AMOUNT * PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA; , ROW_NUMBER() OVER (ORDER BY (SCV.DESCRIPTION)) AS ROWNUM&#xD;&#xA;INTO #TEMP_TABLE_FOR_REPORT&#xD;&#xA;FROM (SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA WITH (NOLOCK) ON PA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;AND PA.PERSON_ACCOUNT_ID = (SELECT TOP 1 P.PERSON_ACCOUNT_ID FROM SGT_PERSON_ACCOUNT P WHERE P.PERSON_ID = SP.PERSON_ID)&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPAS.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE  PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = PBXR.BENEFIT_OPTION_ID AND SCV.CODE_VALUE = PBXR.BENEFIT_OPTION_VALUE&#xD;&#xA;)&#xD;&#xA;WHERE&#xD;&#xA;SP.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND CONVERT(VARCHAR(10),DATE_OF_DEATH,101) &lt;&gt; '01/01/1753'&#xD;&#xA;AND SP.DATE_OF_DEATH &gt;= @FROM AND SP.DATE_OF_DEATH &lt;= @TO&#xD;&#xA;AND SPAS.STATUS_VALUE = 'CMPL' &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAS.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS PAS WITH(NOLOCK)&#xD;&#xA;         WHERE PAS.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;         ORDER BY PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;GROUP BY STUFF(CONVERT(VARCHAR(10), SP.DATE_OF_DEATH,103),1,3,''), SCV.DESCRIPTION&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT Q.[MONTH],Q.BENEFIT_OPTION,ISNULL(Q.COUNTS,0) AS COUNTS,ISNULL(Q.AMOUNT,0) AS AMOUNT,&#xD;&#xA;ROW_NUMBER() OVER (ORDER BY (CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT))&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)) AS FOR_SORT FROM &#xD;&#xA;( &#xD;&#xA;SELECT TEMP.[MONTH],TEMP.BENEFIT_OPTION,TEMP.COUNTS,TEMP.AMOUNT&#xD;&#xA;FROM #TEMP_TABLE_FOR_REPORT TEMP&#xD;&#xA;LEFT OUTER JOIN @MONTHRECORDS C ON C.COL1=1&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT STUFF(CONVERT(VARCHAR(10),MONTH_YEAR,103),1,3,'') AS [MONTH],NULL,NULL,NULL FROM @MONTHRECORDS&#xD;&#xA;WHERE &#xD;&#xA;STUFF(CONVERT(VARCHAR(10), MONTH_YEAR ,103),1,3,'') NOT IN &#xD;&#xA;( SELECT [MONTH] FROM #TEMP_TABLE_FOR_REPORT WITH(NOLOCK)&#xD;&#xA;WHERE [MONTH] &gt;= STUFF(CONVERT(VARCHAR(10),@FROM,103),1,3,'') OR [MONTH] &lt;= STUFF(CONVERT(VARCHAR(10),@TO,103),1,3,'')&#xD;&#xA;GROUP BY [MONTH])&#xD;&#xA;) Q &#xD;&#xA;GROUP BY Q.[MONTH],Q.BENEFIT_OPTION,Q.COUNTS,Q.AMOUNT&#xD;&#xA;ORDER BY CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),1,3,'') AS INT)&#xD;&#xA;,CAST(STUFF(CONVERT(VARCHAR(10),[MONTH],103),3,7,'') AS INT)&#xD;&#xA;&#xD;&#xA;DROP TABLE #TEMP_TABLE_FOR_REPORT&#xD;&#xA;">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptWorkflowMetricsDetailReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;&#xD;&#xA;DECLARE @CTR AS TABLE&#xD;&#xA;( &#xD;&#xA; ACTIVITY_INSTANCE_ID INT,&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; ORG_ID INT,&#xD;&#xA; CREATED_DATE DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(4),&#xD;&#xA; MODIFIED_BY VARCHAR(50),&#xD;&#xA; UNPC INT,&#xD;&#xA; INPC INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; RELE INT,&#xD;&#xA; SUSP INT,&#xD;&#xA; CANC INT,&#xD;&#xA; RETU INT,&#xD;&#xA; REAU INT,&#xD;&#xA; RESU INT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DECLARE @TIMEDIF AS TABLE&#xD;&#xA;( &#xD;&#xA; ACTIVITY_INSTANCE_ID INT,&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; ORG_ID INT,&#xD;&#xA; CREATED_DATE DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(4),&#xD;&#xA; MODIFIED_BY VARCHAR(50),&#xD;&#xA; UNPC INT,&#xD;&#xA; INPC INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; RELE INT,&#xD;&#xA; SUSP INT,&#xD;&#xA; CANC INT,&#xD;&#xA; RETU INT,&#xD;&#xA; REAU INT,&#xD;&#xA; RESU INT&#xD;&#xA;)&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;INSERT INTO @CTR&#xD;&#xA; SELECT &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_ID ,&#xD;&#xA;  PROCESS_ID,&#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID ,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY, &#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] ,&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS REAU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;&#xD;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;    AI.ACTIVITY_Id,&#xD;&#xA;    AP.PROCESS_ID, &#xD;&#xA;    PERSON_ID ,&#xD;&#xA;    ORG_ID ,&#xD;&#xA;    AI.CREATED_DATE, &#xD;&#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xD;&#xA;    AI.MODIFIED_BY, &#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE AI&#xD;&#xA;    INNER JOIN SGW_ACTIVITY_INSTANCE_HISTORY AIH &#xD;&#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xD;&#xA;    INNER JOIN SGW_ACTIVITY AP &#xD;&#xA;     ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xD;&#xA;    INNER JOIN SGW_PROCESS_INSTANCE SPI &#xD;&#xA;     ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;   WHERE&#xD;&#xA;   CONVERT(DATETIME,CONVERT(VARCHAR,isnull(Start_Time,getDate()),109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,109) ,110)   &#xD;&#xA;      AND (CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,109) ,110) OR END_TIME IS NULL)&#xD;&#xA;   AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xD;&#xA;   AND (@qualifiedName IS NULL OR @qualifiedName = '' OR @qualifiedName = '0' OR @qualifiedName = AP.ACTIVITY_ID)&#xD;&#xA;   AND (@userID IS NULL OR @userID = '' OR lower(@userID) = lower(AI.modified_by))&#xD;&#xA;   AND (@personID IS NULL OR @personID = '' OR @personID = SPI.PERSON_ID)&#xD;&#xA;   AND (@orgID IS NULL OR @orgID = '' OR @orgID = SPI.ORG_ID)&#xD;&#xA;            AND (@status IS NULL OR @status = '' OR @status = AI.status_value) &#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   COUNT (STATUS_VALUE)&#xD;&#xA;   FOR STATUS_VALUE IN&#xD;&#xA;   ([UNPC] ,[INPC] ,[PROC] ,[RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xD;&#xA;  ) AS PVT&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_Id,&#xD;&#xA;  PROCESS_ID, &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;INSERT INTO @TIMEDIF&#xD;&#xA; SELECT &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_Id,&#xD;&#xA;  PROCESS_ID,   &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID ,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY,&#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] ,&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS REAU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;    AI.ACTIVITY_Id,&#xD;&#xA;    AP.PROCESS_ID, &#xD;&#xA;    PERSON_ID ,&#xD;&#xA;    ORG_ID ,&#xD;&#xA;    AI.CREATED_DATE, &#xD;&#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xD;&#xA;    AI.MODIFIED_BY,&#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE,&#xD;&#xA;    ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0) &#xD;&#xA;    AS DifMins&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE AI&#xD;&#xA;    INNER JOIN SGW_ACTIVITY_INSTANCE_HISTORY AIH &#xD;&#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xD;&#xA;   INNER JOIN SGW_ACTIVITY AP ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xD;&#xA;    INNER JOIN SGW_PROCESS_INSTANCE SPI &#xD;&#xA;     ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;   WHERE &#xD;&#xA;   CONVERT(DATETIME,CONVERT(VARCHAR,isnull(Start_Time,getDate()),109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,109) ,110)   &#xD;&#xA;      AND (CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,109) ,110) OR END_TIME IS NULL)&#xD;&#xA;   AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xD;&#xA;   AND (@qualifiedName IS NULL OR @qualifiedName = '' OR @qualifiedName = '0' OR @qualifiedName = AP.ACTIVITY_ID)&#xD;&#xA;   AND (@userID IS NULL OR @userID = '' OR lower(@userID) = lower(AI.modified_by))&#xD;&#xA;   AND (@personID IS NULL OR @personID = '' OR @personID = SPI.PERSON_ID)&#xD;&#xA;   AND (@orgID IS NULL OR @orgID = '' OR @orgID = SPI.ORG_ID)&#xD;&#xA;   AND (@status IS NULL OR @status = '' OR @status = AI.status_value) &#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   SUM(DifMins)&#xD;&#xA;   FOR STATUS_VALUE IN ( [UNPC] ,[INPC] ,[PROC], [RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xD;&#xA;  ) AS PVT&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_ID,&#xD;&#xA;  PROCESS_ID, &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT  PR.DESCRIPTION as PROCESS_NAME,&#xD;&#xA;  C.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  C.ACTIVITY_ID  AS ACTIVITY_PROFILE_ID,&#xD;&#xA;  AP.Name AS ACTIVITY_NAME,&#xD;&#xA;  AP.DISPLAY_NAME,&#xD;&#xA;  C.CREATED_DATE ,&#xD;&#xA;  CASE WHEN C.PERSON_ID IS NULL THEN O.MPI_ORG_ID WHEN C.ORG_ID IS NULL THEN SP.MPI_PERSON_ID END AS MPID_OrganizationID,&#xD;&#xA;  CV.DESCRIPTION AS CURRENT_STATUS,&#xD;&#xA;  CAST((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 as Varchar(3)) &#xD;&#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60 As Varchar(2))&#xD;&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480) &#xD;&#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60)*60)) as Varchar(2)),2)  AS CURRENT_DURATION,&#xD;&#xA;  C.UNPC AS UNPC_COUNT,&#xD;&#xA;  CAST((T.UNPC)/480 as Varchar(3)) +':' + Cast(((T.UNPC)- (T.UNPC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.UNPC) - (((T.UNPC)/480 * 480) + (((T.UNPC)- (T.UNPC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS UNPC_DURATION,&#xD;&#xA;  C.INPC AS INPC_COUNT,&#xD;&#xA;  CAST((T.INPC)/480 as Varchar(3)) +':' + Cast(((T.INPC)- (T.INPC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.INPC) - (((T.INPC)/480 * 480) + (((T.INPC)- (T.INPC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS INPC_DURATION,&#xD;&#xA;  C.[PROC] AS PROC_COUNT,&#xD;&#xA;  CAST((T.[PROC])/480 as Varchar(3)) +':' + Cast(((T.[PROC])- (T.[PROC])/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.[PROC]) - (((T.[PROC])/480 * 480) + (((T.[PROC])- (T.[PROC])/480 * 480)/60)*60)) as Varchar(2)),2)  AS PROC_DURATION,&#xD;&#xA;  C.RELE AS RELE_COUNT,&#xD;&#xA;  CAST((T.RELE)/480 as Varchar(3)) +':' + Cast(((T.RELE)- (T.RELE)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RELE) - (((T.RELE)/480 * 480) + (((T.RELE)- (T.RELE)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RELE_DURATION,&#xD;&#xA;  C.SUSP AS SUSP_COUNT,&#xD;&#xA;  CAST((T.SUSP)/480 as Varchar(3)) +':' + Cast(((T.SUSP)- (T.SUSP)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.SUSP) - (((T.SUSP)/480 * 480) + (((T.SUSP)- (T.SUSP)/480 * 480)/60)*60)) as Varchar(2)),2)  AS SUSP_DURATION,&#xD;&#xA;  C.CANC AS CANC_COUNT,&#xD;&#xA;  CAST((T.CANC)/480 as Varchar(3)) +':' + Cast(((T.CANC)- (T.CANC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.CANC) - (((T.CANC)/480 * 480) + (((T.CANC)- (T.CANC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS CANC_DURATION,&#xD;&#xA;  C.RETU AS RETU_COUNT,&#xD;&#xA;  CAST((T.RETU)/480 as Varchar(3)) +':' + Cast(((T.RETU)- (T.RETU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RETU) - (((T.RETU)/480 * 480) + (((T.RETU)- (T.RETU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RETU_DURATION,&#xD;&#xA;  C.REAU AS REAU_COUNT,&#xD;&#xA;  CAST((T.REAU)/480 as Varchar(3)) +':' + Cast(((T.REAU)- (T.REAU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.REAU) - (((T.REAU)/480 * 480) + (((T.REAU)- (T.REAU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS REAU_DURATION,&#xD;&#xA;  C.RESU AS RESU_COUNT,&#xD;&#xA;  CAST((T.RESU)/480 as Varchar(3)) +':' + Cast(((T.RESU)- (T.RESU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RESU) - (((T.RESU)/480 * 480) + (((T.RESU)- (T.RESU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RESU_DURATION,&#xD;&#xA;  C.MODIFIED_BY AS USER_ID&#xD;&#xA; FROM  @CTR C &#xD;&#xA; INNER JOIN @TIMEDIF T ON &#xD;&#xA; C.ACTIVITY_INSTANCE_ID = T.ACTIVITY_INSTANCE_ID and &#xD;&#xA; C.ACTIVITY_ID = T.ACTIVITY_ID AND&#xD;&#xA; C.PROCESS_ID = T.PROCESS_ID&#xD;&#xA; INNER JOIN SGW_ACTIVITY AP ON AP.ACTIVITY_ID=C.ACTIVITY_ID&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV ON CV.CODE_VALUE=C.CURRENT_STATUS AND CV.CODE_ID=20&#xD;&#xA; LEFT OUTER JOIN SGW_PROCESS PR on C.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA;    LEFT OUTER JOIN SGT_ORGANIZATION O ON O.ORG_ID = C.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON SP ON SP.PERSON_ID = C.PERSON_ID&#xD;&#xA;SET NOCOUNT OFF&#xD;&#xA;">
      <parameters>
        <parameter ID="@startTime" sfwDataType="DateTime" />
        <parameter ID="@endTime" sfwDataType="DateTime" />
        <parameter ID="@typeId" sfwDataType="int" />
        <parameter ID="@qualifiedName" sfwDataType="string" />
        <parameter ID="@userID" sfwDataType="string" />
        <parameter ID="@personID" sfwDataType="string" />
        <parameter ID="@orgID" sfwDataType="string" />
        <parameter ID="@status" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadActivityList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  * &#xA;FROM&#xA;  SGW_ACTIVITY WITH(NOLOCK) &#xA;ORDER  BY  DISPLAY_NAME">
      <parameters />
    </query>
    <query ID="LoadProcessNames" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_PROCESS WITH(NOLOCK)">
      <parameters />
    </query>
    <query ID="rptStaleDatedReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;      PAYEE_MPID_ORGANIZATION_ID,&#xD;&#xA;&#x9;  PAYEE_NAME_ORGANIZATION_NAME,&#xD;&#xA;&#x9;   ACCOUNT_RELATIONSHIP,&#xD;&#xA;&#x9;   FUND_TYPE,&#xD;&#xA;&#x9;   PAY_DATE,&#xD;&#xA;&#x9;   CHECK_NUMBER,&#xD;&#xA;&#x9;   PAYMENT_TYPE&#xD;&#xA;&#x9;   DIST_STATUS,&#xD;&#xA;&#x9;   GROSS,&#xD;&#xA;&#x9;   STATE_TAX,&#xD;&#xA;&#x9;   FED_TAX,&#xD;&#xA;&#x9;   NET,&#xD;&#xA;&#x9;   DEDUCTION,&#xD;&#xA;&#x9;   DATEOFDEATH,&#xD;&#xA;&#x9;   PLAN_ID,&#xD;&#xA;&#x9;   STATUS,&#xD;&#xA;&#x9;   DISTRIBUTION_STATUS_VALUE&#xD;&#xA;FROM(&#xD;&#xA;&#x9;SELECT &#xD;&#xA;&#x9;ISNULL(SP.MPI_PERSON_ID,SO.MPI_ORG_ID) AS PAYEE_MPID_ORGANIZATION_ID&#xD;&#xA;&#x9;, CASE WHEN SP.MPI_PERSON_ID IS NULL THEN SO.ORG_NAME ELSE SP.LAST_NAME + ' ' + SP.FIRST_NAME END AS PAYEE_NAME_ORGANIZATION_NAME&#xD;&#xA;&#x9;, CVDACCOUNTRELATION.DESCRIPTION AS ACCOUNT_RELATIONSHIP&#xD;&#xA;&#x9;, CVDFUNDTYPE.DESCRIPTION AS FUND_TYPE&#xD;&#xA;&#x9;, PHH.PAYMENT_DATE AS PAY_DATE&#xD;&#xA;&#x9;, PHD.CHECK_NUMBER&#xD;&#xA;&#x9;, CVDPAYMENT.DESCRIPTION AS PAYMENT_TYPE&#xD;&#xA;&#x9;, CVDSTATUS.DESCRIPTION AS DIST_STATUS&#xD;&#xA;&#x9;, SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END) AS GROSS&#xD;&#xA;&#x9;, SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS STATE_TAX&#xD;&#xA;&#x9;, SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS FED_TAX&#xD;&#xA;&#x9;, SUM(PIT.ITEM_TYPE_DIRECTION * AMOUNT) AS NET&#xD;&#xA;&#x9;, SUM(CASE WHEN PIT.CHECK_GROUP_CODE_VALUE = 'DEDT' AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'RRED' &#xD;&#xA;&#x9;   AND PIT.PAYEE_DETAIL_GROUP_VALUE &lt;&gt; 'FEDX' AND PIT.PAYEE_DETAIL_GROUP_VALUE &lt;&gt; 'STTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS DEDUCTION,&#xD;&#xA;&#x9; SP.DATE_OF_DEATH AS DATEOFDEATH,&#xD;&#xA;&#x9; PHH.PLAN_ID,&#xD;&#xA;&#x9; CASE WHEN PHD.DISTRIBUTION_STATUS_VALUE = 'STLE' THEN&#xD;&#xA;&#x9;      'Stale'&#xD;&#xA;&#x9;      WHEN PHD.DISTRIBUTION_STATUS_VALUE = '3YRS' THEN&#xD;&#xA;&#x9;      '3 Yrs &amp; Above'&#xD;&#xA;&#x9;      END AS STATUS,&#xD;&#xA;    PHD.DISTRIBUTION_STATUS_VALUE AS DISTRIBUTION_STATUS_VALUE&#xD;&#xA;&#x9;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK)&#xD;&#xA;&#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH WITH(NOLOCK) &#xD;&#xA;&#x9;   ON PHDSH.PAYMENT_HISTORY_DISTRIBUTION_ID = PHD.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;&#x9;   AND (PHDSH.DISTRIBUTION_STATUS_VALUE = 'STLE' OR PHDSH.DISTRIBUTION_STATUS_VALUE = '3YRS')&#xD;&#xA;   &#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH (NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL SPHD WITH(NOLOCK) ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = SPHD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;&#x9;LEFT OUTER JOIN SGS_CODE_VALUE CVDFUNDTYPE WITH(NOLOCK) ON CVDFUNDTYPE.CODE_ID = SPBA.FUNDS_TYPE_ID&#xD;&#xA;&#x9;   AND CVDFUNDTYPE.CODE_VALUE = SPBA.FUNDS_TYPE_VALUE&#xD;&#xA;&#xD;&#xA;&#x9;LEFT OUTER JOIN SGS_CODE_VALUE CVDACCOUNTRELATION WITH(NOLOCK) ON CVDACCOUNTRELATION.CODE_ID = SPA.ACCOUNT_RELATION_ID&#xD;&#xA;&#x9;   AND CVDACCOUNTRELATION.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;&#xD;&#xA;&#x9;LEFT OUTER JOIN SGT_PERSON SP WITH (NOLOCK) ON SP.PERSON_ID = PHH.PERSON_ID&#xD;&#xA;&#x9;LEFT OUTER JOIN SGT_ORGANIZATION SO WITH (NOLOCK) ON SO.ORG_ID = PHH.ORG_ID&#xD;&#xA;&#xD;&#xA;&#x9;LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATUS WITH (NOLOCK) ON CVDSTATUS.CODE_ID = PHD.DISTRIBUTION_STATUS_ID&#xD;&#xA;&#x9;   AND CVDSTATUS.CODE_VALUE = PHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;&#xD;&#xA;&#x9;LEFT OUTER JOIN SGS_CODE_VALUE CVDPAYMENT WITH(NOLOCK) ON CVDPAYMENT.CODE_ID = PHD.PAYMENT_METHOD_ID&#xD;&#xA;&#x9;   AND CVDPAYMENT.CODE_VALUE = PHD.PAYMENT_METHOD_VALUE&#xD;&#xA;   &#xD;&#xA;&#x9;WHERE (PHD.DISTRIBUTION_STATUS_VALUE = 'STLE' OR PHD.DISTRIBUTION_STATUS_VALUE = '3YRS')&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9; GROUP BY SP.MPI_PERSON_ID,PHD.CHECK_NUMBER, PHH.PAYMENT_DATE, SO.MPI_ORG_ID,&#xD;&#xA;&#x9;   SO.ORG_NAME, SP.LAST_NAME, SP.FIRST_NAME, CVDPAYMENT.DESCRIPTION,&#xD;&#xA;&#x9;   CVDSTATUS.DESCRIPTION, CVDACCOUNTRELATION.DESCRIPTION, CVDFUNDTYPE.DESCRIPTION, SP.DATE_OF_DEATH,PHH.PLAN_ID,PHD.DISTRIBUTION_STATUS_VALUE) STALE&#xD;&#xA;&#xD;&#xA;WHERE 1=1&#xD;&#xA;AND (@PLAN_ID IS NULL OR @PLAN_ID = '' OR @PLAN_ID = '0' OR @PLAN_ID = STALE.PLAN_ID)&#xD;&#xA;AND (STALE.PAY_DATE &gt;= @FromPayDate)&#xD;&#xA;AND (STALE.PAY_DATE &lt;= @ToPayDate) &#xD;&#xA;AND (@codeid IS NULL OR @codeid ='' OR STALE.DISTRIBUTION_STATUS_VALUE= @codeid )">
      <parameters>
        <parameter ID="@PLAN_ID" sfwDataType="string" />
        <parameter ID="@FromPayDate" sfwDataType="DateTime" />
        <parameter ID="@ToPayDate" sfwDataType="DateTime" />
        <parameter ID="@codeid" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptAgingReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;ISNULL(SP.MPI_PERSON_ID,SO.MPI_ORG_ID) AS PAYEE_MPID_ORGANIZATION_ID&#xD;&#xA;, CASE WHEN SP.MPI_PERSON_ID IS NULL THEN SO.ORG_NAME ELSE SP.LAST_NAME + ' ' + SP.FIRST_NAME END AS PAYEE_NAME_ORGANIZATION_NAME&#xD;&#xA;, CVDACCOUNTRELATION.DESCRIPTION AS ACCOUNT_RELATIONSHIP&#xD;&#xA;, CVDFUNDTYPE.DESCRIPTION AS FUND_TYPE&#xD;&#xA;, CVDPAYMENT.DESCRIPTION AS PAYMENT_TYPE&#xD;&#xA;, PHH.PAYMENT_DATE AS PAY_DATE&#xD;&#xA;, PHD.CHECK_NUMBER&#xD;&#xA;, CVDBENEFIT.DESCRIPTION AS BENEFIT_OPTION&#xD;&#xA;, SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END) AS GROSS&#xD;&#xA;, SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS STATE_TAX&#xD;&#xA;, SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS FED_TAX&#xD;&#xA;, SUM(PIT.ITEM_TYPE_DIRECTION * AMOUNT) AS NET&#xD;&#xA;, SUM(CASE WHEN PIT.CHECK_GROUP_CODE_VALUE = 'DEDT' AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'RRED' &#xD;&#xA;   AND PIT.PAYEE_DETAIL_GROUP_VALUE &lt;&gt; 'FEDX' AND PIT.PAYEE_DETAIL_GROUP_VALUE &lt;&gt; 'STTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS DEDUCTION&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK)&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH WITH(NOLOCK) &#xD;&#xA;   ON PHDSH.PAYMENT_HISTORY_DISTRIBUTION_ID = PHD.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;   AND PHDSH.DISTRIBUTION_STATUS_VALUE = 'OUTS'&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH (NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL SPHD WITH(NOLOCK) ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = SPHD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH (NOLOCK) ON PBXR.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDFUNDTYPE WITH(NOLOCK) ON CVDFUNDTYPE.CODE_ID = SPBA.FUNDS_TYPE_ID&#xD;&#xA;   AND CVDFUNDTYPE.CODE_VALUE = SPBA.FUNDS_TYPE_VALUE&#xD;&#xA;   &#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDBENEFIT WITH(NOLOCK) ON CVDBENEFIT.CODE_ID = PBXR.BENEFIT_OPTION_ID&#xD;&#xA;   AND CVDBENEFIT.CODE_VALUE = PBXR.BENEFIT_OPTION_VALUE&#xD;&#xA;   &#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDPAYMENT WITH(NOLOCK) ON CVDPAYMENT.CODE_ID = PHD.PAYMENT_METHOD_ID&#xD;&#xA;   AND CVDPAYMENT.CODE_VALUE = PHD.PAYMENT_METHOD_VALUE&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDACCOUNTRELATION WITH(NOLOCK) ON CVDACCOUNTRELATION.CODE_ID = SPA.ACCOUNT_RELATION_ID&#xD;&#xA;   AND CVDACCOUNTRELATION.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SP WITH (NOLOCK) ON SP.PERSON_ID = PHH.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION SO WITH (NOLOCK) ON SO.ORG_ID = PHH.ORG_ID&#xD;&#xA;&#xD;&#xA;WHERE PHD.DISTRIBUTION_STATUS_VALUE = 'OUTS'&#xD;&#xA;&#xD;&#xA;AND PHD.CHECK_ACH_EFFECTIVE_DATE &gt;= @FromDate AND PHD.CHECK_ACH_EFFECTIVE_DATE &lt;= @ToDate&#xD;&#xA;AND (@PLAN_ID IS NULL OR @PLAN_ID = '' OR @PLAN_ID = '0' OR @PLAN_ID = PHH.PLAN_ID)&#xD;&#xA;AND DATEDIFF(day,PHH.PAYMENT_DATE,GETDATE()) &gt;= 90&#xD;&#xA;&#xD;&#xA;GROUP BY SP.MPI_PERSON_ID,PHD.CHECK_NUMBER, PHH.PAYMENT_DATE, SO.MPI_ORG_ID,&#xD;&#xA;   SO.ORG_NAME, SP.LAST_NAME, SP.FIRST_NAME,&#xD;&#xA;   CVDACCOUNTRELATION.DESCRIPTION, CVDFUNDTYPE.DESCRIPTION,&#xD;&#xA;   CVDPAYMENT.DESCRIPTION, CVDBENEFIT.DESCRIPTION">
      <parameters>
        <parameter ID="@FromDate" sfwDataType="DateTime" />
        <parameter ID="@ToDate" sfwDataType="DateTime" />
        <parameter ID="@PLAN_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptDistributionStatusTransitionReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT &#xD;&#xA;CASE WHEN SP.MPI_PERSON_ID IS NOT NULL THEN SP.MPI_PERSON_ID ELSE SO.MPI_ORG_ID END AS MPID, &#xD;&#xA;PHD.CHECK_NUMBER,&#xD;&#xA;PHH.PAYMENT_DATE AS PAY_DATE,&#xD;&#xA;CVDSTATUS.DESCRIPTION AS DIST_STATUS,&#xD;&#xA;SPHDSH.TRANSACTION_DATE AS PROCESSED_DATE,&#xD;&#xA;CASE WHEN AA.PAYEE_ACCOUNT_ID IS NOT NULL THEN SUM(AA.GROSS) ELSE SUM(CASE WHEN (PIT.ITEM_TYPE_DIRECTION = 1 or PIT.ALLOW_ROLLOVER_CODE_VALUE = 'RRED') THEN AMOUNT * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) END AS GROSS, &#xD;&#xA;CASE WHEN AA.PAYEE_ACCOUNT_ID IS NOT NULL THEN SUM(AA.STATE_TAX) ELSE SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) END AS STATE_TAX, &#xD;&#xA;CASE WHEN AA.PAYEE_ACCOUNT_ID IS NOT NULL THEN SUM(AA.FED_TAX) ELSE SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (PIT.ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) END AS FED_TAX,&#xD;&#xA;CASE WHEN AA.PAYEE_ACCOUNT_ID IS NOT NULL THEN SUM(AA.NET) ELSE SUM(PIT.ITEM_TYPE_DIRECTION * AMOUNT) END AS NET,&#xD;&#xA;PL.PLAN_CODE AS [PLAN],&#xD;&#xA;@FromDate AS PROCESSED_DATE_FROM , @ToDate AS PROCESSED_DATE_TO&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SPHDSH WITH (NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON  PHD.PAYMENT_HISTORY_DISTRIBUTION_ID = SPHDSH.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH (NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = SPHDSH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL SPHD WITH(NOLOCK) ON SPHD.PAYMENT_HISTORY_HEADER_ID = SPHDSH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = SPHD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN PL ON PL.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SP WITH (NOLOCK) ON SP.PERSON_ID = PHH.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORGANIZATION SO WITH (NOLOCK) ON SO.ORG_ID = PHH.ORG_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CVDSTATUS WITH (NOLOCK) ON CVDSTATUS.CODE_ID = SPHDSH.DISTRIBUTION_STATUS_ID&#xD;&#xA;                  AND CVDSTATUS.CODE_VALUE = SPHDSH.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;--PIR 899                  &#xD;&#xA;--LEFT OUTER JOIN&#xD;&#xA;--(&#xD;&#xA;--      SELECT TOP 100 PERCENT PH.PAYEE_ACCOUNT_ID,PHD.PAYMENT_HISTORY_DISTRIBUTION_ID ,PH.PERSON_ID,PH.PAYMENT_DATE,&#xD;&#xA;--      SUM(CASE WHEN IT.ITEM_TYPE_DIRECTION = 1 THEN HD.AMOUNT ELSE 0 END) AS GROSS, &#xD;&#xA;--      SUM(CASE WHEN IT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (IT.ITEM_TYPE_DIRECTION * HD.AMOUNT) ELSE 0 END) AS STATE_TAX, &#xD;&#xA;--      SUM(CASE WHEN IT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (IT.ITEM_TYPE_DIRECTION * HD.AMOUNT) ELSE 0 END) AS FED_TAX,&#xD;&#xA;--      SUM(IT.ITEM_TYPE_DIRECTION * AMOUNT) AS NET&#xD;&#xA;--      FROM SGT_PAYMENT_HISTORY_HEADER PH &#xD;&#xA;--      INNER JOIN SGT_PAYMENT_HISTORY_DETAIL HD ON PH.PAYMENT_HISTORY_HEADER_ID = HD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;--      INNER JOIN SGT_PAYMENT_ITEM_TYPE IT WITH(NOLOCK) ON IT.PAYMENT_ITEM_TYPE_ID = HD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;--      INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;--      WHERE PHD.DISTRIBUTION_STATUS_VALUE = 'RSUD' AND PHD.OLD_DISTRIBUTION_ID IS NULL&#xD;&#xA;--      GROUP BY PH.PAYEE_ACCOUNT_ID ,PH.PERSON_ID,PH.PAYMENT_DATE,PHD.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;--      ORDER BY PH.PAYMENT_DATE DESC&#xD;&#xA;--) AA ON PHH.PAYEE_ACCOUNT_ID = AA.PAYEE_ACCOUNT_ID AND PHH.PERSON_ID = AA.PERSON_ID AND PHD.OLD_DISTRIBUTION_ID IS NOT NULL &#xD;&#xA;--            AND PHD.DISTRIBUTION_STATUS_VALUE = 'CNLD' AND ((PHD.OLD_DISTRIBUTION_ID = AA.PAYMENT_HISTORY_DISTRIBUTION_ID) OR (PHH.PAYMENT_DATE &gt; AA.PAYMENT_DATE))            &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT TABLE1.GROSS,TABLE1.STATE_TAX,TABLE1.FED_TAX,TABLE1.NET,TABLE1.PAYEE_ACCOUNT_ID, TABLE1.PAYMENT_HISTORY_DISTRIBUTION_ID, TABLE1.PAYMENT_HISTORY_HEADER_ID, TABLE1.PAYMENT_DATE,  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;TABLE2.PAYMENT_HISTORY_DISTRIBUTION_ID PAYMENT_HISTORY_DISTRIBUTION_ID1, TABLE2.OLD_DISTRIBUTION_ID&#xD;&#xA;&#x9;&#x9;FROM(&#xD;&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT PH.PAYEE_ACCOUNT_ID, PHD.PAYMENT_HISTORY_DISTRIBUTION_ID, PH.PAYMENT_HISTORY_HEADER_ID, PH.PAYMENT_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE WHEN IT.ITEM_TYPE_DIRECTION = 1 THEN HD.AMOUNT ELSE 0 END) AS GROSS, &#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE WHEN IT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (IT.ITEM_TYPE_DIRECTION * HD.AMOUNT) ELSE 0 END) AS STATE_TAX, &#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE WHEN IT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (IT.ITEM_TYPE_DIRECTION * HD.AMOUNT) ELSE 0 END) AS FED_TAX,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(IT.ITEM_TYPE_DIRECTION * AMOUNT) AS NET&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PAYMENT_HISTORY_HEADER PH &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL HD ON PH.PAYMENT_HISTORY_HEADER_ID = HD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_ITEM_TYPE IT WITH(NOLOCK) ON IT.PAYMENT_ITEM_TYPE_ID = HD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;WHERE PHD.DISTRIBUTION_STATUS_VALUE = 'RSUD' AND PHD.OLD_DISTRIBUTION_ID IS NULL &#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY PH.PAYEE_ACCOUNT_ID, PHD.PAYMENT_HISTORY_DISTRIBUTION_ID, PH.PAYMENT_HISTORY_HEADER_ID, PH.PAYMENT_DATE           &#xD;&#xA;&#x9;&#x9;    ) TABLE1&#xD;&#xA;&#x9;&#x9;INNER JOIN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT PH.PAYEE_ACCOUNT_ID, PHD.PAYMENT_HISTORY_DISTRIBUTION_ID, PH.PAYMENT_HISTORY_HEADER_ID, PH.PAYMENT_DATE, PHD.OLD_DISTRIBUTION_ID,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE WHEN IT.ITEM_TYPE_DIRECTION = 1 THEN HD.AMOUNT ELSE 0 END) AS GROSS, &#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE WHEN IT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (IT.ITEM_TYPE_DIRECTION * HD.AMOUNT) ELSE 0 END) AS STATE_TAX, &#xD;&#xA;&#x9;&#x9;&#x9;SUM(CASE WHEN IT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (IT.ITEM_TYPE_DIRECTION * HD.AMOUNT) ELSE 0 END) AS FED_TAX,&#xD;&#xA;&#x9;&#x9;&#x9;SUM(IT.ITEM_TYPE_DIRECTION * AMOUNT) AS NET&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PAYMENT_HISTORY_HEADER PH &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL HD ON PH.PAYMENT_HISTORY_HEADER_ID = HD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_ITEM_TYPE IT WITH(NOLOCK) ON IT.PAYMENT_ITEM_TYPE_ID = HD.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;WHERE PHD.OLD_DISTRIBUTION_ID IS NOT NULL&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY PH.PAYEE_ACCOUNT_ID, PHD.PAYMENT_HISTORY_DISTRIBUTION_ID, PH.PAYMENT_HISTORY_HEADER_ID, PH.PAYMENT_DATE, PHD.OLD_DISTRIBUTION_ID&#xD;&#xA;&#x9;&#x9;&#x9;) TABLE2&#xD;&#xA;&#x9;&#x9;ON TABLE1.PAYEE_ACCOUNT_ID = TABLE2.PAYEE_ACCOUNT_ID     &#xD;&#xA;&#x9;&#x9;WHERE TABLE2.OLD_DISTRIBUTION_ID IS NOT NULL AND TABLE2.PAYMENT_DATE &gt;= TABLE1.PAYMENT_DATE&#xD;&#xA;&#x9;&#x9;AND TABLE1.PAYMENT_HISTORY_DISTRIBUTION_ID = TABLE2.OLD_DISTRIBUTION_ID&#x9;&#x9;&#xD;&#xA;)  &#xD;&#xA;--AA ON PHH.PAYEE_ACCOUNT_ID = AA.PAYEE_ACCOUNT_ID AND PHH.PERSON_ID = AA.PERSON_ID AND PHD.OLD_DISTRIBUTION_ID IS NOT NULL &#xD;&#xA;--            AND PHD.DISTRIBUTION_STATUS_VALUE = 'CNLD' AND ((PHD.OLD_DISTRIBUTION_ID = AA.PAYMENT_HISTORY_DISTRIBUTION_ID) OR (PHH.PAYMENT_DATE &gt; AA.PAYMENT_DATE))&#xD;&#xA;AA ON PHH.PAYEE_ACCOUNT_ID = AA.PAYEE_ACCOUNT_ID AND PHD.OLD_DISTRIBUTION_ID IS NOT NULL &#xD;&#xA;&#x9;&#x9;AND (PHD.OLD_DISTRIBUTION_ID = AA.PAYMENT_HISTORY_DISTRIBUTION_ID &#xD;&#xA;&#x9;&#x9;OR PHD.OLD_DISTRIBUTION_ID = AA.PAYMENT_HISTORY_DISTRIBUTION_ID1)&#xD;&#xA;&#x9;&#x9;AND PHH.PAYMENT_DATE &gt;= AA.PAYMENT_DATE AND PHD.DISTRIBUTION_STATUS_VALUE = 'CNLD'&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;WHERE&#xD;&#xA;--PHH.PAYEE_ACCOUNT_ID = 506317 AND&#xD;&#xA;(     &#xD;&#xA;      (     &#xD;&#xA;            PHH.PAYMENT_DATE &gt;= @FromDate AND PHH.PAYMENT_DATE &lt;= @ToDate&#xD;&#xA;      )  &#xD;&#xA;      OR &#xD;&#xA;      (     &#xD;&#xA;            SPHDSH.TRANSACTION_DATE &gt;= @FromDate AND SPHDSH.TRANSACTION_DATE &lt;= @ToDate&#xD;&#xA;      ) &#xD;&#xA; )&#xD;&#xA;AND &#xD;&#xA;((@PLAN_ID =1 and PHH.PLAN_ID= @PLAN_ID) OR (@PLAN_ID =2 and PHH.PLAN_ID IN (2,3,4,6,7,8)))&#xD;&#xA;&#xD;&#xA;AND  SPHDSH.DISTRIBUTION_STATUS_HISTORY_ID = (SELECT TOP 1 DISTRIBUTION_STATUS_HISTORY_ID&#xD;&#xA;                                    FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDH&#xD;&#xA;                                    WHERE PHDH.PAYMENT_HISTORY_HEADER_ID = SPHDSH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;                                    --Ticket# 78594 Per Business removed 'STLE','3YRS','OVRP' Distribution Status.  &#xD;&#xA;                                    AND PHDH.DISTRIBUTION_STATUS_VALUE NOT IN ('OUTS','CLRD','STLE','3YRS','OVRP')&#xD;&#xA;                                    ORDER BY DISTRIBUTION_STATUS_HISTORY_ID DESC)&#xD;&#xA;                                    &#xD;&#xA;GROUP BY PHD.CHECK_NUMBER,SP.MPI_PERSON_ID, SO.MPI_ORG_ID, PHH.PAYMENT_DATE, CVDSTATUS.DESCRIPTION,SPHDSH.TRANSACTION_DATE,AA.PAYEE_ACCOUNT_ID,PLAN_CODE">
      <parameters>
        <parameter ID="@PLAN_ID" sfwDataType="int" />
        <parameter ID="@FromDate" sfwDataType="DateTime" />
        <parameter ID="@ToDate" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptWorkflowMetricsSummaryReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;DECLARE @CTR AS TABLE&#xD;&#xA;( &#xD;&#xA; ACTIVITY_INSTANCE_ID INT,&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; ORG_ID INT,&#xD;&#xA; CREATED_DATE DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(4),&#xD;&#xA; MODIFIED_BY VARCHAR(50),&#xD;&#xA; UNPC INT,&#xD;&#xA; INPC INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; RELE INT,&#xD;&#xA; SUSP INT,&#xD;&#xA; CANC INT,&#xD;&#xA; RETU INT,&#xD;&#xA; REAU INT,&#xD;&#xA; RESU INT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;INSERT INTO @CTR&#xD;&#xA; SELECT &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_ID ,&#xD;&#xA;  PROCESS_ID,&#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID ,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY, &#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] ,&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS REAU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;&#xD;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;    AI.ACTIVITY_Id,&#xD;&#xA;    AP.PROCESS_ID, &#xD;&#xA;    PERSON_ID ,&#xD;&#xA;    ORG_ID ,&#xD;&#xA;    AI.CREATED_DATE, &#xD;&#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xD;&#xA;    AI.MODIFIED_BY, &#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE AI&#xD;&#xA;    INNER JOIN SGW_ACTIVITY_INSTANCE_HISTORY AIH &#xD;&#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xD;&#xA;    INNER JOIN SGW_ACTIVITY AP &#xD;&#xA;     ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xD;&#xA;    INNER JOIN SGW_PROCESS_INSTANCE SPI &#xD;&#xA;     ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;   WHERE CONVERT(DATETIME,CONVERT(VARCHAR,Start_Time,109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,109) ,110) &#xD;&#xA;      AND (CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,109) ,110) OR End_Time IS NULL)&#xD;&#xA;      AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   COUNT (STATUS_VALUE)&#xD;&#xA;   FOR STATUS_VALUE IN&#xD;&#xA;   ([UNPC] ,[INPC] ,[PROC] ,[RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xD;&#xA;  ) AS PVT&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_Id,&#xD;&#xA;  PROCESS_ID, &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY&#xD;&#xA;&#xD;&#xA;DECLARE @TIMEDIF AS TABLE&#xD;&#xA;( &#xD;&#xA; ACTIVITY_INSTANCE_ID INT,&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; ORG_ID INT,&#xD;&#xA; CREATED_DATE DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(4),&#xD;&#xA; MODIFIED_BY VARCHAR(50),&#xD;&#xA; UNPC INT,&#xD;&#xA; INPC INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; RELE INT,&#xD;&#xA; SUSP INT,&#xD;&#xA; CANC INT,&#xD;&#xA; RETU INT,&#xD;&#xA; REAU INT,&#xD;&#xA; RESU INT &#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @TIMEDIF&#xD;&#xA; SELECT &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_Id,&#xD;&#xA;  PROCESS_ID,   &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID ,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY,&#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] ,&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS REAU&#xD;&#xA; FROM&#xD;&#xA;(&#xD;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;    AI.ACTIVITY_Id,&#xD;&#xA;    AP.PROCESS_ID, &#xD;&#xA;    PERSON_ID ,&#xD;&#xA;    ORG_ID ,&#xD;&#xA;    AI.CREATED_DATE, &#xD;&#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xD;&#xA;    AI.MODIFIED_BY,&#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE,&#xD;&#xA;    ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0) &#xD;&#xA;    AS DIFMINS,&#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE2,&#xD;&#xA;    ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0) &#xD;&#xA;    AS DIFMINS2&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE AI&#xD;&#xA;    INNER JOIN SGW_ACTIVITY_INSTANCE_HISTORY AIH ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xD;&#xA;    INNER JOIN SGW_ACTIVITY AP ON AP.ACTIVITY_ID = AI.ACTIVITY_id &#xD;&#xA;    INNER JOIN SGW_PROCESS_INSTANCE SPI ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;   WHERE CONVERT(DATETIME,CONVERT(VARCHAR,Start_Time,109) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,109) ,110) &#xD;&#xA;      AND (CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),109) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,109) ,110) OR End_Time IS NULL)&#xD;&#xA;      AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xD;&#xA;) TEMP&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   SUM(DifMins)&#xD;&#xA;   FOR STATUS_VALUE IN ( [UNPC] ,[INPC] ,[PROC], [RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xD;&#xA;  ) AS PVT1&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_ID,&#xD;&#xA;  PROCESS_ID, &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY&#xD;&#xA;  &#xD;&#xA;SELECT &#xD;&#xA; PR.DESCRIPTION AS PROCESS_NAME,&#xD;&#xA; &#xD;&#xA;  MIN(CAST((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 as Varchar(3)) &#xD;&#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60 As Varchar(2))&#xD;&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480) &#xD;&#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60)*60)) as Varchar(2)),2))  AS MIN_PROCESS_DURATION,&#xD;&#xA;&#xD;&#xA;  MAX(CAST((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 as Varchar(3)) &#xD;&#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60 As Varchar(2))&#xD;&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480) &#xD;&#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60)*60)) as Varchar(2)),2))  AS MAX_PROCESS_DURATION,&#xD;&#xA;   &#xD;&#xA;  AVG(ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))  AS AVG_PROC_DURATION,&#xD;&#xA;  &#xD;&#xA;  (MIN(ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))&#xD;&#xA;   + MAX(ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0)))/2  AS MEAN_PROC_DURATION,&#xD;&#xA;  &#xD;&#xA;  MIN(CAST((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 as Varchar(3)) &#xD;&#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0)) - (ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 * 480)/60 As Varchar(2))&#xD;&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 * 480) &#xD;&#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))- (ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 * 480)/60)*60)) as Varchar(2)),2)) AS MIN_BACKLOG_DURATION, &#xD;&#xA;   &#xD;&#xA;  MIN(CAST((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 as Varchar(3)) &#xD;&#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0)) - (ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 * 480)/60 As Varchar(2))&#xD;&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 * 480) &#xD;&#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))- (ISNULL(T.UNPC,0)+ISNULL(T.RELE,0))/480 * 480)/60)*60)) as Varchar(2)),2)) AS MAX_BACKLOG_DURATION, &#xD;&#xA; &#xD;&#xA;  AVG(ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.SUSP,0))  AS AVG_BACK_DURATION,&#xD;&#xA;  (MIN(ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.SUSP,0)) + MAX(ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.SUSP,0))) / 2 AS MEAN_BACK_DURATION,&#xD;&#xA;  &#xD;&#xA;  SUM(C.[SUSP]) AS SUSP_COUNT,&#xD;&#xA;  SUM(C.[RETU]) AS RETU_COUNT,&#xD;&#xA;  SUM(C.[RESU]) AS RESU_COUNT&#xD;&#xA; &#xD;&#xA; FROM  @CTR C &#xD;&#xA; INNER JOIN @TIMEDIF T ON &#xD;&#xA; C.ACTIVITY_INSTANCE_ID = T.ACTIVITY_INSTANCE_ID AND &#xD;&#xA; C.ACTIVITY_ID = T.ACTIVITY_ID AND C.PROCESS_ID = T.PROCESS_ID&#xD;&#xA; INNER JOIN SGW_PROCESS PR on C.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA;GROUP BY PR.DESCRIPTION&#xD;&#xA;">
      <parameters>
        <parameter ID="@startTime" sfwDataType="DateTime" />
        <parameter ID="@endTime" sfwDataType="DateTime" />
        <parameter ID="@typeId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetSmallWorldOutboundFileData" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT&#xD;&#xA;SP.PERSON_ID&#xD;&#xA;,SP.MPI_PERSON_ID&#xD;&#xA;,SP.FIRST_NAME&#xD;&#xA;,SP.LAST_NAME&#xD;&#xA;,SP.MIDDLE_NAME&#xD;&#xA;,SP.NAME_SUFFIX&#xD;&#xA;,SP.GENDER_VALUE&#xD;&#xA;--PIR 1078&#xD;&#xA;,CASE WHEN MARITAL_STATUS_VALUE = 'O' THEN 'P' &#xD;&#xA;&#x9;  WHEN MARITAL_STATUS_VALUE IN ('C','U') THEN 'N'&#xD;&#xA;&#x9;  ELSE MARITAL_STATUS_VALUE END MARITAL_STATUS_VALUE&#xD;&#xA;,SP.HOME_PHONE_NO&#xD;&#xA;,sp.CELL_PHONE_NO&#x9;&#xD;&#xA;,SP.EMAIL_ADDRESS_1  &#xD;&#xA;,SP.SSN&#xD;&#xA;,SP.DATE_OF_BIRTH&#xD;&#xA;,CASE WHEN PA.ACCOUNT_RELATION_VALUE = 'PART' THEN 'PARTICIPANT' WHEN PA.ACCOUNT_RELATION_VALUE = 'JANT' THEN 'JOINT ANNUITANT' &#xD;&#xA;  WHEN PA.ACCOUNT_RELATION_VALUE = 'BENE' THEN 'BENEFICIARY' ELSE 'ALTERNATE PAYEE' END AS istrPersonType&#xD;&#xA;FROM SGT_PERSON SP&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA ON PA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PB ON PA.PLAN_BENEFIT_ID = PB.PLAN_BENEFIT_ID   --PIR RID 60684&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID IS NOT NULL&#xD;&#xA;AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID&#xD;&#xA;   FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 (nolock)&#xD;&#xA;   WHERE PAS1.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;   ORDER BY PAS1.PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;AND SPAS.STATUS_VALUE NOT IN('CMPL','CNCL')&#xD;&#xA;AND PB.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP'  --PIR RID 60684&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetRetireeIncreaseForReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND PLAN_YEAR = @PLAN_YEAR AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*,  --WI 14763 RID 118342&#xD;&#xA;CASE WHEN ROLLOVER_ELI = 'Y' AND RetireeIncAmt &gt;= 750 THEN 'Y' ELSE 'N' END AS ROLLOVER_ELIGIBLE,&#xD;&#xA;CASE WHEN ROLLOVER_GRP = 'Rollover' AND RetireeIncAmt &gt;= 750 THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_Group,&#xD;&#xA;ISNULL((SELECT TOP 1&#xD;&#xA;CASE WHEN PHD.PAYMENT_METHOD_VALUE IN ('RCHK','RACH') AND  PHD.DISTRIBUTION_STATUS_VALUE = 'CLRD' THEN 'Y' ELSE 'N' END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SP.PERSON_ID, PAYMENT_METHOD_VALUE, DISTRIBUTION_STATUS_VALUE),'N') AS IS_ROLLOVER, -- For Tax Calculations,&#xD;&#xA;&#xD;&#xA;(SELECT TOP 1 SO.ORG_NAME FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;INNER JOIN SGT_ORGANIZATION SO ON SO.ORG_ID = PARD.ROLLOVER_ORG_ID&#xD;&#xA;WHERE SPA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SPA.PERSON_ID,SO.ORG_NAME) AS CONTACT_NAME ,@INC_PERCT AS PERCENT_INCREASE&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;INTO #RESULT  --WI 14763 RID 118342&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'N' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA; &#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt;  DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))) &#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;    &#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA;&#xD;&#xA; , SPHD.PAYMENT_METHOD_VALUE AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DDPR','DSBL') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND ((((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;     -- --CHANGE 09102013&#xD;&#xA; (((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(SBA.RETIREMENT_DATE) &lt; @PLAN_YEAR) or (YEAR(SBA.RETIREMENT_DATE) = @PLAN_YEAR and month(SBA.RETIREMENT_DATE) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT'))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2','DSBN') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;--and (SPA.TERM_CERTAIN_END_DATE is null or (MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;--and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) AND&#xD;&#xA;--CHANGE 09102013&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;where PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;,SPA.REEMPLOYED_FLAG&#xD;&#xA;,SBA.RETIREMENT_DATE&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;, SPARTI.SSN   --WI 14763 RID 118342&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; &#xD;&#xA;--CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43')) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA; THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'Y' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;&#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA;&#xD;&#xA; , SPHD.PAYMENT_METHOD_VALUE AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ((SDBD.DRO_MODEL_VALUE = 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; 10))))&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(spa.BENEFIT_BEGIN_DATE) &lt; @PLAN_YEAR) or (YEAR(spa.BENEFIT_BEGIN_DATE) = @PLAN_YEAR and month(spa.BENEFIT_BEGIN_DATE) &lt; 10)))))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2','DSBN') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SDBD.ALT_PAYEE_INCREASE = 'Y' AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y'  or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND&#xD;&#xA; (SPA.TERM_CERTAIN_END_DATE is null or &#xD;&#xA; (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR) &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA; or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;,SPA.REEMPLOYED_FLAG&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;, SPARTI.SSN  --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;) TEMP&#xD;&#xA;&#xD;&#xA;--WI 14763 RID 118342&#xD;&#xA;SELECT * FROM (&#xD;&#xA;SELECT R.*, CASE WHEN U.UNIONGROUPCODE IS NULL THEN 'X' ELSE UnionGroupCode END AS UNIONGROUPCODE FROM #RESULT R&#xD;&#xA;LEFT OUTER JOIN Pillars.DBO.UNIONS U ON CAST(R.UNIONCODE AS INT) = U.UNIONCODE&#xD;&#xA;) X&#xD;&#xA;WHERE @APPROVED_GROUP = 'N' OR &#xD;&#xA;(@APPROVED_GROUP = 'Y' AND EXISTS (SELECT 1 FROM SGT_RETIREE_INCREASE_GROUP_CONTRACT WITH(NOLOCK)&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y' AND UNION_GROUP_CODE = X.UNIONGROUPCODE) )&#xD;&#xA;">
      <parameters>
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
        <parameter ID="@APPROVED_GROUP" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rpt16_PaymentBalancingReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * &#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA; SELECT  &#xD;&#xA;   1 AS REP_ORDER,&#xD;&#xA;   CASE WHEN  @PLAN_ID=1  THEN 'IAP Annuity Payments' ELSE 'Pension Payments' END  AS ACCOUNT_TYPE,&#xD;&#xA;   STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'') AS PAYMENT_DATE,&#xD;&#xA;   SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;      THEN &#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0)&#xD;&#xA;      WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' &#xD;&#xA;      THEN&#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION &#xD;&#xA;      ELSE 0 &#xD;&#xA;      END&#xD;&#xA;    )  AS GROSS_AMOUNT,&#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS STATE_TAX_AMOUNT, &#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;   --SUM(CASE WHEN (PIT.ACH_CHECK_GROUP_VALUE = 'GROS' OR PIT.DEDUCTION_VALUE='UPDT' OR PIT.ACH_CHECK_GROUP_VALUE = 'STTX' OR PIT.ACH_CHECK_GROUP_VALUE = 'FDTX') THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS NET_AMOUNT,   &#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;  ON PHH.PAYEE_ACCOUNT_ID =PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD&#xD;&#xA;  ON PHH.PAYMENT_HISTORY_HEADER_ID =PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) &#xD;&#xA;  ON PBXR.PLAN_BENEFIT_ID=PA.PLAN_BENEFIT_ID &#xD;&#xA; WHERE PBXR.BENEFIT_OPTION_VALUE NOT IN ('LUMP') AND PA.RETIREE_INCR_FLAG&lt;&gt;'Y'&#xD;&#xA; AND (PHH.PAYMENT_DATE &gt;= @FromDate AND PHH.PAYMENT_DATE &lt;= @ToDate)  &#xD;&#xA; AND ((PHH.PLAN_ID &lt;&gt; 1 and @PLAN_ID = 0) or (PHH.PLAN_ID = @PLAN_ID))&#xD;&#xA; GROUP BY  STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA; UNION &#xD;&#xA;&#xD;&#xA; SELECT  &#xD;&#xA;   2 AS REP_ORDER,&#xD;&#xA;   CASE WHEN  @PLAN_ID=1  THEN 'IAP Payments' ELSE 'Lump Sum Payments' END  AS ACCOUNT_TYPE,&#xD;&#xA;   STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'') AS PAYMENT_DATE,&#xD;&#xA;   SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;      THEN &#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0)&#xD;&#xA;      WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' &#xD;&#xA;      THEN&#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION &#xD;&#xA;      ELSE 0 &#xD;&#xA;      END&#xD;&#xA;    )  AS GROSS_AMOUNT,&#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS STATE_TAX_AMOUNT, &#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;   --SUM(CASE WHEN (PIT.ACH_CHECK_GROUP_VALUE = 'GROS' OR PIT.DEDUCTION_VALUE='UPDT' OR PIT.ACH_CHECK_GROUP_VALUE = 'STTX' OR PIT.ACH_CHECK_GROUP_VALUE = 'FDTX') THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS NET_AMOUNT,&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;  ON PHH.PAYEE_ACCOUNT_ID =PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD&#xD;&#xA;  ON PHH.PAYMENT_HISTORY_HEADER_ID =PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) &#xD;&#xA;  ON PBXR.PLAN_BENEFIT_ID=PA.PLAN_BENEFIT_ID &#xD;&#xA; WHERE PBXR.BENEFIT_OPTION_VALUE IN ('LUMP')  AND PA.RETIREE_INCR_FLAG&lt;&gt;'Y'&#xD;&#xA; AND (PHH.PAYMENT_DATE &gt;= @FromDate AND PHH.PAYMENT_DATE &lt;= @ToDate)  &#xD;&#xA; AND ((PHH.PLAN_ID &lt;&gt; 1 and @PLAN_ID = 0) or (PHH.PLAN_ID = @PLAN_ID))&#xD;&#xA; GROUP BY  STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA; UNION &#xD;&#xA;&#xD;&#xA; SELECT  &#xD;&#xA;   3 AS REP_ORDER,&#xD;&#xA;   'Retiree Increase Payments' AS ACCOUNT_TYPE,&#xD;&#xA;   STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'') AS PAYMENT_DATE,&#xD;&#xA;   SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;      THEN &#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0)&#xD;&#xA;      WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' &#xD;&#xA;      THEN&#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION &#xD;&#xA;      ELSE 0 &#xD;&#xA;      END&#xD;&#xA;    )  AS GROSS_AMOUNT,&#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS STATE_TAX_AMOUNT, &#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END)) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;   --SUM(CASE WHEN (PIT.ACH_CHECK_GROUP_VALUE = 'GROS' OR PIT.DEDUCTION_VALUE='UPDT' OR PIT.ACH_CHECK_GROUP_VALUE = 'STTX' OR PIT.ACH_CHECK_GROUP_VALUE = 'FDTX') THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS NET_AMOUNT,&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;  ON PHH.PAYEE_ACCOUNT_ID =PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD&#xD;&#xA;  ON PHH.PAYMENT_HISTORY_HEADER_ID =PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PA.RETIREE_INCR_FLAG='Y'&#xD;&#xA; AND (PHH.PAYMENT_DATE &gt;= @FromDate AND PHH.PAYMENT_DATE &lt;= @ToDate)  &#xD;&#xA; AND PHH.PLAN_ID &lt;&gt; 1 and @PLAN_ID = 0&#xD;&#xA; GROUP BY  STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA; UNION &#xD;&#xA;&#xD;&#xA; SELECT &#xD;&#xA;   4 AS REP_ORDER,&#xD;&#xA;   'Re-imbursement Payments' AS ACCOUNT_TYPE,&#xD;&#xA;   STUFF(CONVERT(VARCHAR(10),SRD.POSTED_DATE,103),1,3,'') AS PAYMENT_DATE,&#xD;&#xA;   SUM(SRD.GROSS_AMOUNT) AS GROSS_AMOUNT,--ASK ONCE&#xD;&#xA;   ABS(SUM(SRD.STATE_TAX)) AS STATE_TAX_AMOUNT, &#xD;&#xA;   ABS(SUM(SRD.FED_TAX)) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;   --SUM(SRD.AMOUNT_PAID) AS NET_AMOUNT   &#xD;&#xA; FROM SGT_REPAYMENT_SCHEDULE REP&#xD;&#xA; INNER JOIN SGT_REIMBURSEMENT_DETAILS SRD&#xD;&#xA;  ON REP.REPAYMENT_SCHEDULE_ID=SRD.REPAYMENT_SCHEDULE_ID&#xD;&#xA; INNER JOIN  SGT_PAYEE_ACCOUNT PA&#xD;&#xA;  ON REP.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) &#xD;&#xA;  ON PBXR.PLAN_BENEFIT_ID=PA.PLAN_BENEFIT_ID &#xD;&#xA; WHERE SRD.POSTED_DATE &gt;= @FromDate AND SRD.POSTED_DATE &lt;= @ToDate&#xD;&#xA; AND ((PBXR.PLAN_ID &lt;&gt; 1 and @PLAN_ID = 0) or (PBXR.PLAN_ID = @PLAN_ID))  &#xD;&#xA; GROUP BY STUFF(CONVERT(VARCHAR(10),SRD.POSTED_DATE,103),1,3,'')&#xD;&#xA;&#xD;&#xA; UNION &#xD;&#xA;&#xD;&#xA; SELECT  &#xD;&#xA;   5 AS REP_ORDER,&#xD;&#xA;   'Stop Reissue' AS ACCOUNT_TYPE,&#xD;&#xA;   STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'') AS PAYMENT_DATE,&#xD;&#xA;   SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;      THEN &#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0)&#xD;&#xA;      WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' &#xD;&#xA;      THEN&#xD;&#xA;      ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION &#xD;&#xA;      ELSE 0 &#xD;&#xA;      END&#xD;&#xA;    )*-1  AS GROSS_AMOUNT,&#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END))*-1 AS STATE_TAX_AMOUNT, &#xD;&#xA;   ABS(SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX' THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END))*-1 AS FEDERAL_TAX_AMOUNT&#xD;&#xA;   --SUM(CASE WHEN (PIT.ACH_CHECK_GROUP_VALUE = 'GROS' OR PIT.DEDUCTION_VALUE='UPDT' OR PIT.ACH_CHECK_GROUP_VALUE = 'STTX' OR PIT.ACH_CHECK_GROUP_VALUE = 'FDTX') THEN (ITEM_TYPE_DIRECTION * AMOUNT) ELSE 0 END) AS NET_AMOUNT&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;  ON PHH.PAYEE_ACCOUNT_ID =PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD&#xD;&#xA;  ON PHH.PAYMENT_HISTORY_HEADER_ID =PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDI &#xD;&#xA;  ON PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SPHDSH &#xD;&#xA;  ON PHDI.PAYMENT_HISTORY_DISTRIBUTION_ID = SPHDSH.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA; WHERE &#xD;&#xA; ( &#xD;&#xA;  ( &#xD;&#xA;   PHH.PAYMENT_DATE &gt;= @FromDate AND PHH.PAYMENT_DATE &lt;= @ToDate&#xD;&#xA;  )  &#xD;&#xA;  OR &#xD;&#xA;  ( &#xD;&#xA;   SPHDSH.TRANSACTION_DATE &gt;= @FromDate AND SPHDSH.TRANSACTION_DATE &lt;= @ToDate&#xD;&#xA;  ) &#xD;&#xA; )&#xD;&#xA; AND ((PHH.PLAN_ID &lt;&gt; 1 and @PLAN_ID = 0) or (PHH.PLAN_ID = @PLAN_ID))  &#xD;&#xA; AND  SPHDSH.DISTRIBUTION_STATUS_HISTORY_ID = (SELECT TOP 1 DISTRIBUTION_STATUS_HISTORY_ID&#xD;&#xA;       FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDH&#xD;&#xA;       WHERE PHDH.PAYMENT_HISTORY_HEADER_ID = SPHDSH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;       AND PHDH.DISTRIBUTION_STATUS_VALUE IN ('CDRE','CNLD','RCMD')&#xD;&#xA;       AND PHDH.TRANSACTION_DATE &lt;= @ToDate&#xD;&#xA;       ORDER BY DISTRIBUTION_STATUS_HISTORY_ID DESC)&#xD;&#xA; AND YEAR(PHH.PAYMENT_DATE) = YEAR(@FromDate) &#xD;&#xA; GROUP BY  STUFF(CONVERT(VARCHAR(10),PHH.PAYMENT_DATE,103),1,3,'')&#xD;&#xA;)TEMP&#xD;&#xA;ORDER BY PAYMENT_DATE,REP_ORDER&#xD;&#xA;">
      <parameters>
        <parameter ID="@FromDate" sfwDataType="DateTime" />
        <parameter ID="@ToDate" sfwDataType="DateTime" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfRollover" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT top(1) SPA.* FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL SPARD&#xD;&#xA;ON SPA.PAYEE_ACCOUNT_ID = SPARD.PAYEE_ACCOUNT_ID&#xD;&#xA;WHERE SPA.PERSON_ID = @PERSON_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = @BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;AND RETIREE_INCR_FLAG = 'Y' AND YEAR(BENEFIT_BEGIN_DATE) = @YEAR AND SPARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;order by SPA.BENEFIT_BEGIN_DATE,SPA.PAYEE_ACCOUNT_ID desc&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@BENEFIT_ACCOUNT_TYPE_VALUE" sfwDataType="string" />
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetTaxOptionRetireeIncreaseBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select TOP(1)*  from SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING SPATW&#xD;&#xA;WHERE SPATW.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID  AND &#xD;&#xA;SPATW.TAX_IDENTIFIER_VALUE = 'FDRL'&#xD;&#xA;AND (END_DATE IS NULL OR END_DATE &gt; GETDATE())&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetTaxOptionRetireeIncreaseBatchStateTax" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select TOP(1)*  from SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING SPATW&#xD;&#xA;WHERE SPATW.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID  AND &#xD;&#xA;SPATW.TAX_IDENTIFIER_VALUE = 'STAT'&#xD;&#xA;AND (END_DATE IS NULL OR END_DATE &gt; GETDATE())&#xD;&#xA;">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetRetireeIncreaseForReportRolloverForeignAddr" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND PLAN_YEAR = @PLAN_YEAR AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*,  --WI 14763 RID 118342&#xD;&#xA;CASE WHEN ROLLOVER_ELI = 'Y' AND RetireeIncAmt &gt;= 750 THEN 'Y' ELSE 'N' END AS ROLLOVER_ELIGIBLE,&#xD;&#xA;CASE WHEN ROLLOVER_GRP = 'Rollover' AND RetireeIncAmt &gt;= 750 THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_Group,&#xD;&#xA;ISNULL((SELECT TOP 1&#xD;&#xA;CASE WHEN PHD.PAYMENT_METHOD_VALUE IN ('RCHK','RACH') AND  PHD.DISTRIBUTION_STATUS_VALUE = 'CLRD' THEN 'Y' ELSE 'N' END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SP.PERSON_ID, PAYMENT_METHOD_VALUE, DISTRIBUTION_STATUS_VALUE),'N') AS IS_ROLLOVER, -- For Tax Calculations,&#xD;&#xA;&#xD;&#xA;(SELECT TOP 1 SO.ORG_NAME FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;INNER JOIN SGT_ORGANIZATION SO ON SO.ORG_ID = PARD.ROLLOVER_ORG_ID&#xD;&#xA;WHERE SPA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SPA.PERSON_ID,SO.ORG_NAME) AS CONTACT_NAME ,@INC_PERCT AS PERCENT_INCREASE,&#xD;&#xA;CASE WHEN PA.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END ACTIVE_ADDRESS&#xD;&#xA;--PIR RID 71870&#xD;&#xA;, RETIREMENT_TYPE = (SELECT CV2.DESCRIPTION AS RETIREMENT_TYPE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV2 ON SPA.RETIREMENT_TYPE_ID = CV2.CODE_ID AND SPA.RETIREMENT_TYPE_VALUE = CV2.CODE_VALUE&#xD;&#xA;WHERE SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;&#xD;&#xA;, MD_DATE = (SELECT MD_DATE = CASE WHEN PAE.VESTED_DATE &gt; DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH))   AND  YEAR(PAE.VESTED_DATE) &gt; YEAR(DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, PAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN &#x9;SGT_PERSON P ON SPA.PERSON_ID = P.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT ACCT ON PBA.PERSON_ACCOUNT_ID = ACCT.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON ACCT.PERSON_ACCOUNT_ID = PAE.PERSON_ACCOUNT_ID &#xD;&#xA;WHERE PBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID AND SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;INTO #RESULT  --WI 14763 RID 118342&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'N' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA; &#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt;  DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))) &#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;    &#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; --ROHAN 09032014&#xD;&#xA; ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA; AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND  SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DDPR','DSBL') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND ((((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;     -- --CHANGE 09102013&#xD;&#xA; (((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(SBA.RETIREMENT_DATE) &lt; @PLAN_YEAR) or (YEAR(SBA.RETIREMENT_DATE) = @PLAN_YEAR and month(SBA.RETIREMENT_DATE) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT'))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;--and (SPA.TERM_CERTAIN_END_DATE is null or (MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;--and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) AND&#xD;&#xA;--CHANGE 09102013&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;where PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, SBA.RETIREMENT_DATE&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN   --WI 14763 RID 118342&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA; THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'Y' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;&#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; --ROHAN 09032014&#xD;&#xA; ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA; AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA;&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ((SDBD.DRO_MODEL_VALUE = 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; 10))))&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(spa.BENEFIT_BEGIN_DATE) &lt; @PLAN_YEAR) or (YEAR(spa.BENEFIT_BEGIN_DATE) = @PLAN_YEAR and month(spa.BENEFIT_BEGIN_DATE) &lt; 10)))))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL))) --PIR 932&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SDBD.ALT_PAYEE_INCREASE = 'Y' AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y'  or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND&#xD;&#xA; (SPA.TERM_CERTAIN_END_DATE is null or &#xD;&#xA; (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR) &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA; or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN  --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;) TEMP &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND PA.ADDR_COUNTRY_VALUE &lt;&gt; '0001' AND (PA.END_DATE IS NULL OR PA.END_DATE &gt; GETDATE())&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST CHK ON CHK.ADDRESS_ID = PA.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL'&#xD;&#xA;WHERE&#xD;&#xA;(TEMP.ROLLOVER_ELI = 'Y' AND TEMP.RetireeIncAmt &gt;= 750)&#xD;&#xA;AND &#xD;&#xA;TEMP.PERSON_ID NOT IN (SELECT DISTINCT SP.PERSON_ID FROM SGT_PERSON SP&#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS SPA ON SP.PERSON_ID = SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS_CHKLIST SPAC ON SPA.ADDRESS_ID = SPAC.ADDRESS_ID&#xD;&#xA;WHERE TEMP.PERSON_ID = SP.PERSON_ID AND SPA.ADDR_COUNTRY_VALUE = '0001' AND (SPA.END_DATE IS NULL OR SPA.END_DATE &gt; GETDATE())&#xD;&#xA;AND SPAC.ADDRESS_TYPE_VALUE = 'MAIL') &#xD;&#xA;AND&#xD;&#xA;TEMP.MPI_PERSON_ID NOT IN ('M01441604','M30289340','M30289298','M10564412','M10563903')&#xD;&#xA;&#xD;&#xA;--WI 14763 RID 118342&#xD;&#xA;SELECT * FROM (&#xD;&#xA;SELECT R.*, CASE WHEN U.UNIONGROUPCODE IS NULL THEN 'X' ELSE UnionGroupCode END AS UNIONGROUPCODE FROM #RESULT R&#xD;&#xA;LEFT OUTER JOIN Pillars.DBO.UNIONS U ON CAST(R.UNIONCODE AS INT) = U.UNIONCODE&#xD;&#xA;) X&#xD;&#xA;WHERE @APPROVED_GROUP = 'N' OR &#xD;&#xA;(@APPROVED_GROUP = 'Y' AND EXISTS (SELECT 1 FROM SGT_RETIREE_INCREASE_GROUP_CONTRACT WITH(NOLOCK)&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y' AND UNION_GROUP_CODE = X.UNIONGROUPCODE) )&#xD;&#xA;">
      <parameters>
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
        <parameter ID="@APPROVED_GROUP" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetRetireeIncreaseForReportRolloverLocalAddr" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND PLAN_YEAR = @PLAN_YEAR AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*,  --WI 14763 RID 118342&#xD;&#xA;CASE WHEN ROLLOVER_ELI = 'Y' AND RetireeIncAmt &gt;= 750 THEN 'Y' ELSE 'N' END AS ROLLOVER_ELIGIBLE,&#xD;&#xA;CASE WHEN ROLLOVER_GRP = 'Rollover' AND RetireeIncAmt &gt;= 750 THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_Group,&#xD;&#xA;ISNULL((SELECT TOP 1&#xD;&#xA;CASE WHEN PHD.PAYMENT_METHOD_VALUE IN ('RCHK','RACH') AND  PHD.DISTRIBUTION_STATUS_VALUE = 'CLRD' THEN 'Y' ELSE 'N' END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SP.PERSON_ID, PAYMENT_METHOD_VALUE, DISTRIBUTION_STATUS_VALUE),'N') AS IS_ROLLOVER, -- For Tax Calculations,&#xD;&#xA;&#xD;&#xA;(SELECT TOP 1 SO.ORG_NAME FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;INNER JOIN SGT_ORGANIZATION SO ON SO.ORG_ID = PARD.ROLLOVER_ORG_ID&#xD;&#xA;WHERE SPA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SPA.PERSON_ID,SO.ORG_NAME) AS CONTACT_NAME ,@INC_PERCT AS PERCENT_INCREASE,&#xD;&#xA;CASE WHEN PA.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END ACTIVE_ADDRESS&#xD;&#xA;--PIR RID 71870&#xD;&#xA;, RETIREMENT_TYPE = (SELECT CV2.DESCRIPTION AS RETIREMENT_TYPE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV2 ON SPA.RETIREMENT_TYPE_ID = CV2.CODE_ID AND SPA.RETIREMENT_TYPE_VALUE = CV2.CODE_VALUE&#xD;&#xA;WHERE SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;&#xD;&#xA;, MD_DATE = (SELECT MD_DATE = CASE WHEN PAE.VESTED_DATE &gt; DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH))   AND  YEAR(PAE.VESTED_DATE) &gt; YEAR(DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, PAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN &#x9;SGT_PERSON P ON SPA.PERSON_ID = P.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT ACCT ON PBA.PERSON_ACCOUNT_ID = ACCT.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON ACCT.PERSON_ACCOUNT_ID = PAE.PERSON_ACCOUNT_ID &#xD;&#xA;WHERE PBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID AND SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;INTO #RESULT  --WI 14763 RID 118342&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'N' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA; &#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt;  DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))) &#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;    &#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; --ROHAN 09032014&#xD;&#xA; ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA; AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA;&#xD;&#xA; --RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND  SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DDPR','DSBL') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND ((((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;     -- --CHANGE 09102013&#xD;&#xA; (((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(SBA.RETIREMENT_DATE) &lt; @PLAN_YEAR) or (YEAR(SBA.RETIREMENT_DATE) = @PLAN_YEAR and month(SBA.RETIREMENT_DATE) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT'))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;--and (SPA.TERM_CERTAIN_END_DATE is null or (MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;--and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) AND&#xD;&#xA;--CHANGE 09102013&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;where PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, SBA.RETIREMENT_DATE&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN   --WI 14763 RID 118342&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA; THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'Y' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;&#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; --ROHAN 09032014&#xD;&#xA; ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA; AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA; --RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ((SDBD.DRO_MODEL_VALUE = 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; 10))))&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(spa.BENEFIT_BEGIN_DATE) &lt; @PLAN_YEAR) or (YEAR(spa.BENEFIT_BEGIN_DATE) = @PLAN_YEAR and month(spa.BENEFIT_BEGIN_DATE) &lt; 10)))))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SDBD.ALT_PAYEE_INCREASE = 'Y' AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y'  or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND&#xD;&#xA; (SPA.TERM_CERTAIN_END_DATE is null or &#xD;&#xA; (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR) &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA; or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN  --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;) TEMP &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND PA.ADDR_COUNTRY_VALUE = '0001' AND (PA.END_DATE IS NULL OR PA.END_DATE &gt; GETDATE())&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST CHK ON CHK.ADDRESS_ID = PA.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL'&#xD;&#xA;WHERE&#xD;&#xA;(TEMP.ROLLOVER_ELI = 'Y' AND TEMP.RetireeIncAmt &gt;= 750)&#xD;&#xA;AND &#xD;&#xA;TEMP.PERSON_ID IN (SELECT DISTINCT SP.PERSON_ID FROM SGT_PERSON SP&#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS SPA ON SP.PERSON_ID = SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS_CHKLIST SPAC ON SPA.ADDRESS_ID = SPAC.ADDRESS_ID&#xD;&#xA;WHERE TEMP.PERSON_ID = SP.PERSON_ID AND SPA.ADDR_COUNTRY_VALUE = '0001' AND (SPA.END_DATE IS NULL OR SPA.END_DATE &gt; GETDATE())&#xD;&#xA;AND SPAC.ADDRESS_TYPE_VALUE = 'MAIL') &#xD;&#xA;AND&#xD;&#xA;TEMP.MPI_PERSON_ID NOT IN ('M01441604','M30289340','M30289298','M10564412','M10563903')&#xD;&#xA;&#xD;&#xA;--WI 14763 RID 118342&#xD;&#xA;SELECT * FROM (&#xD;&#xA;SELECT R.*, CASE WHEN U.UNIONGROUPCODE IS NULL THEN 'X' ELSE UnionGroupCode END AS UNIONGROUPCODE FROM #RESULT R&#xD;&#xA;LEFT OUTER JOIN Pillars.DBO.UNIONS U ON CAST(R.UNIONCODE AS INT) = U.UNIONCODE&#xD;&#xA;) X&#xD;&#xA;WHERE @APPROVED_GROUP = 'N' OR &#xD;&#xA;(@APPROVED_GROUP = 'Y' AND EXISTS (SELECT 1 FROM SGT_RETIREE_INCREASE_GROUP_CONTRACT WITH(NOLOCK)&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y' AND UNION_GROUP_CODE = X.UNIONGROUPCODE) )&#xD;&#xA;">
      <parameters>
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
        <parameter ID="@APPROVED_GROUP" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetRetireeIncreaseForReportNonRolloverForeignAddr" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND PLAN_YEAR = @PLAN_YEAR AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*,  --WI 14763 RID 118342&#xD;&#xA;CASE WHEN ROLLOVER_ELI = 'Y' AND RetireeIncAmt &gt;= 750 THEN 'Y' ELSE 'N' END AS ROLLOVER_ELIGIBLE,&#xD;&#xA;CASE WHEN ROLLOVER_GRP = 'Rollover' AND RetireeIncAmt &gt;= 750 THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_Group,&#xD;&#xA;ISNULL((SELECT TOP 1&#xD;&#xA;CASE WHEN PHD.PAYMENT_METHOD_VALUE IN ('RCHK','RACH') AND  PHD.DISTRIBUTION_STATUS_VALUE = 'CLRD' THEN 'Y' ELSE 'N' END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SP.PERSON_ID, PAYMENT_METHOD_VALUE, DISTRIBUTION_STATUS_VALUE),'N') AS IS_ROLLOVER, -- For Tax Calculations,&#xD;&#xA;&#xD;&#xA;(SELECT TOP 1 SO.ORG_NAME FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;INNER JOIN SGT_ORGANIZATION SO ON SO.ORG_ID = PARD.ROLLOVER_ORG_ID&#xD;&#xA;WHERE SPA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SPA.PERSON_ID,SO.ORG_NAME) AS CONTACT_NAME ,@INC_PERCT AS PERCENT_INCREASE,&#xD;&#xA;CASE WHEN PA.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END ACTIVE_ADDRESS&#xD;&#xA;--PIR RID 71870&#xD;&#xA;, RETIREMENT_TYPE = (SELECT CV2.DESCRIPTION AS RETIREMENT_TYPE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV2 ON SPA.RETIREMENT_TYPE_ID = CV2.CODE_ID AND SPA.RETIREMENT_TYPE_VALUE = CV2.CODE_VALUE&#xD;&#xA;WHERE SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;&#xD;&#xA;, MD_DATE = (SELECT MD_DATE = CASE WHEN PAE.VESTED_DATE &gt; DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH))   AND  YEAR(PAE.VESTED_DATE) &gt; YEAR(DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, PAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN &#x9;SGT_PERSON P ON SPA.PERSON_ID = P.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT ACCT ON PBA.PERSON_ACCOUNT_ID = ACCT.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON ACCT.PERSON_ACCOUNT_ID = PAE.PERSON_ACCOUNT_ID &#xD;&#xA;WHERE PBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID AND SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;INTO #RESULT  --WI 14763 RID 118342&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;  THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'N' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA; &#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt;  DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))) &#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;    &#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; --ROHAN 09032014&#xD;&#xA; ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA; AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA; &#xD;&#xA; --RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DDPR','DSBL') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND ((((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;     -- --CHANGE 09102013&#xD;&#xA; (((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(SBA.RETIREMENT_DATE) &lt; @PLAN_YEAR) or (YEAR(SBA.RETIREMENT_DATE) = @PLAN_YEAR and month(SBA.RETIREMENT_DATE) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT'))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;--and (SPA.TERM_CERTAIN_END_DATE is null or (MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;--and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) AND&#xD;&#xA;--CHANGE 09102013&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;where PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, SBA.RETIREMENT_DATE&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN   --WI 14763 RID 118342&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;  @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA; , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA; , PL.PLAN_CODE AS PLAN_NAME, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA; , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA; --CHANGE 09102013&#xD;&#xA; , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA; , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA; , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA; THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA; , 'Y' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA; , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;    THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;&#xD;&#xA; --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA; --ROHAN 09032014&#xD;&#xA; ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA; , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA; , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA; , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA; AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA; --RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ((SDBD.DRO_MODEL_VALUE = 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; 10))))&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(spa.BENEFIT_BEGIN_DATE) &lt; @PLAN_YEAR) or (YEAR(spa.BENEFIT_BEGIN_DATE) = @PLAN_YEAR and month(spa.BENEFIT_BEGIN_DATE) &lt; 10)))))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA; OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA; and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SDBD.ALT_PAYEE_INCREASE = 'Y' AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y'  or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND&#xD;&#xA; (SPA.TERM_CERTAIN_END_DATE is null or &#xD;&#xA; (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR) &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA; or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID--09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN  --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;) TEMP &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND PA.ADDR_COUNTRY_VALUE &lt;&gt; '0001' AND (PA.END_DATE IS NULL OR PA.END_DATE &gt; GETDATE())&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST CHK ON CHK.ADDRESS_ID = PA.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL'&#xD;&#xA;WHERE&#xD;&#xA;(TEMP.ROLLOVER_ELI = 'N' OR TEMP.RetireeIncAmt &lt; 750)&#xD;&#xA;AND &#xD;&#xA;TEMP.PERSON_ID NOT IN (SELECT DISTINCT SP.PERSON_ID FROM SGT_PERSON SP&#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS SPA ON SP.PERSON_ID = SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS_CHKLIST SPAC ON SPA.ADDRESS_ID = SPAC.ADDRESS_ID&#xD;&#xA;WHERE TEMP.PERSON_ID = SP.PERSON_ID AND SPA.ADDR_COUNTRY_VALUE = '0001' AND (SPA.END_DATE IS NULL OR SPA.END_DATE &gt; GETDATE())&#xD;&#xA;AND SPAC.ADDRESS_TYPE_VALUE = 'MAIL') &#xD;&#xA;AND&#xD;&#xA;TEMP.MPI_PERSON_ID NOT IN ('M01441604','M30289340','M30289298','M10564412','M10563903') &#xD;&#xA;&#xD;&#xA;--WI 14763 RID 118342&#xD;&#xA;SELECT * FROM (&#xD;&#xA;SELECT R.*, CASE WHEN U.UNIONGROUPCODE IS NULL THEN 'X' ELSE UnionGroupCode END AS UNIONGROUPCODE FROM #RESULT R&#xD;&#xA;LEFT OUTER JOIN Pillars.DBO.UNIONS U ON CAST(R.UNIONCODE AS INT) = U.UNIONCODE&#xD;&#xA;) X&#xD;&#xA;WHERE @APPROVED_GROUP = 'N' OR &#xD;&#xA;(@APPROVED_GROUP = 'Y' AND EXISTS (SELECT 1 FROM SGT_RETIREE_INCREASE_GROUP_CONTRACT WITH(NOLOCK)&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y' AND UNION_GROUP_CODE = X.UNIONGROUPCODE) )&#xD;&#xA;">
      <parameters>
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
        <parameter ID="@APPROVED_GROUP" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetRetireeIncreaseForReportNonRolloverLocalAddr" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @RETIREMENT_DATE_FROM DATETIME&#xD;&#xA;DECLARE @RETIREMENT_DATE_TO DATETIME&#xD;&#xA;DECLARE @INC_PERCT INT&#xD;&#xA;&#xD;&#xA;--------------------&#xD;&#xA;SELECT @RETIREMENT_DATE_TO = RETIREMENT_DATE_TO, @RETIREMENT_DATE_FROM = RETIREMENT_DATE_FROM, @INC_PERCT = PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE EFFECTIVE_END_DATE IS NULL AND PLAN_YEAR = @PLAN_YEAR AND CONTRACT_STATUS_VALUE = 'APPR'&#xD;&#xA;&#xD;&#xA;SELECT TEMP.*,  --WI 14763 RID 118342&#xD;&#xA;CASE WHEN ROLLOVER_ELI = 'Y' AND RetireeIncAmt &gt;= 750 THEN 'Y' ELSE 'N' END AS ROLLOVER_ELIGIBLE,&#xD;&#xA;CASE WHEN ROLLOVER_GRP = 'Rollover' AND RetireeIncAmt &gt;= 750 THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_Group,&#xD;&#xA;ISNULL((SELECT TOP 1&#xD;&#xA;CASE WHEN PHD.PAYMENT_METHOD_VALUE IN ('RCHK','RACH') AND  PHD.DISTRIBUTION_STATUS_VALUE = 'CLRD' THEN 'Y' ELSE 'N' END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE &#xD;&#xA;SP.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SP.PERSON_ID, PAYMENT_METHOD_VALUE, DISTRIBUTION_STATUS_VALUE),'N') AS IS_ROLLOVER, -- For Tax Calculations,&#xD;&#xA;&#xD;&#xA;(SELECT TOP 1 SO.ORG_NAME FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD ON PARD.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PARD.STATUS_VALUE = 'PRCS'&#xD;&#xA;INNER JOIN SGT_ORGANIZATION SO ON SO.ORG_ID = PARD.ROLLOVER_ORG_ID&#xD;&#xA;WHERE SPA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND DATEPART(YEAR,SPA.BENEFIT_BEGIN_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND DATEPART(YEAR,BENEFIT_END_DATE) = @PLAN_YEAR - 1&#xD;&#xA;AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'Y'&#xD;&#xA;GROUP BY SPA.PERSON_ID,SO.ORG_NAME) AS CONTACT_NAME ,@INC_PERCT AS PERCENT_INCREASE,&#xD;&#xA;CASE WHEN PA.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END ACTIVE_ADDRESS&#xD;&#xA;--PIR RID 71870&#xD;&#xA;, RETIREMENT_TYPE = (SELECT CV2.DESCRIPTION AS RETIREMENT_TYPE&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV2 ON SPA.RETIREMENT_TYPE_ID = CV2.CODE_ID AND SPA.RETIREMENT_TYPE_VALUE = CV2.CODE_VALUE&#xD;&#xA;WHERE SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;&#xD;&#xA;, MD_DATE = (SELECT MD_DATE = CASE WHEN PAE.VESTED_DATE &gt; DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH))   AND  YEAR(PAE.VESTED_DATE) &gt; YEAR(DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, PAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, DATEADD(MONTH,6,dateadd(YEAR, 70, P.DATE_OF_BIRTH)) )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN &#x9;SGT_PERSON P ON SPA.PERSON_ID = P.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT ACCT ON PBA.PERSON_ACCOUNT_ID = ACCT.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON ACCT.PERSON_ACCOUNT_ID = PAE.PERSON_ACCOUNT_ID &#xD;&#xA;WHERE PBA.PAYEE_BENEFIT_ACCOUNT_ID = TEMP.PAYEE_BENEFIT_ACCOUNT_ID AND SPA.PAYEE_ACCOUNT_ID = TEMP.PAYEE_ACCOUNT_ID)&#xD;&#xA;INTO #RESULT  --WI 14763 RID 118342&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT  &#xD;&#xA;        @PLAN_YEAR AS PLAN_YEAR , pl.PLAN_ID, SPA.PERSON_ID, SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;       , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA;       , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA;       , PL.PLAN_CODE AS PLAN_NAME, 'N' as is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA;       , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA;       , ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) AS BENEFIT_BEGIN_DATE&#xD;&#xA;       , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;       THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA;       , 'N' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;       &#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt;  DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;                THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA;       , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0))) &#xD;&#xA;                THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;                &#xD;&#xA;       --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA;       --ROHAN 09032014&#xD;&#xA;       ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA;       , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA;       , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;       , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY MODIFIED_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE&#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON  SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA;       AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA;&#xD;&#xA; --RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DDPT','DDPR','DSBL') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' OR RETIREMENT_TYPE_VALUE IS NULL)&#xD;&#xA;AND ((((@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,spa.BENEFIT_BEGIN_DATE)) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'DDPT') OR&#xD;&#xA;     -- --CHANGE 09102013&#xD;&#xA;       (((@RETIREMENT_DATE_FROM IS NULL AND SBA.RETIREMENT_DATE  &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SBA.RETIREMENT_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;     (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(SBA.RETIREMENT_DATE) &lt; @PLAN_YEAR) or (YEAR(SBA.RETIREMENT_DATE) = @PLAN_YEAR and month(SBA.RETIREMENT_DATE) &lt; 10)))) &#xD;&#xA;      AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'DDPT'))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA;OR (SPAS.STATUS_VALUE in ('SPND') AND --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA;and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y' or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') or spba.FUNDS_TYPE_VALUE is null ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SPPA.STATUS_VALUE != 'ACTV'&#xD;&#xA;--and (SPA.TERM_CERTAIN_END_DATE is null or (MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;--and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) AND&#xD;&#xA;--CHANGE 09102013&#xD;&#xA;and (SPA.TERM_CERTAIN_END_DATE is null or (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 &#xD;&#xA;and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or (YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR)) and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID)&#xD;&#xA;OR (SPA.PERSON_ID = SPBA.PERSON_ID AND SPA.TERM_CERTAIN_END_DATE is NOT NULL)) AND &#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;where PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, SBA.RETIREMENT_DATE&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN   --WI 14763 RID 118342&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT  &#xD;&#xA;        @PLAN_YEAR AS PLAN_YEAR, pl.PLAN_ID, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;       , SP.MPI_PERSON_ID, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE as Status, (GUARANTEED_AMOUNT * @INC_PERCT) / 100 as GUARANTEED_AMOUNT&#xD;&#xA;       , ISNULL(SP.FIRST_NAME,'')+' '+ISNULL(SP.MIDDLE_NAME,'')+' '+ISNULL(SP.LAST_NAME,'') AS PARTICIPANT_NAME&#xD;&#xA;       , PL.PLAN_CODE AS PLAN_NAME, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA; --RID 75975&#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) * @INC_PERCT / 100) ELSE 0 END) AS RetireeIncAmt&#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 /*OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')*/) AND BASE_AMOUNT_FLAG = 'Y'THEN (ITEM_TYPE_DIRECTION * PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100))) ELSE 0 END) AS idecGrossAmount&#xD;&#xA;       , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'STTX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS STATE_TAX_AMOUNT &#xD;&#xA;    , SUM(CASE WHEN PIT.PAYEE_DETAIL_GROUP_VALUE = 'FEDX' THEN (ITEM_TYPE_DIRECTION * (PAPI.AMOUNT*(((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100)))) ELSE 0 END) AS FEDERAL_TAX_AMOUNT&#xD;&#xA;       --CHANGE 09102013&#xD;&#xA;       , SUM(CASE WHEN BASE_AMOUNT_FLAG = 'Y' THEN PAPI.AMOUNT *((100-ISNULL(WI.WITHHOLDING_PERCENTAGE,0))/100) * PIT.ITEM_TYPE_DIRECTION ELSE 0 END) AS NET_AMOUNT &#xD;&#xA;       , SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;       , CASE WHEN DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &lt;= DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;       THEN 'Y' ELSE 'N' END AS MD_AGE&#xD;&#xA;       , 'Y' AS RETIREE_INCREASE_ELIGIBLE&#xD;&#xA;&#xD;&#xA;       , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;                THEN 'Y' ELSE 'N' END AS ROLLOVER_ELI&#xD;&#xA;       , CASE WHEN   DATEPART(YEAR,DATEADD(MONTH,6, DATEADD(YEAR,70,DBO.FN_GET_DECRYPTED_VALUE(SPARTI.DATE_OF_BIRTH)))) &gt; DATEPART(YEAR,DATEADD(DAY, -1, DATEADD(YEAR,DATEDIFF(YEAR, 0, DATEADD(YEAR, -1, GETDATE())) + 1, 0)))&#xD;&#xA;                THEN 'Rollover' ELSE 'Non-Rollover' END AS ROLLOVER_GRP&#xD;&#xA;&#xD;&#xA;       --, SO.ORG_NAME AS CONTACT_NAME&#xD;&#xA;       --ROHAN 09032014&#xD;&#xA;       ,CASE WHEN PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID &gt; 0 THEN 'ACH' WHEN PA.ADDRESS_ID &gt; 0 THEN 'CHK' ELSE '' END AS PAYMENT_METHOD&#xD;&#xA;       , SCV.DESCRIPTION AS PERSON_TYPE&#xD;&#xA;       , SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;       , SPA.BENEFIT_ACCOUNT_TYPE_VALUE,SPA.REEMPLOYED_FLAG&#xD;&#xA;, CONVERT(VARCHAR(3),ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (SPARTI.SSN, Pillars.[dbo].[fn_PlanYearStartDate](@PLAN_YEAR), Pillars.[dbo].[fn_PlanYearEndDate](@PLAN_YEAR)),0)) AS UNIONCODE   --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA WITH(NOLOCK) ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON PAPI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID and (PAPI.END_DATE is null or PAPI.END_DATE &gt;= CONVERT(smalldatetime,'11/01/' + CONVERT(VARCHAR,@PLAN_YEAR)))&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID IN (SELECT TOP(1) Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PLAN PL WITH(NOLOCK) ON PL.PLAN_ID = SPBX.PLAN_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON SPARTI WITH(NOLOCK) ON SPARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPPA WITH(NOLOCK) ON SPPA.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_DRO_BENEFIT_DETAILS SDBD WITH(NOLOCK) ON SDBD.DRO_BENEFIT_ID = SPA.DRO_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_DRO_APPLICATION SDA WITH(NOLOCK) ON SDBD.DRO_APPLICATION_ID = SDA.DRO_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER SPHH ON SPHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND SPHH.PAYMENT_HISTORY_HEADER_ID = (SELECT TOP(1)Q.PAYMENT_HISTORY_HEADER_ID FROM SGT_PAYMENT_HISTORY_HEADER Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY PAYMENT_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD ON SPHH.PAYMENT_HISTORY_HEADER_ID = SPHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SPA.ACCOUNT_RELATION_ID AND SCV.CODE_VALUE = SPA.ACCOUNT_RELATION_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_LOCAL_700_GUARANTEED_AMOUNT SLGA WITH(NOLOCK) ON SPBA.PERSON_ACCOUNT_ID = SLGA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WI WITH(NOLOCK) ON WI.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SPBA.PERSON_ID AND &#xD;&#xA;SBA.BENEFIT_APPLICATION_ID = (SELECT TOP(1)Q.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION Q WHERE Q.PERSON_ID = SPBA.PERSON_ID AND Q.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND Q.APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;--ROHAN 09032014&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PACH ON PACH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND GETDATE() between PACH.ACH_START_DATE and ISNULL(PACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SPA.PERSON_ID AND GETDATE() between PA.START_DATE and ISNULL(PA.END_DATE,'99991231')&#xD;&#xA;       AND PA.ADDRESS_ID = (SELECT TOP(1) CHK.ADDRESS_ID FROM SGT_PERSON_ADDRESS_CHKLIST CHK WHERE PA.ADDRESS_ID = CHK.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL')&#xD;&#xA; --RID 75975&#xD;&#xA;WHERE SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') AND (RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND' or RETIREMENT_TYPE_VALUE is null)&#xD;&#xA;AND ((SDBD.DRO_MODEL_VALUE = 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE) BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; @PLAN_YEAR) or (YEAR(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) = @PLAN_YEAR and month(ISNULL(SBA.RETIREMENT_DATE,SPA.BENEFIT_BEGIN_DATE)) &lt; 10))))&#xD;&#xA;      OR &#xD;&#xA;      (SDBD.DRO_MODEL_VALUE &lt;&gt; 'STRF' AND  (@RETIREMENT_DATE_FROM IS NULL AND SPA.BENEFIT_BEGIN_DATE &lt;= @RETIREMENT_DATE_TO) OR&#xD;&#xA;      (@RETIREMENT_DATE_FROM IS NOT NULL AND SPA.BENEFIT_BEGIN_DATE BETWEEN @RETIREMENT_DATE_FROM AND @RETIREMENT_DATE_TO) OR&#xD;&#xA;       (@RETIREMENT_DATE_FROM IS NULL AND @RETIREMENT_DATE_TO IS NULL AND &#xD;&#xA;      ((YEAR(spa.BENEFIT_BEGIN_DATE) &lt; @PLAN_YEAR) or (YEAR(spa.BENEFIT_BEGIN_DATE) = @PLAN_YEAR and month(spa.BENEFIT_BEGIN_DATE) &lt; 10)))))&#xD;&#xA;AND (SPAS.STATUS_VALUE in ('RECV','REVW', 'APRD')&#xD;&#xA;OR (SPAS.STATUS_VALUE in ('SPND') AND &#xD;&#xA; --SP.DATE_OF_DEATH IS NULL &#xD;&#xA; NOT EXISTS(SELECT * FROM SGT_DEATH_NOTIFICATION SDN WHERE SDN.PERSON_ID = SPA.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('CRTF','PROG'))&#xD;&#xA;and (SPAS.TERMINATED_STATUS_REASON_VALUE &lt;&gt; 'DETH' OR SPAS.TERMINATED_STATUS_REASON_VALUE IS NULL) AND (SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE2') OR SPAS.SUSPENSION_STATUS_REASON_VALUE IS NULL)))--PIR 932&#xD;&#xA;AND (SPBA.FUNDS_TYPE_VALUE NOT IN ('EEUV', 'PUEE', 'UVHP') OR SPBA.FUNDS_TYPE_VALUE IS NULL ) AND SPBX.PLAN_ID &lt;&gt; 1&#xD;&#xA;AND SDBD.ALT_PAYEE_INCREASE = 'Y' AND (SPA.RETIREE_INCR_FLAG &lt;&gt; 'Y'  or SPA.RETIREE_INCR_FLAG is NULL)&#xD;&#xA;AND&#xD;&#xA;(SPA.TERM_CERTAIN_END_DATE is null or &#xD;&#xA; (((MONTH(SPA.TERM_CERTAIN_END_DATE) &gt; 11 and YEAR(SPA.TERM_CERTAIN_END_DATE) = @PLAN_YEAR) or YEAR(SPA.TERM_CERTAIN_END_DATE) &gt; @PLAN_YEAR) &#xD;&#xA; and SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NOT NULL)&#xD;&#xA;or (SPA.TERM_CERTAIN_END_DATE is NOT NULL and  SPA.PERSON_ID &lt;&gt; SPBA.PERSON_ID AND (SELECT TOP(1)BENEFECIARY_OF_PERSON_ID FROM SGT_PERSON_ACCOUNT A WHERE A.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID) IS NULL)) &#xD;&#xA;AND&#xD;&#xA;(SELECT PERCENT_INCREASE_VALUE FROM SGT_ACTIVE_RETIREE_INCREASE_CONTRACT WITH(NOLOCK) &#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND CONTRACT_STATUS_VALUE = 'APPR') != 0&#xD;&#xA;GROUP BY &#xD;&#xA; SP.MPI_PERSON_ID&#xD;&#xA;, SP.LAST_NAME&#xD;&#xA;, SP.FIRST_NAME&#xD;&#xA;, SP.MIDDLE_NAME&#xD;&#xA;, PL.PLAN_CODE&#xD;&#xA;, SPA.BENEFIT_BEGIN_DATE&#xD;&#xA;, SPARTI.DATE_OF_BIRTH&#xD;&#xA;, SCV.DESCRIPTION&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, sp.DATE_OF_DEATH, SPAS.STATUS_VALUE&#xD;&#xA;, GUARANTEED_AMOUNT&#xD;&#xA;, is_alt_payee_eligible_for_participant_retiree_increase&#xD;&#xA;, SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SPA.BENEFIT_ACCOUNT_TYPE_VALUE&#xD;&#xA;, pl.PLAN_ID&#xD;&#xA;, SPA.PERSON_ID , SP.SSN,SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;, SPHD.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;, SPHD.PAYMENT_METHOD_VALUE&#xD;&#xA;, SPHD.CHECK_ACH_EFFECTIVE_DATE&#xD;&#xA;, SPA.REEMPLOYED_FLAG&#xD;&#xA;, PACH.PAYEE_ACCOUNT_ACH_DETAIL_ID --09032014&#xD;&#xA;, PA.ADDRESS_ID --09032014&#xD;&#xA;, SPARTI.SSN  --WI 14763 RID 118342&#xD;&#xA;&#xD;&#xA;) TEMP &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = TEMP.PERSON_ID&#xD;&#xA;AND PA.ADDR_COUNTRY_VALUE = '0001' AND (PA.END_DATE IS NULL OR PA.END_DATE &gt; GETDATE())&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST CHK ON CHK.ADDRESS_ID = PA.ADDRESS_ID AND CHK.ADDRESS_TYPE_VALUE = 'MAIL'&#xD;&#xA;WHERE&#xD;&#xA;(TEMP.ROLLOVER_ELI = 'N' OR TEMP.RetireeIncAmt &lt; 750)&#xD;&#xA;AND &#xD;&#xA;TEMP.PERSON_ID IN (SELECT DISTINCT SP.PERSON_ID FROM SGT_PERSON SP&#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS SPA ON SP.PERSON_ID = SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PERSON_ADDRESS_CHKLIST SPAC ON SPA.ADDRESS_ID = SPAC.ADDRESS_ID&#xD;&#xA;WHERE TEMP.PERSON_ID = SP.PERSON_ID AND SPA.ADDR_COUNTRY_VALUE = '0001' AND (SPA.END_DATE IS NULL OR SPA.END_DATE &gt; GETDATE())&#xD;&#xA;AND SPAC.ADDRESS_TYPE_VALUE = 'MAIL') &#xD;&#xA;AND&#xD;&#xA;TEMP.MPI_PERSON_ID NOT IN ('M01441604','M30289340','M30289298','M10564412','M10563903')&#xD;&#xA;&#xD;&#xA;--WI 14763 RID 118342&#xD;&#xA;SELECT * FROM (&#xD;&#xA;SELECT R.*, CASE WHEN U.UNIONGROUPCODE IS NULL THEN 'X' ELSE UnionGroupCode END AS UNIONGROUPCODE FROM #RESULT R&#xD;&#xA;LEFT OUTER JOIN Pillars.DBO.UNIONS U ON CAST(R.UNIONCODE AS INT) = U.UNIONCODE&#xD;&#xA;) X&#xD;&#xA;WHERE @APPROVED_GROUP = 'N' OR &#xD;&#xA;(@APPROVED_GROUP = 'Y' AND EXISTS (SELECT 1 FROM SGT_RETIREE_INCREASE_GROUP_CONTRACT WITH(NOLOCK)&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y' AND UNION_GROUP_CODE = X.UNIONGROUPCODE) )&#xD;&#xA;">
      <parameters>
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
        <parameter ID="@APPROVED_GROUP" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rpt1099ReconReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET @STATE_CODE = CASE WHEN @STATE_CODE = 'All' THEN '' ELSE @STATE_CODE END &#xD;&#xA;&#xD;&#xA;SELECT * &#xD;&#xA;FROM (&#xD;&#xA;-- MONTHLY PAYROLL&#xD;&#xA;SELECT 1 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;'Monthly Payroll' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0) &#xD;&#xA;ELSE 0 END )  AS GROSS_AMOUNT,&#xD;&#xA;SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT, &#xD;&#xA;SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0) &#xD;&#xA;ELSE 0 END ) - SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) -&#xD;&#xA;SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN (PHDE.AMOUNT) ELSE 0 END) AS NET_AMOUNT&#xD;&#xA;      FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE AND DAY(PHH.PAYMENT_DATE) = 1 &#xD;&#xA;AND ((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) --OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1)&#xD;&#xA;) &#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA;GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;&#xD;&#xA;-- ADHOC PAYROLL&#xD;&#xA;SELECT 2 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;    'ADHOC Payroll' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;     SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END)  AS GROSS_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS NET_AMOUNT&#xD;&#xA;                          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE AND DAY(PHH.PAYMENT_DATE) &lt;&gt; 1&#xD;&#xA;AND ((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) --OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1)&#xD;&#xA;)&#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA;GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;-- IAP PAYROLLS&#xD;&#xA;SELECT 3 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;    'IAP Payroll' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;     SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END)  AS GROSS_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT,&#xD;&#xA;        SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS NET_AMOUNT&#xD;&#xA;                          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE&#xD;&#xA;AND (--(@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) --OR &#xD;&#xA;((@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID = 9) OR &#xD;&#xA; (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID &lt;&gt; 9 AND PHD.OLD_DISTRIBUTION_ID IS NULL)) --1099R 2015&#xD;&#xA;--(@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1)&#xD;&#xA;)&#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA;GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;&#xD;&#xA;-- PENSION RECEIVABLE&#xD;&#xA;SELECT 4 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;    'Pension Receivable' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM, &#xD;&#xA; - SUM(CASE WHEN ITEM_TYPE_CODE = 'ITEM53' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END)  AS GROSS_AMOUNT,&#xD;&#xA;0 AS STATE_TAX_AMOUNT, 0 AS  FED_TAX_AMOUNT,&#xD;&#xA;- SUM(CASE WHEN ITEM_TYPE_CODE = 'ITEM53' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END)  AS NET_AMOUNT&#xD;&#xA;          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE&#xD;&#xA;AND ((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1)) &#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA; GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;&#xD;&#xA;--CHECK RECEIVED&#xD;&#xA;SELECT 5 as Report_order, ISNULL(PA.ADDR_STATE_VALUE, '') STATE_CODE,&#xD;&#xA;--'' STATE_CODE, &#xD;&#xA;'Check Received' AS RESULT_TYPE, CONVERT(VARCHAR(3),SRD.POSTED_DATE,100) AS PAY_MONTH, MONTH(SRD.POSTED_DATE) PM,&#xD;&#xA;- SUM(SRD.GROSS_AMOUNT)  AS GROSS_AMOUNT,&#xD;&#xA; - SUM(ISNULL(SRD.STATE_TAX,0.0)) AS STATE_TAX_AMOUNT, - SUM(ISNULL(SRD.FED_TAX,0.0)) AS  FED_TAX_AMOUNT,&#xD;&#xA;- SUM(SRD.AMOUNT_PAID) AS NET_AMOUNT&#xD;&#xA;FROM SGT_REIMBURSEMENT_DETAILS SRD INNER JOIN SGT_REPAYMENT_SCHEDULE SRS&#xD;&#xA;ON SRD.REPAYMENT_SCHEDULE_ID = SRS.REPAYMENT_SCHEDULE_ID &#xD;&#xA; INNER  JOIN  SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = SRS.PAYEE_ACCOUNT_ID &#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID &#xD;&#xA;--added these join to handle whole check received comming in every state group.&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND SRD.POSTED_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA &#xD;&#xA;WHERE CONVERT(DATE,SRD.POSTED_DATE) BETWEEN @START_DATE AND @END_DATE &#xD;&#xA; AND SRD.PAYMENT_OPTION_VALUE = 'CHEK' AND ((@PLAN_IDENTIFIER = 'PENS' AND X.PLAN_ID &lt;&gt; 1) OR (@PLAN_IDENTIFIER = 'IAP' AND X.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID = 9)) &#xD;&#xA;-- GROUP BY CONVERT(VARCHAR(3),SRD.POSTED_DATE,100), MONTH(SRD.POSTED_DATE)&#xD;&#xA;--added state condition in where and group by.&#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PA.ADDR_STATE_VALUE, '') END = ISNULL(@STATE_CODE, '')&#xD;&#xA; GROUP BY CONVERT(VARCHAR(3),SRD.POSTED_DATE,100) , MONTH(SRD.POSTED_DATE), ISNULL(PA.ADDR_STATE_VALUE, '') &#xD;&#xA;&#xD;&#xA; UNION &#xD;&#xA;&#xD;&#xA;--REISSUED AMOUNT&#xD;&#xA;SELECT 6 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;    'Reissued Amount' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;     - SUM(CASE WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END) AS GROSS_AMOUNT,&#xD;&#xA;     0 AS STATE_TAX_AMOUNT, 0 AS  FED_TAX_AMOUNT, - SUM(CASE WHEN ITEM_TYPE_CODE = 'ITEM54' THEN ISNULL(PHDE.AMOUNT,0.0)  ELSE 0 END) AS NET_AMOUNT&#xD;&#xA;      FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH ON PHDSH.DISTRIBUTION_STATUS_HISTORY_ID = &#xD;&#xA;(SELECT TOP(1)SH.DISTRIBUTION_STATUS_HISTORY_ID FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SH&#xD;&#xA;WHERE PHH.PAYMENT_HISTORY_HEADER_ID = SH.PAYMENT_HISTORY_HEADER_ID AND CONVERT(DATE,SH.TRANSACTION_DATE) BETWEEN @START_DATE AND @END_DATE ORDER BY SH.TRANSACTION_DATE DESC)&#xD;&#xA;   --   INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION OLD_DISTRIBUTION ON OLD_DISTRIBUTION.PAYMENT_HISTORY_DISTRIBUTION_ID = PHD.OLD_DISTRIBUTION_ID&#xD;&#xA;&#x9;  --INNER JOIN SGT_PAYMENT_HISTORY_HEADER OLD_HEADER ON OLD_HEADER.PAYMENT_HISTORY_HEADER_ID = OLD_DISTRIBUTION.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;  --AND YEAR(OLD_HEADER.PAYMENT_DATE) = YEAR(@START_DATE)&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE PHDSH.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE') AND&#xD;&#xA;CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE AND&#xD;&#xA;((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID = 9))   &#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA; GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) , MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA; &#xD;&#xA; --CANCELLED&#xD;&#xA;   SELECT 7 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;   'Cancelled' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;    - SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND (((PAYMENT_1099R_FLAG = 'Y' OR ITEM_TYPE_CODE = 'ITEM54') AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM53','ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION ELSE 0 END)  AS GROSS_AMOUNT , &#xD;&#xA;      -  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;      -  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT,&#xD;&#xA;     -   ((SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND (((PAYMENT_1099R_FLAG = 'Y' OR ITEM_TYPE_CODE = 'ITEM54') AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM53','ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END))) AS NET_AMOUNT&#xD;&#xA;                          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH ON PHDSH.DISTRIBUTION_STATUS_HISTORY_ID = &#xD;&#xA;(SELECT TOP(1)SH.DISTRIBUTION_STATUS_HISTORY_ID FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SH&#xD;&#xA;WHERE PHH.PAYMENT_HISTORY_HEADER_ID = SH.PAYMENT_HISTORY_HEADER_ID AND CONVERT(DATE,SH.TRANSACTION_DATE) &lt;= @END_DATE ORDER BY SH.TRANSACTION_DATE DESC)&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE PHDSH.DISTRIBUTION_STATUS_VALUE IN ('CNLD')&#xD;&#xA;AND  ((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID = 9))&#xD;&#xA;AND CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE  &#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA; GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;--RECLAIMED&#xD;&#xA;    SELECT 8 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;    'Reclaimed' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;    - SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM53','ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION ELSE 0 END)  AS GROSS_AMOUNT , &#xD;&#xA;       - SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;          -  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT,&#xD;&#xA;           -  ((SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM53','ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) -&#xD;&#xA;            SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END))) AS NET_AMOUNT&#xD;&#xA;                          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH ON PHDSH.DISTRIBUTION_STATUS_HISTORY_ID = &#xD;&#xA;(SELECT TOP(1)SH.DISTRIBUTION_STATUS_HISTORY_ID FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SH&#xD;&#xA;WHERE PHH.PAYMENT_HISTORY_HEADER_ID = SH.PAYMENT_HISTORY_HEADER_ID AND CONVERT(DATE,SH.TRANSACTION_DATE) BETWEEN @START_DATE AND @END_DATE ORDER BY SH.TRANSACTION_DATE DESC)&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE PHDSH.DISTRIBUTION_STATUS_VALUE IN ('RCMD') &#xD;&#xA;AND  ((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID = 9))&#xD;&#xA;AND CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE  &#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA;GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;--CANCELLED AND REISSUED&#xD;&#xA;  SELECT 9 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;  'Cancelled and Reissued' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100) AS PAY_MONTH, MONTH(PHH.PAYMENT_DATE) PM,&#xD;&#xA;    - SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(OLD_DETAIL.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM53','ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(OLD_DETAIL.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION &#xD;&#xA;ELSE 0 END)  AS GROSS_AMOUNT , &#xD;&#xA;       - SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( OLD_DETAIL.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;          -  SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( OLD_DETAIL.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT,&#xD;&#xA;          - ((SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(OLD_DETAIL.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM53','ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(OLD_DETAIL.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION ELSE 0 END) -&#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN (OLD_DETAIL.AMOUNT) ELSE 0 END) -&#xD;&#xA;            SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( OLD_DETAIL.AMOUNT) ELSE 0 END))) AS NET_AMOUNT&#xD;&#xA;                          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      --INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      &#xD;&#xA;      INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION OLD_DISTRIBUTION ON OLD_DISTRIBUTION.PAYMENT_HISTORY_DISTRIBUTION_ID = PHD.OLD_DISTRIBUTION_ID&#xD;&#xA;&#x9;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER OLD_HEADER ON OLD_HEADER.PAYMENT_HISTORY_HEADER_ID = OLD_DISTRIBUTION.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;  &#x9;  INNER JOIN SGT_PAYMENT_HISTORY_DETAIL OLD_DETAIL ON OLD_HEADER.PAYMENT_HISTORY_HEADER_ID = OLD_DETAIL.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;        INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = OLD_DETAIL.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#xD;&#xA;&#x9;  --AND YEAR(OLD_HEADER.PAYMENT_DATE) = YEAR(@START_DATE)&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE OLD_DISTRIBUTION.DISTRIBUTION_STATUS_VALUE IN ('CDRE') &#xD;&#xA;AND  ((@PLAN_IDENTIFIER = 'PENS' AND PHH.PLAN_ID &lt;&gt; 1) OR (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1 AND SPA.PLAN_BENEFIT_ID = 9)) AND &#xD;&#xA;CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE  &#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA; GROUP BY CONVERT(VARCHAR(3),PHH.PAYMENT_DATE,100), MONTH(PHH.PAYMENT_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;&#xD;&#xA; UNION&#xD;&#xA;--IAP LIFE ANNUITY PAYMENTS&#xD;&#xA;  SELECT 10 as Report_order, CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END STATE_CODE,&#xD;&#xA;    'IAP Life Annuity Payments' AS RESULT_TYPE, CONVERT(VARCHAR(3),PHDSH.TRANSACTION_DATE,100) AS PAY_MONTH, MONTH(PHDSH.TRANSACTION_DATE) PM,&#xD;&#xA;    - SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE IN ('ITEM54','ITEM53') THEN ISNULL(PHDE.AMOUNT,0.0) ELSE 0 END)  AS GROSS_AMOUNT , &#xD;&#xA;       - SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) AS STATE_TAX_AMOUNT,&#xD;&#xA;        -    SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END) AS FED_TAX_AMOUNT,&#xD;&#xA;       -     ((SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND ((PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N') OR ITEM_TYPE_CODE IN ('ITEM46','ITEM47','ITEM45','ITEM56')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) WHEN (ALLOW_ROLLOVER_CODE_VALUE = 'RRED' OR ITEM_TYPE_CODE IN ('ITEM41','ITEM42','ITEM43','ITEM44')) &#xD;&#xA;THEN ISNULL(PHDE.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION WHEN ITEM_TYPE_CODE IN ('ITEM54','ITEM53') THEN ISNULL(PHDE.AMOUNT,0.0) ELSE 0 END) - &#xD;&#xA;        SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'STTX' THEN ( PHDE.AMOUNT) ELSE 0 END) -&#xD;&#xA;            SUM(CASE WHEN PIT.ACH_CHECK_GROUP_VALUE = 'FDTX'  THEN ( PHDE.AMOUNT) ELSE 0 END))) AS NET_AMOUNT&#xD;&#xA;                          FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;    INNER JOIN  SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;      INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID=PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;      INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY PHDSH ON PHDSH.DISTRIBUTION_STATUS_HISTORY_ID = &#xD;&#xA;(SELECT TOP(1)SH.DISTRIBUTION_STATUS_HISTORY_ID FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY SH&#xD;&#xA;WHERE PHH.PAYMENT_HISTORY_HEADER_ID = SH.PAYMENT_HISTORY_HEADER_ID AND CONVERT(DATE,SH.TRANSACTION_DATE) BETWEEN @START_DATE AND @END_DATE&#xD;&#xA;  &#xD;&#xA;  ORDER BY SH.TRANSACTION_DATE DESC)&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT DISTINCT CASE WHEN CV.CODE_VALUE = 'STAT' THEN 'CA' ELSE SUBSTRING(CV.CODE_VALUE, 1, 2) END TAXWITHHOLDING_STATE&#xD;&#xA;        FROM DBO.SGT_PAYMENT_HISTORY_DETAIL PHDI&#xD;&#xA;        INNER JOIN DBO.SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PHDI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;        INNER JOIN DBO.SGT_ORGANIZATION O ON O.ORG_ID = PHDI.VENDOR_ORG_ID&#xD;&#xA;        INNER JOIN DBO.SGS_CODE_VALUE CV ON CV.DATA1 = O.MPI_ORG_ID AND CV.CODE_ID = 52&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PHDI.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX'&#xD;&#xA;    ) PHH1&#xD;&#xA;    OUTER APPLY(&#xD;&#xA;        SELECT TOP 1 WITH TIES CASE WHEN PA.ADDR_STATE_VALUE NOT IN ('CA', 'GA', 'NC', 'OR', 'VA') THEN '' ELSE PA.ADDR_STATE_VALUE END ADDR_STATE_VALUE&#xD;&#xA;        FROM DBO.SGT_PERSON_ADDRESS PA&#xD;&#xA;        WHERE 1=1&#xD;&#xA;            AND PA.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;            AND PHH.PAYMENT_DATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE, '12/31/9999')&#xD;&#xA;        ORDER BY PA.START_DATE DESC&#xD;&#xA;    ) PA&#xD;&#xA;WHERE  SPA.PLAN_BENEFIT_ID &lt;&gt;  9&#xD;&#xA;AND (@PLAN_IDENTIFIER = 'IAP' AND PHH.PLAN_ID = 1) AND CONVERT(DATE,PHH.PAYMENT_DATE) BETWEEN @START_DATE AND @END_DATE  &#xD;&#xA;AND PHD.OLD_DISTRIBUTION_ID IS NULL --1099R 2015&#xD;&#xA;AND CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END = ISNULL(@STATE_CODE, '')&#xD;&#xA; GROUP BY CONVERT(VARCHAR(3),PHDSH.TRANSACTION_DATE,100), MONTH(PHDSH.TRANSACTION_DATE), CASE WHEN @STATE_CODE IS NULL THEN '' ELSE ISNULL(PHH1.TAXWITHHOLDING_STATE, ISNULL(PA.ADDR_STATE_VALUE, '')) END&#xD;&#xA;) AS RESULT &#xD;&#xA;ORDER BY PM, Report_order">
      <parameters>
        <parameter ID="@START_DATE" sfwDataType="DateTime" />
        <parameter ID="@END_DATE" sfwDataType="DateTime" />
        <parameter ID="@PLAN_IDENTIFIER" sfwDataType="string" />
        <parameter ID="@STATE_CODE" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptStaleDatedNewReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="  SELECT &#xD;&#xA;&#x9;&#x9;  PB.FIRST_NAME +' ' + PB.LAST_NAME AS PERSONNAME,&#xD;&#xA;&#x9;&#x9;  PB.DATE_OF_BIRTH,&#xD;&#xA;&#x9;&#x9;  PB.DATE_OF_DEATH,&#xD;&#xA;&#x9;&#x9;  PB.SSN,&#xD;&#xA;&#x9;&#x9;  PHDH.TRANSACTION_DATE,&#xD;&#xA;&#x9;&#x9;  PHDH.DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;&#x9;&#x9;  PHD.PAYMENT_METHOD_VALUE,&#xD;&#xA;&#x9;&#x9;  PA.PAYEE_ACCOUNT_ID,&#xD;&#xA;&#x9;&#x9;  PB.PERSON_ID,&#xD;&#xA;&#x9;&#x9;  PA.PAYEE_ACCOUNT_ID,&#xD;&#xA;&#x9;&#x9;  PH.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;&#x9;&#x9;  PHD.PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;&#x9;&#x9;  phdh.DISTRIBUTION_STATUS_HISTORY_ID&#xD;&#xA; FROM&#xD;&#xA;&#x9;&#x9; DBO.SGT_PERSON_BASE PB WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9; INNER JOIN DBO.SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON  PB.PERSON_ID = PA.PERSON_ID&#xD;&#xA;&#x9;&#x9; INNER JOIN DBO.SGT_PAYMENT_HISTORY_HEADER PH  WITH(NOLOCK) ON PA.PAYEE_ACCOUNT_ID = PH.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9; INNER JOIN DBO.SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK) ON PH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID  and PB.PERSON_ID = phd.PERSON_ID&#xD;&#xA;&#x9;&#x9; INNER JOIN [dbo].[SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY] PHDH WITH(NOLOCK) ON PHD.PAYMENT_HISTORY_DISTRIBUTION_ID = PHDH.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA; WHERE PHD.DISTRIBUTION_STATUS_VALUE='OUTS' AND PHD.PAYMENT_METHOD_VALUE='CHK' &#xD;&#xA; AND DATEDIFF(DAY,PHDH.TRANSACTION_DATE,getdate())&gt;180&#xD;&#xA; AND DATEDIFF(MONTH,PHDH.TRANSACTION_DATE,getdate())&lt;= 36&#xD;&#xA; ORDER BY PHDH.TRANSACTION_DATE ">
      <parameters />
    </query>
    <query ID="StaleLookUp" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT CODE_VALUE AS CodeID,Description AS Status_Description from [dbo].[SGS_CODE_VALUE] WHERE CODE_VALUE IN('STLE','3YRS') ">
      <parameters />
    </query>
    <query ID="rptCovid19IAPHardshipReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('tempdb..#TEMP_PAYEE_ACCOUNT_DETAILS') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP_PAYEE_ACCOUNT_DETAILS&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP_IAP_SPL_BALANCE') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP_IAP_SPL_BALANCE&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP_WITHDRAWAL_DETAIL') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP_WITHDRAWAL_DETAIL&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP_PAYBACK_DETAIL') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP_PAYBACK_DETAIL&#xD;&#xA;&#xD;&#xA;--Payee Account Details&#xD;&#xA;SELECT&#x9;DISTINCT&#xD;&#xA;&#x9;&#x9;SPA.PERSON_ID,&#xD;&#xA;&#x9;&#x9;SPA.PAYEE_ACCOUNT_ID,&#xD;&#xA;&#x9;&#x9;SBA.CREATED_DATE AS APPLICATION_CREATED_DATE,&#xD;&#xA;&#x9;&#x9;SCV.DESCRIPTION AS PAYEE_ACCOUNT_STATUS,&#xD;&#xA;&#x9;&#x9;SPAS.MODIFIED_BY AS PAYEE_ACCOUNT_STATUS_LAST_UPDATED_BY,&#xD;&#xA;&#x9;&#x9;SBA.CREATED_BY AS APPLICATION_CREATED_BY,&#xD;&#xA;&#x9;&#x9;SCV1.DESCRIPTION AS MARITAL_STATUS,&#xD;&#xA;&#x9;&#x9;SP.SSN,&#xD;&#xA;&#x9;&#x9;CASE WHEN SPA.PAYEE_ACCOUNT_ID IN (SELECT PAYEE_ACCOUNT_ID FROM SGT_PAYMENT_DIRECTIVES WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND IS_DELETED = 'N') THEN 'Yes' ELSE 'No' END AS PAYMENT_DIRECTIVE&#xD;&#xA;INTO #TEMP_PAYEE_ACCOUNT_DETAILS&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID &#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID AND SBA.BENEFIT_TYPE_VALUE = 'WDRL' AND SBA.EMERGENCY_ONETIME_PAYMENT_FLAG = 'Y' AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV ON SPAS.STATUS_ID = SCV.CODE_ID AND SPAS.STATUS_VALUE = SCV.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV1 ON SP.MARITAL_STATUS_ID = SCV1.CODE_ID AND SP.MARITAL_STATUS_VALUE = SCV1.CODE_VALUE&#xD;&#xA;&#xD;&#xA;--IAP Balance Amount&#xD;&#xA;SELECT&#x9;IAP_SPL_BALANCE.PERSON_ID,&#xD;&#xA;&#x9;&#x9;IAP_SPL_BALANCE.TOTAL_IAP_SPL_BALANCE_AS_OF_2018,&#xD;&#xA;&#x9;&#x9;IAP_SPL_BALANCE.IS_LOCAL_SPECIAL_ACCOUNT_AVAILABLE&#xD;&#xA;INTO #TEMP_IAP_SPL_BALANCE&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT&#x9;T.PERSON_ID,&#xD;&#xA;&#x9;&#x9;SUM(ISNULL(SPARC.IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(SPARC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(SPARC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) AS TOTAL_IAP_SPL_BALANCE_AS_OF_2018,&#xD;&#xA;&#x9;&#x9;SUM(SPARC.IAP_BALANCE_AMOUNT) AS IAP_BALANCE_AMOUNT,&#xD;&#xA;&#x9;&#x9;SUM(SPARC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT) AS LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,&#xD;&#xA;&#x9;&#x9;SUM(SPARC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT) AS LOCAL161_SPECIAL_ACCT_BAL_AMOUNT, &#xD;&#xA;&#x9;&#x9;MAX(CASE WHEN ISNULL(TRANSACTION_TYPE_VALUE,'ADJS') &lt;&gt; 'PMNT' THEN SPARC.EFFECTIVE_DATE ELSE NULL END) AS EFFECTIVE_DATE,&#xD;&#xA;&#x9;&#x9;SUM(CASE WHEN ISNULL(SPARC.TRANSACTION_TYPE_VALUE,'ADJS') &lt;&gt; 'PMNT' THEN &#xD;&#xA;&#x9;&#x9;ISNULL(SPARC.IAP_BALANCE_AMOUNT,0.00) END) AS IAP_BALANCE_AMOUNT_PRE_RTMT_DEATH,&#xD;&#xA;&#x9;&#x9;SUM(CASE WHEN ISNULL(SPARC.TRANSACTION_TYPE_VALUE,'ADJS') &lt;&gt; 'PMNT' THEN &#xD;&#xA;        ISNULL(SPARC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0.00) END) AS LOCAL52_SPECIAL_ACCT_BAL_AMOUNT_PRE_RTMT_DEATH,&#xD;&#xA;&#x9;&#x9;SUM(CASE WHEN ISNULL(SPARC.TRANSACTION_TYPE_VALUE,'ADJS') &lt;&gt; 'PMNT' THEN &#xD;&#xA;        ISNULL(SPARC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0.00) END) AS LOCAL161_SPECIAL_ACCT_BAL_AMOUNT_PRE_RTMT_DEATH,&#xD;&#xA;&#x9;&#x9;CASE WHEN  SUM(ISNULL(SPARC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(SPARC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &gt; 0 THEN 'Y' ELSE 'N' END AS IS_LOCAL_SPECIAL_ACCOUNT_AVAILABLE&#xD;&#xA;FROM #TEMP_PAYEE_ACCOUNT_DETAILS T&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON T.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID = 1&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE ((&#x9;ISNULL(SPARC.TRANSACTION_TYPE_VALUE,'ADJS') &lt;&gt; 'PMNT' AND SPARC.COMPUTATIONAL_YEAR &lt;= (SELECT TOP 1 IAP_BALANCE_AS_OF_YEAR FROM SGT_EMERGENCY_PAYMENT_SETUP_VALUE WHERE GETDATE() BETWEEN EFFECTIVE_DATE AND END_DATE ))&#xD;&#xA;&#x9;&#x9;OR SPARC.TRANSACTION_TYPE_VALUE = 'PMNT'&#xD;&#xA;&#x9;  ) &#xD;&#xA;GROUP BY T.PERSON_ID&#xD;&#xA;) IAP_SPL_BALANCE&#xD;&#xA;&#xD;&#xA;--Withdrawal Amount&#xD;&#xA;SELECT&#x9;WITHDRAWAL_DETAIL.PERSON_ID,&#xD;&#xA;&#x9;&#x9;WITHDRAWAL_DETAIL.PAYEE_ACCOUNT_ID,&#xD;&#xA;&#x9;&#x9;WITHDRAWAL_DETAIL.WITHDRAWAL_AMOUNT,&#xD;&#xA;&#x9;&#x9;WITHDRAWAL_AMOUNT_GROSS=CAST(0.00 AS [numeric](11, 2))&#xD;&#xA;INTO #TEMP_WITHDRAWAL_DETAIL&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT T.PERSON_ID, SPAPIT.PAYEE_ACCOUNT_ID, SUM(SPAPIT.AMOUNT * SPIT.ITEM_TYPE_DIRECTION) AS WITHDRAWAL_AMOUNT--, SUM(PAPI.AMOUNT) AS WITHDRAWAL_AMOUNT_GROSS&#xD;&#xA;FROM #TEMP_PAYEE_ACCOUNT_DETAILS T&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE SPAPIT ON T.PAYEE_ACCOUNT_ID = SPAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE SPIT ON SPAPIT.PAYMENT_ITEM_TYPE_ID = SPIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;GROUP BY T.PERSON_ID, SPAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;)WITHDRAWAL_DETAIL&#xD;&#xA;&#xD;&#xA;--Add WITHDRAWAL_AMOUNT_GROSS to #TEMP_WITHDRAWAL_DETAIL table&#xD;&#xA;UPDATE t1&#xD;&#xA;&#x9;SET t1.WITHDRAWAL_AMOUNT_GROSS = t2.AMOUNT&#xD;&#xA;FROM #TEMP_WITHDRAWAL_DETAIL t1&#xD;&#xA;&#x9;JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE t2 ON t1.PAYEE_ACCOUNT_ID = t2.PAYEE_ACCOUNT_ID AND t2.PAYMENT_ITEM_TYPE_ID = 21&#xD;&#xA;&#xD;&#xA;--Payback Amount&#xD;&#xA;SELECT&#x9;PAYBACK_DETAIL.PERSON_ID,&#xD;&#xA;&#x9;&#x9;PAYBACK_DETAIL.PAYEE_ACCOUNT_ID,&#xD;&#xA;&#x9;&#x9;PAYBACK_DETAIL.PAYBACK_AMOUNT&#xD;&#xA;INTO #TEMP_PAYBACK_DETAIL&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT T.PERSON_ID, SIP.PAYEE_ACCOUNT_ID, SUM(SIP.CHECK_AMOUNT) AS PAYBACK_AMOUNT      --T.PERSON_ID, SPAPIT.PAYEE_ACCOUNT_ID, SUM(SPAPIT.AMOUNT * SPIT.ITEM_TYPE_DIRECTION) AS WITHDRAWAL_AMOUNT--, SUM(PAPI.AMOUNT) AS WITHDRAWAL_AMOUNT_GROSS&#xD;&#xA;FROM #TEMP_PAYEE_ACCOUNT_DETAILS T&#xD;&#xA;&#x9;INNER JOIN SGT_IAP_HARDSHIP_PAYBACK SIP ON SIP.PAYEE_ACCOUNT_ID = T.PAYEE_ACCOUNT_ID&#xD;&#xA;GROUP BY T.PERSON_ID, SIP.PAYEE_ACCOUNT_ID&#xD;&#xA;)PAYBACK_DETAIL&#xD;&#xA;&#xD;&#xA;SELECT&#x9;ROW_NUMBER() OVER ( ORDER BY T1.PAYEE_ACCOUNT_STATUS DESC, T1.APPLICATION_CREATED_DATE) AS SNO,&#xD;&#xA;&#x9;&#x9;SP.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;T1.SSN,&#xD;&#xA;&#x9;&#x9;SP.LAST_NAME + ' , ' + SP.FIRST_NAME AS NAME,&#xD;&#xA;&#x9;&#x9;T1.MARITAL_STATUS,&#xD;&#xA;&#x9;&#x9;T1.APPLICATION_CREATED_DATE,&#xD;&#xA;&#x9;&#x9;T1.APPLICATION_CREATED_BY,&#xD;&#xA;&#x9;&#x9;T2.TOTAL_IAP_SPL_BALANCE_AS_OF_2018,&#xD;&#xA;&#x9;&#x9;T2.IS_LOCAL_SPECIAL_ACCOUNT_AVAILABLE,&#xD;&#xA;&#x9;&#x9;T3.WITHDRAWAL_AMOUNT,&#xD;&#xA;&#x9;&#x9;T3.WITHDRAWAL_AMOUNT_GROSS,&#xD;&#xA;&#x9;&#x9;T4.PAYBACK_AMOUNT,&#xD;&#xA;&#x9;&#x9;COALESCE(T3.WITHDRAWAL_AMOUNT_GROSS, 0) - COALESCE(T4.PAYBACK_AMOUNT, 0) AS PAYBACK_REMAINING_BALANCE,&#xD;&#xA;&#x9;&#x9;T1.PAYEE_ACCOUNT_ID,&#xD;&#xA;&#x9;&#x9;T1.PAYEE_ACCOUNT_STATUS,&#xD;&#xA;&#x9;&#x9;T1.PAYEE_ACCOUNT_STATUS_LAST_UPDATED_BY,&#xD;&#xA;&#x9;&#x9;T1.PAYMENT_DIRECTIVE&#xD;&#xA;FROM #TEMP_PAYEE_ACCOUNT_DETAILS T1&#xD;&#xA;INNER JOIN #TEMP_IAP_SPL_BALANCE T2 ON T1.PERSON_ID = T2.PERSON_ID&#xD;&#xA;INNER JOIN #TEMP_WITHDRAWAL_DETAIL T3 ON T1.PERSON_ID = T3.PERSON_ID AND T1.PAYEE_ACCOUNT_ID = T3.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT JOIN #TEMP_PAYBACK_DETAIL T4 ON T1.PERSON_ID = T4.PERSON_ID AND T1.PAYEE_ACCOUNT_ID = T4.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON T1.PERSON_ID = SP.PERSON_ID&#xD;&#xA;ORDER BY T1.PAYEE_ACCOUNT_STATUS DESC, T1.APPLICATION_CREATED_DATE">
      <parameters />
    </query>
    <query ID="rptDemographicAuditHistory" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--***************************************************************************&#xD;&#xA;--Query to pull demographic audit history within 2 date ranges&#xD;&#xA;--***************************************************************************&#xD;&#xA;--IF OBJECT_ID(N'tempdb..#DemographicAuditChanges') IS NOT NULL&#xD;&#xA;--BEGIN&#xD;&#xA;--DROP TABLE #DemographicAuditChanges&#xD;&#xA;--END&#xD;&#xA;&#xD;&#xA;--DECLARE @FROM DATE, @TO DATE&#xD;&#xA;--SET @FROM = '12/01/2018' --add validation here or performance will be impacted&#xD;&#xA;--SET @TO = '12/30/2018'&#xD;&#xA;&#xD;&#xA;--CREATE TABLE [#DemographicAuditChanges](  &#xD;&#xA;--    --            [AUDIT_LOG_ID] INT NULL,&#xD;&#xA;--    --            [AUDIT_LOG_DETAIL_ID] INT NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;--[PRIMARY_KEY] BIGINT NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;--[BO_PRIMARY_KEY] BIGINT NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;--[FORM_NAME] VARCHAR(128) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;--[PERSON_ID] INT NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[PARTICIPANT_NAME] VARCHAR(100) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[MPI_PERSON_ID] VARCHAR(20) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[COLUMN_NAME] VARCHAR(128) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[OLD_VALUE] VARCHAR(MAX) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[NEW_VALUE] VARCHAR(MAX) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[MODIFIED_BY] VARCHAR(50) NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[MODIFIED_DATE] DATETIME NULL,&#xD;&#xA;--&#x9;&#x9;&#x9;&#x9;[STATUS] VARCHAR(50) NULL)&#xD;&#xA;&#xD;&#xA;--INSERT INTO [#DemographicAuditChanges]&#xD;&#xA;SELECT &#xD;&#xA;&#x9;--L.AUDIT_LOG_ID, LD.AUDIT_LOG_DETAIL_ID, L.PRIMARY_KEY, L.BO_PRIMARY_KEY,L.FORM_NAME, L.PERSON_ID, --Uncomment line when troubleshooting&#xD;&#xA;&#x9;P.LAST_NAME + ', ' + P.FIRST_NAME AS 'PARTICIPANT_NAME'&#xD;&#xA;&#x9;, P.MPI_PERSON_ID, LD.COLUMN_NAME&#xD;&#xA;&#x9;, LD.OLD_VALUE&#xD;&#xA;&#x9;--, &#x9;CASE WHEN ISDATE(LD.OLD_VALUE) = 1 THEN CONVERT(VARCHAR(10),CAST(LD.OLD_VALUE AS DATETIME),101)&#xD;&#xA;&#x9;--&#x9;ELSE LD.OLD_VALUE END AS OLD_VALUE&#xD;&#xA;&#x9;, LD.NEW_VALUE&#xD;&#xA;&#x9;, L.MODIFIED_BY, L.MODIFIED_DATE&#xD;&#xA;&#x9;,&#xD;&#xA;&#x9;CASE &#xD;&#xA;&#x9;&#x9;WHEN A.PERSON_ID IS NOT NULL OR PL.PERSON_ID IS NULL THEN 'Retiree'&#x9;&#xD;&#xA;&#x9;&#x9;ELSE 'Active'&#xD;&#xA;&#x9;END AS [STATUS]&#xD;&#xA;FROM SGS_FULL_AUDIT_LOG L WITH (NOLOCK)&#xD;&#xA;&#x9;JOIN SGS_FULL_AUDIT_LOG_DETAIL LD WITH (NOLOCK) ON LD.AUDIT_LOG_ID = L.AUDIT_LOG_ID&#xD;&#xA;&#x9;JOIN SGT_PERSON P WITH (NOLOCK) ON P.PERSON_ID = L.PRIMARY_KEY -- NOTE: WE ARE ASSUMING THAT SGS_FULL_AUDIT_LOG.PRIMARY_KEY IS FOR THE PERSON_ID&#xD;&#xA;&#x9;LEFT JOIN (&#x9;--STATUS logic: Part 1 of 2 - Benefit Application check.  If there is an approved 'RTMT' or 'DSBL'application, then set Status as 'Retiree'&#xD;&#xA;&#x9;&#x9;SELECT PERSON_ID, COUNT(*) AS RetAppCount&#xD;&#xA;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION WITH(NOLOCK) &#xD;&#xA;&#x9;&#x9;WHERE BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') &#xD;&#xA;&#x9;&#x9;AND APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;GROUP BY PERSON_ID&#xD;&#xA;&#x9;&#x9;HAVING COUNT(*) &gt; 0&#xD;&#xA;&#x9;) A ON A.PERSON_ID = L.PERSON_ID&#xD;&#xA;&#x9;LEFT JOIN (  -- STATUS logic: Part 2 of 2 - Person Account check.  If there's not any ACTV accounts, then set Status as 'Retiree'&#xD;&#xA;&#x9;&#x9;SELECT SPA.PERSON_ID, COUNT(*) AS AccountCount&#xD;&#xA;&#x9;&#x9;FROM SGT_PLAN SP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PLAN_ID =SPA.PLAN_ID&#xD;&#xA;&#x9;&#x9;WHERE SP.PLAN_ID &lt;&gt; 9 -- IGNORE the 'HealthPlan'&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;AND SPA.STATUS_VALUE = 'ACTV'&#xD;&#xA;&#x9;&#x9;GROUP BY SPA.PERSON_ID&#xD;&#xA;&#x9;) PL ON PL.PERSON_ID = L.PERSON_ID&#xD;&#xA;&#x9;LEFT JOIN (  -- Participant Logic&#xD;&#xA;&#x9;&#x9;SELECT SPA.PERSON_ID, COUNT(*) AS PtpCount&#xD;&#xA;&#x9;&#x9;FROM SGT_PLAN SP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PLAN_ID =SPA.PLAN_ID&#xD;&#xA;&#x9;&#x9;WHERE SP.PLAN_ID &lt;&gt; 9 -- IGNORE the 'HealthPlan'&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;AND SPA.STATUS_VALUE IN('ACTV','RETR')&#xD;&#xA;&#x9;&#x9;GROUP BY SPA.PERSON_ID&#xD;&#xA;&#x9;) PTP ON PTP.PERSON_ID = L.PERSON_ID&#x9;&#xD;&#xA;WHERE L.FORM_NAME = 'wfmPersonMaintenance'&#xD;&#xA;&#x9;AND L.MODIFIED_DATE BETWEEN @FROM AND @TO&#xD;&#xA;&#x9;AND LD.COLUMN_NAME IN ('ssn','date_of_birth')&#xD;&#xA;&#x9;AND PTP.PtpCount &gt; 0&#xD;&#xA;ORDER BY L.MODIFIED_DATE DESC &#xD;&#xA;&#xD;&#xA;--SELECT * FROM [#DemographicAuditChanges]&#xD;&#xA;&#xD;&#xA;--DROP TABLE [#DemographicAuditChanges]&#xD;&#xA;">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UpdateApprovedGroupsEffectiveEndDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE SGT_RETIREE_INCREASE_GROUP_CONTRACT &#xD;&#xA;SET RI_PA_GENERATED_DATE = GETDATE(), EFFECTIVE_END_DATE = @EFF_END_DATE&#xD;&#xA;WHERE PLAN_YEAR = @PLAN_YEAR AND EFFECTIVE_END_DATE IS NULL AND IS_APPROVED = 'Y'&#xD;&#xA;">
      <parameters>
        <parameter ID="@EFF_END_DATE" sfwDataType="DateTime" />
        <parameter ID="@PLAN_YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="IAP_HARDSHIP_WITHDRAWAL_REPORT" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="-- DECLARE @WITHDRAWAL_TYPE VARCHAR(5); SET @WITHDRAWAL_TYPE = 'HS25';&#xD;&#xA;-- endTempData.IAP_HARDSHIP_WITHDRAWAL_REPORT&#xD;&#xA;DECLARE @STATEMENT_YEAR INT, @WITHDRAWAL_TYPE_DESCRIPTION VARCHAR(50), @YEAR_OF_HARDSHIP_SETUP INT, @PAYMENT_UPTO_DATE DATETIME&#xD;&#xA;SELECT @STATEMENT_YEAR = DATA1, @WITHDRAWAL_TYPE_DESCRIPTION = [DESCRIPTION], @YEAR_OF_HARDSHIP_SETUP = YEAR(CREATED_DATE) &#xD;&#xA;FROM SGS_CODE_VALUE WHERE CODE_ID = 7098 AND CODE_VALUE = @WITHDRAWAL_TYPE&#xD;&#xA;SELECT @PAYMENT_UPTO_DATE = EFFECTIVE_DATE FROM SGT_EMERGENCY_PAYMENT_SETUP_VALUE WHERE YEAR(CREATED_DATE) = @YEAR_OF_HARDSHIP_SETUP&#xD;&#xA;&#xD;&#xA;SELECT SPA.PERSON_ID, SUM(ISNULL(SPARC.IAP_BALANCE_AMOUNT,0)) AS IAPBalance, SUM(ISNULL(SPARC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) AS L52Balance,&#xD;&#xA;&#x9;                      SUM(ISNULL(SPARC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) AS L161Balance&#xD;&#xA;INTO #IAP_BALANCE&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA on SPARC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 1 &#xD;&#xA;AND ( (ISNULL(TRANSACTION_TYPE_VALUE,'ADJS') &lt;&gt; 'PMNT' &#xD;&#xA;               AND SPARC.COMPUTATIONAL_YEAR &lt;= @STATEMENT_YEAR) &#xD;&#xA;&#x9;&#x9;    OR (TRANSACTION_TYPE_VALUE = 'PMNT' AND TRANSACTION_DATE &lt;= @PAYMENT_UPTO_DATE ))&#xD;&#xA;GROUP BY SPA.PERSON_ID &#xD;&#xA;&#xD;&#xA;SELECT MPI_PERSON_ID, NAME --, LF&#xD;&#xA;, UNION_CODE, APPLICATION_CREATED_DATE, PAYEE_ACCOUNT_ID, PAYEE_ACCOUNT_STATUS, PAYEE_ACCOUNT_STATUS_LAST_UPDATED_BY, APPLICATION_CREATED_BY, MARITAL_STATUS&#xD;&#xA;, SSN, IS_LOCAL_SPECIAL_ACCOUNT_AVAILABLE, TOTAL_IAP_SPL_BALANCE&#xD;&#xA;, SUM(CASE WHEN PAYMENT_ITEM_TYPE_ID = 21 THEN AMOUNT ELSE 0 END) AS WITHDRAWAL_AMOUNT_GROSS&#xD;&#xA;, SUM(CASE WHEN PAYMENT_ITEM_TYPE_ID &lt;&gt; 54 THEN AMOUNT * ITEM_TYPE_DIRECTION ELSE 0 END) AS WITHDRAWAL_AMOUNT&#xD;&#xA;, PAYMENT_DIRECTIVE&#xD;&#xA;, PAYEE_ACCOUNT_MODIFIED_BY, STATEMENT_YEAR, WITHDRAWAL_TYPE_DESCRIPTION&#xD;&#xA;, CONVERT(money, 0.0) AS TOTAL_PAID_AMOUNT&#xD;&#xA;, CONVERT(money, 0.0) AS UNPAID_BALANCE&#xD;&#xA;INTO #TEMP&#xD;&#xA;FROM (&#xD;&#xA;SELECT P.MPI_PERSON_ID, CASE WHEN P.VIP_FLAG = 'Y' THEN '' ELSE P.LAST_NAME + ' , ' + P.FIRST_NAME END AS NAME , P.LAST_NAME + ' , ' + P.FIRST_NAME LF&#xD;&#xA;, CAST('' AS VARCHAR(5)) AS UNION_CODE &#xD;&#xA;, BA.CREATED_DATE AS APPLICATION_CREATED_DATE, PA.PAYEE_ACCOUNT_ID&#xD;&#xA;, SCV.DESCRIPTION AS PAYEE_ACCOUNT_STATUS, SPAS.MODIFIED_BY AS PAYEE_ACCOUNT_STATUS_LAST_UPDATED_BY&#xD;&#xA;, BA.CREATED_BY AS APPLICATION_CREATED_BY&#xD;&#xA;, SCV1.DESCRIPTION AS MARITAL_STATUS, P.SSN&#xD;&#xA;, CASE WHEN (IAP.L161Balance + IAP.L52Balance)&gt;0 THEN 'Y' ELSE 'N' END AS IS_LOCAL_SPECIAL_ACCOUNT_AVAILABLE&#xD;&#xA;, IAP.IAPBalance + IAP.L52Balance + IAP.L161Balance AS TOTAL_IAP_SPL_BALANCE&#xD;&#xA;, CASE WHEN DIRECTIVE_ID IS NOT NULL THEN 'Yes' ELSE 'No' END AS PAYMENT_DIRECTIVE&#xD;&#xA;, PAPIT.PAYMENT_ITEM_TYPE_ID, PAPIT.AMOUNT, PIT.ITEM_TYPE_DIRECTION&#xD;&#xA;, PA.MODIFIED_BY AS PAYEE_ACCOUNT_MODIFIED_BY&#xD;&#xA;, @STATEMENT_YEAR AS STATEMENT_YEAR, @WITHDRAWAL_TYPE_DESCRIPTION AS WITHDRAWAL_TYPE_DESCRIPTION&#xD;&#xA;--, WTCODE.DATA1 AS STATEMENT_YEAR, WTCODE.DESCRIPTION AS WITHDRAWAL_TYPE_DESCRIPTION&#xD;&#xA;FROM SGT_BENEFIT_APPLICATION BA&#xD;&#xA;INNER JOIN SGT_PERSON P ON BA.PERSON_ID = P.PERSON_ID AND BA.BENEFIT_TYPE_VALUE = 'WDRL' AND BA.APPLICATION_STATUS_VALUE = 'APPR' AND ISNULL(BA.WITHDRAWAL_TYPE_VALUE,'N') = @WITHDRAWAL_TYPE&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON BA.BENEFIT_APPLICATION_ID = BAD.BENEFIT_APPLICATION_ID &#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PB ON BAD.PLAN_BENEFIT_ID = PB.PLAN_BENEFIT_ID AND PB.PLAN_ID = 1 &#xD;&#xA;--INNER JOIN SGS_CODE_VALUE WTCODE ON BA.WITHDRAWAL_TYPE_ID = WTCODE.CODE_ID AND BA.WITHDRAWAL_TYPE_VALUE = WTCODE.CODE_VALUE &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PA ON BAD.BENEFIT_APPLICATION_DETAIL_ID = PA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON PA.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PAPIT.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON PA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID ORDER BY PAYEE_ACCOUNT_STATUS_ID DESC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV ON SPAS.STATUS_ID = SCV.CODE_ID AND SPAS.STATUS_VALUE = SCV.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE SCV1 ON P.MARITAL_STATUS_ID = SCV1.CODE_ID AND P.MARITAL_STATUS_VALUE = SCV1.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN (SELECT PAYEE_ACCOUNT_ID, MAX(PAYMENT_DIRECTIVES_ID) DIRECTIVE_ID FROM SGT_PAYMENT_DIRECTIVES WHERE IS_DELETED = 'N' GROUP BY PAYEE_ACCOUNT_ID) PD ON PA.PAYEE_ACCOUNT_ID = PD.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN #IAP_BALANCE AS IAP ON BA.PERSON_ID = IAP.PERSON_ID&#xD;&#xA;) X&#xD;&#xA;GROUP BY MPI_PERSON_ID, NAME, UNION_CODE, APPLICATION_CREATED_DATE, PAYEE_ACCOUNT_ID, PAYEE_ACCOUNT_STATUS, PAYEE_ACCOUNT_STATUS_LAST_UPDATED_BY, APPLICATION_CREATED_BY, MARITAL_STATUS&#xD;&#xA;, SSN, IS_LOCAL_SPECIAL_ACCOUNT_AVAILABLE, TOTAL_IAP_SPL_BALANCE, PAYMENT_DIRECTIVE, PAYEE_ACCOUNT_MODIFIED_BY, STATEMENT_YEAR, WITHDRAWAL_TYPE_DESCRIPTION&#xD;&#xA;--, LF&#xD;&#xA;UPDATE #TEMP&#xD;&#xA;SET UNION_CODE = CONVERT(VARCHAR(5), Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay (P.SSN, Pillars.dbo.[fn_PlanYearStartDate](STATEMENT_YEAR), Pillars.dbo.[fn_PlanYearEndDate](STATEMENT_YEAR)))&#xD;&#xA;FROM #TEMP T INNER JOIN SGT_PERSON P ON T.MPI_PERSON_ID = P.MPI_PERSON_ID&#xD;&#xA;&#xD;&#xA;UPDATE #TEMP&#xD;&#xA;SET TOTAL_PAID_AMOUNT = COALESCE((SELECT SUM(CHECK_AMOUNT) FROM SGT_IAP_HARDSHIP_PAYBACK WHERE PAYEE_ACCOUNT_ID = T.PAYEE_ACCOUNT_ID),0)&#xD;&#xA;, UNPAID_BALANCE = WITHDRAWAL_AMOUNT_GROSS - COALESCE((SELECT SUM(CHECK_AMOUNT) FROM SGT_IAP_HARDSHIP_PAYBACK WHERE PAYEE_ACCOUNT_ID = T.PAYEE_ACCOUNT_ID),0)&#xD;&#xA;FROM #TEMP T&#xD;&#xA;&#xD;&#xA;SELECT * FROM #TEMP ORDER BY PAYEE_ACCOUNT_STATUS DESC, PAYEE_ACCOUNT_ID&#xD;&#xA;DROP TABLE #TEMP, #IAP_BALANCE">
      <parameters>
        <parameter ID="@WITHDRAWAL_TYPE" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptMonthlyPreCheck" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @EndOfThisMonth date, @FirstOfNextMonth date&#xD;&#xA;SET @FirstOfNextMonth = convert(date, dateadd(DAY, - Datepart(day, dateadd(m,1,getdate()) )+1, dateadd(m,1,getdate())))&#xD;&#xA;SET @EndOfThisMonth = convert(date, dateadd(DAY, - Datepart(day, dateadd(m,1,getdate()) ), dateadd(m,1,getdate())))&#xD;&#xA;&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID AS PAYMENT_ITEM_ID, PAS.STATUS_VALUE AS PA_STATUS &#xD;&#xA;, CONVERT(CHAR(10),PPI.START_DATE,101) AS START_DATE, CONVERT(CHAR(10),PPI.END_DATE,101) AS END_DATE, CONVERT(CHAR(10),PA.TERM_CERTAIN_END_DATE,101) AS TERM_CERTAIN&#xD;&#xA;,PPI.AMOUNT, LEFT(PPIT.CHECK_COMPONENT_DESCRIPTION,20) AS ITEM_TYPE, PPI.VENDOR_ORG_ID, PB.BENEFIT_OPTION_VALUE, BENEFIT_END_DATE, PA.PERSON_ID, PA.ORG_ID&#xD;&#xA;INTO #TEMP_PA&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA INNER JOIN SGT_PERSON P ON PA.PERSON_ID = P.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PPI ON PA.PAYEE_ACCOUNT_ID = PPI.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN PPI.START_DATE AND ISNULL(PPI.END_DATE,'99991231')&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PPIT ON PPI.PAYMENT_ITEM_TYPE_ID = PPIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR PB ON PA.PLAN_BENEFIT_ID = PB.PLAN_BENEFIT_ID AND PB.PLAN_ID &lt;&gt; 1&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS PAS ON PA.PAYEE_ACCOUNT_ID = PAS.PAYEE_ACCOUNT_ID&#xD;&#xA;WHERE PAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT MAX(PAYEE_ACCOUNT_STATUS_ID) FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID)&#xD;&#xA;AND PAS.STATUS_VALUE IN ('RECV','APRD') &#xD;&#xA;--SELECT * FROM #TEMP_PA&#xD;&#xA;&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, START_DATE, END_DATE, TERM_CERTAIN, AMOUNT, ITEM_TYPE&#xD;&#xA;, 'Tax Item Amount is 0 or null.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;WHERE ITEM_TYPE in ('Federal Tax', 'State Tax') AND ISNULL(AMOUNT,0.0) = 0.0&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, START_DATE, END_DATE, TERM_CERTAIN, AMOUNT, ITEM_TYPE&#xD;&#xA;, 'VENDOR_ORG_ID is null.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;WHERE ITEM_TYPE in ('Federal Tax', 'State Tax') AND VENDOR_ORG_ID is null&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, START_DATE, END_DATE, TERM_CERTAIN, AMOUNT, ITEM_TYPE&#xD;&#xA;, 'WRONG Benefit End Date.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;WHERE BENEFIT_OPTION_VALUE IN ('3YLA','2YLA','5YLA','10TC','10LA') AND BENEFIT_END_DATE = @EndOfThisMonth&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'No ACH &amp; address for Person.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL ACH on PA.PAYEE_ACCOUNT_ID = ACH.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN ACH.ACH_START_DATE AND ISNULL(ACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS ADR ON PA.PERSON_ID = ADR.PERSON_ID AND @FirstOfNextMonth BETWEEN ADR.START_DATE AND ISNULL(ADR.END_DATE,'99991231')&#xD;&#xA;WHERE PA.PERSON_ID IS NOT NULL AND ACH.PAYEE_ACCOUNT_ACH_DETAIL_ID IS NULL AND ADR.ADDRESS_ID IS NULL&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'No ACH &amp; address for ORG.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL ACH on PA.PAYEE_ACCOUNT_ID = ACH.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN ACH.ACH_START_DATE AND ISNULL(ACH.ACH_END_DATE,'99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_ORG_ADDRESS OADR ON PA.ORG_ID = OADR.ORG_ID AND @FirstOfNextMonth BETWEEN OADR.START_DATE AND ISNULL(OADR.END_DATE,'99991231')&#xD;&#xA;WHERE PA.ORG_ID IS NOT NULL AND ACH.PAYEE_ACCOUNT_ACH_DETAIL_ID IS NULL AND OADR.ORG_ADDRESS_ID IS NULL&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Payment items with start date is null.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;WHERE PA.START_DATE IS  NULL &#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'ORG_ID or Person_ID is missing in deduction record.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_DEDUCTION DED ON PA.PAYEE_ACCOUNT_ID = DED.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN DED.START_DATE AND ISNULL(DED.END_DATE,'99991231')&#xD;&#xA;WHERE DED.PAYEE_ACCOUNT_ID IS NOT NULL AND ((DED.PAY_TO_VALUE IN ('ORGN', 'VNDR') AND ISNULL(DED.ORG_ID,0)=0) OR (PAY_TO_VALUE = 'PRSN' and isnull(DED.PERSON_ID,0)=0)) &#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Withholding percentage is Null and 0.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;LEFT OUTER JOIN SGT_WITHHOLDING_INFORMATION WHI ON PA.PAYEE_ACCOUNT_ID = WHI.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN WHI.WITHHOLDING_DATE_FROM AND ISNULL(WHI.WITHHOLDING_DATE_TO,'99991231')&#xD;&#xA;WHERE WHI.PAYEE_ACCOUNT_ID IS NOT NULL AND ISNULL(WHI.WITHHOLDING_PERCENTAGE,0) = 0&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Negative Net amount.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN ( SELECT PA1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA1 &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PPI1 ON PA1.PAYEE_ACCOUNT_ID = PPI1.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN PPI1.START_DATE AND ISNULL(PPI1.END_DATE,'99991231')&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PPIT1 ON PPI1.PAYMENT_ITEM_TYPE_ID = PPIT1.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;GROUP BY PA1.PAYEE_ACCOUNT_ID HAVING SUM(PPI1.AMOUNT * PPIT1.ITEM_TYPE_DIRECTION) &lt; 0 &#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Duplicate payment items.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN ( SELECT PPI1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PPI1 WHERE @FirstOfNextMonth BETWEEN PPI1.START_DATE AND ISNULL(PPI1.END_DATE,'99991231')&#xD;&#xA;GROUP BY PPI1.PAYEE_ACCOUNT_ID, PPI1.PAYMENT_ITEM_TYPE_ID HAVING COUNT(1) &gt; 1 &#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, RPD.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID, PA_STATUS&#xD;&#xA;, CONVERT(CHAR(10),PAR.START_DATE,101) AS START_DATE, CONVERT(CHAR(10),PAR.END_DATE,101) AS END_DATE, TERM_CERTAIN&#xD;&#xA;, CONVERT(CHAR(10), (RPD.AMOUNT * PPIT.ITEM_TYPE_DIRECTION)) AS AMOUNT, LEFT(PPIT.CHECK_COMPONENT_DESCRIPTION,20) AS ITEM_TYPE&#xD;&#xA;, 'Duplicate RETRO/OVER payment effective at the First of Next month.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT PAR ON PA.PAYEE_ACCOUNT_ID = PAR.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN PAR.START_DATE AND ISNULL(PAR.END_DATE,'99991231') --and ISNULL(IS_OVERPAYMENT_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT_DETAIL RPD ON PAR.PAYEE_ACCOUNT_RETRO_PAYMENT_ID = RPD.PAYEE_ACCOUNT_RETRO_PAYMENT_ID &#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PPIT ON RPD.PAYMENT_ITEM_TYPE_ID = PPIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;INNER JOIN ( SELECT PA1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT_RETRO_PAYMENT PA1 WHERE @FirstOfNextMonth BETWEEN PA1.START_DATE AND ISNULL(PA1.END_DATE,'99991231')&#xD;&#xA;GROUP BY PA1.PAYEE_ACCOUNT_ID HAVING COUNT(1) &gt; 1&#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Duplicate tax withholding.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN ( SELECT PA1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT_TAX_WITHHOLDING PA1 WHERE @FirstOfNextMonth BETWEEN PA1.START_DATE AND ISNULL(PA1.END_DATE,'99991231')&#xD;&#xA;GROUP BY PA1.PAYEE_ACCOUNT_ID, TAX_IDENTIFIER_VALUE HAVING COUNT(1) &gt; 1&#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Duplicate ACH information.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN ( SELECT PA1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT_ACH_DETAIL PA1 WHERE @FirstOfNextMonth BETWEEN PA1.ACH_START_DATE AND ISNULL(PA1.ACH_END_DATE,'99991231')&#xD;&#xA;GROUP BY PA1.PAYEE_ACCOUNT_ID HAVING COUNT(1) &gt; 1&#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Duplicate Deductions.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN ( SELECT PA1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT_DEDUCTION PA1 WHERE @FirstOfNextMonth BETWEEN PA1.START_DATE AND ISNULL(PA1.END_DATE,'99991231')&#xD;&#xA;GROUP BY PA1.PAYEE_ACCOUNT_ID HAVING COUNT(1) &gt; 1&#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Multiple rollover check.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN ( SELECT PA1.PAYEE_ACCOUNT_ID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PA1 WHERE STATUS_VALUE = 'ACTV'&#xD;&#xA;GROUP BY PA1.PAYEE_ACCOUNT_ID HAVING COUNT(1) &gt; 1&#xD;&#xA;) TPA ON PA.PAYEE_ACCOUNT_ID = TPA.PAYEE_ACCOUNT_ID&#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'Check-Duplicate Address.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL ACH on PA.PAYEE_ACCOUNT_ID = ACH.PAYEE_ACCOUNT_ID AND @FirstOfNextMonth BETWEEN ACH.ACH_START_DATE AND ISNULL(ACH.ACH_END_DATE,'99991231')&#xD;&#xA;INNER JOIN ( SELECT ADR.PERSON_ID FROM SGT_PERSON_ADDRESS ADR INNER JOIN SGT_PERSON_ADDRESS_CHKLIST CK ON ADR.ADDRESS_ID = CK.ADDRESS_ID AND CK.ADDRESS_TYPE_VALUE = 'MAIL'&#xD;&#xA;  WHERE @FirstOfNextMonth BETWEEN ADR.START_DATE AND ISNULL(ADR.END_DATE,'99991231')&#xD;&#xA;  GROUP BY ADR.PERSON_ID HAVING COUNT(*)&gt;1 ) PAADR ON PA.PERSON_ID = PAADR.PERSON_ID&#xD;&#xA;WHERE PA.PERSON_ID IS NOT NULL AND ACH.PAYEE_ACCOUNT_ACH_DETAIL_ID IS NULL &#xD;&#xA;UNION&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID, PA.PAYMENT_ITEM_ID, PA_STATUS, PA.START_DATE, PA.END_DATE, PA.TERM_CERTAIN, PA.AMOUNT, PA.ITEM_TYPE&#xD;&#xA;, 'No Response for PBV letter.' AS PRE_CHECK_ISSUE &#xD;&#xA;FROM #TEMP_PA PA &#xD;&#xA;INNER JOIN SGT_PENSION_VERIFICATION_HISTORY B ON PA.PERSON_ID = B.PERSON_ID AND B.THIRTY_DAYS_LETTER_SENT IS NOT NULL AND B.RECEIVED_DATE IS NULL&#xD;&#xA;&#xD;&#xA;------------------------------------------------------------------------------------------------------------------------&#xD;&#xA;DROP TABLE #TEMP_PA">
      <parameters />
    </query>
  </queries>
  <attributes>
    <attribute ID="0" sfwType="Column" sfwValue="0" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="30" sfwType="Column" sfwValue="30" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="31" sfwType="Column" sfwValue="31" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="32" sfwType="Column" sfwValue="32" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="33" sfwType="Column" sfwValue="33" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="34" sfwType="Column" sfwValue="34" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="35" sfwType="Column" sfwValue="35" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="36" sfwType="Column" sfwValue="36" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="37" sfwType="Column" sfwValue="37" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="38" sfwType="Column" sfwValue="38" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="39" sfwType="Column" sfwValue="39" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="40" sfwType="Column" sfwValue="40" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="41" sfwType="Column" sfwValue="41" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="42" sfwType="Column" sfwValue="42" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="43" sfwType="Column" sfwValue="43" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="44" sfwType="Column" sfwValue="44" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="45" sfwType="Column" sfwValue="45" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="46" sfwType="Column" sfwValue="46" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="47" sfwType="Column" sfwValue="47" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="48" sfwType="Column" sfwValue="48" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="49" sfwType="Column" sfwValue="49" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="50" sfwType="Column" sfwValue="50" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="51" sfwType="Column" sfwValue="51" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="52" sfwType="Column" sfwValue="52" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="53" sfwType="Column" sfwValue="53" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="54" sfwType="Column" sfwValue="54" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="55" sfwType="Column" sfwValue="55" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="56" sfwType="Column" sfwValue="56" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="57" sfwType="Column" sfwValue="57" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="58" sfwType="Column" sfwValue="58" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="59" sfwType="Column" sfwValue="59" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="60" sfwType="Column" sfwValue="60" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="61" sfwType="Column" sfwValue="61" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="62" sfwType="Column" sfwValue="62" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="63" sfwType="Column" sfwValue="63" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="64" sfwType="Column" sfwValue="64" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="65" sfwType="Column" sfwValue="65" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="66" sfwType="Column" sfwValue="66" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="67" sfwType="Column" sfwValue="67" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="68" sfwType="Column" sfwValue="68" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="69" sfwType="Column" sfwValue="69" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
    <attribute ID="70" sfwType="Column" sfwValue="70" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="Decimal" sfwRequired="False" />
  </attributes>
  <constraint />
  <rules />
  <initialload />
  <softerror />
  <harderror />
  <validatedelete />
  <delete />
  <groupslist />
  <checklist />
  <methods />
  <lifecycle />
  <objectmethods />
  <ExtraFields />
</entity>