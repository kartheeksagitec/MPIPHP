<entity ID="entPerson" sfwActive="True" sfwStatus="Review" sfwType="BusinessRule" sfwErrorTable="sgt_person_base_error" sfwParentKey="person_id" sfwParentKeyValue="icdoPerson.person_id" sfwMainCDO="icdoPerson" sfwStatusColumn="status_value" sfwObjectID="busPerson" sfwTableName="sgt_person" sfwView="True" sfwDataObjectID="doPerson">
  <rules>
    <rule ID="RULE_CHECK_DOB_CURRENTDATE" sfwMessageId="1131" sfwExpression="(this.icdoPerson.idtDateofBirth &gt; RFunc.CurrentDate())" sfwObjectBased="True" />
    <rule ID="RULE_CHECK_DOD_GREATER" sfwMessageId="1159" sfwExpression="!(this.icdoPerson.date_of_death == DateTime.MinValue) &amp;&amp; &#xA;(this.icdoPerson.idtDateofBirth &gt; this.icdoPerson.date_of_death)" sfwObjectBased="True" />
    <rule ID="RULE_CHECK_FIRST_NAME_IS_BLANK" sfwMessageId="1100" sfwExpression="(string.IsNullOrEmpty(this.icdoPerson.first_name))" sfwObjectBased="True" />
    <rule ID="Rule_Check_Home_Phone_Length" sfwMessageId="1158" sfwExpression="(RFunc.Length(this.icdoPerson.home_phone_no) != 10) &amp;&amp; &#xA;(RFunc.IsNumeric(this.icdoPerson.home_phone_no)) &amp;&amp; &#xA;!(string.IsNullOrEmpty(this.icdoPerson.home_phone_no))" sfwObjectBased="True" />
    <rule ID="RULE_CHECK_IF_SSN_IS_ALREADY_EXISTS" sfwMessageId="1110" sfwExpression="(this.IsSSNAlreadyExists() == True)" sfwObjectBased="True" />
    <rule ID="RULE_CHECK_LAST_NAME_IS_BLANK" sfwMessageId="1101" sfwExpression="(string.IsNullOrEmpty(this.icdoPerson.last_name))" sfwObjectBased="True" />
    <rule ID="RULE_CHECK_SSN_IS_BLANK" sfwMessageId="1109" sfwExpression="(string.IsNullOrEmpty(this.icdoPerson.ssn))" sfwObjectBased="True" />
    <rule ID="Rule_Check_Work_Phone_Length" sfwMessageId="1157" sfwExpression="(RFunc.Length(this.icdoPerson.work_phone_no) != 10) &amp;&amp; &#xA;(RFunc.IsNumeric(this.icdoPerson.work_phone_no)) &amp;&amp; &#xA;!(string.IsNullOrEmpty(this.icdoPerson.work_phone_no))" sfwObjectBased="True" />
    <rule ID="RULE_FAX_NO_LENGHT" sfwMessageId="1161" sfwExpression="(!string.IsNullOrEmpty(this.icdoPerson.fax_no)) &amp;&amp; &#xA;(RFunc.Length(this.icdoPerson.fax_no) != 10)" sfwObjectBased="True" />
    <rule ID="RULE_IS_SSN_LENGHT_NINE" sfwMessageId="1162" sfwExpression="!(string.IsNullOrEmpty(this.icdoPerson.ssn)) &amp;&amp; &#xA;!(RFunc.IsNumeric(this.icdoPerson.istrSSNNonEncrypted))" sfwObjectBased="True" />
    <rule ID="RULE_MOBILE_PHONE_NO_LENGHT" sfwMessageId="1160" sfwExpression="(RFunc.Length(this.icdoPerson.cell_phone_no) != 10) &amp;&amp; &#xA;(!string.IsNullOrEmpty(this.icdoPerson.cell_phone_no))" sfwObjectBased="True" />
    <rule ID="RULE_PERSON_NOT_VIP" sfwExpression="(this.icdoPerson.vip_flag == &quot;N&quot;)" sfwObjectBased="True" />
    <rule ID="Rule-Gender_Prefix_Mismatch" sfwMessageId="1172" sfwExpression="(this.CheckPrefixAgainstGender() == True)" sfwObjectBased="True" />
    <rule ID="Rule-ISEmailNull" sfwMessageId="5058" sfwExpression="(this.icdoPerson.communication_preference_value == &quot;EMAL&quot;) &amp;&amp; &#xA;(string.IsNullOrEmpty(this.icdoPerson.email_address_1))" sfwObjectBased="True" />
    <rule ID="Rule-IsValidEmail" sfwMessageId="1118" sfwExpression="!(string.IsNullOrEmpty(this.icdoPerson.email_address_1)) &amp;&amp; &#xA;(this.IsEmailValid() == False)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-GenerateAnnualStatementBtn" sfwExpression="(this.VisibilityOnGenerateAnnualBtn() == True)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-MPIPP" sfwExpression="(this.CheckIfPersonHasMPI() == True)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-PlanLocal161" sfwExpression="(this.CheckIfPersonHasLocal161() == True)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-PlanLocal52" sfwExpression="(this.CheckIfPersonHasLocal52() == True)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-PlanLocal600" sfwExpression="(this.CheckIfPersonHasLocal600() == True)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-PlanLocal666" sfwExpression="(this.CheckIfPersonHasLocal666() == True)" sfwObjectBased="True" />
    <rule ID="Visible-Rule-PlanLocal700" sfwExpression="(this.CheckIfPersonHasLocal700() == True)" sfwObjectBased="True" />
    <rule ID="Visisble-Rule-NoActiveAddress" sfwExpression="(this.iblnMssCheckForActiveAddress == False)" sfwObjectBased="True" />
    <rule ID="Rule-WarningIfChangingBirthdateByManagerIfBenefitAppApproved" sfwMessageId="6090" sfwExpression="(this.iblnIsManagerChangedBirthdateIfBenefitAppApproved == True)" sfwObjectBased="True" />
    <rule ID="Rule-WarningIfChangingBirthdateByManagerIfPayeeActApproved" sfwMessageId="6067" sfwExpression="(this.iblnManagerChangedBirthdateIfPayeeActApproved == True)" sfwObjectBased="True" />
    <rule ID="Enable-Rule-VIPManager" sfwRuleType="Validation" sfwExpression="(this.CheckIfVIPManagerLogin() == True) &amp;&amp; (this.iblnParticipant==&quot;Yes&quot;)" sfwObjectBased="True" />
    <rule ID="Read-Only-Rule-HealthEligible" sfwRuleType="Validation" sfwExpression="(this.icdoPerson.health_eligible_flag !=&quot;Y&quot;)" sfwObjectBased="True" />
    <rule ID="Read-Only-Rule-AnalystAssigned" sfwRuleType="Validation" sfwExpression="(!this.CheckIfManager() == True &amp;&amp; this.icdoPerson.analyst_id &gt; 0)" sfwObjectBased="True" />
    <rule ID="Read-Only-Rule-MDAge" sfwRuleType="Validation" sfwExpression="(!this.CheckIfManager() == True &amp;&amp; this.icdoPerson.md_age_opt_id &gt; 0)" sfwObjectBased="True" />
    <rule ID="Read-Only-Rule-AdverseInterest" sfwRuleType="Validation" sfwExpression="(this.CheckIfManager() == False &amp;&amp; this.icdoPerson.adverse_interest_flag ==&quot;Y&quot;)" sfwObjectBased="True" />
    <rule ID="IsSubmitButtonVisible" sfwRuleType="Validation" sfwObjectBased="True" sfwExpression="this.IsSubmitButtonVisible()==True" />
  </rules>
  <delete>
    <property ID="lstPersonBridgeHours" sfwMethodName="LoadPersonBridgedService" />
  </delete>
  <checklist />
  <initialload>
    <item ID="RULE_PERSON_NOT_VIP" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-PlanLocal161" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-PlanLocal52" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-PlanLocal600" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-PlanLocal666" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-PlanLocal700" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-MPIPP" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible-Rule-GenerateAnnualStatementBtn" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_CHECK_SSN_IS_BLANK" sfwMode="All" sfwStatus="Active" />
    <item ID="Visisble-Rule-NoActiveAddress" sfwMode="All" sfwStatus="Active" />
    <item ID="Enable-Rule-VIPManager" sfwStatus="Active" sfwMode="All" />
    <item ID="Read-Only-Rule-HealthEligible" sfwStatus="Active" sfwMode="All" />
    <item ID="Read-Only-Rule-AnalystAssigned" sfwStatus="Active" sfwMode="All" />
    <item ID="Read-Only-Rule-MDAge" sfwStatus="Active" sfwMode="All" />
    <item ID="Read-Only-Rule-AdverseInterest" sfwStatus="Active" sfwMode="All" />
    <item ID="IsSubmitButtonVisible" sfwMode="All" sfwStatus="Active" />
  </initialload>
  <softerror>
    <item ID="Rule-WarningIfChangingBirthdateByManagerIfBenefitAppApproved" sfwMode="All" sfwStatus="Active" />
    <item ID="Rule-WarningIfChangingBirthdateByManagerIfPayeeActApproved" sfwMode="All" sfwStatus="Active" />
  </softerror>
  <harderror>
    <item ID="RULE_CHECK_FIRST_NAME_IS_BLANK" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_CHECK_LAST_NAME_IS_BLANK" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_CHECK_IF_SSN_IS_ALREADY_EXISTS" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_CHECK_DOB_CURRENTDATE" sfwMode="All" sfwStatus="Active" />
    <item ID="Rule-ISEmailNull" sfwMode="All" sfwStatus="Active" />
    <item ID="Rule-IsValidEmail" sfwMode="All" sfwStatus="Active" />
    <item ID="Rule_Check_Home_Phone_Length" sfwMode="All" sfwStatus="Active" />
    <item ID="Rule_Check_Work_Phone_Length" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_MOBILE_PHONE_NO_LENGHT" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_FAX_NO_LENGHT" sfwMode="All" sfwStatus="Active" />
    <item ID="Rule-Gender_Prefix_Mismatch" sfwMode="All" sfwStatus="Active" />
    <item ID="RULE_IS_SSN_LENGHT_NINE" sfwMode="All" sfwStatus="Active" />
  </harderror>
  <validatedelete />
  <groupslist />
  <aliaslist />
  <updateablecdo />
  <commonproperties />
  <expressionfields />
  <constraint />
  <queries>
    <query ID="Lookup" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT istrRelativeVipFlag =&#xD;&#xA;(&#xD;&#xA;  SELECT CASE WHEN (COUNT(*) &gt; 0 OR SP.VIP_FLAG='Y') THEN 'Y' ELSE 'N' END FROM SGT_RELATIONSHIP SR&#xD;&#xA;  INNER JOIN SGT_PERSON SPP ON SPP.PERSON_ID = SR.PERSON_ID WHERE &#xD;&#xA;  (SR.BENEFICIARY_PERSON_ID = SP.PERSON_ID OR SR.DEPENDENT_PERSON_ID = SP.PERSON_ID)&#xD;&#xA;   AND SPP.VIP_FLAG = 'Y'&#xD;&#xA;),* &#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)">
      <parameters />
    </query>
    <query ID="GetPersonDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select (FIRST_NAME + ' ' + LAST_NAME)as fullname, * from SGT_PERSON WITH(NOLOCK) &#xD;&#xA; where MPI_PERSON_ID = @MPI_PERSON_ID">
      <parameters>
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetDependentName" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.MPI_PERSON_ID AS istrMpiPersonID,SP.FIRST_NAME,SP.LAST_NAME,SPD.*&#xD;&#xA;FROM SGT_RELATIONSHIP SPD WITH(NOLOCK) JOIN SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;ON SP.PERSON_ID=SPD.DEPENDENT_PERSON_ID  WHERE SPD.PERSON_ID=@PERSON_ID and SPD.DEPENDENT_PERSON_ID is NOT NULL&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetVIPforBeneficaryandDependent" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_PERSON WITH(NOLOCK) where PERSON_ID in (select DEPENDENT_PERSON_ID from SGT_RELATIONSHIP WITH(NOLOCK) where PERSON_ID=@PERSON_ID)&#xD;&#xA;Union&#xD;&#xA;select * from SGT_PERSON where PERSON_ID in (select BENEFICIARY_PERSON_ID from SGT_RELATIONSHIP WITH(NOLOCK) where PERSON_ID=@PERSON_ID)">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetSSNCount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_PERSON WITH(NOLOCK) WHERE SSN=@SSN">
      <parameters>
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadAllBeneficiaries" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select spb.PERSON_RELATIONSHIP_ID, sp.PERSON_ID,sp.FIRST_NAME + ' ' + sp.LAST_NAME istrBenFullName,sp.LAST_NAME istrBenLastName,sp.NAME_PREFIX_VALUE istrNamePrefixValue,&#xD;&#xA;sp.DATE_OF_DEATH idtBenDateOfDeath,spl.PLAN_NAME istrPlan,spb.RELATIONSHIP_VALUE ,spab.*,sp.MPI_PERSON_ID as istrBenMPID,spl.PLAN_ID iaintPlan&#xD;&#xA;from SGT_PERSON_ACCOUNT_BENEFICIARY spab WITH(NOLOCK) &#xD;&#xA;join SGT_PERSON_ACCOUNT spa WITH(NOLOCK)  on spa.PERSON_ACCOUNT_ID = spab.PERSON_ACCOUNT_ID&#xD;&#xA;join SGT_PLAN spl WITH(NOLOCK) on spa.PLAN_ID = spl.PLAN_ID&#xD;&#xA;right outer join SGT_RELATIONSHIP spb WITH(NOLOCK) on spab.PERSON_RELATIONSHIP_ID = spb.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_PERSON sp WITH(NOLOCK) on sp.PERSON_ID = spb.BENEFICIARY_PERSON_ID &#xD;&#xA;where spb.PERSON_ID = @PERSON_ID  and spb.BENEFICIARY_PERSON_ID is NOT NULL&#xD;&#xA;union&#xD;&#xA;select spb.PERSON_RELATIONSHIP_ID, spb.BENEFICIARY_ORG_ID ,so.ORG_NAME istrBenFullName,'' istrBenLastName,'' istrNamePrefixValue,'' idtBenDateOfDeath,&#xD;&#xA;spl.PLAN_NAME istrPlan,spb.RELATIONSHIP_VALUE ,spab.*,so.MPI_ORG_ID as istrBenMPID,spl.PLAN_ID iaintPlan&#xD;&#xA; from SGT_PERSON_ACCOUNT_BENEFICIARY spab &#xD;&#xA; join SGT_PERSON_ACCOUNT spa WITH(NOLOCK)  on spa.PERSON_ACCOUNT_ID = spab.PERSON_ACCOUNT_ID&#xD;&#xA;join SGT_PLAN spl WITH(NOLOCK) on spa.PLAN_ID = spl.PLAN_ID&#xD;&#xA;right outer join SGT_RELATIONSHIP spb WITH(NOLOCK) on spab.PERSON_RELATIONSHIP_ID = spb.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_ORGANIZATION so on so.ORG_ID = spb.BENEFICIARY_ORG_ID&#xD;&#xA;where spb.PERSON_ID = @PERSON_ID  and spb.BENEFICIARY_ORG_ID is NOT NULL&#xD;&#xA;order by PLAN_NAME, BENEFICIARY_TYPE_VALUE&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPersonIDFromSSN" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PERSON_ID FROM SGT_PERSON WITH(NOLOCK) WHERE SSN=@SSN">
      <parameters>
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="PersonVIPCheck" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select COUNT(*) from SGS_USER_ROLES as ur WITH(NOLOCK) &#xD;&#xA;inner join SGS_ROLES as r WITH(NOLOCK) on r.ROLE_ID=ur.ROLE_ID&#xD;&#xA;inner join SGS_USER as u WITH(NOLOCK) on u.USER_SERIAL_ID=ur.USER_SERIAL_ID&#xD;&#xA;where u.USER_ID=@USERID and r.ROLE_ID=63&#xD;&#xA;and (ur.effective_end_date is null or ur.effective_end_date &gt; getdate())">
      <parameters>
        <parameter ID="@USERID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadPersonAccounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT pae.VESTED_DATE as idtVestedDate,&#xD;&#xA;PA.PERSON_ACCOUNT_ID,PA.PERSON_ID,PA.PLAN_ID,PA.START_DATE,PA.STATUS_ID,PA.STATUS_VALUE,PA.CREATED_BY,PA.CREATED_DATE,PA.MODIFIED_BY,PA.MODIFIED_DATE,PA.UPDATE_SEQ,PA.SPECIAL_ACCOUNT,PA.UVHP,PA.EE_CONTR,&#xD;&#xA;PA.BENEFECIARY_PERSON_ID,PA.BENEFECIARY_OF_PERSON_ID,&#xD;&#xA;CASE WHEN PA.STATUS_VALUE='DCSD' THEN PA.END_DATE  &#xD;&#xA;     WHEN PA.STATUS_VALUE IN ('ACTV','INAC') THEN PA.END_DATE&#xD;&#xA;     WHEN PA.STATUS_VALUE IN ('RETR') THEN&#xD;&#xA;     ((SELECT TOP(1) BAA.RETIREMENT_DATE FROM SGT_BENEFIT_APPLICATION BAA &#xD;&#xA;       WHERE BAA.PERSON_ID = @PERSON_ID and BAA.APPLICATION_STATUS_VALUE='APPR'AND BAA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') ORDER BY BAA.RETIREMENT_DATE DESC)) &#xD;&#xA;     ELSE NULL  &#xD;&#xA;     END AS END_DATE,&#xD;&#xA;p.plan_code as istrPlanCode,p.merger_date as idtMergerDate,PA.recalculate_rule1_flag FROM SGT_PERSON_ACCOUNT as pa WITH(NOLOCK) &#xD;&#xA;INNER join SGT_PLAN AS P WITH(NOLOCK) on P.PLAN_ID=PA.PLAN_ID&#xD;&#xA;inner join SGT_PERSON Per on pa.PERSON_ID=Per.PERSON_ID&#xD;&#xA;left outer join SGT_PERSON_ACCOUNT_ELIGIBILITY pae on pae.PERSON_ACCOUNT_ID=pa.PERSON_ACCOUNT_ID &#xD;&#xA;left outer join SGT_BENEFIT_APPLICATION BA on BA.PERSON_ID = Per.PERSON_ID &#xD;&#xA;where pa.PERSON_ID=@PERSON_ID and P.PLAN_CODE &lt;&gt; 'LIFE'">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonDROApplication" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select scv.DESCRIPTION as istrDROModel,'' as istrMemeber_Mpid,'' as istrMemeber_Fullname,sp.MPI_PERSON_ID as istrAlternate_Payee_Mpid,sp.FIRST_NAME +' '+ sp.LAST_NAME as istrAlternate_Payee_Fullname, da.* from SGT_DRO_APPLICATION as da&#xD;&#xA;join SGT_PERSON as sp on sp.PERSON_ID = da.ALTERNATE_PAYEE_ID&#xD;&#xA;left join SGT_DRO_BENEFIT_DETAILS sdbd on sdbd.DRO_APPLICATION_ID = da.DRO_APPLICATION_ID&#xD;&#xA;left join SGS_CODE_VALUE scv on scv.CODE_VALUE = sdbd.DRO_MODEL_VALUE&#xD;&#xA;where da.PERSON_ID =@PERSON_ID&#xD;&#xA;union&#xD;&#xA;select scv.DESCRIPTION as istrDROModel,sp.MPI_PERSON_ID as istrMemeber_Mpid,sp.FIRST_NAME +' '+ sp.LAST_NAME as istrMemeber_Fullname,&#xD;&#xA;'' as istrAlternate_Payee_Mpid,'' as istrAlternate_Payee_Fullname, da.* from SGT_DRO_APPLICATION as da&#xD;&#xA;left join SGT_PERSON as sp on sp.PERSON_ID = da.PERSON_ID&#xD;&#xA;left join SGT_DRO_BENEFIT_DETAILS sdbd on sdbd.DRO_APPLICATION_ID = da.DRO_APPLICATION_ID&#xD;&#xA;left join SGS_CODE_VALUE scv on scv.CODE_VALUE = sdbd.DRO_MODEL_VALUE&#xD;&#xA;where da.ALTERNATE_PAYEE_ID =@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadDeathNotificationDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="CREATE TABLE #MyTempTable(istrBenDepId int,istrBenDepMpid Varchar(20),istrBenDepName Varchar(200),istrBenDepRelation Varchar(20))&#xD;&#xA;&#xD;&#xA;INSERT INTO #MyTempTable  &#xD;&#xA;select sp.PERSON_ID, sp.MPI_PERSON_ID ,sp.FIRST_NAME +' '+sp.LAST_NAME, RELATIONSHIP_VALUE from SGT_RELATIONSHIP rel&#xD;&#xA;join SGT_PERSON sp on sp.PERSON_ID = BENEFICIARY_PERSON_ID&#xD;&#xA;where rel.PERSON_ID = @PERSON_ID and BENEFICIARY_PERSON_ID &lt;&gt; ' '&#xD;&#xA;union&#xD;&#xA;select sp.PERSON_ID, sp.MPI_PERSON_ID ,sp.FIRST_NAME +' '+sp.LAST_NAME ,RELATIONSHIP_VALUE from SGT_RELATIONSHIP rel&#xD;&#xA;join SGT_PERSON sp on sp.PERSON_ID = DEPENDENT_PERSON_ID&#xD;&#xA;where rel.PERSON_ID = @PERSON_ID and BENEFICIARY_PERSON_ID &lt;&gt; ' '&#xD;&#xA;&#xD;&#xA;(select distinct #MyTempTable.istrBenDepId, #MyTempTable.istrBenDepMpid, #MyTempTable.istrBenDepName, CV.DESCRIPTION as istrBenDepRelation ,dn.* from SGT_DEATH_NOTIFICATION as dn &#xD;&#xA;join #MyTempTable on #MyTempTable.istrBenDepId = dn.PERSON_ID&#xD;&#xA;join SGS_CODE_VALUE CV on CV.CODE_VALUE = #MyTempTable.istrBenDepRelation&#xD;&#xA;where  dn.PERSON_ID in (#MyTempTable.istrBenDepId) &#xD;&#xA;union&#xD;&#xA;select dn.PERSON_ID as ID ,sp.MPI_PERSON_ID as MPID, sp.FIRST_NAME +' '+sp.LAST_NAME , 'Self' as istrBenDepRelation ,dn.* from SGT_DEATH_NOTIFICATION dn&#xD;&#xA;join SGT_PERSON sp on sp.PERSON_ID = dn.PERSON_ID&#xD;&#xA;where dn.PERSON_ID = @PERSON_ID ) order by dn.MODIFIED_DATE desc&#xD;&#xA;&#xD;&#xA;drop table #MyTempTable">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPersonMPID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT MPI_PERSON_ID FROM SGT_PERSON WHERE PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPersonIDFromMPID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PERSON_ID FROM SGT_PERSON WHERE MPI_PERSON_ID=@MPI_PERSON_ID">
      <parameters>
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadBeneficaryForOverview" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select spb.PERSON_RELATIONSHIP_ID, sp.PERSON_ID iaintBenID,sp.FIRST_NAME + ' ' + sp.LAST_NAME istrBenFullName,&#xD;&#xA;spl.PLAN_NAME istrPlan,spb.RELATIONSHIP_VALUE ,sp.DATE_OF_BIRTH istrDOB ,sp.DATE_OF_DEATH dtdateOfdeath,sp.MPI_PERSON_ID as istrBenMPID,&#xD;&#xA;spab.*&#xD;&#xA;from SGT_PERSON_ACCOUNT_BENEFICIARY spab WITH(NOLOCK) &#xD;&#xA;join SGT_PERSON_ACCOUNT spa WITH(NOLOCK)  on spa.PERSON_ACCOUNT_ID = spab.PERSON_ACCOUNT_ID&#xD;&#xA;join SGT_PLAN spl WITH(NOLOCK) on spa.PLAN_ID = spl.PLAN_ID&#xD;&#xA;right outer join SGT_RELATIONSHIP spb WITH(NOLOCK) on spab.PERSON_RELATIONSHIP_ID = spb.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_PERSON sp WITH(NOLOCK) on sp.PERSON_ID = spb.BENEFICIARY_PERSON_ID &#xD;&#xA;where spb.PERSON_ID = @PERSON_ID and spb.BENEFICIARY_PERSON_ID is NOT NULL &#xD;&#xA;union&#xD;&#xA;select spb.PERSON_RELATIONSHIP_ID, spb.BENEFICIARY_ORG_ID ,so.ORG_NAME istrBenFullName,&#xD;&#xA;spl.PLAN_NAME istrPlan,spb.RELATIONSHIP_VALUE ,null as istrDOB ,null as dtdateOfdeath,so.MPI_ORG_ID as istrBenMPID,&#xD;&#xA;spab.*&#xD;&#xA; from SGT_PERSON_ACCOUNT_BENEFICIARY spab join SGT_RELATIONSHIP spb &#xD;&#xA;on spab.PERSON_RELATIONSHIP_ID = spb.PERSON_RELATIONSHIP_ID &#xD;&#xA;join SGT_ORGANIZATION so on so.ORG_ID = spb.BENEFICIARY_ORG_ID&#xD;&#xA;join SGT_PERSON_ACCOUNT spa WITH(NOLOCK)  on spa.PERSON_ACCOUNT_ID = spab.PERSON_ACCOUNT_ID&#xD;&#xA;join SGT_PLAN spl WITH(NOLOCK) on spa.PLAN_ID = spl.PLAN_ID&#xD;&#xA;where spb.PERSON_ID = @PERSON_ID and spb.BENEFICIARY_ORG_ID is NOT NULL &#xD;&#xA;order by PLAN_NAME, BENEFICIARY_TYPE_VALUE ">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonBridgedService" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_PERSON_BRIDGE_HOURS WHERE PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadBridgingDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SPBHD.* FROM SGT_PERSON_BRIDGE_HOURS SPBH JOIN SGT_PERSON_BRIDGE_HOURS_DETAIL SPBHD &#xD;&#xA;ON SPBH.PERSON_BRIDGE_ID = SPBHD.PERSON_BRIDGE_ID WHERE SPBH.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckPersonIsBeneficiary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) from SGT_PERSON SP LEFT OUTER JOIN SGT_RELATIONSHIP SR ON SP.PERSON_ID=SR.BENEFICIARY_PERSON_ID&#xD;&#xA;WHERE SP.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="ChechPersonIsDependent" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) from SGT_PERSON SP LEFT OUTER JOIN SGT_RELATIONSHIP SR ON SP.PERSON_ID=SR.DEPENDENT_PERSON_ID&#xD;&#xA;WHERE SP.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAllActiveParticipantsMPIPP" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SP.*&#xD;&#xA;,&#xD;&#xA;CASE WHEN ADDR.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END AS IS_VALID_ADDRESS_PRESENT&#xD;&#xA;,&#xD;&#xA;CASE WHEN&#xD;&#xA;(SELECT COUNT(*) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY E &#xD;&#xA;WHERE  E.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2 AND SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;AND E.VESTED_DATE IS NOT NULL) &gt; 0    &#xD;&#xA;THEN 'Y' ELSE 'N' END AS IS_VESTED_IN_MPI&#xD;&#xA;FROM SGT_PERSON SP &#xD;&#xA;--INNER JOIN MPID2 TEMP ON TEMP.MPI_PERSON_ID = SP.MPI_PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;LEFT JOIN SGT_PERSON_ADDRESS ADDR ON ADDR.PERSON_ID = SP.PERSON_ID &#xD;&#xA;AND ADDR.ADDRESS_ID = (SELECT TOP(1)Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (Q.END_DATE IS NULL OR Q.END_DATE &gt; GETDATE()))&#xD;&#xA;WHERE (SPA.PLAN_ID IN (2))&#xD;&#xA;AND (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '')&#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SPA.PERSON_ID IS NOT NULL&#xD;&#xA;AND SPA.STATUS_VALUE in ('ACTV','INAC') &#xD;&#xA;and sp.PERSON_ID not in (select PERSON_ID from SGT_BENEFIT_APPLICATION where BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') and APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;--and DATE_OF_BIRTH &lt;&gt; '01/01/1753' and DATE_OF_BIRTH is not null //PIR 1030&#xD;&#xA;and (DATE_OF_DEATH is null OR (DATE_OF_DEATH is NOT null AND YEAR(DATE_OF_DEATH)=YEAR(GETDATE())-1))">
      <parameters />
    </query>
    <query ID="GetParticipantsForHealthEligibilityCheck" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select distinct p.*, &#xD;&#xA;CASE WHEN not exists (SELECT * FROM SGT_PERSON_ACCOUNT pac WHERE&#xD;&#xA;pac.PERSON_ID=p.PERSON_ID and pac.PLAN_ID=2) &#xD;&#xA;THEN 'N' ELSE 'Y' END AS istrIsMPIPPPersonAccount, &#xD;&#xA;CASE WHEN not exists (SELECT * FROM SGT_PERSON_ACCOUNT pac1 WHERE&#xD;&#xA;pac1.PERSON_ID=p.PERSON_ID and pac1.PLAN_ID=1) &#xD;&#xA;THEN 'N' ELSE 'Y' END AS istrIsIAPPersonAccount &#xD;&#xA;FROM SGT_PERSON p &#xD;&#xA;inner join SGT_PERSON_ACCOUNT pa on p.PERSON_ID=pa.PERSON_ID &#xD;&#xA;WHERE (p.SSN is not null or p.SSN &lt;&gt; '') and p.PERSON_ID not in (select&#xD;&#xA;PERSON_ID from SGT_PERSON_ACCOUNT pa where pa.PLAN_ID=2 &#xD;&#xA;intersect select PERSON_ID from SGT_PERSON_ACCOUNT pa where pa.PLAN_ID=1 &#xD;&#xA;intersect select PERSON_ID from SGT_PERSON p where&#xD;&#xA;p.HEALTH_ELIGIBLE_FLAG='Y') AND p.PERSON_ID&lt;60&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetAllActiveParticipantsPensionEligibile" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT distinct SP.*,SPL.PLAN_CODE AS istrPlanCode FROM SGT_PERSON SP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;WHERE SPA.STATUS_VALUE='ACTV' AND SPL.PLAN_CODE='MPIPP' &#xD;&#xA;AND (SP.pension_eligible_notification_flag!='Y' or SP.pension_eligible_notification_flag IS NULL&#xD;&#xA;or SP.SUSPENSION_OF_BENEFITS_NOTIFICATION_FLAG !='Y' or SP.SUSPENSION_OF_BENEFITS_NOTIFICATION_FLAG is null)&#xD;&#xA;and (SP.SSN is not null or SP.SSN &lt;&gt; '')&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetApprovedDisabilityAppl" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select COUNT(*) from SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND X.PLAN_ID &lt;&gt; 1&#xD;&#xA;where BENEFIT_TYPE_VALUE='DSBL' and APPLICATION_STATUS_VALUE='APPR' and PERSON_ID=@PERSON_ID&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonAccountForMPIPP" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT pa.*,p.plan_code as istrPlanCode FROM SGT_PERSON_ACCOUNT as pa WITH(NOLOCK) &#xD;&#xA;join SGT_PLAN AS P WITH(NOLOCK) on P.PLAN_ID=PA.PLAN_ID&#xD;&#xA;where pa.PERSON_ID=@person_id and P.PLAN_CODE = 'MPIPP' ">
      <parameters>
        <parameter ID="@person_id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonDetailsforMinimumDistribution" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;CASE WHEN PA.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END VALIDADDRESSFLAG, &#xD;&#xA;SPA.PLAN_ID AS IINTPLANID,SPL.PLAN_CODE AS ISTRPLANCODE,  SPA.PERSON_ACCOUNT_ID, DATE_OF_BIRTH AS DOB &#xD;&#xA;, DATEADD(MONTH,6, DATEADD(YEAR,70,DATE_OF_BIRTH)) AS IDTDATEPERSONAGE70ANDHALF, SPAE.VESTED_DATE&#xD;&#xA;, ISNULL(SP.MD_AGE_OPT_ID,1) MD_OPT_ID&#xD;&#xA;, ISNULL(MD.MD_AGE,70.5) AS MD_OPT_AGE&#xD;&#xA;, CASE WHEN MD.MD_AGE IS NULL THEN DATEADD(MONTH,6, DATEADD(YEAR,70,DATE_OF_BIRTH)) &#xD;&#xA;ELSE DATEADD(MONTH,( (MD.MD_AGE-FLOOR(MD.MD_AGE)) * 12), DATEADD(YEAR,FLOOR(MD.MD_AGE),DATE_OF_BIRTH)) END AS MD_AGE_DATE&#xD;&#xA;, CONVERT(CHAR(12),CASE WHEN SPAE.VESTED_DATE &gt; (CASE WHEN MD.MD_AGE IS NULL THEN DATEADD(MONTH,6, DATEADD(YEAR,70,DATE_OF_BIRTH)) &#xD;&#xA;                                                ELSE DATEADD(MONTH,( (MD.MD_AGE-FLOOR(MD.MD_AGE)) * 12), DATEADD(YEAR,FLOOR(MD.MD_AGE),DATE_OF_BIRTH)) END) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--AND YEAR(SPAE.VESTED_DATE) &gt; YEAR(DATEADD(MONTH,6,dateadd(YEAR, 70, SP.DATE_OF_BIRTH)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, SPAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, (CASE WHEN MD.MD_AGE IS NULL THEN DATEADD(MONTH,6, DATEADD(YEAR,70,DATE_OF_BIRTH)) &#xD;&#xA;                                                ELSE DATEADD(MONTH,( (MD.MD_AGE-FLOOR(MD.MD_AGE)) * 12), DATEADD(YEAR,FLOOR(MD.MD_AGE),DATE_OF_BIRTH)) END) )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END,101) AS MD_DATE&#xD;&#xA;, DATEADD(YEAR,73,DATE_OF_BIRTH) AS AGE73_DATE   --WI 23550 Ticket 143336 changed AGE72_DATE to AGE73_DATE&#xD;&#xA;, CONVERT(CHAR(12),CASE WHEN SPAE.VESTED_DATE &gt; DATEADD(YEAR,73,DATE_OF_BIRTH)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, SPAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, DATEADD(YEAR,73,DATE_OF_BIRTH))+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END,101) AS RMD73_DATE   --WI 23550 Ticket 143336 added RMD73_DATE&#xD;&#xA;, CONVERT(CHAR(12),CASE WHEN SPAE.VESTED_DATE &gt; DATEADD(YEAR,72,DATE_OF_BIRTH)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;THEN CONVERT(DATETIME,( '01/01/'+CAST(DATEPART(YEAR, SPAE.VESTED_DATE )+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE CONVERT(DATETIME,( '04/01/'+CAST(DATEPART(YEAR, DATEADD(YEAR,72,DATE_OF_BIRTH))+1 AS CHAR(4)) ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END,101) AS RMD72_DATE&#xD;&#xA;, *&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE ON SPA.PERSON_ACCOUNT_ID = SPAE.PERSON_ACCOUNT_ID&#xD;&#xA;JOIN SGT_PLAN SPL ON SPL.PLAN_ID = SPA.PLAN_ID&#xD;&#xA;LEFT OUTER JOIN SGT_MD_OPTION_AGE MD ON SP.MD_AGE_OPT_ID = MD.MD_Option_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA ON PA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;AND PA.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q &#xD;&#xA;      INNER JOIN SGT_PERSON_ADDRESS_CHKLIST T ON Q.ADDRESS_ID = T.ADDRESS_ID&#xD;&#xA;      WHERE Q.PERSON_ID = SP.PERSON_ID AND T.ADDRESS_TYPE_VALUE = 'MAIL' &#xD;&#xA;      AND (Q.END_DATE IS NULL OR Q.END_DATE &gt; GETDATE())&#xD;&#xA;      ORDER BY Q. MODIFIED_DATE DESC)&#xD;&#xA;WHERE --(SELECT (YEAR(BATCH_DATE)-1) FROM SGS_SYSTEM_MANAGEMENT WITH(NOLOCK)) &#xD;&#xA;    (CASE WHEN MONTH(GETDATE()) &lt; 3 THEN YEAR(GETDATE())-1 ELSE YEAR(GETDATE()) END)&#xD;&#xA;    &gt;= YEAR( (CASE WHEN MD.MD_AGE IS NULL THEN DATEADD(MONTH,6, DATEADD(YEAR,70,DATE_OF_BIRTH)) &#xD;&#xA;                    ELSE DATEADD(MONTH,( (MD.MD_AGE-FLOOR(MD.MD_AGE)) * 12), DATEADD(YEAR,FLOOR(MD.MD_AGE),DATE_OF_BIRTH)) END) )&#xD;&#xA;AND SPA.PLAN_ID IN (2, 3, 4, 6, 7, 8) AND SPA.STATUS_VALUE IN ('ACTV','INAC') &#xD;&#xA;AND (SPAE.VESTED_DATE IS NOT NULL OR ISNULL(SPAE.VESTED_DATE,'1/1/1900') &gt; ISNULL(SPAE.FORFEITURE_DATE,'1/1/1900'))&#xD;&#xA;AND SP.PERSON_ID NOT IN (SELECT PERSON_ID FROM SGT_BENEFIT_APPLICATION A&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL B ON A.BENEFIT_APPLICATION_ID = B.BENEFIT_APPLICATION_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR C ON B.PLAN_BENEFIT_ID = C.PLAN_BENEFIT_ID AND C.PLAN_ID = SPL.PLAN_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE A.BENEFIT_TYPE_VALUE = 'RTMT' AND A.APPLICATION_STATUS_VALUE &lt;&gt; 'CANC')&#xD;&#xA;AND DATE_OF_BIRTH &lt;&gt; '01/01/1753' AND DATE_OF_BIRTH IS NOT NULL AND DATE_OF_DEATH IS NULL&#xD;&#xA;AND DATE_OF_BIRTH &gt;= '07/01/1917'--PIR 854&#xD;&#xA;ORDER BY SP.LAST_NAME,SP.FIRST_NAME,SP.MPI_PERSON_ID,SPA.PLAN_ID">
      <parameters />
    </query>
    <query ID="GetMPIDFromSSN" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT MPI_PERSON_ID FROM SGT_PERSON WHERE SSN=@SSN">
      <parameters>
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadPreviousYearContributions" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.MPI_PERSON_ID,&#xA;    max(YEAR(SPARC.CREATED_DATE)) AS RECEIVED_YEAR ,  &#xA;    max( COMPUTATIONAL_YEAR) AS COMPUTATIONAL_YEAR ,&#xA;    CONTRIBUTION_TYPE_VALUE, &#xA;    CASE WHEN SPARC.CONTRIBUTION_TYPE_VALUE = 'UVHP' THEN 'VEST' ELSE CONTRIBUTION_SUBTYPE_VALUE END AS CONTRIBUTION_SUBTYPE_VALUE, &#xA;    sum(ISNULL(EE_INT_AMOUNT,0)) AS EE_INT_AMOUNT ,&#xA;    SUM(ISNULL(UVHP_INT_AMOUNT,0)) AS UVHP_INT_AMOUNT, &#xA;    SPA.PERSON_ACCOUNT_ID ,&#xA;    SUM(ISNULL(EE_CONTRIBUTION_AMOUNT,0)) AS EE_CONTRIBUTION_AMOUNT ,&#xA;    SUM(ISNULL(UVHP_AMOUNT,0)) AS UVHP_AMOUNT,&#xA;    max(sba.retirement_date) as retirement_date,&#xA;    SBA.BENEFIT_TYPE_VALUE&#xA;FROM SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) &#xA;INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WITH(NOLOCK) ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA with(nolock) ON SPA.PERSON_ID = SBA.PERSON_ID AND &#xA;    (SBA.BENEFIT_TYPE_VALUE = 'DDPR' or SBA.BENEFIT_TYPE_VALUE IS NULL) and SBA.APPLICATION_STATUS_VALUE = 'APPR' &#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PA ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = PA.BENEFIT_APPLICATION_DETAIL_ID&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR X ON PA.PLAN_BENEFIT_ID = X.PLAN_BENEFIT_ID AND X.PLAN_ID =2&#xA;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xA;WHERE &#xA;    SPA.STATUS_VALUE in ('ACTV', 'DCSD','INAC') AND &#xA;     SPARC.CONTRIBUTION_TYPE_VALUE in ('EE','UVHP') AND &#xA;     SPARC.CONTRIBUTION_SUBTYPE_VALUE in ('VEST','NVES') AND &#xA;     SPA.PERSON_ID NOT IN (SELECT SBAR.PERSON_ID FROM SGT_BENEFIT_APPLICATION SBAR WHERE SBAR.PERSON_ID = SPA.PERSON_ID AND SBAR.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL')&#xA;    AND SBAR.APPLICATION_STATUS_VALUE = 'APPR')&#xA;    AND PHH.PAYMENT_HISTORY_HEADER_ID IS NULL&#xA;GROUP BY CONTRIBUTION_TYPE_VALUE, CASE WHEN SPARC.CONTRIBUTION_TYPE_VALUE = 'UVHP' THEN 'VEST' ELSE CONTRIBUTION_SUBTYPE_VALUE END, SBA.BENEFIT_TYPE_VALUE, SP.MPI_PERSON_ID, SPA.PERSON_ACCOUNT_ID &#xA;HAVING sum(ISNULL(EE_INT_AMOUNT,0)) &gt; 0 or SUM(ISNULL(UVHP_INT_AMOUNT,0)) &gt; 0 or SUM(ISNULL(EE_CONTRIBUTION_AMOUNT,0)) &gt; 0 or SUM(ISNULL(UVHP_AMOUNT,0)) &gt; 0&#xA;">
      <parameters />
    </query>
    <query ID="LoadDeathOutboundFile" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT DISTINCT &#xD;&#xA;SP.PERSON_ID&#xD;&#xA;,SP.MPI_PERSON_ID&#xD;&#xA;,SP.FIRST_NAME&#xD;&#xA;,SP.LAST_NAME&#xD;&#xA;,SP.MIDDLE_NAME&#xD;&#xA;,SP.NAME_SUFFIX&#xD;&#xA;,SP.GENDER_VALUE&#xD;&#xA;--PIR 1078&#xD;&#xA;,CASE WHEN MARITAL_STATUS_VALUE = 'O' THEN 'P' &#xD;&#xA;&#x9;  WHEN MARITAL_STATUS_VALUE IN ('C','U') THEN 'N'&#xD;&#xA;&#x9;  ELSE MARITAL_STATUS_VALUE END MARITAL_STATUS_VALUE&#xD;&#xA;,SP.HOME_PHONE_NO&#xD;&#xA;,sp.CELL_PHONE_NO&#x9;&#xD;&#xA;,SP.EMAIL_ADDRESS_1  &#xD;&#xA;,SP.SSN&#xD;&#xA;,SP.DATE_OF_BIRTH&#xD;&#xA;, 'PARTICIPANT' AS istrPersonType&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;LEFT OUTER JOIN (SELECT PERSON_ACCOUNT_ID,&#xD;&#xA;      SUM(ISNULL(EE_CONTRIBUTION_AMOUNT,0)) AS EC_AMT,&#xD;&#xA;      SUM(ISNULL(UVHP_AMOUNT,0)) AS UVHP_AMT  &#xD;&#xA;                 FROM      &#xD;&#xA;     SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION WITH(NOLOCK)&#xD;&#xA;     GROUP BY PERSON_ACCOUNT_ID&#xD;&#xA;    ) SPARC ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE WITH(NOLOCK) ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE &#xD;&#xA;(SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '') &#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SP.PERSON_ID IS NOT NULL &#xD;&#xA;AND SP.DATE_OF_DEATH IS NULL &#xD;&#xA;AND (&#xD;&#xA;  (SPA.STATUS_VALUE in ('ACTV')AND PAE.VESTED_DATE IS NOT NULL) -- ACTIVE &#xD;&#xA;  OR &#xD;&#xA;  (SPA.STATUS_VALUE in ('INAC') AND PAE.VESTED_DATE IS NOT NULL) -- VESTED ACTIVE&#xD;&#xA;  OR&#xD;&#xA;  (SPA.STATUS_VALUE = 'INAC' AND PAE.VESTED_DATE IS NULL AND (SPARC.EC_AMT &gt; 0 OR SPARC.UVHP_AMT &gt; 0 ))&#xD;&#xA;  OR &#xD;&#xA;  (SPA.STATUS_VALUE = 'INAC' AND PAE.VESTED_DATE IS NOT NULL AND PAE.FORFEITURE_DATE IS NOT NULL AND PAE.FORFEITURE_DATE &lt; PAE.VESTED_DATE) -- VESTED INACTIVE BUT NOT FORFEITED&#xD;&#xA; )&#xD;&#xA;UNION -- Dependent's logic provided by HE Team (Raj Menta)&#xD;&#xA;SELECT DISTINCT &#xD;&#xA;SP.PERSON_ID&#xD;&#xA;,SP.MPI_PERSON_ID&#xD;&#xA;,SP.FIRST_NAME&#xD;&#xA;,SP.LAST_NAME&#xD;&#xA;,SP.MIDDLE_NAME&#xD;&#xA;,SP.NAME_SUFFIX&#xD;&#xA;,SP.GENDER_VALUE&#xD;&#xA;--PIR 1078&#xD;&#xA;,CASE WHEN MARITAL_STATUS_VALUE = 'O' THEN 'P' &#xD;&#xA;&#x9;  WHEN MARITAL_STATUS_VALUE IN ('C','U') THEN 'N'&#xD;&#xA;&#x9;  ELSE MARITAL_STATUS_VALUE END MARITAL_STATUS_VALUE&#xD;&#xA;,SP.HOME_PHONE_NO&#xD;&#xA;,sp.CELL_PHONE_NO&#x9;&#xD;&#xA;,SP.EMAIL_ADDRESS_1  &#xD;&#xA;,SP.SSN&#xD;&#xA;,SP.DATE_OF_BIRTH&#xD;&#xA;, 'DEPENDANT' AS istrPersonType&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_RELATIONSHIP R ON R.DEPENDENT_PERSON_ID = SP.PERSON_ID AND R.BENEFICIARY_PERSON_ID IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;WHERE &#xD;&#xA;SPA.PERSON_ID IS NULL AND (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '') AND SP.PERSON_ID IS NOT NULL AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SPAS.STATUS_VALUE NOT IN ('CNCL','CMPL') AND SPA.PERSON_ID = SP.PERSON_ID)&#xD;&#xA;--SELECT &#xD;&#xA;--&#x9;SP.PERSON_ID&#xD;&#xA;--&#x9;,SP.MPI_PERSON_ID&#xD;&#xA;--&#x9;,SP.FIRST_NAME&#xD;&#xA;--&#x9;,SP.LAST_NAME&#xD;&#xA;--&#x9;,SP.MIDDLE_NAME&#xD;&#xA;--&#x9;,SP.NAME_SUFFIX&#xD;&#xA;--&#x9;,SP.GENDER_VALUE&#xD;&#xA;--&#x9;--PIR 1078&#xD;&#xA;--&#x9;,CASE WHEN MARITAL_STATUS_VALUE = 'O' THEN 'P' &#xD;&#xA;--&#x9;  WHEN MARITAL_STATUS_VALUE IN ('C','U') THEN 'N'&#xD;&#xA;--&#x9;  ELSE MARITAL_STATUS_VALUE END MARITAL_STATUS_VALUE&#xD;&#xA;--&#x9;,SP.HOME_PHONE_NO&#xD;&#xA;--&#x9;,sp.CELL_PHONE_NO&#x9;&#xD;&#xA;--&#x9;,SP.EMAIL_ADDRESS_1  &#xD;&#xA;--&#x9;,SP.SSN&#xD;&#xA;--&#x9;,SP.DATE_OF_BIRTH&#xD;&#xA;--  ,'DEPENDENT' AS istrPersonType    &#xD;&#xA;--FROM  &#xD;&#xA;--(&#xD;&#xA;--   --SELECT DISTINCT &#xD;&#xA;--   -- P.MPI_PERSON_ID,&#xD;&#xA;--   -- P.SSN AS SSN,&#xD;&#xA;--   -- P.FIRST_NAME,&#xD;&#xA;--   -- P.LAST_NAME,&#xD;&#xA;--   -- P.DATE_OF_BIRTH    &#xD;&#xA;--   --FROM&#xD;&#xA;--   --(&#xD;&#xA;--   --select &#xD;&#xA;--   -- p.SSN--, r.PID, ltrim(rtrim(p.FirstName))as firstname, ltrim(rtrim(p.LastName)) as lastname, p.DateOfBirth&#xD;&#xA;--   -- from Hedb.dbo.Eligibility_Premium e (nolock)&#xD;&#xA;--   -- inner join Hedb.dbo.Eligibility_PID_Reference r (nolock) on e.SSN = r.SSN&#xD;&#xA;--   -- inner join Hedb.dbo.Person p (nolock) on e.SSN = p.SSN&#xD;&#xA;--   -- where GETDATE() between e.EligEffective and e.EligCancellation &#xD;&#xA;--   --   and e.StatusCode not in ('SV', 'DP', 'NI', 'CI', 'PT')&#xD;&#xA;--   --   and len(e.SSN) = 9&#xD;&#xA;--   --   and p.DateOfDeath is null&#xD;&#xA;--   --union&#xD;&#xA;            &#xD;&#xA;--   -- select &#xD;&#xA;--   --   distinct p.SSN--, r.PID, ltrim(rtrim(p.FirstName)) as firstname, ltrim(rtrim(p.LastName)) as lastname, p.DateOfBirth&#xD;&#xA;--   --   from Hedb.dbo.DependentEligibility_Premium e (nolock)&#xD;&#xA;--   --   inner join Hedb.dbo.Eligibility_PID_Reference r (nolock) on e.DepSSN = r.SSN&#xD;&#xA;--   --   inner join Hedb.dbo.Person p (nolock) on e.DepSSN = p.SSN&#xD;&#xA;--   --   where GETDATE() between e.EligEffective and e.EligCancellation &#xD;&#xA;--   --    and e.StatusCode in ('ED', 'IDP')&#xD;&#xA;--   --    and len(e.DepSSN) = 9&#xD;&#xA;--   --    and p.DateOfDeath is null&#xD;&#xA;--   --)DEPENDENT_GROUP&#xD;&#xA;--   --INNER JOIN SGT_PERSON P ON DEPENDENT_GROUP.SSN = P.SSN&#xD;&#xA;--   --WHERE DEPENDENT_GROUP.SSN NOT IN&#xD;&#xA;--   --(&#xD;&#xA;--   --  SELECT DISTINCT &#xD;&#xA;--   --  SP.SSN&#xD;&#xA;--   --  FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;--   --  INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;--   --  INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;--   --  LEFT OUTER JOIN (SELECT PERSON_ACCOUNT_ID,&#xD;&#xA;--   --        SUM(ISNULL(EE_CONTRIBUTION_AMOUNT,0)) AS EC_AMT,&#xD;&#xA;--   --        SUM(ISNULL(UVHP_AMOUNT,0)) AS UVHP_AMT  &#xD;&#xA;--   --       FROM      &#xD;&#xA;--   --       SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION WITH(NOLOCK)&#xD;&#xA;--   --       GROUP BY PERSON_ACCOUNT_ID&#xD;&#xA;--   --      ) SPARC ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID&#xD;&#xA;--   --  LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE WITH(NOLOCK) ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;--   --  WHERE &#xD;&#xA;--   --  (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '') &#xD;&#xA;--   --  AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;--   --  AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;--   --  AND SP.PERSON_ID IS NOT NULL &#xD;&#xA;--   --  AND SP.DATE_OF_DEATH IS NULL &#xD;&#xA;--   --  AND (&#xD;&#xA;--   --    (SPA.STATUS_VALUE in ('ACTV')AND PAE.VESTED_DATE IS NOT NULL) -- ACTIVE &#xD;&#xA;--   --    OR &#xD;&#xA;--   --    (SPA.STATUS_VALUE in ('INAC') AND PAE.VESTED_DATE IS NOT NULL) -- VESTED ACTIVE&#xD;&#xA;--   --    OR&#xD;&#xA;--   --    (SPA.STATUS_VALUE = 'INAC' AND PAE.VESTED_DATE IS NULL AND (SPARC.EC_AMT &gt; 0 OR SPARC.UVHP_AMT &gt; 0 ))&#xD;&#xA;--   --    OR &#xD;&#xA;--   --    (SPA.STATUS_VALUE = 'INAC' AND PAE.VESTED_DATE IS NOT NULL AND PAE.FORFEITURE_DATE IS NOT NULL AND PAE.FORFEITURE_DATE &lt; PAE.VESTED_DATE) -- VESTED INACTIVE BUT NOT FORFEITED&#xD;&#xA;--   --   )&#xD;&#xA;--   -- )&#xD;&#xA;--)DEPENDENTS &#xD;&#xA;--INNER JOIN SGT_PERSON SP ON SP.SSN = DEPENDENTS.SSN&#xD;&#xA;--PIR 1078&#xD;&#xA;UNION&#xD;&#xA;SELECT DISTINCT &#xD;&#xA;SP.PERSON_ID&#xD;&#xA;,SP.MPI_PERSON_ID&#xD;&#xA;,SP.FIRST_NAME&#xD;&#xA;,SP.LAST_NAME&#xD;&#xA;,SP.MIDDLE_NAME&#xD;&#xA;,SP.NAME_SUFFIX&#xD;&#xA;,SP.GENDER_VALUE&#xD;&#xA;--PIR 1078&#xD;&#xA;,CASE WHEN MARITAL_STATUS_VALUE = 'O' THEN 'P' &#xD;&#xA;&#x9;  WHEN MARITAL_STATUS_VALUE IN ('C','U') THEN 'N'&#xD;&#xA;&#x9;  ELSE MARITAL_STATUS_VALUE END MARITAL_STATUS_VALUE&#xD;&#xA;,SP.HOME_PHONE_NO&#xD;&#xA;,sp.CELL_PHONE_NO&#x9;&#xD;&#xA;,SP.EMAIL_ADDRESS_1  &#xD;&#xA;,SP.SSN&#xD;&#xA;,SP.DATE_OF_BIRTH&#xD;&#xA;, 'BENEFICIARY' AS istrPersonType&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_RELATIONSHIP R ON R.BENEFICIARY_PERSON_ID = SP.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;WHERE &#xD;&#xA;SPA.PERSON_ID IS NULL AND (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '') AND SP.PERSON_ID IS NOT NULL AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SPAS.STATUS_VALUE NOT IN ('CNCL','CMPL') AND SPA.PERSON_ID = SP.PERSON_ID)">
      <parameters />
    </query>
    <query ID="GetBeneficiaryDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF((Select COUNT(*) from SGT_RELATIONSHIP WITH(NOLOCK) where SGT_RELATIONSHIP.PERSON_ID = @PERSON_ID and SGT_RELATIONSHIP.BENEFICIARY_PERSON_ID = (select PERSON_ID from SGT_PERSON WITH(NOLOCK) where MPI_PERSON_ID = @MPI_PERSON_ID))&gt;0)&#xD;&#xA; (&#xD;&#xA; select SGT_PERSON.FIRST_NAME ,SGT_PERSON.LAST_NAME ,SGT_PERSON.PERSON_ID,RELATIONSHIP_VALUE,Date_of_birth,date_of_marriage idtDateOfMarriage from SGT_PERSON WITH(NOLOCK) &#xD;&#xA; left join SGT_RELATIONSHIP WITH(NOLOCK)  on SGT_PERSON.PERSON_ID = SGT_RELATIONSHIP.BENEFICIARY_PERSON_ID&#xD;&#xA; where SGT_RELATIONSHIP.BENEFICIARY_PERSON_ID =(select PERSON_ID from SGT_PERSON WITH(NOLOCK) where MPI_PERSON_ID =@MPI_PERSON_ID) and SGT_RELATIONSHIP.PERSON_ID = @PERSON_ID&#xD;&#xA; )&#xD;&#xA; else&#xD;&#xA; (&#xD;&#xA;  select SGT_PERSON.FIRST_NAME , SGT_PERSON.LAST_NAME ,PERSON_ID,Date_of_birth , '' AS RELATIONSHIP_VALUE from SGT_PERSON WITH(NOLOCK) where MPI_PERSON_ID = @MPI_PERSON_ID&#xD;&#xA; )">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetUVHPAmounByPersonID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--GetUVHPAmounByPersonID&#xD;&#xA;;WITH UVHP_CONT_CTE (PERSON_ID, PERSON_ACCOUNT_ID, EFFECTIVE_DATE, UVHP_AMOUNT) &#xD;&#xA;AS (SELECT SPA.PERSON_ID, SPARC.PERSON_ACCOUNT_ID, SPARC.EFFECTIVE_DATE, SUM(SPARC.UVHP_AMOUNT) AS UVHP_AMOUNT&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID =SPARC.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE SPA.PLAN_ID =2  AND (sparc.TRANSACTION_TYPE_VALUE &lt;&gt; 'PMNT' OR sparc.TRANSACTION_TYPE_VALUE is null)&#xD;&#xA;AND sparc.UVHP_AMOUNT &lt;&gt; 0&#xD;&#xA;GROUP BY SPA.PERSON_ID, SPARC.PERSON_ACCOUNT_ID, SPARC.EFFECTIVE_DATE&#xD;&#xA;HAVING SUM(SPARC.UVHP_AMOUNT) &lt;&gt; 0)&#xD;&#xA;SELECT SPARC.*,SPA.PERSON_ACCOUNT_ID,SPA.END_DATE&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SPA.PERSON_ACCOUNT_ID =SPARC.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN UVHP_CONT_CTE UC ON SPARC.PERSON_ACCOUNT_ID = UC.PERSON_ACCOUNT_ID AND SPA.PERSON_ID = UC.PERSON_ID AND SPARC.EFFECTIVE_DATE = UC.EFFECTIVE_DATE&#xD;&#xA;WHERE SPA.PERSON_ID = @PERSON_ID AND SPA.PLAN_ID = 2 AND (sparc.TRANSACTION_TYPE_VALUE &lt;&gt; 'PMNT' OR sparc.TRANSACTION_TYPE_VALUE is null)&#xD;&#xA;AND sparc.UVHP_AMOUNT &lt;&gt; 0 &#xD;&#xA;ORDER by SPARC.COMPUTATIONAL_YEAR">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBeneficiaryDOD" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select DATE_OF_DEATH from SGT_PERSON&#xD;&#xA;where PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonAccountsForSurvivor" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT pa.*,p.plan_code as istrPlanCode,p.merger_date as idtMergerDate FROM SGT_PERSON_ACCOUNT as pa WITH(NOLOCK) &#xD;&#xA;join SGT_PLAN AS P WITH(NOLOCK) on P.PLAN_ID=PA.PLAN_ID&#xD;&#xA;where pa.BENEFECIARY_PERSON_ID=@BENEFECIARY_PERSON_ID and P.PLAN_CODE &lt;&gt; 'LIFE'">
      <parameters>
        <parameter ID="@BENEFECIARY_PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBenefitApplicationDetail" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(1) FROM SGT_PERSON P&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION BA ON P.PERSON_ID = BA.PERSON_ID AND BA.APPLICATION_STATUS_VALUE &lt;&gt; 'CANC'&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON BA.BENEFIT_APPLICATION_ID = BAD.BENEFIT_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_DRO_APPLICATION DA ON P.PERSON_ID = DA.PERSON_ID  AND DA.DRO_STATUS_VALUE &lt;&gt; 'CNLD'&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON BAJA ON BAD.JOINT_ANNUITANT_ID = BAJA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON BASU ON BAD.SURVIVOR_ID = BASU.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON DAB ON DA.ALTERNATE_PAYEE_ID = DAB.PERSON_ID&#xD;&#xA;WHERE P.MPI_PERSON_ID = @PARTICIPANT_MPID&#xD;&#xA;AND (BAJA.MPI_PERSON_ID = @BENEFICIARY_MPID OR BASU.MPI_PERSON_ID = @BENEFICIARY_MPID OR DAB.MPI_PERSON_ID = @BENEFICIARY_MPID )">
      <parameters>
        <parameter ID="@PARTICIPANT_MPID" />
        <parameter ID="@BENEFICIARY_MPID" />
      </parameters>
    </query>
    <query ID="GetPersonDetailsByPersonID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT MPI_PERSON_ID,(FIRST_NAME + ' ' + LAST_NAME)as FULLNAME FROM SGT_PERSON WHERE PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPersonMailingAddress" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  *&#xD;&#xA;  FROM SGT_PERSON P &#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   &#xD;&#xA;  ON P.PERSON_ID  = PA1.PERSON_ID  &#xD;&#xA;  AND PA1.START_DATE &lt;= @PAYMENTDATE AND (PA1.END_DATE IS NULL OR PA1.END_DATE &gt;= @PAYMENTDATE)&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON_ADDRESS_CHKLIST PAC ON PA1.ADDRESS_ID=PAC.ADDRESS_ID&#xD;&#xA;  where PAC.ADDRESS_TYPE_VALUE='MAIL' and p.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountWithStatusNotCncld" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_PAYEE_ACCOUNT SPA WHERE SPA.PERSON_ID = @PERSON_ID AND&#xD;&#xA;(SELECT TOP(1) STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS WHERE&#xD;&#xA;PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC) &lt;&gt; 'CNCL'&#xD;&#xA;AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN ('QDRO','WDRL')&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonSuspendibleMonth" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;select SPSM.* &#xD;&#xA;from SGT_PERSON_SUSPENDIBLE_MONTH SPSM WITH (NOLOCK)&#xD;&#xA;join SGT_PERSON SP WITH (NOLOCK)&#xD;&#xA;on sp.PERSON_ID = SPSM.PERSON_ID&#xD;&#xA;where SPSM.PERSON_ID=@PERSON_ID ">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountsWithHoursAfterRetirement" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="declare @EADB_DATA TABLE&#xD;&#xA;(&#xD;&#xA;      personid varchar(15),&#xD;&#xA;      fromdate smalldatetime,&#xD;&#xA;      todate smalldatetime,&#xD;&#xA;      hoursworked numeric(7,1),&#xD;&#xA;      Processdate smalldatetime&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;insert @EADB_DATA &#xD;&#xA;select p.PERSON_ID,r.fromdate,r.todate,h.hoursworked,convert(varchar(12),r.processdate,101)Processdate &#xD;&#xA;from EADB.dbo.hours h &#xD;&#xA;inner join EADB.dbo.report r on r.reportid = h.reportid and r.status = 0 and convert(varchar(12),r.processdate,101) = convert(varchar(12),getdate()-1,101) &#xD;&#xA;inner join OPUS.dbo.SGT_PERSON p on OPUS.dbo.fn_GET_DECRYPTED_TEXT(p.ssn) =  h.ssn where h.status = 0&#xD;&#xA;&#xD;&#xA;select distinct EA.hoursworked, spa.payee_account_id,spa.created_by,spa.created_date,spa.modified_by,spa.modified_date,spa.update_seq,EA.fromdate,EA.todate &#xD;&#xA;/*,sba.RETIREMENT_DATE, EA.personid,EA.fromdate,EA.todate,EA.hoursworked,convert(varchar(12),EA.processdate,101)Processdate */&#xD;&#xA;from @EADB_DATA EA&#xD;&#xA;inner join SGT_PERSON sp on LTRIM(rtrim(sp.PERSON_ID)) = LTRIM(rtrim(EA.PersonId))&#xD;&#xA;inner join SGT_BENEFIT_APPLICATION sba on sba.PERSON_ID = sp.PERSON_ID&#xD;&#xA;inner join SGT_BENEFIT_APPLICATION_DETAIL sbad on sba.BENEFIT_APPLICATION_ID = sbad.BENEFIT_APPLICATION_ID&#xD;&#xA;inner join SGT_PAYEE_ACCOUNT spa on spa.BENEFIT_APPLICATION_DETAIL_ID = sbad.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;inner join SGT_PLAN_BENEFIT_XR spbx on spbx.PLAN_BENEFIT_ID = sbad.PLAN_BENEFIT_ID&#xD;&#xA;where /*sba.APPLICATION_STATUS_VALUE = 'APPR' and*/ spa.BENEFIT_ACCOUNT_TYPE_VALUE in ('RTMT','DSBL') and spa.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA;/*sba.MIN_DISTRIBUTION_FLAG &lt;&gt; 'Y' */ and ((spbx.PLAN_ID &lt;&gt; 1 and &#xD;&#xA;(select top(1)q.STATUS_VALUE from SGT_PAYEE_ACCOUNT_STATUS q where spa.PAYEE_ACCOUNT_ID = q.PAYEE_ACCOUNT_ID order by q.MODIFIED_DATE desc ) = 'RECV')&#xD;&#xA;or (spbx.PLAN_ID = 1 and&#xD;&#xA;(select top(1)q.STATUS_VALUE from SGT_PAYEE_ACCOUNT_STATUS q where spa.PAYEE_ACCOUNT_ID = q.PAYEE_ACCOUNT_ID order by q.MODIFIED_DATE desc ) in ('APRD','CMPL')))&#xD;&#xA;and (spa.REEMPLOYED_FLAG_AS_OF_DATE is null) and EA.todate &gt; DATEADD(day,7-DATEPART(weekday,sba.RETIREMENT_DATE),sba.RETIREMENT_DATE)">
      <parameters />
    </query>
    <query ID="ForTesting" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;  sp.SSN,&#xD;&#xA; sp.PERSON_ID,&#xD;&#xA; sp.DATE_OF_BIRTH,&#xD;&#xA; sp.FIRST_NAME ,&#xD;&#xA; sp.LAST_NAME,&#xD;&#xA; sp.MIDDLE_NAME,&#xD;&#xA; sp.MPI_PERSON_ID,&#xD;&#xA; sp.NAME_PREFIX_VALUE  ,&#xD;&#xA; spba.person_account_Id,&#xD;&#xA; spbx.PLAN_ID,&#xD;&#xA; spbx.BENEFIT_OPTION_VALUE,&#xD;&#xA; sba.RETIREMENT_DATE,&#xD;&#xA; sba.BENEFIT_TYPE_VALUE,&#xD;&#xA; sba.BENEFIT_APPLICATION_ID,&#xD;&#xA; sbcd.EE_DERIVED_BENEFIT_AMOUNT,&#xD;&#xA; sbad.BENEFIT_SUBTYPE_VALUE,&#xD;&#xA; sbcd.VESTED_EE_AMOUNT,&#xD;&#xA; sbcd.VESTED_EE_INTEREST,&#xD;&#xA; spa.* ,&#xD;&#xA; sbcd.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA; &#xD;&#xA;FROM&#xD;&#xA;  SGT_PAYEE_ACCOUNT spa WITH(NOLOCK)   &#xD;&#xA;  join sgt_person sp WITH(NOLOCK) &#xD;&#xA;  ON sp.PERSON_ID = spa.PERSON_ID  &#xD;&#xA;  join SGT_BENEFIT_APPLICATION_DETAIL sbad WITH(NOLOCK) &#xD;&#xA;  ON sbad.BENEFIT_APPLICATION_DETAIL_ID = spa.BENEFIT_APPLICATION_DETAIL_ID  &#xD;&#xA;  join SGT_BENEFIT_APPLICATION sba WITH(NOLOCK) &#xD;&#xA;  ON sba.BENEFIT_APPLICATION_ID = sbad.BENEFIT_APPLICATION_ID  &#xD;&#xA;  join SGT_PLAN_BENEFIT_XR spbx WITH(NOLOCK)&#xD;&#xA;  ON spbx.PLAN_BENEFIT_ID = spa.PLAN_BENEFIT_ID &#xD;&#xA;  join SGT_PAYEE_BENEFIT_ACCOUNT spba WITH(NOLOCK)&#xD;&#xA;  ON spba.PAYEE_BENEFIT_ACCOUNT_ID = spa.PAYEE_BENEFIT_ACCOUNT_ID left &#xD;&#xA;  join SGT_BENEFIT_CALCULATION_DETAIL sbcd WITH(NOLOCK)&#xD;&#xA;  ON sbcd.BENEFIT_CALCULATION_DETAIL_ID = spa.BENEFIT_CALCULATION_DETAIL_ID &#xD;&#xA;WHERE&#xD;&#xA;  SPA.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetContribnsAndInterestByPersonID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SPRC.EE_CONTRIBUTION_AMOUNT,SPRC.EE_INT_AMOUNT,SPRC.UVHP_AMOUNT,SPRC.UVHP_INT_AMOUNT,SPRC.IAP_BALANCE_AMOUNT,SPRC.TRANSACTION_DATE,SPRC.COMPUTATIONAL_YEAR ,&#xD;&#xA;SPRC.EFFECTIVE_DATE,*&#xD;&#xA;from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPRC &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPRC.PERSON_ACCOUNT_ID=SPA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID=SP.PERSON_ID &#xD;&#xA;WHERE SP.PERSON_ID=@PERSON_ID &#xD;&#xA;AND SPA.PLAN_ID =@PLAN_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetNotesByPersonID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_NOTES where PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonInfoForSSNMerge" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_PERSON  SP &#xD;&#xA;where (FIRST_NAME = @FIRST_NAME or LAST_NAME = @LAST_NAME or date_of_birth = @date_of_birth)&#xD;&#xA;and FIRST_NAME is not null and LAST_NAME is not null and DATE_OF_BIRTH is not null&#xD;&#xA;and person_id &lt;&gt; @person_id">
      <parameters>
        <parameter ID="@FIRST_NAME" sfwDataType="string" />
        <parameter ID="@LAST_NAME" sfwDataType="string" />
        <parameter ID="@date_of_birth" sfwDataType="string" />
        <parameter ID="@person_id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPersonInfoForSSNByPersonId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_PERSON  SP &#xD;&#xA;where (FIRST_NAME = @FIRST_NAME or LAST_NAME = @LAST_NAME or date_of_birth = @date_of_birth)&#xD;&#xA;and FIRST_NAME is not null and LAST_NAME is not null and DATE_OF_BIRTH is not null">
      <parameters>
        <parameter ID="@FIRST_NAME" sfwDataType="string" />
        <parameter ID="@LAST_NAME" sfwDataType="string" />
        <parameter ID="@date_of_birth" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetRetPayeeAccounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  DISTINCT SPA.PAYEE_ACCOUNT_ID,SPA.CREATED_BY,SPA.CREATED_DATE,SBA.RETIREMENT_DATE,&#xD;&#xA;SPA.MODIFIED_BY,SPA.MODIFIED_DATE,SPA.UPDATE_SEQ , SP.SSN&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID AND &#xD;&#xA;&#x9;SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPBA.FUNDS_TYPE_VALUE IS NULL &#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DSBL') AND (SPA.RETIREMENT_TYPE_VALUE IS NULL OR SPA.RETIREMENT_TYPE_VALUE &lt;&gt; 'MIND') &#xD;&#xA;AND ((SPBX.PLAN_ID &lt;&gt; 1 AND (SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL','SPND') OR (ISNULL(REEMPLOYED_FLAG,'N') = 'N' AND SPAS.STATUS_VALUE = 'SPND' AND SPAS.SUSPENSION_STATUS_REASON_VALUE NOT IN ('REE1','REE2','REE3','REE4','REE5')))) &#xD;&#xA;&#x9;OR (SPBX.PLAN_ID = 1 AND SPAS.STATUS_VALUE NOT IN ('CNCL'))) &#xD;&#xA;AND SP.DATE_OF_DEATH IS NULL AND SP.DATE_OF_BIRTH IS NOT NULL AND ISNULL(SPA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA;&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetPossibleDuplicateSSNs" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.* &#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;WHERE &#xD;&#xA;(SP.FIRST_NAME = @FIRST_NAME OR SP.LAST_NAME = @LAST_NAME OR SP.DATE_OF_BIRTH = @DATE_OF_BIRTH)&#xD;&#xA;AND DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) IS NOT NULL&#xD;&#xA;AND&#xD;&#xA;(&#xD;&#xA;DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+ SUBSTRING(@SSNTOCHECK,1,5)+'%'&#xD;&#xA;OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSNTOCHECK,2,5)+'%'&#xD;&#xA;OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSNTOCHECK,3,5)+'%'&#xD;&#xA;OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSNTOCHECK,4,5)+'%'&#xD;&#xA;OR  DBO.fn_GET_DECRYPTED_TEXT(SP.SSN) LIKE '%'+SUBSTRING(@SSNTOCHECK,5,5)+'%'&#xD;&#xA;)&#xD;&#xA;AND SP.PERSON_ID &lt;&gt; @PERSON_ID">
      <parameters>
        <parameter ID="@FIRST_NAME" sfwDataType="string" />
        <parameter ID="@LAST_NAME" sfwDataType="string" />
        <parameter ID="@DATE_OF_BIRTH" sfwDataType="DateTime" />
        <parameter ID="@SSNTOCHECK" sfwDataType="string" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPersonDetailsByMPID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="  SELECT SP.*&#xD;&#xA; FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;  WHERE SP.MPI_PERSON_ID = @MPI_PERSON_ID">
      <parameters>
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetMailingAddrByPersonID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  top(1)(ISNULL(SPA.ADDR_LINE_1,&#xA; '')+' '+ISNULL(SPA .ADDR_LINE_2,&#xA; ' ')+ ' '+ ISNULL(SPA.ADDR_CITY ,&#xA; '')+' '  + ISNULL(SCV.DESCRIPTION,&#xA; '') +' '+ISNULL( SPA.ADDR_ZIP_CODE,&#xA; ''))  AS istrParticipantAddress  &#xA;FROM&#xA;  SGT_PERSON_ADDRESS SPA WITH(NOLOCK)  &#xA;  LEFT OUTER JOIN  SGS_CODE_VALUE SCV WITH(NOLOCK) &#xA;  ON SCV.CODE_VALUE = SPA.ADDR_STATE_VALUE AND&#xA;  SCV.CODE_ID = SPA.ADDR_STATE_ID &#xA;  LEFT OUTER JOIN  SGT_PERSON_ADDRESS_CHKLIST SPAC WITH(NOLOCK)&#xA;  ON SPAC.ADDRESS_ID = SPA.ADDRESS_ID  &#xA;WHERE&#xA;  SPA.PERSON_ID = @PERSON_ID  AND&#xA;  SPA.END_DATE is null AND&#xA;  SPAC.ADDRESS_TYPE_VALUE  = 'MAIL' &#xA;ORDER  BY  SPA.MODIFIED_DATE desc">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAllParticipantPersonAccounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT pae.VESTED_DATE AS idtVestedDate,SPL.PLAN_CODE AS istrPlanCode,SPL.MERGER_DATE AS idtMergerDate,&#xD;&#xA;SPA.PERSON_ACCOUNT_ID,SPA.PERSON_ID,SPA.PLAN_ID,SPA.START_DATE,SPA.STATUS_ID,SPA.STATUS_VALUE,SPA.CREATED_BY,SPA.CREATED_DATE,SPA.MODIFIED_BY,SPA.MODIFIED_DATE,SPA.UPDATE_SEQ,SPA.SPECIAL_ACCOUNT,SPA.UVHP,SPA.EE_CONTR,&#xD;&#xA;SPA.BENEFECIARY_PERSON_ID,SPA.BENEFECIARY_OF_PERSON_ID,&#xD;&#xA;CASE WHEN SPA.STATUS_VALUE='DCSD' THEN SPA.END_DATE  &#xD;&#xA;     WHEN SPA.STATUS_VALUE IN ('ACTV','INAC') THEN SPA.END_DATE&#xD;&#xA;     WHEN SPA.STATUS_VALUE IN ('RETR') THEN&#xD;&#xA;     ((SELECT TOP(1) BAA.RETIREMENT_DATE FROM SGT_BENEFIT_APPLICATION BAA &#xD;&#xA;       WHERE BAA.PERSON_ID = SP.PERSON_ID AND BAA.APPLICATION_STATUS_VALUE='APPR'AND BAA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') ORDER BY BAA.RETIREMENT_DATE DESC)) &#xD;&#xA;     ELSE NULL  &#xD;&#xA;     END AS END_DATE&#xD;&#xA;FROM SGT_PERSON_ACCOUNT SPA &#xD;&#xA;INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;LEFT JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT JOIN SGT_BENEFIT_APPLICATION BA on BA.PERSON_ID = SP.PERSON_ID &#xD;&#xA;WHERE (SPL.PLAN_ID IN (1,2,3,4,5,6,7,8))&#xD;&#xA;AND (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '')&#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SP.PERSON_ID IS NOT NULL">
      <parameters />
    </query>
    <query ID="Check4AnnualStmtButtonVisibility" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--PIR RID#73867 commented condition to exclude retireee for testing&#xD;&#xA;SELECT COUNT(*) FROM SGT_PERSON P &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA ON PA.PERSON_ID=P.PERSON_ID&#xD;&#xA;LEFT JOIN SGT_PAYEE_ACCOUNT PACC ON PACC.PERSON_ID=P.PERSON_ID &#xD;&#xA;WHERE --(PA.STATUS_VALUE IN ('ACTV','INAC') AND (PACC.RETIREMENT_TYPE_VALUE!='MIND' OR PACC.RETIREMENT_TYPE_VALUE IS NULL) AND PA.PLAN_ID!=9) AND &#xD;&#xA;P.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBenificiaryPerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;Select PER.* from SGT_RELATIONSHIP REL&#xD;&#xA;INNER JOIN SGT_PERSON PER&#xD;&#xA;on PER.PERSON_ID=rel.BENEFICIARY_PERSON_ID&#xD;&#xA;where REL.PERSON_ID=@PERSON_ID and ADDR_SAME_AS_PARTICIPANT_FLAG='Y'">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfRelativeIsVIP" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) AS COUNT FROM SGT_RELATIONSHIP SR&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_BENEFICIARY SPAB&#xD;&#xA;ON SR.PERSON_RELATIONSHIP_ID = SPAB.PERSON_RELATIONSHIP_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SR.PERSON_ID&#xD;&#xA;WHERE SPAB.STATUS_VALUE &lt;&gt; 'INAC' AND &#xD;&#xA;(SR.BENEFICIARY_PERSON_ID = @PERSON_ID &#xD;&#xA; OR SR.DEPENDENT_PERSON_ID = @PERSON_ID)&#xD;&#xA;AND SP.VIP_FLAG = 'Y'">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetVIPFlagInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT istrRelativeVipFlag =&#xD;&#xA;(&#xD;&#xA;  SELECT CASE WHEN (COUNT(*) &gt; 0 OR SP.VIP_FLAG='Y') THEN 'Y' ELSE 'N' END FROM SGT_RELATIONSHIP SR&#xD;&#xA;  INNER JOIN SGT_PERSON SPP ON SPP.PERSON_ID = SR.PERSON_ID WHERE &#xD;&#xA;  (SR.BENEFICIARY_PERSON_ID = SP.PERSON_ID OR SR.DEPENDENT_PERSON_ID = SP.PERSON_ID)&#xD;&#xA;   AND SPP.VIP_FLAG = 'Y'&#xD;&#xA;),&#xD;&#xA;istr_IS_LOGGED_IN_USER_VIP =&#xD;&#xA;(&#xD;&#xA;select CASE WHEN COUNT(*) &gt; 0 THEN 'Y' ELSE 'N' END from SGS_USER_ROLES as ur WITH(NOLOCK) &#xD;&#xA;inner join SGS_ROLES as r WITH(NOLOCK) on r.ROLE_ID=ur.ROLE_ID&#xD;&#xA;inner join SGS_USER as u WITH(NOLOCK) on u.USER_SERIAL_ID=ur.USER_SERIAL_ID&#xD;&#xA;where u.USER_ID=@USER_ID and r.ROLE_ID=63&#xD;&#xA;and (ur.effective_end_date is null or ur.effective_end_date &gt; getdate())&#xD;&#xA;)&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;WHERE SP.MPI_PERSON_ID = @MPI_PERSON_ID ">
      <parameters>
        <parameter ID="@USER_ID" sfwDataType="string" />
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetAllHealthParticipantsMPIPP" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SP.* FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PLAN SPL WITH(NOLOCK) ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;WHERE (SPL.PLAN_ID IN (1,2))&#xD;&#xA;AND (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '')&#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SP.PERSON_ID IS NOT NULL&#xD;&#xA;--AND SPA.STATUS_VALUE NOT IN ('RETR','DCSD')&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetPrimaryBenCount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select sr.BENEFICIARY_PERSON_ID iaintBenPersonID,SR.PERSON_ID,SR.PERSON_RELATIONSHIP_ID,spab.BENEFICIARY_TYPE_VALUE,SP.DATE_OF_DEATH idtBenDateOfDeath,spa.PLAN_ID iaintPlan &#xD;&#xA;from SGT_RELATIONSHIP SR &#xD;&#xA;join SGT_PERSON_ACCOUNT_BENEFICIARY spab on sr.PERSON_RELATIONSHIP_ID = spab.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_PERSON SP ON SP.PERSON_ID=SR.BENEFICIARY_PERSON_ID&#xD;&#xA;join SGT_PERSON_ACCOUNT spa on spa.PERSON_ACCOUNT_ID=spab.PERSON_ACCOUNT_ID&#xD;&#xA;where SR.PERSON_ID=@PERSON_ID and SPAB.BENEFICIARY_TYPE_VALUE = 'PRIM'">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetWeeklyDatabySSN" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_ALL_MPIPP_WEEKLY_WORKHISTORY WITH(NOLOCK) WHERE SSN = @SSN ORDER BY FromDate,CAST(ComputationYear AS INT) ">
      <parameters>
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetPeronAccountMPIIAP" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT pa.*,p.plan_code as istrPlanCode FROM SGT_PERSON_ACCOUNT as pa WITH(NOLOCK) &#xD;&#xA;join SGT_PLAN AS P WITH(NOLOCK) on P.PLAN_ID=PA.PLAN_ID&#xD;&#xA;where pa.PERSON_ID=@person_id and ( P.PLAN_CODE = 'MPIPP' OR  P.PLAN_CODE = 'IAP')">
      <parameters>
        <parameter ID="@person_id" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetIAPBalanceSUM" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SUM(SPARC.IAP_BALANCE_AMOUNT) AS IAP_BALANCE_AMOUNT,MAX(SPARC.EFFECTIVE_DATE) AS EFFECTIVE_DATE &#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WITH(NOLOCK) &#xD;&#xA;JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID=SPARC.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE SPA.PLAN_ID=1 AND SPA.PERSON_ID=@PERSON_ID AND SPARC.COMPUTATIONAL_YEAR &lt;= @COMPUTATIONAL_YEAR  ">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@COMPUTATIONAL_YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckPaymentSchedulebeforeApprovestatus" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF @SCHEDULE_TYPE_VALUE = 'MTLY'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT COUNT(*) FROM SGT_PAYMENT_SCHEDULE SPS  WITH(NOLOCK)&#xD;&#xA;WHERE SPS.SCHEDULE_TYPE_VALUE IN ('MTLY','ADHM')&#xD;&#xA;AND SPS.STATUS_VALUE IN ('RFNL','TREX','PEND')&#xD;&#xA;AND CONVERT(DATE,SPS.PAYMENT_SETUP_CUTOFF_DATE) &lt; CONVERT(DATE,GETDATE())&#xD;&#xA;END&#xD;&#xA;ELSE IF @SCHEDULE_TYPE_VALUE = 'WKLY'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT COUNT(*) FROM SGT_PAYMENT_SCHEDULE SPS  WITH(NOLOCK)&#xD;&#xA;WHERE SPS.SCHEDULE_TYPE_VALUE IN ('WKLY','ADHW')&#xD;&#xA;AND SPS.STATUS_VALUE IN ('RFNL','TREX','PEND')&#xD;&#xA;AND CONVERT(DATE,SPS.PAYMENT_SETUP_CUTOFF_DATE) &lt; CONVERT(DATE,GETDATE())&#xD;&#xA;END">
      <parameters>
        <parameter ID="@SCHEDULE_TYPE_VALUE" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetRetirementDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP(1) RETIREMENT_DATE FROM SGT_BENEFIT_APPLICATION SBA INNER JOIN &#xD;&#xA;SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPAX ON SBAD.PLAN_BENEFIT_ID = SPAX.PLAN_BENEFIT_ID &#xD;&#xA;WHERE SBA.PERSON_ID = @PERSON_ID&#xD;&#xA;AND BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND APPLICATION_STATUS_VALUE = 'APPR' AND ISNULL(SBA.MIN_DISTRIBUTION_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;AND SPAX.PLAN_ID = 2&#xD;&#xA;ORDER BY RETIREMENT_DATE DESC">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetFirstPaymentDateAfterActiveDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP(1) PHH.PAYMENT_DATE FROM SGT_BENEFIT_APPLICATION SBA INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD&#xD;&#xA;ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID&#xD;&#xA;WHERE SBA.PERSON_ID = @PERSON_ID AND SPBX.PLAN_ID = 2 AND&#xD;&#xA;BENEFIT_TYPE_VALUE IN ('DDPR')&#xD;&#xA;ORDER BY PHH.PAYMENT_DATE">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LookupForReturnMail" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT istrRelativeVipFlag =&#xD;&#xA;(&#xD;&#xA;  SELECT CASE WHEN (COUNT(*) &gt; 0 OR SP.VIP_FLAG='Y') THEN 'Y' ELSE 'N' END FROM SGT_RELATIONSHIP SR&#xD;&#xA;  INNER JOIN SGT_PERSON SPP ON SPP.PERSON_ID = SR.PERSON_ID WHERE &#xD;&#xA;  (SR.BENEFICIARY_PERSON_ID = SP.PERSON_ID OR SR.DEPENDENT_PERSON_ID = SP.PERSON_ID)&#xD;&#xA;   AND SPP.VIP_FLAG = 'Y'&#xD;&#xA;),* &#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS ADDR&#xD;&#xA;ON SP.PERSON_ID=ADDR.PERSON_ID">
      <parameters />
    </query>
    <query ID="GetActiveParticiapantsMPIPPPreBIS" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SP.*&#xD;&#xA;,&#xD;&#xA;CASE WHEN ADDR.ADDRESS_ID &gt; 0 THEN 'Y' ELSE 'N' END AS IS_VALID_ADDRESS_PRESENT&#xD;&#xA;,&#xD;&#xA;CASE WHEN&#xD;&#xA;(SELECT COUNT(*) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY E &#xD;&#xA;WHERE  E.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2 AND SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;AND E.VESTED_DATE IS NOT NULL) &gt; 0    &#xD;&#xA;--(SELECT COUNT(*) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY Q WHERE Q.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2 AND Q.VESTED_DATE IS NOT NULL) &gt; 0&#xD;&#xA;THEN 'Y' ELSE 'N' END AS IS_VESTED_IN_MPI&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON SP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;LEFT JOIN SGT_PERSON_ADDRESS ADDR ON ADDR.PERSON_ID = SP.PERSON_ID &#xD;&#xA;AND ADDR.ADDRESS_ID = (SELECT TOP(1)Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (Q.END_DATE IS NULL OR Q.END_DATE &gt; GETDATE()))&#xD;&#xA;WHERE (SPA.PLAN_ID IN (2))&#xD;&#xA;AND (SP.SSN IS NOT NULL OR SP.SSN &lt;&gt; '')&#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SPA.PERSON_ID IS NOT NULL&#xD;&#xA;AND SPA.STATUS_VALUE in ('ACTV','INAC') &#xD;&#xA;and sp.PERSON_ID not in (select PERSON_ID from SGT_BENEFIT_APPLICATION where BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') and APPLICATION_STATUS_VALUE = 'APPR')&#xD;&#xA;and DATE_OF_DEATH is null and SP.PERSON_ID NOT IN (SELECT Q.PERSON_ID FROM SGT_PERSON_BATCH_FLAGS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND BIS_FLAG = 'Y')">
      <parameters />
    </query>
    <query ID="GetBenificiaryOf" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select spb.PERSON_RELATIONSHIP_ID, sp.PERSON_ID istrPersonId,sp.FIRST_NAME + ' ' + sp.LAST_NAME istrBenFullName,sp.LAST_NAME istrBenLastName,sp.NAME_PREFIX_VALUE istrNamePrefixValue,&#xD;&#xA;sp.DATE_OF_DEATH idtBenDateOfDeath,spl.PLAN_NAME istrPlan,spb.RELATIONSHIP_VALUE ,spab.*,sp.MPI_PERSON_ID as istrBenMPID,spl.PLAN_ID iaintPlan&#xD;&#xA;from SGT_PERSON_ACCOUNT_BENEFICIARY spab WITH(NOLOCK) &#xD;&#xA;join SGT_PERSON_ACCOUNT spa WITH(NOLOCK)  on spa.PERSON_ACCOUNT_ID = spab.PERSON_ACCOUNT_ID&#xD;&#xA;join SGT_PLAN spl WITH(NOLOCK) on spa.PLAN_ID = spl.PLAN_ID&#xD;&#xA;right outer join SGT_RELATIONSHIP spb WITH(NOLOCK) on spab.PERSON_RELATIONSHIP_ID = spb.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_PERSON sp WITH(NOLOCK) on sp.PERSON_ID = spb.PERSON_ID  &#xD;&#xA;where spb.BENEFICIARY_PERSON_ID = @PERSON_ID  ">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetBenificiaryAddress" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select Top 1 SP.FIRST_NAME, SP.LAST_NAME, SP.NAME_PREFIX_VALUE ,SA.addr_line_1, SA.addr_line_2, SA.addr_city,SA.addr_state_value, SA.ADDR_COUNTRY_VALUE, SA.ADDR_ZIP_CODE, SA.ADDR_ZIP_4_CODE, SA.foreign_postal_code&#xD;&#xA;from SGT_PERSON_address SA&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;where SA.PERSON_ID IN (&#xD;&#xA;Select PER.PERSON_ID from SGT_RELATIONSHIP REL&#xD;&#xA;INNER JOIN SGT_PERSON PER on PER.PERSON_ID=REL.BENEFICIARY_PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_BENEFICIARY SPAB on SPAB.PERSON_RELATIONSHIP_ID = REL.PERSON_RELATIONSHIP_ID &#xD;&#xA;where REL.BENEFICIARY_PERSON_ID = @PERSON_ID  and SPAB.BENEFICIARY_TYPE_VALUE = 'PRIM' --and SA.END_DATE is null&#xD;&#xA;)&#xD;&#xA;Order by SA.Start_date desc">
      <parameters>
        <parameter ID="@PERSON_ID" />
      </parameters>
    </query>
    <query ID="GetIsParticipantCount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY E&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON E.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND PLAN_ID NOT IN(1,2,9)&#xD;&#xA;WHERE MPI_PERSON_ID = @MPI_PERSON_ID">
      <parameters>
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetParticipantsForAnnualBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT A.* FROM TEMP_TABLE_FOR_ANNUAL_BATCHES A&#xD;&#xA;INNER JOIN SGT_PERSON SP ON A.SSN = SP.SSN AND A.MPI_PERSON_ID = SP.MPI_PERSON_ID&#xD;&#xA;ORDER BY SP.LAST_NAME&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="CheckIfRetiredFromMSS" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(SBA.BENEFIT_APPLICATION_ID) FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD&#xD;&#xA;ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID &#xD;&#xA;WHERE X.PLAN_ID &lt;&gt; 1 AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND&#xD;&#xA;(SBAD.BENEFIT_SUBTYPE_VALUE IS NULL OR SBAD.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND') AND&#xD;&#xA;SBA.APPLICATION_STATUS_VALUE = 'APPR' AND SBA.PERSON_ID = @PERSON_ID&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPayeeAccountWithStatusNotCncldCmpl" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SUM(ISNULL(CNT,0))&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT COUNT(1) AS CNT FROM SGT_PAYEE_ACCOUNT SPA WHERE SPA.PERSON_ID = @NEWPERSON_ID AND&#xD;&#xA;(SELECT TOP(1) STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS WHERE&#xD;&#xA;PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC) NOT IN('CNCL','CMPL')&#xD;&#xA;UNION&#xD;&#xA;SELECT COUNT(1) AS CNT FROM SGT_PAYEE_ACCOUNT SPA WHERE SPA.PERSON_ID = @OLDPERSON_ID AND&#xD;&#xA;(SELECT TOP(1) STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS WHERE&#xD;&#xA;PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC) NOT IN('CNCL','CMPL')&#xD;&#xA;)AA&#xD;&#xA;&#xD;&#xA;">
      <parameters>
        <parameter ID="@NEWPERSON_ID" sfwDataType="int" />
        <parameter ID="@OLDPERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetEWGPParticipants" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#x9;SP.*,&#xD;&#xA;&#x9;&#x9;BB.RETIREMENT_DATE,&#xD;&#xA;&#x9;&#x9;BB.APPLICATION_STATUS AS RETIREMENT_STATUS,&#xD;&#xA;&#x9;&#x9;BB.DISABLED_FLAG AS DISABLED_FLAG,&#xD;&#xA;&#x9;&#x9;BB.MODIFIED_DATE AS STATUS_DATE&#x9;&#x9;&#xD;&#xA;from&#x9;   &#xD;&#xA;(&#xD;&#xA;select &#x9;sp.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;sp.SSN,&#xD;&#xA;&#x9;   MIN(A.AWARDED_ON_DATE) AS RETIREMENT_DATE,&#xD;&#xA;&#x9;   MIN(A.APPLICATION_STATUS_VALUE) AS APPLICATION_STATUS,&#xD;&#xA;&#x9;   DATEDIFF(YY,min(sp.date_of_birth),GETDATE())- CASE WHEN (MONTH(min(sp.date_of_birth)) &gt; MONTH(GETDATE())) OR (MONTH(min(sp.date_of_birth)) = MONTH(GETDATE()) AND DAY(min(sp.date_of_birth)) &gt; DAY(GETDATE())) THEN 1 ELSE 0 END as age,&#xD;&#xA;&#x9;   'Y' as DISABLED_FLAG,&#xD;&#xA;&#x9;   a.CREATED_BY,&#xD;&#xA;&#x9;   a.CREATED_DATE,&#xD;&#xA;&#x9;   a.MODIFIED_BY,&#xD;&#xA;&#x9;   a.MODIFIED_DATE&#x9;   &#xD;&#xA;from SGT_BENEFIT_APPLICATION a&#xD;&#xA;inner join SGT_PERSON sp on a.PERSON_ID = sp.PERSON_ID and sp.DATE_OF_DEATH is null&#xD;&#xA;inner join SGT_BENEFIT_APPLICATION_DETAIL b on a.BENEFIT_APPLICATION_ID = b.BENEFIT_APPLICATION_ID and b.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA;inner join SGT_PLAN_BENEFIT_XR c on b.PLAN_BENEFIT_ID = c.PLAN_BENEFIT_ID and c.PLAN_ID = 2&#xD;&#xA;where a.BENEFIT_TYPE_VALUE in('DSBL') and a.AWARDED_ON_DATE is not null and a.AWARDED_ON_DATE &gt;= DATEADD(month, DATEDIFF(month, 0, DATEADD(mm,-6,getdate())), 0) and a.APPLICATION_STATUS_VALUE in('APPR','CANC')&#xD;&#xA;group by&#x9;sp.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;sp.SSN,&#xD;&#xA;&#x9;&#x9;&#x9;a.CREATED_BY,&#xD;&#xA;&#x9;&#x9;&#x9;a.CREATED_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;a.MODIFIED_BY,&#xD;&#xA;&#x9;&#x9;&#x9;a.MODIFIED_DATE&#xD;&#xA;union&#xD;&#xA;select&#x9;aa.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;aa.SSN,&#xD;&#xA;&#x9;&#x9;aa.RETIREMENT_DATE,&#xD;&#xA;&#x9;&#x9;aa.APPLICATION_STATUS,&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;aa.age,&#xD;&#xA;&#x9;&#x9;aa.DISABLED_FLAG,&#xD;&#xA;&#x9;&#x9;aa.CREATED_BY,&#xD;&#xA;&#x9;&#x9;aa.CREATED_DATE,&#xD;&#xA;&#x9;&#x9;aa.MODIFIED_BY,&#xD;&#xA;&#x9;&#x9;aa.MODIFIED_DATE&#xD;&#xA;from&#xD;&#xA;(&#xD;&#xA;select sp.MPI_PERSON_ID,&#xD;&#xA;&#x9;   sp.SSN,&#xD;&#xA;&#x9;   MIN(A.RETIREMENT_DATE) AS RETIREMENT_DATE,&#xD;&#xA;&#x9;   MIN(A.APPLICATION_STATUS_VALUE) AS APPLICATION_STATUS,&#xD;&#xA;&#x9;   DATEDIFF(YY,min(sp.date_of_birth),GETDATE())- CASE WHEN (MONTH(min(sp.date_of_birth)) &gt; MONTH(GETDATE())) OR (MONTH(min(sp.date_of_birth)) = MONTH(GETDATE()) AND DAY(min(sp.date_of_birth)) &gt; DAY(GETDATE())) THEN 1 ELSE 0 END as age,&#xD;&#xA;&#x9;   'N' as DISABLED_FLAG,&#xD;&#xA;&#x9;   a.created_by,&#xD;&#xA;&#x9;   a.CREATED_DATE,&#xD;&#xA;&#x9;   a.MODIFIED_BY,&#xD;&#xA;&#x9;   a.MODIFIED_DATE &#xD;&#xA;from SGT_BENEFIT_APPLICATION a&#xD;&#xA;inner join SGT_PERSON sp on a.PERSON_ID = sp.PERSON_ID and sp.DATE_OF_DEATH is null&#xD;&#xA;inner join SGT_BENEFIT_APPLICATION_DETAIL b on a.BENEFIT_APPLICATION_ID = b.BENEFIT_APPLICATION_ID and b.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA;inner join SGT_PLAN_BENEFIT_XR c on b.PLAN_BENEFIT_ID = c.PLAN_BENEFIT_ID and c.PLAN_ID =2&#xD;&#xA;where a.BENEFIT_TYPE_VALUE in('RTMT') AND a.APPLICATION_STATUS_VALUE in('APPR','CANC')&#xD;&#xA;group by&#x9;sp.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;sp.SSN,&#xD;&#xA;&#x9;&#x9;&#x9;a.CREATED_BY,&#xD;&#xA;&#x9;&#x9;&#x9;a.CREATED_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;a.MODIFIED_BY,&#xD;&#xA;&#x9;&#x9;&#x9;a.MODIFIED_DATE&#xD;&#xA;)aa&#xD;&#xA;where aa.age &gt;= 65 and aa.retirement_date &gt;= getdate()&#xD;&#xA;)BB&#xD;&#xA;INNER JOIN SGT_PERSON SP ON BB.MPI_PERSON_ID = SP.MPI_PERSON_ID&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="UpdateBatchNameRempPayeeAccounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE SGT_PAYEE_ACCOUNT_STATUS SET CREATED_BY = @BATCHNAME , MODIFIED_BY = @BATCHNAME WHERE PAYEE_ACCOUNT_STATUS_ID = @PAYEE_ACCOUNT_STATUS_ID">
      <parameters>
        <parameter ID="@BATCHNAME" sfwDataType="string" />
        <parameter ID="@PAYEE_ACCOUNT_STATUS_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckIfPersonIsOnlyDependent" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT COUNT(*) FROM SGT_PERSON SP&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT R.BENEFICIARY_PERSON_ID FROM SGT_RELATIONSHIP R&#xD;&#xA;)BENE ON SP.PERSON_ID = BENE.BENEFICIARY_PERSON_ID&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT SPA.PERSON_ID FROM SGT_PERSON_ACCOUNT SPA &#xD;&#xA;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC ON SPA.PERSON_ACCOUNT_ID = RC.PERSON_ACCOUNT_ID&#xD;&#xA;)RC ON SP.PERSON_ID = RC.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT SPA.PERSON_ID FROM SGT_PERSON_ACCOUNT SPA &#xD;&#xA;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPA.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;)E ON SP.PERSON_ID = E.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT ALTERNATE_PAYEE_ID FROM SGT_DRO_APPLICATION D&#xD;&#xA;)AP ON SP.PERSON_ID = AP.ALTERNATE_PAYEE_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT PERSON_ID FROM SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;)PHH ON SP.PERSON_ID = PHH.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT PERSON_ID FROM SGT_PAYEE_ACCOUNT_DEDUCTION D&#xD;&#xA;)D ON SP.PERSON_ID = D.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT PERSON_ID FROM SGT_PERSON_CONTACT C&#xD;&#xA;)C ON SP.PERSON_ID = C.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;&#x9;SELECT DISTINCT PERSON_ID FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;)SPA ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;WHERE &#xD;&#xA;(BENE.BENEFICIARY_PERSON_ID IS NULL AND RC.PERSON_ID IS NULL AND E.PERSON_ID IS NULL AND AP.ALTERNATE_PAYEE_ID IS NULL&#xD;&#xA;AND PHH.PERSON_ID IS NULL AND D.PERSON_ID IS NULL AND C.PERSON_ID IS NULL)&#xD;&#xA;AND SP.PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetDependentOf" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT CS.DESCRIPTION AS istrRelationship,SP.* FROM SGT_RELATIONSHIP R &#xD;&#xA;INNER JOIN SGT_PERSON SP ON R.PERSON_ID = SP.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CS ON R.RELATIONSHIP_ID = CS.CODE_ID AND R.RELATIONSHIP_VALUE = CS.CODE_VALUE&#xD;&#xA;WHERE R.DEPENDENT_PERSON_ID = @DEPENDENT_PERSON_ID">
      <parameters>
        <parameter ID="@DEPENDENT_PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAllEligibleActiveParticipantForPension" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT Distinct &#xD;&#xA;&#x9;&#x9; MPI_PERSON_ID,&#xD;&#xA;&#x9;   PERSON_ID,&#xD;&#xA;&#x9;   SSN,&#xD;&#xA;&#x9;   FORFEITURE_DATE,&#xD;&#xA;&#x9;  VESTED_DATE,&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;   CASE WHEN VESTED_DATE IS NOT NULL and VESTED_DATE &lt;&gt; '' THEN&#xD;&#xA;&#x9;             'Y'&#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' END AS ISVESTED,&#xD;&#xA;&#x9;&#x9;VESTING_RULE,&#xD;&#xA;&#x9;   IAP_BALANCE,&#xD;&#xA;&#x9;   EE_UVHP_AMOUNT&#xD;&#xA;FROM(&#xD;&#xA;---Age 65 and vested in the Pension Plan&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;   SP.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.SSN,&#xD;&#xA;&#x9;&#x9;&#x9;   spe.FORFEITURE_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTED_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTING_RULE,&#xD;&#xA;&#x9;&#x9;&#x9;   Isnull(IAP.IAP_BALANCE,0) AS IAP_BALANCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;0 AS EE_UVHP_AMOUNT&#xD;&#xA;&#x9;  &#xD;&#xA;&#x9;&#x9;FROM SGT_PERSON SP &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPE ON SPA.PERSON_ACCOUNT_ID=SPE.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT SP.PERSON_ID,SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) AS IAP_BALANCE&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY SP.PERSON_ID HAVING &#xD;&#xA;&#x9;&#x9;&#x9;SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;)IAP ON SP.PERSON_ID = IAP.PERSON_ID&#xD;&#xA;&#x9;&#x9;WHERE  DATEDIFF(hour,SP.DATE_OF_BIRTH,GETDATE())/8766.0 &gt;= 64.5&#xD;&#xA;&#x9;&#x9;AND DATEDIFF(hour,SP.DATE_OF_BIRTH,GETDATE())/8766.0 &lt; 65&#xD;&#xA;&#x9;&#x9;AND SPE.VESTED_DATE IS NOT NULL AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;&#x9;&#x9;AND ISNULL(SP.PENSION_ELIGIBLE_NOTIFICATION_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;&#x9;&#x9;AND NOT EXISTS(SELECT * FROM SGT_BENEFIT_APPLICATION A WHERE BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND APPLICATION_STATUS_VALUE='APPR' AND A.PERSON_ID = SP.PERSON_ID)&#xD;&#xA;&#x9;&#x9;UNION ALL&#xD;&#xA;&#x9;&#x9;---Age 65 BIS not vested in the Pension Plan&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;   SP.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.SSN ,&#xD;&#xA;&#x9;&#x9;&#x9;   spe.FORFEITURE_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTED_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTING_RULE,&#xD;&#xA;&#x9;&#x9;&#x9;   ISNULL(IAP.IAP_BALANCE,0) AS IAP_BALANCE,&#xD;&#xA;&#x9;&#x9;&#x9;   ISNULL(EEUVHP.EE_UVHP_AMOUNT,0) AS EE_UVHP_AMOUNT&#xD;&#xA;&#x9;  &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;FROM SGT_PERSON SP &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID AND PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID  &#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPE ON SPA.PERSON_ACCOUNT_ID=SPE.PERSON_ACCOUNT_ID &#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT SP.PERSON_ID,SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) AS IAP_BALANCE&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY SP.PERSON_ID HAVING &#xD;&#xA;&#x9;&#x9;&#x9;SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;)IAP ON SP.PERSON_ID = IAP.PERSON_ID&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT SPA.PERSON_ID,SUM(ISNULL(UVHP.UVHP_AMOUNT,0) + ISNULL(EE.EE_AMOUNT,0)) AS EE_UVHP_AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT SPA&#xD;&#xA;&#x9;&#x9;&#x9;LEFT OUTER JOIN&#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SELECT SPA.PERSON_ID,SUM(ISNULL(UVHP_AMOUNT,0) + ISNULL(UVHP_INT_AMOUNT,0)) AS UVHP_AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID  = 2&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY SPA.PERSON_ID HAVING SUM(ISNULL(UVHP_AMOUNT,0) + ISNULL(UVHP_INT_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;&#x9;)UVHP ON SPA.PERSON_ID = UVHP.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;LEFT OUTER JOIN &#xD;&#xA;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;SELECT SPA.PERSON_ID,SUM(ISNULL(EE_CONTRIBUTION_AMOUNT,0) + ISNULL(EE_INT_AMOUNT,0)) AS EE_AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID  = 2&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;WHERE CONTRIBUTION_SUBTYPE_VALUE = 'NVES'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY SPA.PERSON_ID HAVING SUM(ISNULL(EE_CONTRIBUTION_AMOUNT,0) + ISNULL(EE_INT_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;&#x9;)EE ON SPA.PERSON_ID  = EE.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;WHERE SPA.PLAN_ID = 2 &#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY SPA.PERSON_ID HAVING SUM(ISNULL(UVHP.UVHP_AMOUNT,0) + ISNULL(EE.EE_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;)EEUVHP ON SP.PERSON_ID = EEUVHP.PERSON_ID&#xD;&#xA;&#x9;&#x9;WHERE  &#xD;&#xA;&#x9;&#x9;(ISNULL(IAP.IAP_BALANCE ,0) &gt; 0 OR ISNULL(EEUVHP.EE_UVHP_AMOUNT ,0) &gt; 0) AND&#xD;&#xA;&#x9;&#x9;DATEDIFF(hour,SP.DATE_OF_BIRTH,GETDATE())/8766.0 &gt;= 64.5 AND DATEDIFF(hour,SP.DATE_OF_BIRTH,GETDATE())/8766.0 &lt; 65&#xD;&#xA;&#x9;&#x9;AND SPE.VESTED_DATE IS NULL AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;&#x9;&#x9;AND ISNULL(SP.PENSION_ELIGIBLE_NOTIFICATION_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;&#x9;&#x9;AND NOT EXISTS(SELECT * FROM SGT_BENEFIT_APPLICATION A WHERE BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND APPLICATION_STATUS_VALUE='APPR' AND A.PERSON_ID = SP.PERSON_ID)&#xD;&#xA;&#x9;&#x9;Union&#xD;&#xA;&#x9;&#x9;--FIVE YEARS PARTICIPATION AND AGE 65 WITH WESTING RULE R3A AND R3B&#xD;&#xA;&#x9;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;   SP.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.SSN,&#xD;&#xA;&#x9;&#x9;&#x9;   spe.FORFEITURE_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTED_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTING_RULE,&#xD;&#xA;&#x9;&#x9;&#x9;   ISNULL(IAP.IAP_BALANCE,0) AS IAP_BALANCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;0 AS EE_UVHP_AMOUNT&#xD;&#xA;&#x9;&#x9;FROM SGT_PERSON SP &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPE ON SPA.PERSON_ACCOUNT_ID=SPE.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT SP.PERSON_ID,SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) AS IAP_BALANCE&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY SP.PERSON_ID HAVING &#xD;&#xA;&#x9;&#x9;&#x9;SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;)IAP ON SP.PERSON_ID = IAP.PERSON_ID&#xD;&#xA;&#x9;&#x9;WHERE  DATEADD(year,65, SP.DATE_OF_BIRTH) = GETDATE()&#xD;&#xA;&#x9;&#x9;AND SPE.VESTED_DATE IS NOT NULL AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;&#x9;&#x9;AND ISNULL(SP.PENSION_ELIGIBLE_NOTIFICATION_FLAG,'N') &lt;&gt; 'Y' AND SPE.VESTING_RULE  IN ('R3A','R3B')&#xD;&#xA;&#x9;&#x9;AND NOT EXISTS(SELECT * FROM SGT_BENEFIT_APPLICATION A WHERE BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND APPLICATION_STATUS_VALUE='APPR' AND A.PERSON_ID = SP.PERSON_ID)&#xD;&#xA;&#x9;Union  ALL&#xD;&#xA;&#x9;-- Catch up One time run, Age should be 65 in the year 2018 and age between 65 and 70.5&#xD;&#xA;&#x9;SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;   SP.MPI_PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.PERSON_ID,&#xD;&#xA;&#x9;&#x9;&#x9;   SP.SSN,&#xD;&#xA;&#x9;&#x9;&#x9;   spe.FORFEITURE_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTED_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;   SPE.VESTING_RULE,&#xD;&#xA;&#x9;&#x9;&#x9;    Isnull(IAP.IAP_BALANCE,0) AS IAP_BALANCE,&#xD;&#xA;&#x9;&#x9;&#x9;   0 AS EE_UVHP_AMOUNT&#xD;&#xA;&#x9;&#x9;FROM SGT_PERSON SP &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID=SPA.PERSON_ID &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PLAN SPL ON SPL.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPE ON SPA.PERSON_ACCOUNT_ID=SPE.PERSON_ACCOUNT_ID AND SPA.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;LEFT OUTER JOIN&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;SELECT SP.PERSON_ID,SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) AS IAP_BALANCE&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID  = 1 &#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY SP.PERSON_ID HAVING &#xD;&#xA;&#x9;&#x9;&#x9;SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) + SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) + SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &gt; 0&#xD;&#xA;&#x9;&#x9;)IAP ON SP.PERSON_ID = IAP.PERSON_ID&#xD;&#xA;&#x9;&#x9;WHERE  (DATEDIFF(hour,SP.DATE_OF_BIRTH,GETDATE())/8766.0 &gt; 65&#xD;&#xA;&#x9;&#x9;AND DATEDIFF(hour,SP.DATE_OF_BIRTH,GETDATE())/8766.0 &lt; 70.5 OR YEAR(GETDATE())- YEAR(SP.DATE_OF_BIRTH)= 65)&#xD;&#xA;&#x9;&#x9;AND SPE.VESTED_DATE IS NOT NULL AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;&#x9;&#x9;AND ISNULL(SP.PENSION_ELIGIBLE_NOTIFICATION_FLAG,'N') &lt;&gt; 'Y'&#xD;&#xA;&#x9;&#x9;AND NOT EXISTS(SELECT * FROM SGT_BENEFIT_APPLICATION A WHERE BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND APPLICATION_STATUS_VALUE='APPR' AND A.PERSON_ID = SP.PERSON_ID)&#xD;&#xA;) AS Pension_Eligibility ">
      <parameters />
    </query>
    <query ID="LoadProcessActivityLog" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;BA.PERSON_ID &#xD;&#xA;&#x9;&#x9;, BA.BENEFIT_APPLICATION_ID AS APP_ID&#xD;&#xA;&#x9;&#x9;, PL.PLAN_CODE AS [PLAN]&#xD;&#xA;&#x9;&#x9;, CV3.DESCRIPTION AS BENEFIT_TYPE&#xD;&#xA;&#x9;&#x9;, BA.APPLICATION_STATUS_VALUE AS APP_STATUS&#xD;&#xA;&#x9;&#x9;, CONVERT(CHAR(10),BA.CREATED_DATE,101) AS APP_CREATED, CONVERT(CHAR(10),BA.MODIFIED_DATE,101) AS APP_MODIFIED, BA.MODIFIED_BY AS APP_MODIFIED_BY&#xD;&#xA;&#x9;&#x9;, CH.BENEFIT_CALCULATION_HEADER_ID AS CALC_ID, CH.CALCULATION_TYPE_VALUE AS CALC_TYPE, CH.STATUS_VALUE AS CALC_STATUS&#xD;&#xA;&#x9;&#x9;, CONVERT(CHAR(10),CH.CREATED_DATE,101) AS CALC_CREATED, CONVERT(CHAR(10),CH.MODIFIED_DATE,101) AS CALC_MODIFIED, CH.MODIFIED_BY AS CALC_MODIFIED_BY&#xD;&#xA;&#x9;&#x9;, PA.PAYEE_ACCOUNT_ID AS PAYEE_ACCT, CONVERT(CHAR(10),PA.CREATED_DATE,101) AS PA_CREATED&#xD;&#xA;&#x9;&#x9;, PAS.STATUS_VALUE AS PA_STATUS, CONVERT(CHAR(10),PAS.MODIFIED_DATE,101) AS STATUS_DT, PAS.MODIFIED_BY AS STATUS_BY&#xD;&#xA;&#x9;&#x9;, PAYMENT_ID = (select top(1) PAYMENT_HISTORY_HEADER_ID from SGT_PAYMENT_HISTORY_HEADER where PAYEE_ACCOUNT_ID =  PA.PAYEE_ACCOUNT_ID order by PAYMENT_HISTORY_HEADER_ID desc)&#xD;&#xA;&#x9;&#x9;, BA.BENEFIT_TYPE_VALUE AS BA_BENEFIT_TYPE_VALUE&#xD;&#xA;&#x9;&#x9;, CH.BENEFIT_TYPE_VALUE AS CH_BENEFIT_TYPE_VALUE&#xD;&#xA;FROM OPUS.DBO.SGT_PERSON PART&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION BA ON PART.PERSON_ID = BA.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL BAD ON BA.BENEFIT_APPLICATION_ID = BAD.BENEFIT_APPLICATION_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR PB ON BAD.PLAN_BENEFIT_ID = PB.PLAN_BENEFIT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN PL ON PB.PLAN_ID = PL.PLAN_ID&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CV ON PB.BENEFIT_OPTION_ID = CV.CODE_ID AND PB.BENEFIT_OPTION_VALUE = CV.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CV2 ON BAD.BENEFIT_SUBTYPE_ID = CV2.CODE_ID AND BAD.BENEFIT_SUBTYPE_VALUE = CV2.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CV3 ON BA.BENEFIT_TYPE_ID = CV3.CODE_ID AND BA.BENEFIT_TYPE_VALUE = CV3.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN (SELECT CD1.BENEFIT_APPLICATION_DETAIL_ID, CH1.* FROM SGT_BENEFIT_CALCULATION_HEADER CH1 INNER JOIN SGT_BENEFIT_CALCULATION_DETAIL CD1 ON CH1.BENEFIT_CALCULATION_HEADER_ID = CD1.BENEFIT_CALCULATION_HEADER_ID AND ISNULL(CH1.STATUS_VALUE,'') &lt;&gt; 'CANC') CH ON BAD.BENEFIT_APPLICATION_DETAIL_ID = CH.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN OPUS.DBO.SGT_PAYEE_ACCOUNT PA ON BAD.BENEFIT_APPLICATION_DETAIL_ID = PA.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN OPUS.DBO.SGT_PAYEE_ACCOUNT_STATUS PAS ON PA.PAYEE_ACCOUNT_ID = PAS.PAYEE_ACCOUNT_ID AND PAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT MAX(PAYEE_ACCOUNT_STATUS_ID) FROM SGT_PAYEE_ACCOUNT_STATUS WHERE PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID)&#xD;&#xA;WHERE  1=1 AND (PART.PERSON_ID = @PERSON_ID or pa.person_id = @PERSON_ID) AND NOT (BA.BENEFIT_APPLICATION_ID IS NULL AND CH.BENEFIT_CALCULATION_HEADER_ID IS NULL AND PA.PAYEE_ACCOUNT_ID IS NULL)&#xD;&#xA;">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="MonthOfSuspendibleServiceReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT ROW_NUMBER() OVER (ORDER BY QUALIFYINGENDDATE) AS ID,&#xD;&#xA;CONVERT(DATE,DATEADD(D,-(DAY(QUALIFYINGENDDATE-1)),QUALIFYINGENDDATE)) AS CALENDAR_MONTH_BEGIN_DATE,&#xD;&#xA;CONVERT(DATE,DATEADD(D,-(DAY(DATEADD(M,1,QUALIFYINGENDDATE))),DATEADD(M,1,QUALIFYINGENDDATE))) AS CALENDAR_MONTH_END_DATE,&#xD;&#xA;CONVERT(DATE,QUALIFYINGSTARTDATE) AS PAYROLL_MONTH_BEGIN_DATE,CONVERT(DATE,QUALIFYINGENDDATE) AS PAYROLL_MONTH_END_DATE&#xD;&#xA;INTO #TEMP&#xD;&#xA;FROM Pillars..PERIOD WHERE YEAR(QUALIFYINGENDDATE) BETWEEN @YR AND YEAR(GETDATE()) &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DECLARE @PensionWorkHistory TABLE(&#xD;&#xA;&#x9;[ReportID] [varchar](18) NULL,&#xD;&#xA;&#x9;[EmpAccountNo] [int] NULL,&#xD;&#xA;&#x9;[ComputationYear] [smallint] NULL,&#xD;&#xA;&#x9;[FromDate] [smalldatetime] NULL,&#xD;&#xA;&#x9;[ToDate] [smalldatetime] NULL,&#xD;&#xA;&#x9;[Weeks] [char](2) NULL,&#xD;&#xA;&#x9;[Received] [smalldatetime] NULL,&#xD;&#xA;&#x9;[Processed] [smalldatetime] NULL,&#xD;&#xA;&#x9;[HoursID] [varchar](24) NULL,&#xD;&#xA;&#x9;[SSN] [char](9) NULL,&#xD;&#xA;&#x9;[LastName] [varchar](50) NULL,&#xD;&#xA;&#x9;[FirstName] [varchar](50) NULL,&#xD;&#xA;&#x9;[UnionCode] [int] NULL,&#xD;&#xA;&#x9;[PensionPlan] [smallint] NULL,&#xD;&#xA;&#x9;[PensionCredit] [numeric](7, 3) NULL,&#xD;&#xA;&#x9;[L52VestedCredit] [smallint] NULL,&#xD;&#xA;&#x9;[PensionHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPHoursA2] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPPercent] [money] NULL,&#xD;&#xA;&#x9;[ActiveHealthHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[RetireeHealthHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[PersonId] [varchar](15) NULL,&#xD;&#xA;&#x9;[RateGroup] [varchar](4) NULL,&#xD;&#xA;&#x9;[HoursStatus] [int] NULL,&#xD;&#xA;&#x9;[LateMonthly] [varchar](1)  NULL,&#xD;&#xA;&#x9;[LateAnnual] [varchar](1)  NULL,&#xD;&#xA;&#x9;[UnionMisc] [char](2) NULL,&#xD;&#xA;&#x9;[HoursWorked] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPHourlyRate] [money] NULL,&#xD;&#xA;&#x9;[Source] [varchar](4) NOT NULL,&#xD;&#xA;&#x9;[ToHealthSystem] [int] NULL,&#xD;&#xA;&#x9;[ToPensionSystem] [int] NULL,&#xD;&#xA;&#x9;[IsActiveHealth] [int] NULL,&#xD;&#xA;&#x9;[IsRetireeHealth] [int] NULL,&#xD;&#xA;&#x9;[IsPension] [int] NULL,&#xD;&#xA;&#x9;[IsIAPHourly] [int] NULL&#xD;&#xA;&#x9;, [OldEmployerNum] [varchar](6) null&#xD;&#xA;) &#xD;&#xA;&#xD;&#xA;INSERT INTO @PensionWorkHistory &#xD;&#xA;EXEC Pillars..usp_PensionInterface4OPUS @SSN&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DECLARE @COUNT INT = 1&#xD;&#xA;DECLARE @TOTALCOUNT INT =  (SELECT COUNT(0) FROM #TEMP)&#xD;&#xA;&#xD;&#xA;CREATE TABLE #REPORT_DATA&#xD;&#xA;(&#xD;&#xA;&#x9;ID INT NOT NULL,&#xD;&#xA;&#x9;SSN VARCHAR(9) NOT NULL,&#xD;&#xA;&#x9;CALENDAR_MONTH_BEGIN_DATE DATE NULL,&#xD;&#xA;&#x9;CALENDAR_MONTH_END_DATE DATE NULL,&#xD;&#xA;&#x9;CALENDAR_MONTH_HOURS NUMERIC(11,1) NULL,&#xD;&#xA;&#x9;PAYROLL_MONTH_BEGIN_DATE DATE NULL,&#xD;&#xA;&#x9;PAYROLL_MONTH_END_DATE DATE NULL,&#xD;&#xA;&#x9;PAYROLL_MONTH_HOURS NUMERIC(11,1) NULL,&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;WHILE @COUNT &lt;= @TOTALCOUNT&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;&#x9;DECLARE @CALENDAR_MONTH_BEGIN_DATE DATE = (SELECT CALENDAR_MONTH_BEGIN_DATE FROM #TEMP WHERE ID = @COUNT)&#xD;&#xA;&#x9;DECLARE @CALENDAR_MONTH_END_DATE DATE = (SELECT CALENDAR_MONTH_END_DATE FROM #TEMP WHERE ID = @COUNT)&#xD;&#xA;&#x9;DECLARE @PAYROLL_MONTH_BEGIN_DATE DATE = (SELECT PAYROLL_MONTH_BEGIN_DATE FROM #TEMP WHERE ID = @COUNT)&#xD;&#xA;&#x9;DECLARE @PAYROLL_MONTH_END_DATE DATE = (SELECT PAYROLL_MONTH_END_DATE FROM #TEMP WHERE ID = @COUNT)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;INSERT INTO #REPORT_DATA&#xD;&#xA;&#x9;SELECT @COUNT,SSN,@CALENDAR_MONTH_BEGIN_DATE,@CALENDAR_MONTH_END_DATE,&#xD;&#xA;&#x9;ROUND(SUM(CASE WHEN FromDate &gt;= @CALENDAR_MONTH_BEGIN_DATE AND ToDate &lt;= @CALENDAR_MONTH_END_DATE THEN PensionHours &#xD;&#xA;&#x9;&#x9;&#x9; WHEN FromDate &lt; @CALENDAR_MONTH_BEGIN_DATE AND ToDate &lt;= @CALENDAR_MONTH_END_DATE AND DATEDIFF(DAY,FromDate,ToDate) + 1 &gt; 0 AND DATEDIFF(DAY,@CALENDAR_MONTH_BEGIN_DATE,ToDate) + 1 &gt; 0 THEN (PensionHours/(DATEDIFF(DAY,FromDate,ToDate) + 1))*(DATEDIFF(DAY,@CALENDAR_MONTH_BEGIN_DATE,ToDate) + 1)&#xD;&#xA;&#x9;&#x9;&#x9; WHEN FromDate &gt;= @CALENDAR_MONTH_BEGIN_DATE AND ToDate &gt; @CALENDAR_MONTH_END_DATE AND DATEDIFF(DAY,FromDate,ToDate) + 1 &gt; 0 AND DATEDIFF(DAY,FromDate,@CALENDAR_MONTH_END_DATE) + 1 &gt; 0 THEN (PensionHours/(DATEDIFF(DAY,FromDate,ToDate) + 1))*(DATEDIFF(DAY,FromDate,@CALENDAR_MONTH_END_DATE) + 1)&#xD;&#xA;&#x9;&#x9;&#x9; WHEN FromDate &lt; @CALENDAR_MONTH_BEGIN_DATE AND ToDate &lt;= @CALENDAR_MONTH_END_DATE AND DATEDIFF(DAY,FromDate,ToDate) + 1 = 0 AND DATEDIFF(DAY,@CALENDAR_MONTH_BEGIN_DATE,ToDate) + 1 &gt; 0 THEN (PensionHours/(1))* (DATEDIFF(DAY,@CALENDAR_MONTH_BEGIN_DATE,ToDate) + 1)&#xD;&#xA;&#x9;&#x9;&#x9; WHEN FromDate &gt;= @CALENDAR_MONTH_BEGIN_DATE AND ToDate &gt; @CALENDAR_MONTH_END_DATE AND DATEDIFF(DAY,FromDate,ToDate) + 1 = 0 AND DATEDIFF(DAY,@CALENDAR_MONTH_BEGIN_DATE,ToDate) + 1 &gt; 0 THEN (PensionHours/(1))* (DATEDIFF(DAY,FromDate,@CALENDAR_MONTH_END_DATE) + 1)&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;ELSE 0 END),1) AS CALENDAR_MONTH_HOURS,&#xD;&#xA;&#x9;@PAYROLL_MONTH_BEGIN_DATE,@PAYROLL_MONTH_END_DATE,&#xD;&#xA;&#x9;ROUND(SUM(CASE WHEN FromDate &gt;= @PAYROLL_MONTH_BEGIN_DATE AND ToDate &lt;= @PAYROLL_MONTH_END_DATE THEN PensionHours ELSE 0 END),1) AS PAYROLL_MONTH_HOURS&#xD;&#xA;&#x9;FROM @PensionWorkHistory&#xD;&#xA;&#x9;GROUP BY SSN&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;SET @COUNT = @COUNT + 1&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT R.*,SP.MPI_PERSON_ID,NAME,YEAR(R.PAYROLL_MONTH_END_DATE) AS [YEAR], &#xD;&#xA;CASE WHEN ISNULL(R.CALENDAR_MONTH_HOURS,0) &gt;= dbo.ufn_GetSuspendibleHoursValue(YEAR(R.CALENDAR_MONTH_END_DATE) ,MONTH(R.CALENDAR_MONTH_END_DATE)) THEN 'Y' ELSE 'N' END AS CALENDAR_MONTH_SUS_FLAG,&#xD;&#xA;CASE WHEN ISNULL(R.PAYROLL_MONTH_HOURS,0) &gt;= dbo.ufn_GetSuspendibleHoursValue(YEAR(R.PAYROLL_MONTH_END_DATE) ,MONTH(R.PAYROLL_MONTH_END_DATE)) THEN 'Y' ELSE 'N' END AS PAYROLL_MONTH_SUS_FLAG&#xD;&#xA;FROM #REPORT_DATA R&#xD;&#xA;INNER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT MPI_PERSON_ID,SSN, FIRST_NAME + ' ' + LAST_NAME AS [NAME] FROM SGT_PERSON&#xD;&#xA;)SP ON R.SSN = SP.SSN&#xD;&#xA;WHERE ISNULL(R.CALENDAR_MONTH_HOURS,0) &lt;&gt; 0 OR ISNULL(R.PAYROLL_MONTH_HOURS,0) &lt;&gt; 0&#xD;&#xA;">
      <parameters>
        <parameter ID="@YR" sfwDataType="int" />
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetCreditedHoursbySSN" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" DECLARE @PensionWorkHistory TABLE(&#xD;&#xA;&#x9;[ReportID] [varchar](18) NULL,&#xD;&#xA;&#x9;[EmpAccountNo] [int] NULL,&#xD;&#xA;&#x9;[ComputationYear] [smallint] NULL,&#xD;&#xA;&#x9;[FromDate] [smalldatetime] NULL,&#xD;&#xA;&#x9;[ToDate] [smalldatetime] NULL,&#xD;&#xA;&#x9;[Weeks] [char](2) NULL,&#xD;&#xA;&#x9;[Received] [smalldatetime] NULL,&#xD;&#xA;&#x9;[Processed] [smalldatetime] NULL,&#xD;&#xA;&#x9;[HoursID] [varchar](24) NULL,&#xD;&#xA;&#x9;[SSN] [char](9) NULL,&#xD;&#xA;&#x9;[LastName] [varchar](50) NULL,&#xD;&#xA;&#x9;[FirstName] [varchar](50) NULL,&#xD;&#xA;&#x9;[UnionCode] [int] NULL,&#xD;&#xA;&#x9;[PensionPlan] [smallint] NULL,&#xD;&#xA;&#x9;[PensionCredit] [numeric](7, 3) NULL,&#xD;&#xA;&#x9;[L52VestedCredit] [smallint] NULL,&#xD;&#xA;&#x9;[PensionHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPHoursA2] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPPercent] [money] NULL,&#xD;&#xA;&#x9;[ActiveHealthHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[RetireeHealthHours] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[PersonId] [varchar](15) NULL,&#xD;&#xA;&#x9;[RateGroup] [varchar](4) NULL,&#xD;&#xA;&#x9;[HoursStatus] [int] NULL,&#xD;&#xA;&#x9;[LateMonthly] [varchar](1)  NULL,&#xD;&#xA;&#x9;[LateAnnual] [varchar](1)  NULL,&#xD;&#xA;&#x9;[UnionMisc] [char](2) NULL,&#xD;&#xA;&#x9;[HoursWorked] [numeric](7, 1) NULL,&#xD;&#xA;&#x9;[IAPHourlyRate] [money] NULL,&#xD;&#xA;&#x9;[Source] [varchar](4) NOT NULL,&#xD;&#xA;&#x9;[ToHealthSystem] [int] NULL,&#xD;&#xA;&#x9;[ToPensionSystem] [int] NULL,&#xD;&#xA;&#x9;[IsActiveHealth] [int] NULL,&#xD;&#xA;&#x9;[IsRetireeHealth] [int] NULL,&#xD;&#xA;&#x9;[IsPension] [int] NULL,&#xD;&#xA;&#x9;[IsIAPHourly] [int] NULL&#xD;&#xA;&#x9;, [OldEmployerNum] [varchar](6) null&#xD;&#xA;) &#xD;&#xA;&#xD;&#xA;INSERT INTO @PensionWorkHistory &#xD;&#xA;EXEC Pillars..usp_PensionInterface4OPUS @SSN&#xD;&#xA;&#xD;&#xA;SELECT ISNULL(SUM(PensionHours),0)PensionHours FROM @PensionWorkHistory WHERE ComputationYear=@YR">
      <parameters>
        <parameter ID="@YR" sfwDataType="int" />
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadParticipantsEEUVHPBenefitAmounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT  MPI_PERSON_ID,ValidAddress,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE From(&#xD;&#xA;SELECT &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a.person_id AS person_identity,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a.MPI_PERSON_ID, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a.FIRST_NAME + ' ' + a.LAST_NAME as NAME, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(ISNULL(D.EE_CONTRIBUTION_AMOUNT,0)) AS EE_CONT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(ISNULL(D.EE_INT_AMOUNT,0)) AS EE_INT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(ISNULL(D.UVHP_AMOUNT,0)) AS UVHP_AMOUNT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SUM(ISNULL(D.UVHP_INT_AMOUNT,0)) AS UVHP_INT_AMOUNT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;A.DATE_OF_DEATH,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.END_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_LINE_1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_LINE_2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_CITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_STATE_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN ((PAD.ADDR_ZIP_CODE IS NULL OR PAD.ADDR_ZIP_CODE ='') AND PAD.FOREIGN_PROVINCE IS NOT Null OR  PAD.FOREIGN_POSTAL_CODE IS NOT Null) THEN PAD.FOREIGN_POSTAL_CODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; WHEN (PAD.ADDR_ZIP_CODE IS not Null) THEN PAD.ADDR_ZIP_CODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS ADDR_ZIP_CODE,  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.FOREIGN_PROVINCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.FOREIGN_POSTAL_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN ((PAD.ADDR_ZIP_CODE IS NULL OR PAD.ADDR_ZIP_CODE ='') AND (PAD.FOREIGN_POSTAL_CODE IS NOT Null)) THEN 'Y'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; WHEN (PAD.ADDR_ZIP_CODE IS not Null  AND (PAD.ADDR_STATE_VALUE  IS NOT Null OR PAD.ADDR_STATE_VALUE  &lt;&gt; '') AND (PAD.ADDR_CITY IS NOT Null OR PAD.ADDR_CITY &lt;&gt;'')AND(PAD.ADDR_LINE_1 is not Null OR PAD.ADDR_LINE_1 &lt;&gt; '' )) THEN 'Y'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ELSE 'N'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS ValidAddress   &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON a&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN sgt_person_account b on a.person_id = b.person_id and b.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;&#x9;Left outer Join  SGT_PERSON_ADDRESS PAD ON a.Person_id = PAD.PERSON_ID AND PAD.END_DATE is null&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY c on b.person_account_id = c.person_account_id and c.vested_date is null&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION d on c.person_account_id = d.person_account_id &#xD;&#xA;&#x9;&#x9;&#x9;WHERE a.DATE_OF_DEATH is null &#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY a.person_id, A.MPI_PERSON_ID, A.FIRST_NAME, A.LAST_NAME, A.DATE_OF_DEATH,PAD.END_DATE, PAD.ADDR_LINE_1,PAD.ADDR_LINE_2,PAD.ADDR_CITY,PAD.ADDR_STATE_VALUE, PAD.ADDR_ZIP_CODE, PAD.FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE &#xD;&#xA;&#x9;&#x9;&#x9;HAVING SUM(ISNULL(D.EE_CONTRIBUTION_AMOUNT,0) + ISNULL(D.EE_INT_AMOUNT,0) + ISNULL(D.UVHP_AMOUNT,0) + ISNULL(D.UVHP_INT_AMOUNT,0)) &gt; 0&#xD;&#xA;&#xD;&#xA;) B &#xD;&#xA;Order by B.MPI_PERSON_ID">
      <parameters />
    </query>
    <query ID="LoadParticipantsEEUVHPBenefitAmountsReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="  select&#x9;&#x9;&#x9;P.MPI_PERSON_ID MPID, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;convert(varchar, P.DATE_OF_BIRTH, 101)&#x9; DOB,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#x9;P.SSN,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;P.FIRST_NAME FIRSTNAME,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;P.MIDDLE_NAME MI,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;P.LAST_NAME as LASTNAME, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BCH.BENEFIT_CALCULATION_HEADER_ID CALCID, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ISNULL(BCD.NON_VESTED_EE_AMOUNT,0) EE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ISNULL(BCD.NON_VESTED_EE_INTEREST,0) EEInt,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ISNULL(BCD.TOTAL_UVHP_CONTRIBUTION_AMOUNT,0) UVHP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ISNULL(BCD.TOTAL_UVHP_INTEREST_AMOUNT,0) UVHPInt,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.END_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_LINE_1 Address1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_LINE_2 Address2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_CITY City,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_STATE_VALUE State,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN ((PAD.ADDR_ZIP_CODE IS NULL OR PAD.ADDR_ZIP_CODE ='') AND PAD.FOREIGN_PROVINCE IS NOT Null OR  PAD.FOREIGN_POSTAL_CODE IS NOT Null) THEN PAD.FOREIGN_POSTAL_CODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; WHEN (PAD.ADDR_ZIP_CODE IS not Null) THEN PAD.ADDR_ZIP_CODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS ZipCode,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.FOREIGN_PROVINCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.FOREIGN_POSTAL_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   COUNTRY = Upper((Select Description FROM SGS_CODE_VALUE WHERE CODE_VALUE= PAD.ADDR_COUNTRY_VALUE)),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN ((PAD.ADDR_ZIP_CODE IS NULL OR PAD.ADDR_ZIP_CODE ='') AND (PAD.FOREIGN_POSTAL_CODE IS NOT Null)) THEN 'Y'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; WHEN ((PAD.ADDR_ZIP_CODE IS not Null OR PAD.ADDR_ZIP_CODE  &lt;&gt; '')  AND (PAD.ADDR_STATE_VALUE  IS NOT Null OR PAD.ADDR_STATE_VALUE  &lt;&gt; '') AND (PAD.ADDR_CITY IS NOT Null OR PAD.ADDR_CITY &lt;&gt;'')AND(PAD.ADDR_LINE_1 is not Null OR PAD.ADDR_LINE_1 &lt;&gt; '' )) THEN 'Y'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ELSE 'N'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS ValidAddress    &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; from SGT_BENEFIT_CALCULATION_HEADER BCH&#xD;&#xA;     INNER JOIN SGT_BENEFIT_CALCULATION_DETAIL BCD ON BCH.BENEFIT_CALCULATION_HEADER_ID = BCD.BENEFIT_CALCULATION_HEADER_ID &#xD;&#xA;&#x9; INNER JOIN SGT_PERSON P ON BCH.PERSON_ID = P.PERSON_ID&#xD;&#xA;&#x9; LEFT OUTER JOIN  SGT_PERSON_ADDRESS PAD ON BCH.Person_id = PAD.PERSON_ID AND PAD.END_DATE is null&#xD;&#xA;&#x9;left JOIN SGS_CODE_VALUE CV ON PAD.ADDR_COUNTRY_ID = CV.CODE_ID  AND CV.CODE_VALUE= PAD.ADDR_COUNTRY_VALUE&#xD;&#xA; --- WHERE BCH.CREATED_BY =  '[BATCH_87_15307]'  AND BCD.PLAN_ID = 2 &#xD;&#xA;  WHERE BCH.CREATED_BY =  @BatchUserId  AND BCD.PLAN_ID = 2 &#xD;&#xA;  Order by P.MPI_PERSON_ID">
      <parameters>
        <parameter ID="@BatchUserId" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetCaseAnalyst" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT A.USER_SERIAL_ID AS ANALYST_ID, (A.FIRST_NAME +' '+ A.LAST_NAME)AS ANALYSTNAME &#xD;&#xA;FROM SGS_USER A, SGS_USER_ROLES B&#xD;&#xA;WHERE A.USER_SERIAL_ID = B.USER_SERIAL_ID AND B.ROLE_ID =98&#xD;&#xA;AND A.END_DATE is null&#xD;&#xA;ORDER BY A.FIRST_NAME">
      <parameters />
    </query>
    <query ID="InsertPersonsCaseAnalyst" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;INSERT INTO [OPUS].[dbo].[SGT_PERSON_CASE_ANALYST](PERSON_ID,ANALYST_ID,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)&#xD;&#xA;VALUES (@PERSON_ID,@USERID,@MODIFIEDBY,GETDATE(),@MODIFIEDBY,GETDATE(),1)">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
        <parameter ID="@USERID" sfwDataType="int" />
        <parameter ID="@MODIFIEDBY" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetCaseAnalystById" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="  SELECT MAX(PCA.PERSON_CASE_ANALYST_ID)PERSON_CASE_ANALYST_ID, PCA.ANALYST_ID FROM [OPUS].[dbo].[SGT_PERSON_CASE_ANALYST] PCA&#xD;&#xA;  INNER JOIN SGS_USER U ON PCA.ANALYST_ID = U.USER_SERIAL_ID &#xD;&#xA;  WHERE PCA.PERSON_ID = @PERSON_ID AND U.END_DATE is null&#xD;&#xA;  GROUP BY PCA.ANALYST_ID,U.END_DATE ">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetMDOption" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="   SELECT  MD_Option_ID,DESCRIPTION as Md_description FROM [OPUS].[dbo].[SGT_MD_OPTION_AGE] WHERE END_DATE is null ORDER BY MD_Option_ID&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetMDAgeById" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT P.DATE_OF_BIRTH, ISNULL(P.MD_AGE_OPT_ID,0)MD_AGE_OPT_ID,MD.MD_AGE FROM SGT_PERSON P&#xD;&#xA;LEFT OUTER JOIN SGT_MD_OPTION_AGE MD ON P.MD_AGE_OPT_ID = MD.[MD_Option_ID]&#xD;&#xA;WHERE P.PERSON_ID  = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetParticipantValidAddressforRetirementWorkshop" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" &#xD;&#xA;SELECT  person_identity AS PERSON_ID, MPI_PERSON_ID,ValidAddress,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE From(&#xD;&#xA;SELECT &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a.person_id AS person_identity,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a.MPI_PERSON_ID, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a.FIRST_NAME + ' ' + a.LAST_NAME as NAME, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;A.DATE_OF_DEATH,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.END_DATE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_LINE_1,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_LINE_2,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_CITY,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.ADDR_STATE_VALUE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN ((PAD.ADDR_ZIP_CODE IS NULL OR PAD.ADDR_ZIP_CODE ='') AND PAD.FOREIGN_PROVINCE IS NOT Null OR  PAD.FOREIGN_POSTAL_CODE IS NOT Null) THEN PAD.FOREIGN_POSTAL_CODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; WHEN (PAD.ADDR_ZIP_CODE IS not Null) THEN PAD.ADDR_ZIP_CODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS ADDR_ZIP_CODE,  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.FOREIGN_PROVINCE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PAD.FOREIGN_POSTAL_CODE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN ((PAD.ADDR_ZIP_CODE IS NULL OR PAD.ADDR_ZIP_CODE ='') AND (PAD.FOREIGN_POSTAL_CODE IS NOT Null)) THEN 'Y'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; WHEN (PAD.ADDR_ZIP_CODE IS not Null  AND (PAD.ADDR_STATE_VALUE  IS NOT Null OR PAD.ADDR_STATE_VALUE  &lt;&gt; '') AND (PAD.ADDR_CITY IS NOT Null OR PAD.ADDR_CITY &lt;&gt;'')AND(PAD.ADDR_LINE_1 is not Null OR PAD.ADDR_LINE_1 &lt;&gt; '' )) THEN 'Y'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ELSE 'N'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END AS ValidAddress   &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;FROM SGT_PERSON a&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN sgt_person_account b on a.person_id = b.person_id and b.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;&#x9;Left outer Join  SGT_PERSON_ADDRESS PAD ON a.Person_id = PAD.PERSON_ID AND PAD.END_DATE is null&#xD;&#xA;&#x9;&#x9;&#x9;INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY c on b.person_account_id = c.person_account_id &#xD;&#xA;&#x9;&#x9;&#x9;--INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION d on c.person_account_id = d.person_account_id &#xD;&#xA;&#x9;&#x9;&#x9;WHERE a.DATE_OF_DEATH is null   AND a.MPI_PERSON_ID = @MPI_PERSON_ID&#xD;&#xA;&#x9;&#x9;&#x9;GROUP BY a.person_id, A.MPI_PERSON_ID, A.FIRST_NAME, A.LAST_NAME, A.DATE_OF_DEATH,PAD.END_DATE, PAD.ADDR_LINE_1,PAD.ADDR_LINE_2,PAD.ADDR_CITY,PAD.ADDR_STATE_VALUE, PAD.ADDR_ZIP_CODE, PAD.FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE &#xD;&#xA;&#x9;&#x9;&#x9;--HAVING SUM(ISNULL(D.EE_CONTRIBUTION_AMOUNT,0) + ISNULL(D.EE_INT_AMOUNT,0) + ISNULL(D.UVHP_AMOUNT,0) + ISNULL(D.UVHP_INT_AMOUNT,0)) &gt; 0&#xD;&#xA;&#xD;&#xA;) B &#xD;&#xA;Order by B.MPI_PERSON_ID">
      <parameters>
        <parameter ID="@MPI_PERSON_ID" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetLocalDeathReportList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  &#xD;&#xA; DISTINCT SP.PERSON_ID&#xD;&#xA; , SP.LAST_NAME&#xD;&#xA; , SP.FIRST_NAME&#xD;&#xA; , SUBSTRING(dbo.fn_GET_DECRYPTED_TEXT(SSN),6,9)AS SS4&#xD;&#xA; , dbo.fn_GET_DECRYPTED_TEXT(SP.SSN) AS DECRYPTED_SSN&#xD;&#xA; , SP.DATE_OF_DEATH&#xD;&#xA; ,FORMAT (DN.CREATED_DATE, 'MM/dd/yyyy') AS DEATH_REPORTED_DATE&#xD;&#xA; , ABS(DATEDIFF(DAY,dbo.fn_GET_DECRYPTED_VALUE(SP.DATE_OF_BIRTH),SP.DATE_OF_DEATH)/365) AS AGE&#xD;&#xA; , CASE WHEN (SBA.BENEFIT_TYPE_VALUE = 'DSBL' OR SBA.BENEFIT_TYPE_VALUE = 'RTMT')&#xD;&#xA;   AND SBA.APPLICATION_STATUS_VALUE = 'APPR' THEN 'R' &#xD;&#xA;   WHEN SBA.BENEFIT_APPLICATION_ID IS NULL THEN 'A' END AS STATUS&#xD;&#xA;  FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA; INNER JOIN SGT_DEATH_NOTIFICATION DN ON SP.PERSON_ID = DN.PERSON_ID&#xD;&#xA;                                         AND DN.DEATH_NOTIFICATION_ID = &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; (SELECT MAX(DEATH_NOTIFICATION_ID) from SGT_DEATH_NOTIFICATION WHERE PERSON_ID = SP.PERSON_ID)&#xD;&#xA;&#xD;&#xA; LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBA.PERSON_ID = SP.PERSON_ID&#xD;&#xA; AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA; AND SBA.BENEFIT_APPLICATION_ID = (SELECT TOP 1 BA.BENEFIT_APPLICATION_ID FROM SGT_BENEFIT_APPLICATION BA WITH(NOLOCK) &#xD;&#xA;         WHERE BA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;         AND (BA.BENEFIT_TYPE_VALUE = 'RTMT' OR BA.BENEFIT_TYPE_VALUE = 'DSBL'))&#xD;&#xA;WHERE SP.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND CONVERT(DATETIME,CONVERT(VARCHAR,dbo.fn_GET_DECRYPTED_VALUE(SP.DATE_OF_BIRTH),109) ,110) &lt;&gt; '01/01/1753'&#xD;&#xA;AND SP.DATE_OF_DEATH &gt;= @FROM and SP.DATE_OF_DEATH &lt;=@To --AND UN.LocalNumber = 700&#xD;&#xA;AND SPA.BENEFECIARY_OF_PERSON_ID IS NULL &#xD;&#xA;AND SPA.BENEFECIARY_PERSON_ID IS NULL">
      <parameters>
        <parameter ID="@FROM" sfwDataType="DateTime" />
        <parameter ID="@To" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadLocalNumbers" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select distinct LocalNumber AS LocalId, CAST(LocalNumber AS varchar(5)) AS LocalNumber FROM [Pillars].[dbo].[Unions]">
      <parameters />
    </query>
    <query ID="GETUnionCodeandLocalNumber" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select LocalNumber, UnionCode,Name AS UNION_CODE_DESC FROM [Pillars].[dbo].[Unions] where UnionCode = @UnionCode">
      <parameters>
        <parameter ID="@UnionCode" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetLocalRetireelistbyDateRange" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT &#xD;&#xA;&#x9;   SP.MPI_PERSON_ID&#xD;&#xA;&#x9; ,SP.DATE_OF_BIRTH&#xD;&#xA;&#x9; , SP.LAST_NAME AS PAYEE_LAST_NAME&#xD;&#xA;&#x9; , SP.FIRST_NAME AS PAYEE_FIRST_NAME&#xD;&#xA;&#x9; , SBA.RETIREMENT_DATE&#xD;&#xA;&#x9; , CASE WHEN SBA.RETIREMENT_DATE &lt; @PAYMENTDATE THEN 'Yes' ELSE '' END AS RETRO&#xD;&#xA;&#x9; , CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL THEN 'Disability - Conversion'&#xD;&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(SBA.CONVERTED_MIN_DISTRIBUTION_FLAG,'N') = 'Y' THEN 'MD - RD Conversion'&#xD;&#xA;&#x9;&#x9;&#x9;WHEN ISNULL(SBA.MIN_DISTRIBUTION_FLAG,'N') = 'Y' THEN 'Minimum Distribtion'&#xD;&#xA;&#x9;&#x9;&#x9;ELSE  SCV.DESCRIPTION END AS RETIREMENT_TYPE&#xD;&#xA;&#x9; , SUBSTRING(dbo.fn_GET_DECRYPTED_TEXT(SP.SSN),6,9) AS SS4&#xD;&#xA;&#x9; , @PAYMENTDATE AS PAYMENTDATE&#xD;&#xA;&#x9;-- ,PHH.PAYMENT_DATE&#xD;&#xA;&#x9; , dbo.fn_GET_DECRYPTED_TEXT(SP.SSN) AS DECRYPTED_SSN&#xD;&#xA;&#x9; , UNIONCODE = PILLARS.dbo.[fn_GetTrueUnionBy_SSN_N_Date_OldWay_OPUS] ( SP.SSN, DATEADD(YEAR, -1, @PAYMENTDATE),@PAYMENTDATE1 )&#xD;&#xA;&#x9; INTO #TEMP&#xD;&#xA;&#x9; FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPA.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE SPA.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;&#x9;INNER JOIN SGT_PERSON SP ON SPA.PERSON_ID = SP.PERSON_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID AND XR.PLAN_ID &lt;&gt; 1&#xD;&#xA;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SPA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION SBA ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID&#xD;&#xA;&#x9;INNER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SPA.BENEFIT_ACCOUNT_TYPE_ID = SCV.CODE_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = SCV.CODE_VALUE &#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID AND PHH.PAYMENT_DATE &gt;= @PAYMENTDATE and PHH.PAYMENT_DATE &lt;= @PAYMENTDATE1&#xD;&#xA;&#x9;LEFT OUTER JOIN SGT_PAYMENT_HISTORY_HEADER PHH1 ON PHH.PAYEE_ACCOUNT_ID = PHH1.PAYEE_ACCOUNT_ID AND PHH1.PAYMENT_DATE &lt; @PAYMENTDATE&#xD;&#xA;&#x9;WHERE ISNULL(RETIREE_INCR_FLAG,'N') = 'N' AND PHH1.PAYMENT_HISTORY_HEADER_ID IS NULL &#xD;&#xA;&#x9;AND SPAS.STATUS_VALUE &lt;&gt; 'CNCL' AND PHH.PAYMENT_DATE &gt;= @PAYMENTDATE and PHH.PAYMENT_DATE &lt;= @PAYMENTDATE1&#xD;&#xA;&#x9;AND ISNULL(SPA.ACCOUNT_RELATION_VALUE,'') = 'PART' AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' &#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;SELECT &#xD;&#xA;&#x9;    TEMP.MPI_PERSON_ID&#xD;&#xA;&#x9;,YEAR(TEMP.DATE_OF_BIRTH) AS YEAR_OF_BIRTH&#xD;&#xA;&#x9;, (TEMP.PAYEE_LAST_NAME +' '+TEMP.PAYEE_FIRST_NAME) AS NAME&#xD;&#xA;&#x9;, TEMP.RETRO&#xD;&#xA;&#x9;, TEMP.RETIREMENT_DATE&#xD;&#xA;&#x9;, TEMP.RETIREMENT_TYPE&#xD;&#xA;&#x9;, TEMP.SS4&#xD;&#xA;&#x9;, TEMP.PAYMENTDATE&#xD;&#xA;&#x9;, TEMP.DECRYPTED_SSN&#xD;&#xA;&#x9;,u.UnionCode&#xD;&#xA;&#x9;,UNIONNAME =  u.Name&#xD;&#xA;&#x9; ,u.LocalNumber&#xD;&#xA;&#x9;FROM #TEMP TEMP&#xD;&#xA;&#x9;LEFT OUTER JOIN PILLARS.dbo.Unions u WITH (NOLOCK) on TEMP.UnionCode = u.UnionCode&#xD;&#xA;&#x9;ORDER BY TEMP.PAYEE_LAST_NAME, TEMP.PAYEE_FIRST_NAME, SS4&#xD;&#xA;&#xD;&#xA;&#x9;DROP TABLE #TEMP">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@PAYMENTDATE1" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="GetCommunicationPreferences" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT [PERSON_COMMUNICATION_PREFERENCES_ID], [PERSON_ID], [REGISTERED_EMAIL_ADDRESS],[IS_PAPER_STATEMENT],&#xD;&#xA;[IS_PAPER_SPD],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ]&#xD;&#xA;FROM [SGT_PERSON_COMMUNICATION_PREFERENCES] WHERE PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPersonDocumentUploadFlag" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT ISNULL(DOCUMENT_UPLOAD_FLAG,'N') AS DOCUMENT_UPLOAD_FLAG FROM SGT_PERSON WHERE PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetIsPaperStatementFlagHistory" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PERSON_COMMUNICATION_PREFERENCES_HIST_ID, P.PERSON_ID, [REGISTERED_EMAIL_ADDRESS],[IS_PAPER_STATEMENT],&#xD;&#xA;CPH.[CREATED_BY], CPH.[CREATED_DATE], CPH.LOG_BY AS MODIFIED_BY, CPH.[LOG_DATE] AS MODIFIED_DATE&#xD;&#xA;FROM SGT_PERSON_COMMUNICATION_PREFERENCES_HIST CPH INNER JOIN SGT_PERSON_BASE P ON CPH.PERSON_ID = P.PERSON_ID&#xD;&#xA;WHERE CPH.PERSON_ID = @PERSON_ID&#xD;&#xA;ORDER BY PERSON_COMMUNICATION_PREFERENCES_HIST_ID DESC">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetIsPaperStatementFlag" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT P.MPI_PERSON_ID, [REGISTERED_EMAIL_ADDRESS],[IS_PAPER_STATEMENT],&#xD;&#xA;CPH.[CREATED_BY], CPH.[CREATED_DATE], CPH.MODIFIED_BY, CPH.MODIFIED_DATE&#xD;&#xA;FROM SGT_PERSON_COMMUNICATION_PREFERENCES CPH INNER JOIN SGT_PERSON_BASE P ON CPH.PERSON_ID = P.PERSON_ID&#xD;&#xA;WHERE CPH.PERSON_ID = @PERSON_ID&#xD;&#xA;ORDER BY PERSON_COMMUNICATION_PREFERENCES_ID DESC">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetStatementParticipantsWithStatementFlag" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT P.MPI_PERSON_ID, p.FIRST_NAME, p.LAST_NAME, [REGISTERED_EMAIL_ADDRESS], [IS_PAPER_STATEMENT], CPH.MODIFIED_DATE AS LAST_UPDATED&#xD;&#xA;FROM SGT_ANNUAL_STATEMENT_BATCH_DATA STMT (nolock) &#xD;&#xA;INNER JOIN SGT_PERSON P (nolock) ON STMT.PERSON_ID = P.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_COMMUNICATION_PREFERENCES CPH ON STMT.PERSON_ID = CPH.PERSON_ID&#xD;&#xA;WHERE COMPUTATIONAL_YEAR = @COMPUTATIONAL_YEAR&#xD;&#xA;and ((@TempTable = 1 and P.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)">
      <parameters>
        <parameter ID="@COMPUTATIONAL_YEAR" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadBenefitElectionPlanDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT Distinct PER.PERSON_ID,p.PLAN_ID AS iintPlan_id,p.PLAN_CODE AS istrPlanCode,p.PLAN_NAME AS istrPlanDescription FROM SGT_PERSON_ACCOUNT as pa WITH(NOLOCK)&#xD;&#xA;INNER join SGT_PLAN AS P WITH(NOLOCK) on P.PLAN_ID=PA.PLAN_ID&#xD;&#xA;inner join SGT_PERSON Per on pa.PERSON_ID=Per.PERSON_ID&#xD;&#xA;left outer join SGT_PERSON_ACCOUNT_ELIGIBILITY pae on pae.PERSON_ACCOUNT_ID=pa.PERSON_ACCOUNT_ID&#xD;&#xA;where pa.PERSON_ID=@Person_ID and P.PLAN_CODE &lt;&gt; 'LIFE'&#xD;&#xA;and case when p.PLAN_ID &lt;= 2 then 1 else 2 end = case when @PlanId &lt;= 2 then 1 else 2 end&#xD;&#xA;Order By p.PLAN_NAME desc">
      <parameters>
        <parameter ID="@Person_ID" sfwDataType="int" />
        <parameter ID="@PlanId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPlanByPersonId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT Distinct p.PLAN_ID,p.PLAN_NAME FROM SGT_PERSON_ACCOUNT as pa WITH(NOLOCK) &#xD;&#xA;INNER join SGT_PLAN AS P WITH(NOLOCK) on P.PLAN_ID=PA.PLAN_ID&#xD;&#xA;inner join SGT_PERSON Per on pa.PERSON_ID=Per.PERSON_ID&#xD;&#xA;left outer join SGT_PERSON_ACCOUNT_ELIGIBILITY pae on pae.PERSON_ACCOUNT_ID=pa.PERSON_ACCOUNT_ID &#xD;&#xA;where pa.PERSON_ID=@Person_ID AND P.PLAN_ID not in (1,9) Order By p.PLAN_NAME desc">
      <parameters>
        <parameter ID="@Person_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetLaserFiche" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SETTING_VALUE FROM [OPUS].[dbo].[SGS_SYSTEM_SETTINGS]&#xD;&#xA; WHERE SETTING_NAME='LaserficheURL'">
      <parameters />
    </query>
    <query ID="GetWebExFlag" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SETTING_VALUE FROM [OPUS].[dbo].[SGS_SYSTEM_SETTINGS]&#xD;&#xA;WHERE SETTING_NAME = 'WebEx'">
      <parameters />
    </query>
    <query ID="GetBPMDetailsforPerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP 100&#xD;&#xA;saih.* ,&#xD;&#xA;SAIH.ACTIVITY_INSTANCE_ID as ActualActivityInstance,&#xD;&#xA;SP.NAME AS PROCESS_NAME,&#xD;&#xA;CV.DESCRIPTION AS STATUS_DESCRIPTION,&#xD;&#xA;SAIH.START_TIME AS START_DATE,&#xD;&#xA;SAIH.END_TIME AS END_DATE,&#xD;&#xA;SAIH.ACTION_USER_ID AS UserId,&#xD;&#xA;SA.NAME AS DISPLAY_NAME,&#xD;&#xA;CVSO.DESCRIPTION AS Source_Description,&#xD;&#xA;--SPI.contact_ticket_id as contact_ticket_id,&#xD;&#xA;SP.DESCRIPTION as Process_Description&#xD;&#xA;FROM SGW_BPM_ACTIVITY_INST_HISTORY SAIH&#xD;&#xA;INNER JOIN SGW_BPM_ACTIVITY_INSTANCE SAI ON SAIH.ACTIVITY_INSTANCE_ID = SAI.ACTIVITY_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID and SAI.ACTIVITY_INSTANCE_ID=(select Max(ACTIVITY_INSTANCE_ID) from SGW_BPM_ACTIVITY_INSTANCE where PROCESS_INSTANCE_ID=spi.PROCESS_INSTANCE_ID)&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE CAS ON CAS.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_ACTIVITY SA ON SAI.ACTIVITY_ID=SA.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP on SA.PROCESS_ID=SP.PROCESS_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID=SAIH.STATUS_ID AND CV.CODE_VALUE=SAIH.STATUS_VALUE&#xD;&#xA;--LEFT JOIN sgt_contact_ticket sct on SPI.CONTACT_TICKET_ID = sct.CONTACT_TICKET_ID -- some cases request will be deleted&#xD;&#xA;LEFT JOIN SGW_WORKFLOW_REQUEST SWR ON CAS.REQUEST_ID = SWR.WORKFLOW_REQUEST_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CVSO ON CVSO.CODE_ID=SWR.SOURCE_ID AND CVSO.CODE_VALUE=SWR.SOURCE_VALUE&#xD;&#xA;WHERE CAS.PERSON_ID=@Person_ID&#xD;&#xA;ORDER BY START_TIME DESC">
      <parameters>
        <parameter ID="@Person_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CancelButtonVisibility" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; DISTINCT SBA.*,&#xA;&#x9;SP.MPI_PERSON_ID AS MPI_PERSON_ID,&#xA;&#x9;SP.FIRST_NAME,&#xA;&#x9;SP.LAST_NAME,&#xA;&#x9;SP.SSN,&#xA;&#x9;ISNULL(SP.VIP_FLAG,&#xA;&#x9;'N') AS istrRelativeVipFlag,&#xA;&#x9;SP1.MPI_PERSON_ID AS SURVIVOR_MPI_ID,&#xA;&#x9;SO.MPI_ORG_ID,&#xA;&#x9;SP1.LAST_NAME SP1LAST,&#xA;&#x9;SP1.FIRST_NAME SP1First,&#xA;&#x9;SO.ORG_NAME,&#xA;&#x9;SPAP.MPI_PERSON_ID,&#xA;&#x9;SPAP.FIRST_NAME,&#xA;&#x9;SPAP.LAST_NAME ,&#xA;&#x9;PL.PLAN_NAME AS istrPlanDescription ,&#xA;&#x9;CASE WHEN SBAD.JOINT_ANNUITANT_ID IS NULL THEN rtrim(SP1.FIRST_NAME) +' '+rtrim(SP1.LAST_NAME) ELSE rtrim(SP2.FIRST_NAME) +' '+rtrim(SP2.LAST_NAME) END AS istrSurvivor ,&#xA;&#x9;CASE WHEN SBAD.L52_SPL_ACC_FLAG = 'Y' THEN 'Local-52 Special Account'   WHEN SBAD.L161_SPL_ACC_FLAG = 'Y' THEN 'Local-161 Special Account' ELSE '' END AS istrFunds &#xA;FROM&#xA;&#x9; SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK)  INNER  &#xA;&#x9; JOIN SGT_PERSON SP WITH(NOLOCK) &#xA;&#x9; ON SP.PERSON_ID = SBA.PERSON_ID   &#xA;&#x9; LEFT OUTER JOIN   SGT_PERSON SPAP WITH(NOLOCK) &#xA;&#x9; ON SPAP.PERSON_ID = SBA.ALTERNATE_PAYEE_ID  &#xA;&#x9; LEFT OUTER JOIN   SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) &#xA;&#x9; ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID  &#xA;&#x9; LEFT OUTER JOIN   SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) &#xA;&#x9; ON SPBX.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID  &#xA;&#x9; LEFT OUTER JOIN   SGT_PLAN PL WITH(NOLOCK)&#xA;&#x9; ON SPBX.PLAN_ID = PL.PLAN_ID  &#xA;&#x9; LEFT OUTER JOIN   SGT_PERSON SP1 WITH(NOLOCK)&#xA;&#x9; ON SBAD.SURVIVOR_ID = SP1.PERSON_ID  &#xA;&#x9; LEFT OUTER JOIN   SGT_PERSON SP2 WITH(NOLOCK)&#xA;&#x9; ON SBAD.JOINT_ANNUITANT_ID = SP2.PERSON_ID  &#xA;&#x9; LEFT OUTER JOIN   SGT_ORGANIZATION SO WITH(NOLOCK)&#xA;&#x9; ON SBAD.ORGANIZATION_ID = SO.ORG_ID &#xA;WHERE&#xA;&#x9; SP.PERSON_ID = @PERSON_ID AND&#xA;&#x9; SBA.benefit_type_value = 'RTMT' AND&#xA;&#x9; application_status_value NOT IN('DEND',&#xA;&#x9;'CANC')">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
  </queries>
  <attributes>
    <attribute sfwValue="person_id" sfwType="Column" sfwKeyNo="1" sfwIsIdentity="True" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="PersonId" sfwIsSequence="False" sfwCaption="ID" />
    <attribute sfwValue="mpi_person_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="20" sfwIsNull="False" ID="MpiPersonId" sfwIsSequence="False" sfwCaption="Mpi Person Id" />
    <attribute sfwValue="first_name" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="FirstName" sfwIsSequence="False" sfwCaption="First Name" />
    <attribute sfwValue="middle_name" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="MiddleName" sfwIsSequence="False" sfwCaption="Middle Name" />
    <attribute sfwValue="last_name" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="LastName" sfwIsSequence="False" sfwCaption="Last Name" />
    <attribute sfwType="Description" ID="NamePrefixDescription" sfwCaption="Name Prefix" sfwValue="name_prefix_description" />
    <attribute sfwValue="name_prefix_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="NamePrefixId" sfwCodeID="6025" sfwIsSequence="False" sfwCaption="Name Prefix" />
    <attribute sfwValue="name_prefix_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="NamePrefixValue" sfwIsSequence="False" sfwCaption="Name Prefix" />
    <attribute sfwValue="date_of_birth" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="DateOfBirth" sfwIsSequence="False" sfwCaption="Date Of Birth" />
    <attribute sfwValue="date_of_death" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="DateOfDeath" sfwIsSequence="False" sfwCaption="Date Of Death" />
    <attribute sfwValue="ssn" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="256" sfwIsNull="True" ID="Ssn" sfwIsSequence="False" sfwCaption="Ssn" />
    <attribute sfwValue="ethnicity" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="Ethnicity" sfwIsSequence="False" sfwCaption="Ethnicity" />
    <attribute sfwType="Description" ID="GenderDescription" sfwCaption="Gender" sfwValue="gender_description" />
    <attribute sfwValue="gender_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="GenderId" sfwCodeID="6014" sfwIsSequence="False" sfwCaption="Gender" />
    <attribute sfwValue="gender_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="GenderValue" sfwIsSequence="False" sfwCaption="Gender" />
    <attribute sfwType="Description" ID="MaritalStatusDescription" sfwCaption="Marital Status" sfwValue="marital_status_description" />
    <attribute sfwValue="marital_status_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="MaritalStatusId" sfwCodeID="6015" sfwIsSequence="False" sfwCaption="Marital Status" />
    <attribute sfwValue="marital_status_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="MaritalStatusValue" sfwIsSequence="False" sfwCaption="Marital Status" />
    <attribute sfwValue="home_phone_no" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="HomePhoneNo" sfwIsSequence="False" sfwCaption="Home Phone No" />
    <attribute sfwValue="work_phone_no" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="WorkPhoneNo" sfwIsSequence="False" sfwCaption="Work Phone No" />
    <attribute sfwValue="cell_phone_no" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="CellPhoneNo" sfwIsSequence="False" sfwCaption="Cell Phone No" />
    <attribute sfwValue="extension" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="Extension" sfwIsSequence="False" sfwCaption="Extension" />
    <attribute sfwValue="fax_no" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="FaxNo" sfwIsSequence="False" sfwCaption="Fax No" />
    <attribute sfwValue="pager" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="Pager" sfwIsSequence="False" sfwCaption="Pager" />
    <attribute sfwValue="email_address_1" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="70" sfwIsNull="True" ID="EmailAddress1" sfwIsSequence="False" sfwCaption="Email Address 1" />
    <attribute sfwValue="email_address_2" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="70" sfwIsNull="True" ID="EmailAddress2" sfwIsSequence="False" sfwCaption="Email Address 2" />
    <attribute sfwType="Description" ID="CommunicationPreferenceDescription" sfwCaption="Communication Preference" sfwValue="communication_preference_description" />
    <attribute sfwValue="communication_preference_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="CommunicationPreferenceId" sfwCodeID="6027" sfwIsSequence="False" sfwCaption="Communication Preference" />
    <attribute sfwValue="communication_preference_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="CommunicationPreferenceValue" sfwIsSequence="False" sfwCaption="Communication Preference" />
    <attribute sfwType="Description" ID="StatusDescription" sfwCaption="Status" sfwValue="status_description" />
    <attribute sfwValue="status_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="StatusId" sfwCodeID="10" sfwIsSequence="False" sfwCaption="Status" />
    <attribute sfwValue="status_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="StatusValue" sfwIsSequence="False" sfwCaption="Status" />
    <attribute sfwValue="created_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="False" ID="CreatedBy" sfwIsSequence="False" sfwCaption="Created By" />
    <attribute sfwValue="created_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="False" ID="CreatedDate" sfwIsSequence="False" sfwCaption="Created Date" />
    <attribute sfwValue="modified_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="False" ID="ModifiedBy" sfwIsSequence="False" sfwCaption="Modified By" />
    <attribute sfwValue="modified_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="False" ID="ModifiedDate" sfwIsSequence="False" sfwCaption="Modified Date" />
    <attribute sfwValue="update_seq" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="UpdateSeq" sfwIsSequence="False" sfwCaption="Update Seq" />
    <attribute sfwValue="vip_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="VipFlag" sfwIsSequence="False" sfwCaption="Vip Flag" />
    <attribute sfwValue="name_suffix" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="10" sfwIsNull="True" ID="NameSuffix" sfwIsSequence="False" sfwCaption="Name Suffix" />
    <attribute sfwValue="recalculate_vesting_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="RecalculateVestingFlag" sfwIsSequence="False" sfwCaption="Recalculate Vesting Flag" />
    <attribute sfwValue="health_eligible_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="HealthEligibleFlag" sfwIsSequence="False" sfwCaption="Health Eligible Flag" />
    <attribute sfwValue="pension_eligible_notification_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="PensionEligibleNotificationFlag" sfwIsSequence="False" sfwCaption="Pension Eligible Notification Flag" />
    <attribute sfwValue="is_person_deleted_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="IsPersonDeletedFlag" sfwIsSequence="False" sfwCaption="Is Person Deleted Flag" />
    <attribute sfwValue="suspension_of_benefits_notification_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="SuspensionOfBenefitsNotificationFlag" sfwIsSequence="False" sfwCaption="Suspension Of Benefits Notification Flag" />
    <attribute sfwValue="new_participant_letter_send_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="NewParticipantLetterSendFlag" sfwIsSequence="False" sfwCaption="New Participant Letter Send Flag" />
    <attribute sfwValue="retirement_health_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="RetirementHealthDate" sfwCaption="Retirement Health Date" />
    <attribute sfwValue="md_age_opt_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="MdAgeOptId" sfwCaption="Md Age Opt Id" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtDateofBirth" sfwValue="icdoPerson.idtDateofBirth" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrFullName" sfwValue="icdoPerson.istrFullName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrLast4DigitsofSSN" sfwValue="icdoPerson.istrLast4DigitsofSSN" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecAgeAtEarlyRetirement" sfwValue="icdoPerson.idecAgeAtEarlyRetirement" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecParticipantsAgeAsOfCalculationDate" sfwValue="icdoPerson.idecParticipantsAgeAsOfCalculationDate" />
    <attribute sfwType="Collection" sfwEntity="entCorTracking" ID="lstCorTracking" sfwValue="iclbCorTracking" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRetireeHealthEligibleFlag" sfwValue="icdoPerson.istrRetireeHealthEligibleFlag" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrFullName1" sfwValue="istrFullName" />
    <attribute sfwType="Collection" sfwEntity="entPersonAccountBeneficiary" ID="lstPersonAccountBeneficiary" sfwValue="iclbPersonAccountBeneficiary" />
    <attribute sfwType="Collection" sfwEntity="entPersonDependent" ID="lstPersonDependent" sfwValue="iclbPersonDependent" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMaritalStatus" sfwValue="icdoPerson.istrMaritalStatus" />
    <attribute ID="objPersonAddressForCorr" sfwType="Object" sfwEntity="entPersonAddress" sfwValue="ibusPersonAddressForCorr" />
    <attribute sfwType="Collection" sfwEntity="entPersonContact" ID="lstPersonContact" sfwValue="iclbPersonContact" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPayeeFullName" sfwValue="icdoPerson.istrPayeeFullName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrParticipantFullName" sfwValue="icdoPerson.istrParticipantFullName" />
    <attribute sfwType="Collection" sfwEntity="entPersonAccount" ID="lstPersonAccount" sfwValue="iclbPersonAccount" />
    <attribute sfwType="Collection" sfwEntity="entNotes" ID="lstNotes" sfwValue="iclbNotes" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSSNNonEncrypted" sfwValue="icdoPerson.istrSSNNonEncrypted" />
    <attribute ID="objPersonAddress" sfwType="Object" sfwEntity="entPersonAddress" sfwValue="ibusPersonAddress" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAddressSameAsParticipant" sfwValue="istrAddressSameAsParticipant" />
    <attribute sfwType="Collection" sfwEntity="entPersonAccountRetirementContribution" ID="lstPersonAccountRetirementContribution" sfwValue="iclbPersonAccountRetirementContribution" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecEEContributionAmount" sfwValue="idecEEContributionAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecEEContributionInterest" sfwValue="idecEEContributionInterest" />
    <attribute sfwDataType="string" sfwType="Property" ID="IblnBeneficiary" sfwValue="iblnBeneficiary" />
    <attribute sfwDataType="string" sfwType="Property" ID="IblnParticipant" sfwValue="iblnParticipant" />
    <attribute sfwDataType="string" sfwType="Property" ID="IblnAlternatePayee" sfwValue="iblnAlternatePayee" />
    <attribute sfwDataType="string" sfwType="Property" ID="UnionCode" sfwValue="icdoPerson.UnionCode" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecAge" sfwValue="idecAge" />
    <attribute sfwDataType="int" sfwType="Property" ID="AnalystId" sfwValue="icdoPerson.analyst_id" />
    <attribute sfwDataType="string" sfwType="Property" ID="IblnDependent" sfwValue="iblnDependent" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRetiree" sfwValue="istrRetiree" />
    <attribute sfwType="Collection" sfwEntity="entPersonAddress" ID="lstPersonAddress" sfwValue="iclbPersonAddress" />
    <attribute sfwType="Collection" sfwEntity="entPersonAccountBeneficiary" ID="lstPersonAccountBeneficiaryOf" sfwValue="iclbPersonAccountBeneficiaryOf" />
    <attribute sfwType="Collection" sfwEntity="entPerson" ID="lstDependentOf" sfwValue="iclbDependentOf" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPersonName" sfwValue="icdoPerson.istrPersonName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrRelationship" sfwValue="icdoPerson.istrRelationship" />
    <attribute sfwType="Collection" sfwEntity="entPersonBridgeHours" ID="lstPersonBridgeHours" sfwValue="iclbPersonBridgeHours" />
    <attribute sfwType="Collection" sfwEntity="entPersonSuspendibleMonth" ID="lstPersonSuspendibleMonth" sfwValue="iclbPersonSuspendibleMonth" />
    <attribute sfwType="Collection" sfwEntity="entReturnedMail" ID="lstReturnedMail" sfwValue="iclbReturnedMail" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrMPID" sfwValue="icdoPerson.istrMPID" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSSN" sfwValue="icdoPerson.istrSSN" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPLANCODE" sfwValue="icdoPerson.istrPLANCODE" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSelectedFlag" sfwValue="icdoPerson.istrSelectedFlag" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromSSNChecked" sfwValue="IsFromSSNChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromPrefixNameChecked" sfwValue="IsFromPrefixNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromLastNameChecked" sfwValue="IsFromLastNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromFirstNameChecked" sfwValue="IsFromFirstNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromMiddleNameChecked" sfwValue="IsFromMiddleNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromSuffixNameChecked" sfwValue="IsFromSuffixNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromDOBChecked" sfwValue="IsFromDOBChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromDODChecked" sfwValue="IsFromDODChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsFromAddressChecked" sfwValue="IsFromAddressChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPersonAddress" sfwValue="istrPersonAddress" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecUVHPContributionAmount" sfwValue="idecUVHPContributionAmount" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecUVHPContributionInterest" sfwValue="idecUVHPContributionInterest" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPContributionAmount" sfwValue="idecIAPContributionAmount" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToSSNChecked" sfwValue="IsToSSNChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToPrefixNameChecked" sfwValue="IsToPrefixNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToLastNameChecked" sfwValue="IsToLastNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToFirstNameChecked" sfwValue="IsToFirstNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToMiddleNameChecked" sfwValue="IsToMiddleNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToSuffixNameChecked" sfwValue="IsToSuffixNameChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToDOBChecked" sfwValue="IsToDOBChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToDODChecked" sfwValue="IsToDODChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IsToAddressChecked" sfwValue="IsToAddressChecked" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrEmployerName" sfwValue="icdoPerson.istrEmployerName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrParticipantAddress" sfwValue="icdoPerson.istrParticipantAddress" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNewMergedMPIID" sfwValue="istrNewMergedMPIID" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPersonType" sfwValue="icdoPerson.istrPersonType" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrCurrentDate" sfwValue="istrCurrentDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrFullName11" sfwValue="icdoPerson.istrFullName1" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPreFix" sfwValue="icdoPerson.istrPreFix" />
    <attribute sfwType="CDOCollection" sfwEntity="entDummyWorkData" ID="lstPersonWorkHistory" sfwValue="iclbPersonWorkHistory" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitTypeDescription" sfwValue="istrBenefitTypeDescription" />
    <attribute sfwType="Collection" sfwEntity="entBenefitApplication" ID="lstDocumentsReceived" sfwValue="iclbDocumentsReceived" />
    <attribute sfwType="Object" sfwEntity="entPerson" sfwValue="ibusBeneficiaryPerson" ID="objBeneficiaryPerson" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIsPOA" sfwValue="istrIsPOA" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIsGuardian" sfwValue="istrIsGuardian" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIsConservator" sfwValue="istrIsConservator" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintCurrentYear" sfwValue="iintCurrentYear" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrIsVestedMPI" sfwValue="istrIsVestedMPI" />
    <attribute ID="objAnnualBenefitSummaryOverview" sfwType="Object" sfwEntity="entAnnualBenefitSummaryOverview" sfwValue="ibusAnnualBenefitSummaryOverview" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintVestedYearsMinus5" sfwValue="iintVestedYearsMinus5" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtPeriodEndingDate" sfwValue="idtPeriodEndingDate" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="IdecIAPBalance" sfwValue="idecIAPBalance" />
    <attribute sfwDataType="int" sfwType="Property" ID="IintYearEnd" sfwValue="iintYearEnd" />
    <attribute sfwDataType="int" sfwType="Property" ID="IainthealthEligibleFlag" sfwValue="iainthealthEligibleFlag" />
    <attribute sfwDataType="int" sfwType="Property" ID="LdecHealthQualifiedYears" sfwValue="ldecHealthQualifiedYears" />
    <attribute sfwDataType="decimal" sfwType="Property" ID="LdecHealthQualifiedHours" sfwValue="ldecHealthQualifiedHours" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSixtyDaysPriorDate" sfwValue="istrSixtyDaysPriorDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSpousalFirstName" sfwValue="istrSpousalFirstName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSpousalPrefix" sfwValue="istrSpousalPrefix" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSpousalLastName" sfwValue="istrSpousalLastName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSpousalMiddleName" sfwValue="istrSpousalMiddleName" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrSpousalSSN" sfwValue="istrSpousalSSN" />
    <attribute ID="objPersonCourtContact" sfwType="Object" sfwEntity="entPersonContact" sfwValue="ibusPersonCourtContact" />
    <attribute sfwValue="document_upload_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="DocumentUploadFlag" sfwCaption="Document Upload Flag" />
    <attribute ID="IstrRelativeVipFlag" sfwDataType="string" sfwPrivate="False" sfwValue="icdoPerson.istrRelativeVipFlag" sfwType="Property" />
    <attribute ID="lintNewMergedMPIID" sfwDataType="string" sfwPrivate="False" sfwValue="icdoPerson.iintNewMergedMPIID" sfwType="Property" />
    <attribute sfwValue="registered_email_address" sfwType="Property" sfwDataType="string" ID="RegisteredEmailAddress" sfwCaption="Registered Email Address" />
    <attribute sfwValue="is_paper_statement" sfwType="Property" sfwDataType="string" ID="IsPaperStatement" sfwCaption="Is Paper Statement" />
    <attribute sfwType="Collection" sfwEntity="entPersonCommunicationPreferences" ID="lstPersonCommunicationPreferences" sfwValue="iclbPersonCommunicationPreferences" />
    <attribute ID="IstrMPIPersonID" sfwDataType="string" sfwPrivate="False" sfwValue="icdoPerson.istrMPIPersonID" sfwType="Property" />
    <attribute sfwValue="adverse_interest_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="AdverseInterestFlag" sfwIsSequence="False" sfwCaption="Adverse Interest Flag" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAdverseInterestFlag" sfwValue="icdoPerson.istrAdverseInterestFlag" />
  </attributes>
  <objectmethods>
    <method ID="GetAnalystNames" sfwReturnType="Collection" sfwObjectID="cdoPerson" sfwEntity="entIAPAllocationDetailPersonOverview" />
    <method ID="GetMDOption" sfwReturnType="Collection" sfwObjectID="cdoPerson" sfwEntity="entIAPAllocationDetailPersonOverview" />
    <method ID="btn_DeleteDependent" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aintPersonRelationshipId" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="LoadPersonBridgedService" sfwReturnType="Void" />
    <method ID="SavePersonCommPref" sfwReturnType="ArrayList" />
    <method ID="OnBpmSubmit" sfwReturnType="ArrayList">
      <parameters />
    </method>
    <method ID="BpmSubmit" sfwReturnType="ArrayList" />
    <method ID="BtnSubmitClick" sfwReturnType="Void">
      <parameters>
        <parameter ID="aintPersonId" sfwDataType="int" />
      </parameters>
    </method>
  </objectmethods>
  <methods />
  <lifecycle />
  <ExtraFields />
</entity>