<entity ID="entDataExtractionBatchInfo" sfwMainCDO="icdoDataExtractionBatchInfo" sfwType="BusinessRule" sfwActive="True" sfwStatus="Review" sfwObjectID="busDataExtractionBatchInfo" sfwTableName="sgt_data_extraction_batch_info" sfwView="False" sfwDataObjectID="doDataExtractionBatchInfo">
  <queries>
    <query ID="GetYearEndDataExtractionInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT SP.PERSON_ID,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SP.SSN AS PERSON_SSN,&#xD;&#xA;'ACTIVE_DCSD' AS CAT_TYPE,&#xD;&#xA;SP.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;NULL AS BENEFICIARY_ID,&#xD;&#xA;NULL AS BENEFICIARY_FLAG,&#xD;&#xA;NULL AS BENEFICIARY_NAME ,&#xD;&#xA;NULL AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;NULL AS PAYEE_ACCOUNT_ID,&#xD;&#xA;'DCSD' AS STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;NULL AS BENEFIT_ACCOUNT_TYPE_VALUE, --SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;NULL AS RETIREMENT_TYPE_ID,  --SPACC.RETIREMENT_TYPE_ID,&#xD;&#xA;NULL AS RETIREMENT_TYPE_VALUE,  --SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;NULL AS BENEFIT_OPTION_CODE_VALUE,  --SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;NULL AS BENEFIT_BEGIN_DATE,   --SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;NULL AS BENEFIT_END_DATE ,   --SPACC.BENEFIT_END_DATE ,&#xD;&#xA;NULL AS TERM_CERTAIN_END_DATE,   --SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;NULL AS FUNDS_TYPE_VALUE,&#xD;&#xA;NULL AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;NULL AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;NULL AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;NULL AS GROSS_AMOUNT,&#xD;&#xA;NULL AS AMOUNT_PAID,                                 &#xD;&#xA;NULL AS REEMPLOYED_FLAG,  --SPACC.REEMPLOYED_FLAG,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;NULL AS JOINT_ANNUITANT_ID, NULL AS FIRST_NAME , NULL AS LAST_NAME ,&#xD;&#xA;NULL AS SSN, NULL AS GENDER_ID, NULL AS GENDER_VALUE, NULL AS DATE_OF_BIRTH, NULL AS DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;NULL AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, NULL AS IS_DISABILITY_CONVERSION&#xD;&#xA;, NULL AS IS_CONVERTED_FROM_POPUP&#xD;&#xA;--, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;--&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;--, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;--       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.BENEFIT_BEGIN_DATE) = @EXECUTIONYEAR &#xD;&#xA;--&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM&#xD;&#xA;SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION SDN ON SDN.PERSON_ID = SP.PERSON_ID AND SDN.DEATH_NOTIFICATION_ID = (SELECT TOP 1 Q.DEATH_NOTIFICATION_ID FROM SGT_DEATH_NOTIFICATION Q WHERE Q.PERSON_ID = SDN.PERSON_ID ORDER BY DEATH_NOTIFICATION_ID DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N')                &#xD;&#xA;--LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;--LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;-- AND ((PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) &#xD;&#xA;-- AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;-- AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;-- OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;--LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPADD ON SPADD.PERSON_ID = SP.PERSON_ID &#xD;&#xA; AND  SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC ) &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL' &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID  AND SPA.PLAN_ID = 2                 &#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;--LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;--LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;WHERE SP.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;--AND (((SDN.DEATH_NOTIFICATION_ID IS NULL) OR (SDN.DEATH_NOTIFICATION_ID IS NOT NULL AND SDN.DEATH_NOTIFICATION_STATUS_VALUE = 'CRTF' )) /* AND &#xD;&#xA;--YEAR(SP.DATE_OF_DEATH) &lt;= @EXECUTIONYEAR */ )  --71411 item 2  --Ticket 106895 item 2&#xD;&#xA;AND SP.SSN IS NOT NULL AND SPBA.PAYEE_BENEFIT_ACCOUNT_ID IS NULL AND SPACC.PAYEE_ACCOUNT_ID IS NULL&#xD;&#xA;AND SPA.PLAN_ID = 2   &#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')          &#xD;&#xA;--GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;--SP.DATE_OF_DEATH,SPACC.PAYEE_ACCOUNT_ID, SPADD.ADDR_STATE_VALUE,&#xD;&#xA;--SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, SPACC.RETIREMENT_TYPE_ID, SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_BEGIN_DATE, SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,     &#xD;&#xA;--SP.MPI_PERSON_ID, SPBX.PLAN_ID,&#xD;&#xA;--SPACC.REEMPLOYED_FLAG, SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPA.PERSON_ACCOUNT_ID, SPA.PLAN_ID&#xD;&#xA;--71411&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;DISTINCT SP.PERSON_ID,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SP.SSN AS PERSON_SSN,&#xD;&#xA;'RETIREE_AND_ACTIVE' AS CAT_TYPE,&#xD;&#xA;SP.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;NULL AS BENEFICIARY_ID,&#xD;&#xA;NULL AS BENEFICIARY_FLAG,&#xD;&#xA;NULL AS BENEFICIARY_NAME ,&#xD;&#xA;NULL AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.PAYEE_ACCOUNT_ID ELSE NULL END PAYEE_ACCOUNT_ID,&#xD;&#xA;CASE WHEN SPA.STATUS_VALUE ='RETR' AND SP.DATE_OF_DEATH IS NULL AND (SPACC.PAYEE_ACCOUNT_ID IS NULL OR (SPAS.STATUS_VALUE IS NOT NULL AND SPAS.STATUS_VALUE = 'CNCL')) THEN 'ACTV' ELSE SPA.STATUS_VALUE END STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE ELSE NULL END BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.RETIREMENT_TYPE_ID ELSE NULL END RETIREMENT_TYPE_ID,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.RETIREMENT_TYPE_VALUE ELSE NULL END RETIREMENT_TYPE_VALUE,&#xD;&#xA;--CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPBX.BENEFIT_OPTION_VALUE  ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'DSBL' AND BAB.MIN_RETIREMENT_DATE IS NOT NULL AND BAB.MIN_RETIREMENT_DATE &lt; SPACC.BENEFIT_BEGIN_DATE THEN BAB.MIN_RETIREMENT_DATE ELSE SPACC.BENEFIT_BEGIN_DATE END ELSE NULL END  BENEFIT_BEGIN_DATE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.BENEFIT_END_DATE ELSE NULL END  BENEFIT_END_DATE, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.TERM_CERTAIN_END_DATE ELSE NULL END TERM_CERTAIN_END_DATE,&#xD;&#xA;NULL AS FUNDS_TYPE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.NONTAXABLE_BEGINNING_BALANCE  ELSE NULL END     AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION ELSE NULL END  AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;NULL AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA; CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN   SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0 END)  ELSE NULL END  AS GROSS_AMOUNT,                 &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN PAYMENT.AMOUNT_PAID ELSE NULL END AS AMOUNT_PAID,       &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.REEMPLOYED_FLAG ELSE NULL END REEMPLOYED_FLAG,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.PERSON_ID ELSE NULL END AS JOINT_ANNUITANT_ID, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.FIRST_NAME ELSE NULL END FIRST_NAME, &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.LAST_NAME ELSE NULL END LAST_NAME,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.SSN ELSE NULL END SSN, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.GENDER_ID ELSE NULL END GENDER_ID, &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.GENDER_VALUE ELSE NULL END GENDER_VALUE, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.DATE_OF_BIRTH ELSE NULL END DATE_OF_BIRTH,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.DATE_OF_DEATH ELSE NULL END DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPAS.STATUS_VALUE ELSE NULL END AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT SPACC WITH(NOLOCK) ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN ('DDPT', 'QDRO', 'DDPR') &#xD;&#xA; AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N') AND YEAR(SPACC.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR &#xD;&#xA; AND NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT PA INNER JOIN SGT_PLAN_BENEFIT_XR X ON PA.PLAN_BENEFIT_ID = X.PLAN_BENEFIT_ID&#xD;&#xA;     WHERE BENEFIT_ACCOUNT_TYPE_VALUE = 'DSBL'&#xD;&#xA;     AND PA.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID AND PA.BENEFIT_END_DATE IS NOT NULL &#xD;&#xA;     AND YEAR(PA.BENEFIT_END_DATE) &lt; @EXECUTIONYEAR AND SP.DATE_OF_DEATH IS NULL)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;     AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID  FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  WHERE Q.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID ORDER  BY   Q.STATUS_EFFECTIVE_DATE DESC)               &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID = 2 AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;--787&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT BA.PERSON_ID,SBAD.PLAN_BENEFIT_ID,MIN(BA.RETIREMENT_DATE) AS MIN_RETIREMENT_DATE &#xD;&#xA; FROM SGT_BENEFIT_APPLICATION_DETAIL SBAD          &#xD;&#xA; INNER JOIN SGT_BENEFIT_APPLICATION BA ON BA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID AND SBAD.BENEFIT_SUBTYPE_VALUE IN ('REDE','SPLR','URED') --AND (YEAR(RETIREMENT_DATE) BETWEEN 2012 AND 2014 OR YEAR(MIN_DISTRIBUTION_DATE) BETWEEN 2012 AND 2014)&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR X ON SBAD.PLAN_BENEFIT_ID = X.PLAN_BENEFIT_ID AND X.PLAN_ID &lt;&gt; 1&#xD;&#xA; AND YEAR(BA.RETIREMENT_DATE) &lt;= @EXECUTIONYEAR&#xD;&#xA; GROUP BY BA.PERSON_ID,SBAD.PLAN_BENEFIT_ID &#xD;&#xA;)BAB ON BAB.PERSON_ID = SP.PERSON_ID AND SBAD.PLAN_BENEFIT_ID = BAB.PLAN_BENEFIT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID AND SPBX.PLAN_ID=2&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA; AND (&#xD;&#xA; --(--PAPI.START_DATE &lt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND  --71411 item 1 commented start date check&#xD;&#xA; --(PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA; --AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA; OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (21,22) AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('01' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME)))&#xD;&#xA;)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.PERSON_ID = SP.PERSON_ID AND&#xD;&#xA;SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC )  &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH WITH(NOLOCK)  ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID &#xD;&#xA;AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID                                   &#xD;&#xA;WHERE &#xD;&#xA;(  &#xD;&#xA; (SPA.STATUS_VALUE IN ('ACTV','INAC','RETR') AND SP.DATE_OF_DEATH IS NULL &#xD;&#xA; AND                   &#xD;&#xA; (&#xD;&#xA;  (&#xD;&#xA;   SPACC.PAYEE_ACCOUNT_ID IS NULL AND  &#xD;&#xA;    --NEW&#xD;&#xA;    (&#xD;&#xA;      NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P &#xD;&#xA;       INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BA ON P.PAYEE_BENEFIT_ACCOUNT_ID = BA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q ON P.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DSBL') AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PPI WITH(NOLOCK) ON P.PAYEE_ACCOUNT_ID = PPI.PAYEE_ACCOUNT_ID &#xD;&#xA;        AND ((PPI.START_DATE &lt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) &#xD;&#xA;        AND (PPI.END_DATE IS NULL OR PPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;        AND X.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;        OR (X.BENEFIT_OPTION_VALUE = 'LUMP' AND PPI.PAYMENT_ITEM_TYPE_ID IN (21,22) AND (PPI.END_DATE IS NULL OR PPI.END_DATE &gt;= CAST('01' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))))&#xD;&#xA;       WHERE P.PERSON_ID = SP.PERSON_ID AND BA.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE NOT IN ('CNCL'))&#xD;&#xA;     OR&#xD;&#xA;     (&#xD;&#xA;     --SPECIAL SCENARIO&#xD;&#xA;      EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;        ON P.BENEFIT_ACCOUNT_TYPE_VALUE = 'DSBL' AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;        INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2 &#xD;&#xA;        WHERE P.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE IN ('CMPL') AND P.BENEFIT_END_DATE IS NOT NULL AND YEAR(P.BENEFIT_END_DATE) &lt; @EXECUTIONYEAR)   &#xD;&#xA;      AND&#xD;&#xA;      NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;        ON P.BENEFIT_ACCOUNT_TYPE_VALUE = 'DSBL' AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;        INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2 &#xD;&#xA;        WHERE P.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE NOT IN ('CMPL','CNCL') AND YEAR(P.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR)      &#xD;&#xA;        &#xD;&#xA;     )&#xD;&#xA;    )       &#xD;&#xA;   AND        &#xD;&#xA;   (&#xD;&#xA;    NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;        ON P.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;        INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2&#xD;&#xA;        WHERE P.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE IN ('CNCL','CMPL') AND YEAR(P.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR)&#xD;&#xA;    OR &#xD;&#xA;                EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;                                ON P.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                                INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PB ON PB.PAYEE_BENEFIT_ACCOUNT_ID = P.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                                INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2                                       &#xD;&#xA;                                WHERE PB.PERSON_ID &lt;&gt; SP.PERSON_ID AND P.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE IN ('CNCL','CMPL') AND YEAR(P.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR) &#xD;&#xA;    OR&#xD;&#xA;     EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;                                ON P.BENEFIT_ACCOUNT_TYPE_VALUE = 'QDRO' AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                                INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PB ON PB.PAYEE_BENEFIT_ACCOUNT_ID = P.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                                INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2                                       &#xD;&#xA;                                WHERE PB.PERSON_ID = SP.PERSON_ID AND P.PERSON_ID &lt;&gt; SP.PERSON_ID AND Q.STATUS_VALUE NOT IN ('CNCL') AND YEAR(P.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR) &#xD;&#xA;    &#xD;&#xA;   )&#xD;&#xA;  )&#xD;&#xA;                        &#xD;&#xA;  OR &#xD;&#xA;  ( &#xD;&#xA;            (&#xD;&#xA;    (&#xD;&#xA;     SPACC.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND SPAS.STATUS_VALUE IN ('CNCL')&#xD;&#xA;     AND&#xD;&#xA;     --NEW&#xD;&#xA;     NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;       ON P.BENEFIT_ACCOUNT_TYPE_VALUE IN ('WDRL','RTMT','DSBL') AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PPI WITH(NOLOCK) ON P.PAYEE_ACCOUNT_ID = PPI.PAYEE_ACCOUNT_ID &#xD;&#xA;        AND ((PPI.START_DATE &lt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) &#xD;&#xA;        AND (PPI.END_DATE IS NULL OR PPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;        AND X.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;        OR (X.BENEFIT_OPTION_VALUE = 'LUMP' AND PPI.PAYMENT_ITEM_TYPE_ID IN (21,22) AND (PPI.END_DATE IS NULL OR PPI.END_DATE &gt;= CAST('01' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))))&#xD;&#xA;       WHERE P.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE NOT IN ('CNCL') AND YEAR(P.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR)  &#xD;&#xA;     &#xD;&#xA;     )&#xD;&#xA;     OR&#xD;&#xA;    (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND &#xD;&#xA;     NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2                                       &#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q ON P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                                        WHERE P.PERSON_ID = SPACC.PERSON_ID AND P.PAYEE_ACCOUNT_ID &lt;&gt; SPACC.PAYEE_ACCOUNT_ID  &#xD;&#xA;                                        AND P.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND Q.STATUS_VALUE NOT IN ('CNCL')))&#xD;&#xA;                  OR&#xD;&#xA;                  (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' AND SPAS.STATUS_VALUE NOT IN ('CNCL') --AND YEAR(SPACC.BENEFIT_BEGIN_DATE) = @EXECUTIONYEAR &#xD;&#xA;                  AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NOT NULL AND&#xD;&#xA;      EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2                                       &#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q ON P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                                        WHERE P.PERSON_ID = SPACC.PERSON_ID AND P.PAYEE_ACCOUNT_ID &lt;&gt; SPACC.PAYEE_ACCOUNT_ID  &#xD;&#xA;                                        AND P.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND Q.STATUS_VALUE NOT IN ('CNCL')))     &#xD;&#xA;       OR&#xD;&#xA;                  (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' AND SPAS.STATUS_VALUE IN ('CNCL') AND&#xD;&#xA;      NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2                                       &#xD;&#xA;          INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q ON P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                                        WHERE P.PERSON_ID = SPACC.PERSON_ID AND P.PAYEE_ACCOUNT_ID &lt;&gt; SPACC.PAYEE_ACCOUNT_ID  &#xD;&#xA;                                        AND P.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND Q.STATUS_VALUE NOT IN ('CNCL')))                                    &#xD;&#xA;             )            &#xD;&#xA;          )&#xD;&#xA; )&#xD;&#xA;   )          &#xD;&#xA;   OR &#xD;&#xA; (&#xD;&#xA;  (SPA.STATUS_VALUE IN ('RETR') OR (SPA.STATUS_VALUE IN ('ACTV','INAC') AND SPACC.RETIREMENT_TYPE_VALUE='MIND' AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NOT NULL)) &#xD;&#xA;  AND SP.DATE_OF_DEATH IS NULL AND (SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') OR ((SPAS.STATUS_VALUE)IN ('CMPL') AND (YEAR(SPAS.STATUS_EFFECTIVE_DATE)&gt;= @EXECUTIONYEAR) &#xD;&#xA;  AND (SPACC.RETIREMENT_TYPE_VALUE = 'MIND' OR SPACC.RETIREMENT_TYPE_VALUE IS NULL)))&#xD;&#xA; )&#xD;&#xA; OR &#xD;&#xA; (&#xD;&#xA;  SPA.STATUS_VALUE IN ('DCSD','RETR') AND SP.DATE_OF_DEATH IS NOT NULL AND SPAS.STATUS_VALUE IN ('CMPL')&#xD;&#xA;  AND ((SPACC.PLAN_BENEFIT_ID NOT IN (SELECT XR.PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR XR WHERE XR.BENEFIT_OPTION_VALUE = 'LUMP')) OR (YEAR(SP.DATE_OF_DEATH) = @EXECUTIONYEAR))&#xD;&#xA;  AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NOT NULL&#xD;&#xA;  AND (((SELECT COUNT(PA1.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA1 WHERE PA1.PERSON_ID &lt;&gt; SPACC.PERSON_ID AND PA1.PAYEE_BENEFIT_ACCOUNT_ID = SPACC.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;   AND (PA1.RETIREE_INCR_FLAG IS NULL OR PA1.RETIREE_INCR_FLAG = 'N')) = 0) OR YEAR(SP.DATE_OF_DEATH) &gt; @EXECUTIONYEAR)&#xD;&#xA; )&#xD;&#xA; OR &#xD;&#xA; (&#xD;&#xA;  SPA.STATUS_VALUE IN ('RETR') AND SP.DATE_OF_DEATH IS NOT NULL AND (SPAS.STATUS_VALUE) NOT IN ('CMPL','CNCL') AND PAPI.PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE_ID IS NOT NULL &#xD;&#xA;  AND ((SPACC.PLAN_BENEFIT_ID NOT IN (SELECT XR.PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR XR WHERE XR.BENEFIT_OPTION_VALUE = 'LUMP')) OR (YEAR(SP.DATE_OF_DEATH) = @EXECUTIONYEAR))&#xD;&#xA;  AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND (((SELECT COUNT(PA1.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA1 WHERE PA1.PERSON_ID &lt;&gt; SPACC.PERSON_ID AND PA1.PAYEE_BENEFIT_ACCOUNT_ID = SPACC.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;   AND (PA1.RETIREE_INCR_FLAG IS NULL OR PA1.RETIREE_INCR_FLAG = 'N')) = 0) OR YEAR(SP.DATE_OF_DEATH) &gt; @EXECUTIONYEAR)&#xD;&#xA; )&#xD;&#xA;)&#xD;&#xA;AND SPA.PLAN_ID = 2 AND (SPBX.PLAN_ID = 2 OR SPBX.PLAN_ID IS NULL)&#xD;&#xA;AND (SPACC.PLAN_BENEFIT_ID IN ( SELECT PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR WHERE PLAN_ID = 2) OR (SPACC.PLAN_BENEFIT_ID IS NULL))&#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH, SPA.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, SPACC.RETIREMENT_TYPE_ID, SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_BEGIN_DATE, SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,     &#xD;&#xA;SPAE.VESTED_DATE,SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG, SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, SPJOANNU.LAST_NAME, SPJOANNU.SSN,&#xD;&#xA;SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPACC.PAYEE_ACCOUNT_ID,SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;BAB.MIN_RETIREMENT_DATE,SPAS.STATUS_VALUE,PAYMENT.AMOUNT_PAID&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;DISTINCT SP.PERSON_ID,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SP.SSN AS PERSON_SSN,&#xD;&#xA;'RETIREE_AND_ACTIVE' AS CAT_TYPE,&#xD;&#xA;SP.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;NULL AS BENEFICIARY_ID,&#xD;&#xA;NULL AS BENEFICIARY_FLAG,&#xD;&#xA;NULL AS BENEFICIARY_NAME ,&#xD;&#xA;NULL AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;NULL AS PAYEE_ACCOUNT_ID,&#xD;&#xA;CASE WHEN SPA.STATUS_VALUE = 'RETR' THEN 'ACTV' ELSE SPA.STATUS_VALUE END STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;NULL AS BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;NULL AS RETIREMENT_TYPE_ID,&#xD;&#xA;NULL AS RETIREMENT_TYPE_VALUE,&#xD;&#xA;NULL AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;NULL AS BENEFIT_BEGIN_DATE,&#xD;&#xA;NULL AS BENEFIT_END_DATE , &#xD;&#xA;NULL AS TERM_CERTAIN_END_DATE,&#xD;&#xA;NULL AS FUNDS_TYPE_VALUE,&#xD;&#xA;NULL AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;NULL AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;NULL AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;NULL AS GROSS_AMOUNT,&#xD;&#xA;NULL AS AMOUNT_PAID,       &#xD;&#xA;NULL AS REEMPLOYED_FLAG,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;SPJOANNU.PERSON_ID AS JOINT_ANNUITANT_ID, SPJOANNU.FIRST_NAME , SPJOANNU.LAST_NAME ,&#xD;&#xA;SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,&#xD;&#xA;SPJOANNU.DATE_OF_DEATH ,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;NULL AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM&#xD;&#xA;SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT SPACC WITH(NOLOCK) ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN ('DDPT', 'QDRO', 'DDPR') &#xD;&#xA; AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N') AND YEAR(SPACC.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL&#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID AND SPBX.PLAN_ID=2&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA; AND (&#xD;&#xA; --(--PAPI.START_DATE &lt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND --71411 item 1 commented start date check&#xD;&#xA; --   (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA; --   AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;    OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.PERSON_ID = SP.PERSON_ID AND&#xD;&#xA;SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC )  &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH WITH(NOLOCK)  ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID &#xD;&#xA;AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'  &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID                 &#xD;&#xA;WHERE&#xD;&#xA;(&#xD;&#xA;SPA.STATUS_VALUE IN ('ACTV','INAC','DCSD','RETR')&#xD;&#xA;AND &#xD;&#xA;(SPAS.STATUS_VALUE IN ('CMPL') AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL')&#xD;&#xA;AND ((SELECT COUNT(PA1.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA1 &#xD;&#xA; INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA1 ON PBA1.PAYEE_BENEFIT_ACCOUNT_ID = PA1.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = PA1.PLAN_BENEFIT_ID AND X.PLAN_ID = 2&#xD;&#xA; WHERE PA1.PERSON_ID = PA1.PERSON_ID AND PBA1.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA; AND PA1.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL' AND YEAR(PA1.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR&#xD;&#xA; AND (PA1.RETIREE_INCR_FLAG IS NULL OR PA1.RETIREE_INCR_FLAG = 'N')) = 0)&#xD;&#xA;                    &#xD;&#xA; AND ((SELECT COUNT(PA1.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA1 &#xD;&#xA;          INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA1 ON PBA1.PAYEE_BENEFIT_ACCOUNT_ID = PA1.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;          INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = PA1.PLAN_BENEFIT_ID AND X.PLAN_ID = 2&#xD;&#xA;          WHERE PA1.PERSON_ID &lt;&gt; SPACC.PERSON_ID  AND PBA1.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;   AND YEAR(PA1.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR AND (PA1.RETIREE_INCR_FLAG IS NULL OR PA1.RETIREE_INCR_FLAG = 'N')) = 0)                                           &#xD;&#xA;)             &#xD;&#xA;AND SPA.PLAN_ID = 2  &#xD;&#xA;AND (SPBX.PLAN_ID = 2 OR SPBX.PLAN_ID IS NULL)&#xD;&#xA;AND (SPACC.PLAN_BENEFIT_ID IN ( SELECT PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR WHERE PLAN_ID = 2) OR (SPACC.PLAN_BENEFIT_ID IS NULL))&#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;--GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;--SP.DATE_OF_DEATH, SPA.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;--SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, SPACC.RETIREMENT_TYPE_ID, SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_BEGIN_DATE, SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,  &#xD;&#xA;--SPAE.VESTED_DATE,SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG, SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, SPJOANNU.LAST_NAME, SPJOANNU.SSN,&#xD;&#xA;--SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPACC.PAYEE_ACCOUNT_ID,SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;--SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,SPAS.STATUS_VALUE&#xD;&#xA;UNION&#xD;&#xA;SELECT&#xD;&#xA;DISTINCT SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'QDRO' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;SP.PERSON_ID AS BENEFICIARY_ID,&#xD;&#xA;'Q' AS BENEFICIARY_FLAG,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS BENEFICIARY_NAME ,&#xD;&#xA;SP.SSN AS BENEFICIARY_SSN,&#xD;&#xA;SP.GENDER_ID AS BENEFICIARY_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS BENEFICIARY_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;SPA.STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;SPACC.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0  END)  AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,                                &#xD;&#xA;SPACC.REEMPLOYED_FLAG,&#xD;&#xA;SP.MPI_PERSON_ID, NULL AS JOINT_ANNUITANT_ID, NULL FIRST_NAME , NULL AS LAST_NAME ,&#xD;&#xA;NULL AS SSN, NULL AS GENDER_ID, NULL AS GENDER_VALUE, NULL AS DATE_OF_BIRTH, NULL AS DATE_OF_DEATH ,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, SDBD.DRO_MODEL_VALUE AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM&#xD;&#xA;SGT_PERSON SPPAR &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ID = SPPAR.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND YEAR(SPACC.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR &#xD;&#xA;--71411 item 3&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA; AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q WHERE Q.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;        AND (&#xD;&#xA;&#x9;&#x9;--(--PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND  --71411 item 1 commented start date check&#xD;&#xA;  --       (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;  --      AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPACC.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID = 2 AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.PERSON_ID = SP.PERSON_ID AND&#xD;&#xA;    SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC )  &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH WITH(NOLOCK)  ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID &#xD;&#xA;        AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'                 &#xD;&#xA;LEFT OUTER JOIN SGT_DRO_BENEFIT_DETAILS SDBD ON SDBD.DRO_BENEFIT_ID = SPACC.DRO_APPLICATION_DETAIL_ID    &#xD;&#xA;WHERE SPPAR.SSN IS NOT NULL AND SPA.PLAN_ID = 2&#xD;&#xA;AND&#xD;&#xA;((SPAS.STATUS_VALUE) NOT IN ('CMPL','CNCL') OR ((SPAS.STATUS_VALUE)IN ('CMPL') AND YEAR(SPAS.STATUS_EFFECTIVE_DATE)= @EXECUTIONYEAR AND SPBX.BENEFIT_OPTION_VALUE = 'LUMP')) &#xD;&#xA;AND (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') OR (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' AND SPACC.PERSON_ID &lt;&gt;  SPBA.PERSON_ID))&#xD;&#xA;AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N')&#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME,SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH, SPPAR.PERSON_ID ,SPPAR.FIRST_NAME, SPPAR.LAST_NAME ,&#xD;&#xA;SPPAR.SSN,SPPAR.GENDER_ID ,SPPAR.GENDER_VALUE ,&#xD;&#xA;SPPAR.DATE_OF_BIRTH ,SPPAR.DATE_OF_DEATH ,SPACC.PAYEE_ACCOUNT_ID, SPA.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,SPACC.RETIREMENT_TYPE_ID,SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE,SPACC.BENEFIT_BEGIN_DATE,SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,SPACC.MINIMUM_GUARANTEE_AMOUNT,SPAE.VESTED_DATE,&#xD;&#xA;SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPAS.STATUS_VALUE,PAYMENT.AMOUNT_PAID, SDBD.DRO_MODEL_VALUE  &#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;DISTINCT SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'BENE_OF_DEATH' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;SP.PERSON_ID AS BENEFICIARY_ID,&#xD;&#xA;'B' AS BENEFICIARY_FLAG,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS BENEFICIARY_NAME ,&#xD;&#xA;SP.SSN AS BENEFICIARY_SSN,&#xD;&#xA;SP.GENDER_ID AS BENEFICIARY_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS BENEFICIARY_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;SPA.STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;SPACC.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;      THEN ISNULL(AMOUNT,0.0) ELSE 0 END)  AS GROSS_AMOUNT,    &#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,             &#xD;&#xA;SPACC.REEMPLOYED_FLAG,             &#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;SPJOANNU.PERSON_ID AS JOINT_ANNUITANT_ID, &#xD;&#xA;SPJOANNU.FIRST_NAME , SPJOANNU.LAST_NAME ,&#xD;&#xA;SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,&#xD;&#xA;SPJOANNU.DATE_OF_DEATH ,&#xD;&#xA;SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,          &#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS              &#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM&#xD;&#xA;SGT_PERSON SPPAR&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ID = SPPAR.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (&#xD;&#xA;--(--PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND  --71411 item 1 commented start date check&#xD;&#xA;-- (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;--AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPACC.PERSON_ID&#xD;&#xA;     --JOIN SAMPLE_ACT_SSN$ SAM ON SPPAR.SSN = SAM.ACCOWNER&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA;AS AMOUNT_PAID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE PHH.PLAN_ID = 2 AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA;GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.PERSON_ID = SP.PERSON_ID AND&#xD;&#xA;SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC )  &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH WITH(NOLOCK)  ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID &#xD;&#xA;AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL' &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID --BENE               &#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL                &#xD;&#xA;WHERE SPPAR.DATE_OF_DEATH IS NOT NULL --AND YEAR(SPPAR.DATE_OF_DEATH) &lt;= @EXECUTIONYEAR --106895 item 2&#xD;&#xA;AND SPA.STATUS_VALUE IN ('ACTV','INAC','RETR','DCSD') AND SPPAR.SSN IS NOT NULL &#xD;&#xA;AND ((SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') OR (SPAS.STATUS_VALUE IN ('CMPL') AND YEAR(SPAS.STATUS_EFFECTIVE_DATE) = @EXECUTIONYEAR))&#xD;&#xA;       OR (SPAS.STATUS_VALUE IN ('CMPL') AND YEAR(SPPAR.DATE_OF_DEATH)&gt;=@EXECUTIONYEAR))&#xD;&#xA;AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT') AND SP.DATE_OF_DEATH IS NULL         &#xD;&#xA;AND SPA.PLAN_ID = 2 AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG = 'N') &#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH, SPPAR.PERSON_ID ,SPPAR.FIRST_NAME, SPPAR.LAST_NAME ,SPPAR.SSN,SPPAR.GENDER_ID ,SPPAR.GENDER_VALUE ,&#xD;&#xA;SPPAR.DATE_OF_BIRTH ,SPPAR.DATE_OF_DEATH , SPACC.PAYEE_ACCOUNT_ID, SPA.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,SPACC.RETIREMENT_TYPE_ID,SPACC.RETIREMENT_TYPE_VALUE,SPBX.BENEFIT_OPTION_VALUE,&#xD;&#xA;SPACC.BENEFIT_BEGIN_DATE,SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SPAE.VESTED_DATE,SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG,SPAE.FORFEITURE_DATE,SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, &#xD;&#xA;SPJOANNU.LAST_NAME, SPJOANNU.SSN, SPJOANNU.GENDER_ID,SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH, &#xD;&#xA;SPAE.VESTED_DATE,SPAS.STATUS_VALUE,PAYMENT.AMOUNT_PAID&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;SELECT&#xD;&#xA;DISTINCT SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'RETIREE_BENE_DEATH' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE        AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH        AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH      AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.PERSON_ID ELSE NULL END AS BENEFICIARY_ID,&#xD;&#xA;'D'     AS BENEFICIARY_FLAG,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN (SP.FIRST_NAME + ' ' + SPPAR.LAST_NAME) ELSE NULL END AS BENEFICIARY_NAME ,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.SSN ELSE NULL END AS BENEFICIARY_SSN,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.GENDER_ID ELSE NULL END AS BENEFICIARY_GENDER_ID,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.GENDER_VALUE ELSE NULL END AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.DATE_OF_BIRTH ELSE NULL END AS BENEFICIARY_DOB,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.DATE_OF_DEATH ELSE NULL END AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;'DCSD' AS STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPBX.PLAN_ID,SPBA.PERSON_ACCOUNT_ID AS PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;SPACC.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE  AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;NULL AS FUNDS_TYPE_VALUE,&#xD;&#xA;NULL AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;NULL AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;NULL AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;         THEN  ISNULL(AMOUNT,0.0) ELSE 0 END) AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,                                 &#xD;&#xA;SPACC.REEMPLOYED_FLAG,               &#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;NULL AS JOINT_ANNUITANT_ID, NULL AS FIRST_NAME , NULL AS LAST_NAME ,&#xD;&#xA;NULL AS SSN, NULL AS GENDER_ID, NULL AS GENDER_VALUE, NULL AS DATE_OF_BIRTH, NULL AS DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM SGT_PERSON SPPAR&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ID = SPPAR.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;--71411 item 3&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (&#xD;&#xA;--(--PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND --71411 item 1 commented start date check&#xD;&#xA;-- (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;--AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;  OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPACC.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA;AS AMOUNT_PAID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE PHH.PLAN_ID = 2 AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA;GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID        &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.PERSON_ID = SP.PERSON_ID AND&#xD;&#xA;SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC )  &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH WITH(NOLOCK)  ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID &#xD;&#xA;AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'              &#xD;&#xA;LEFT OUTER JOIN SGT_DRO_BENEFIT_DETAILS SDBD ON SDBD.DRO_BENEFIT_ID = SPACC.DRO_APPLICATION_DETAIL_ID &#xD;&#xA;--NEW&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PA1 ON PA1.PAYEE_BENEFIT_ACCOUNT_ID =  SPBA.PAYEE_BENEFIT_ACCOUNT_ID  &#xD;&#xA;  AND (PA1.PERSON_ID &lt;&gt; SPPAR.PERSON_ID AND PA1.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT','RTMT','DSBL','QDRO')) AND (PA1.RETIREE_INCR_FLAG = 'N' OR PA1.RETIREE_INCR_FLAG IS NULL)  &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS1 ON SPAS1.PAYEE_ACCOUNT_ID = PA1.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS1.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPAS1.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;WHERE SP.DATE_OF_DEATH IS NOT NULL AND SPPAR.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND SPPAR.SSN IS NOT NULL AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG = 'N') AND SPBX.PLAN_ID=2&#xD;&#xA;AND (SPBX.BENEFIT_OPTION_VALUE NOT IN ('LUMP') OR YEAR(SPAS.STATUS_EFFECTIVE_DATE) = @EXECUTIONYEAR) &#xD;&#xA;AND  SPAS.STATUS_VALUE IN ('CMPL') AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR', 'DDPT', 'RTMT', 'DSBL') &#xD;&#xA;AND     &#xD;&#xA;    ((SPAS1.STATUS_VALUE NOT IN ('RECV','REVW')) OR ((SPAS1.STATUS_VALUE IN ('RECV','REVW') AND &#xD;&#xA;     (SELECT SUM(RC.UVHP_AMOUNT) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC &#xD;&#xA;     WHERE RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND RC.CONTRIBUTION_TYPE_VALUE = 'UVHP') &gt; 1)&#xD;&#xA;     OR ((YEAR(SPPAR.DATE_OF_DEATH) = @EXECUTIONYEAR AND &#xD;&#xA;     (SELECT COUNT(PA2.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA2 WHERE PA2.PERSON_ID &lt;&gt; SPPAR.PERSON_ID AND PA2.PAYEE_BENEFIT_ACCOUNT_ID = SPACC.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                                           AND (PA2.RETIREE_INCR_FLAG IS NULL OR PA2.RETIREE_INCR_FLAG = 'N')) &gt; 0))                                            &#xD;&#xA;     ))  &#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')                      &#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH,SPACC.PAYEE_ACCOUNT_ID, SPADD.ADDR_STATE_VALUE,SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, SPACC.RETIREMENT_TYPE_ID, &#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_BEGIN_DATE, SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,       &#xD;&#xA;SP.MPI_PERSON_ID, SPBX.PLAN_ID,SPACC.REEMPLOYED_FLAG, SPPAR.PERSON_ID, SPPAR.FIRST_NAME, SPPAR.LAST_NAME, SPPAR.SSN,&#xD;&#xA;SPPAR.GENDER_ID, SPPAR.GENDER_VALUE, SPPAR.DATE_OF_BIRTH,SPPAR.DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPBA.PERSON_ACCOUNT_ID,&#xD;&#xA;PAYMENT.AMOUNT_PAID,SPAS.STATUS_VALUE&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;&#xD;&#xA;UNION&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;DISTINCT SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS PERSON_NAME,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'BENE_OF_DEATH' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;SP.ORG_ID AS BENEFICIARY_ID,&#xD;&#xA;'B' AS BENEFICIARY_FLAG,&#xD;&#xA;(SP.ORG_NAME) AS BENEFICIARY_NAME ,&#xD;&#xA;SP.FEDERAL_ID AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;SPA.STATUS_VALUE,&#xD;&#xA;SPADD.STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;SPACC.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;SPACC.BENEFIT_END_DATE,SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0 END)  AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,          &#xD;&#xA;SPACC.REEMPLOYED_FLAG,&#xD;&#xA;SP.MPI_ORG_ID,&#xD;&#xA;SPJOANNU.PERSON_ID AS JOINT_ANNUITANT_ID, &#xD;&#xA;SPJOANNU.FIRST_NAME , SPJOANNU.LAST_NAME ,&#xD;&#xA;SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,&#xD;&#xA;SPJOANNU.DATE_OF_DEATH ,&#xD;&#xA;SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM SGT_PERSON SPPAR&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ID = SPPAR.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;WHERE Q.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID ORDER BY Q.STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;         AND (&#xD;&#xA;&#x9;&#x9; --(--PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND --71411 item 1 commented start date check&#xD;&#xA;   --       (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;   --      AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;INNER JOIN SGT_ORGANIZATION SP ON SP.ORG_ID = SPACC.ORG_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA;AS AMOUNT_PAID&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE PHH.PLAN_ID = 2 AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA;GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_ORG_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.ORG_ID = SP.ORG_ID &#xD;&#xA;         AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL)                 &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID               &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL                                &#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;WHERE&#xD;&#xA;SPA.STATUS_VALUE IN ('ACTV','INAC','RETR','DCSD') AND SPPAR.SSN IS NOT NULL AND SPPAR.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND&#xD;&#xA;(&#xD;&#xA; ((SPAS.STATUS_VALUE) NOT IN ('CMPL','CNCL') OR ((SPAS.STATUS_VALUE)IN ('CMPL') AND (YEAR(SPAS.STATUS_EFFECTIVE_DATE))= @EXECUTIONYEAR))&#xD;&#xA;     OR &#xD;&#xA;    ((SPAS.STATUS_VALUE) IN ('CMPL') AND YEAR(SPPAR.DATE_OF_DEATH)&gt;=@EXECUTIONYEAR)&#xD;&#xA;)&#xD;&#xA;AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT')              &#xD;&#xA;AND SPA.PLAN_ID = 2 AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG = 'N')&#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.ORG_ID, SP.ORG_NAME, SP.FEDERAL_ID, SPPAR.PERSON_ID ,SPPAR.FIRST_NAME, SPPAR.LAST_NAME ,&#xD;&#xA;SPPAR.SSN,SPPAR.GENDER_ID ,SPPAR.GENDER_VALUE ,SPPAR.DATE_OF_BIRTH ,SPPAR.DATE_OF_DEATH , SPACC.PAYEE_ACCOUNT_ID, &#xD;&#xA;SPA.STATUS_VALUE, SPADD.STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;SPACC.RETIREMENT_TYPE_ID,SPACC.RETIREMENT_TYPE_VALUE,SPBX.BENEFIT_OPTION_VALUE,SPACC.BENEFIT_BEGIN_DATE,SPACC.BENEFIT_END_DATE,&#xD;&#xA;SPACC.TERM_CERTAIN_END_DATE,SPBA.FUNDS_TYPE_VALUE,SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,SPAE.VESTED_DATE,SP.MPI_ORG_ID, SPACC.REEMPLOYED_FLAG,SPAE.FORFEITURE_DATE,&#xD;&#xA;SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, SPJOANNU.LAST_NAME, SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, &#xD;&#xA;SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH, SPAE.VESTED_DATE,PAYMENT.AMOUNT_PAID,SPAS.STATUS_VALUE&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;">
      <parameters>
        <parameter ID="@EXECUTIONYEAR" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetDataForPensionActuaryFile" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT&#xD;&#xA; p.PERSON_ID,&#xD;&#xA; --RID 125383&#xD;&#xA; --ISNULL(P.LAST_NAME,'') + ' ' + ISNULL(P.FIRST_NAME,'') AS PERSON_NAME, SDEBI.PERSON_SSN,&#xD;&#xA; '' AS PERSON_NAME,  &#xD;&#xA; P.MPI_PERSON_ID AS PERSON_SSN,&#xD;&#xA; PL.PLAN_CODE as istrPlan,&#xD;&#xA; CASE WHEN SDEBI.STATUS_CODE_VALUE = 'I' THEN 'A' ELSE  SDEBI.STATUS_CODE_VALUE END AS STATUS_CODE_VALUE,   &#xD;&#xA; CASE WHEN (STATUS_CODE_VALUE IN ('A','B','C','D','I') OR RETURN_TO_WORK_FLAG ='Y') AND PL.PLAN_ID = 2 THEN SDEBI.TOTAL_EE_CONTRIBUTION_AMT ELSE 0 END TOTAL_EE_CONTRIBUTION_AMT,  --71411 added () in OR condition&#xD;&#xA; SDEBI.TOTAL_UVHP_AMT,&#xD;&#xA; CASE WHEN (STATUS_CODE_VALUE IN ('A','B','C','D','I') OR RETURN_TO_WORK_FLAG ='Y') AND PL.PLAN_ID = 2 THEN SDEBI.TOTAL_EE_INTEREST_AMT ELSE 0 END TOTAL_EE_INTEREST_AMT,  --71411 added () in OR condition&#xD;&#xA; SDEBI.TOTAL_UVHP_INTEREST_AMT,&#xD;&#xA; SDEBI.PERSON_GENDER_VALUE,&#xD;&#xA; --RID 125383&#xD;&#xA; --CONVERT(VARCHAR(17),SDEBI.PERSON_DOB,101) AS istrPersonDateofBirth, &#xD;&#xA; CONVERT(VARCHAR(17),DATEADD(DAY,-(DAY(SDEBI.PERSON_DOB)-1),SDEBI.PERSON_DOB),101) AS istrPersonDateofBirth,&#xD;&#xA; CASE WHEN SDEBI.BENEFICIARY_FLAG IN ('Q','B') THEN SDEBI.BENEFICIARY_FLAG ELSE ' ' END AS BENEFICIARY_FLAG,&#xD;&#xA; --RID 125383&#xD;&#xA; --bp.LAST_NAME + ' ' + bp.FIRST_NAME AS BENEFICIARY_NAME, SDEBI.BENEFICIARY_SSN,&#xD;&#xA; '' AS BENEFICIARY_NAME, &#xD;&#xA; BP.MPI_PERSON_ID AS BENEFICIARY_SSN,&#xD;&#xA; SDEBI.BENEFICIARY_GENDER_VALUE,&#xD;&#xA; --RID 125383&#xD;&#xA; --SDEBI.BENEFICIARY_DOB,&#xD;&#xA; DATEADD(DAY,-(DAY(SDEBI.BENEFICIARY_DOB)-1), SDEBI.BENEFICIARY_DOB) AS BENEFICIARY_DOB,&#xD;&#xA;CONVERT(VARCHAR,ISNULL(Pillars.dbo.fn_GetTrueUnionBy_SSN_N_Date_OldWay(SDEBI.PERSON_SSN,@FROMDATE,@TODATE),''))  &#xD;&#xA;as istrUnionCode,&#xD;&#xA;   --(SELECT TOP(1) SDEBHI1.UNION_CODE FROM SGT_DATA_EXTRACTION_BATCH_HOUR_INFO SDEBHI1 &#xD;&#xA;   --   WHERE SDEBHI1.DATA_EXTRACTION_BATCH_INFO_ID=SDEBI.DATA_EXTRACTION_BATCH_INFO_ID ORDER BY SDEBHI1.COMPUTATION_YEAR DESC,SDEBHI1.CREATED_DATE DESC) AS istrUnionCode,        &#xD;&#xA; SDEBI.PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA; CASE WHEN PL.PLAN_ID = 2 THEN SDEBI.TOTAL_QF_YR_END_OF_LAST_COMP_YEAR&#xD;&#xA;   WHEN PL.PLAN_ID = 3 THEN  CONVERT(INT,LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 4 THEN CONVERT(INT,LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 6 THEN CONVERT(INT,LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 7 THEN CONVERT(INT,LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 8 THEN CONVERT(INT,LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS) ELSE 0 END TOTAL_QF_YR_END_OF_LAST_COMP_YEAR,&#xD;&#xA; SDEBI.PARTICIPANT_STATE_VALUE,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE IN ('A','B','C','D','I') OR RETURN_TO_WORK_FLAG ='Y' THEN SDEBI.Last_QF_YR_BEFORE_BIS ELSE 0 END Last_QF_YR_BEFORE_BIS,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE IN ('A','B','C','D','I') OR RETURN_TO_WORK_FLAG ='Y' THEN SDEBI.NON_ELIGIBLE_BENEFIT ELSE 0 END NON_ELIGIBLE_BENEFIT,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE IN ('A','B','C','D','I') OR RETURN_TO_WORK_FLAG ='Y' THEN SDEBI.ACCRUED_BENEFIT_FOR_PRIOR_YEAR ELSE 0 END ACCRUED_BENEFIT_FOR_PRIOR_YEAR,&#xD;&#xA; CASE WHEN (STATUS_CODE_VALUE IN ('A','B','C','D','I') OR RETURN_TO_WORK_FLAG ='Y') AND sdebi.PLAN_ID =2 THEN  &#xD;&#xA;     sdebi.ACCRUED_BENEFIT_TILL_LAST_COMP_YEAR &#xD;&#xA;   WHEN PL.PLAN_ID = 3 THEN  LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;   WHEN PL.PLAN_ID = 4 THEN LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA;   WHEN PL.PLAN_ID = 6 THEN LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;   WHEN PL.PLAN_ID = 7 THEN LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;   WHEN PL.PLAN_ID = 8 THEN LOCAL_161_PREMERGER_BENEFIT &#xD;&#xA;    ELSE 0 END ACCRUED_BENEFIT_TILL_LAST_COMP_YEAR,&#xD;&#xA; SDEBI.YTD_HOURS_FOR_LAST_COMP_YEAR as YTD_HOURS_FOR_LAST_COMP_YEAR,&#xD;&#xA; &#xD;&#xA;  CASE WHEN PL.PLAN_ID = 3 THEN  LOCAL_600_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 4 THEN LOCAL_666_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 6 THEN LOCAL_700_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 7 THEN LOCAL_52_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 8 THEN LOCAL_161_CREDITED_HOURS&#xD;&#xA;    ELSE ISNULL(SDEBI.YTD_HOURS_BEFORE_LAST_COMP_YEAR,0) + ISNULL(SDEBI.MPI_LATE_HOURS_IN_LAST_COMP_YEAR_FOR_PRIOR_YEARS,0) END TOTAL_HOURS, --PIR 1063&#xD;&#xA; SDEBI.YTD_HOURS_FOR_YEAR_BEFORE_LAST_COMP_YEAR AS YTD_HOURS_FOR_YEAR_BEFORE_LAST_COMP_YEAR, &#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') AND SDEBI.PLAN_ID = 2 THEN SDEBI.MONTHLY_BENEFIT_AMT  &#xD;&#xA;   WHEN SDEBI.PLAN_ID &lt;&gt; 2 AND ISNULL(MONTHLY_BENEFIT_AMT,0) &gt; 0 THEN SDEBI.MONTHLY_BENEFIT_AMT &#xD;&#xA;   ELSE 0 END MONTHLY_BENEFIT_AMT,&#xD;&#xA; --SDEBI.MONTHLY_BENEFIT_AMT AS MONTHLY_BENEFIT_AMT,  --71411 item 1  commented conditional selection of monthly benefit and selecting monthly benefit with out condition.&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.NON_TAXABLE_AMT_LEFT ELSE 0 END MG_AMT_LEFT,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.BENEFIT_OPTION_CODE_VALUE ELSE '' END BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA; SDEBI.RETURN_TO_WORK_FLAG,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.DETERMINATION_DATE ELSE NULL END DETERMINATION_DATE,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.BENEFICIARY_FIRST_PAYMENT_RECEIVE_DATE ELSE NULL END BENEFICIARY_FIRST_PAYMENT_RECEIVE_DATE,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.PENSION_STOP_DATE ELSE NULL END PENSION_STOP_DATE,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN &#xD;&#xA;   CASE WHEN PL.PLAN_ID = 3 THEN  CONVERT(INT,LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 4 THEN CONVERT(INT,LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 6 THEN CONVERT(INT,LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 7 THEN CONVERT(INT,LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   WHEN PL.PLAN_ID = 8 THEN CONVERT(INT,LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS)&#xD;&#xA;   ELSE SDEBI.TOTAL_QUALIFIED_YEARS_AT_RET END ELSE 0 END TOTAL_QUALIFIED_YEARS_AT_RET,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN &#xD;&#xA;   CASE WHEN PL.PLAN_ID = 3 THEN  LOCAL_600_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 4 THEN LOCAL_666_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 6 THEN LOCAL_700_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 7 THEN LOCAL_52_CREDITED_HOURS&#xD;&#xA;     WHEN PL.PLAN_ID = 8 THEN LOCAL_161_CREDITED_HOURS&#xD;&#xA;   ELSE SDEBI.TOTAL_QUALIFIED_HOURS_AT_RET END ELSE 0 END TOTAL_QUALIFIED_HOURS_AT_RET,&#xD;&#xA;-- CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.BENEFICIARY_DATE_OF_DEATH ELSE NULL END BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA; SDEBI.BENEFICIARY_DATE_OF_DEATH AS BENEFICIARY_DATE_OF_DEATH,  --71411  item 2  commented conditional selection of date of death instead selecting directly without condition,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') AND SDEBI.PLAN_ID = 2 THEN SDEBI.LUMP_AMT_TAKEN_IN_LAST_COMP_YR &#xD;&#xA;   WHEN SDEBI.PLAN_ID &lt;&gt; 2 AND ISNULL(LUMP_AMT_TAKEN_IN_LAST_COMP_YR,0) &gt; 0 THEN SDEBI.LUMP_AMT_TAKEN_IN_LAST_COMP_YR &#xD;&#xA;   ELSE 0 END LUMP_AMT_TAKEN_IN_LAST_COMP_YR,&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.RETIREMENT_TYPE_VALUE ELSE '' END RETIREMENT_TYPE_VALUE,&#xD;&#xA; SDEBI.ACCRUED_BENEFIT_TILL_PREVIOUS_YEAR,&#xD;&#xA;-- CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.LIFE_ANNUITY_AMT ELSE 0 END LIFE_ANNUITY_AMT,&#xD;&#xA; SDEBI.LIFE_ANNUITY_AMT AS LIFE_ANNUITY_AMT,  --71411  item 6  commented conditional selection of life anuity and selecting directly without condition.&#xD;&#xA; CASE WHEN STATUS_CODE_VALUE NOT IN ('A','B','C','D','I') THEN SDEBI.MD_FLAG ELSE '' END MD_FLAG&#xD;&#xA; , IS_DISABILITY_CONVERSION, IS_CONVERTED_FROM_POPUP, DRO_MODEL  --71411 added new column for item 3,4,5&#xD;&#xA;INTO #TEMP &#xD;&#xA;FROM&#xD;&#xA;  SGT_DATA_EXTRACTION_BATCH_INFO SDEBI WITH(NOLOCK)  &#xD;&#xA;  JOIN SGT_YEAR_END_DATA_EXTRACTION_HEADER SYEDEH WITH(NOLOCK) ON SYEDEH.YEAR_END_DATA_EXTRACTION_HEADER_ID = SDEBI.YEAR_END_DATA_EXTRACTION_HEADER_ID &#xD;&#xA;  INNER JOIN SGT_PERSON p on p.SSN = SDEBI.PERSON_SSN AND P.PERSON_ID = SDEBI.PERSON_ID&#xD;&#xA;  INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SDEBI.PLAN_ID and PL.PLAN_ID not in (1,9)&#xD;&#xA;  INNER JOIN SGT_PERSON_ACCOUNT pa on pa.PERSON_ID = p.PERSON_ID and pa.PLAN_ID not in (1,9)&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON bp ON SDEBI.BENEFICIARY_SSN = bp.SSN AND SDEBI.BENEFICIARY_ID = BP.PERSON_ID  --71411  fixing the left join correct way.&#xD;&#xA;--  LEFT OUTER join SGT_PERSON bp ON bp.SSN = SDEBI.BENEFICIARY_SSN AND BP.PERSON_ID = SDEBI.BENEFICIARY_ID&#xD;&#xA;  &#xD;&#xA;WHERE SYEDEH.YEAR = @YEAR AND&#xD;&#xA;( (&#xD;&#xA; (pa.PLAN_ID = 2 &#xD;&#xA;  AND ( ISNULL(TOTAL_HOURS,0) &gt; 0 OR ISNULL(TOTAL_QUALIFIED_YEARS,0) &gt; 0 OR ISNULL(YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt; 0  &#xD;&#xA;    OR isnull(ACCRUED_BENEFIT_TILL_LAST_COMP_YEAR,0) &gt; 0&#xD;&#xA;    OR ((isnull(TOTAL_EE_CONTRIBUTION_AMT,0) &gt; 1) AND STATUS_CODE_VALUE IN ('A','B','C','D','I'))&#xD;&#xA;    OR ISNULL(NON_TAXABLE_AMT_LEFT,0) &gt; 0 OR isnull(TOTAL_UVHP_AMT,0) &gt; 1 OR isnull(MONTHLY_BENEFIT_AMT,0) &gt; 0  &#xD;&#xA;   ) )  --Has MPI Benefit&#xD;&#xA; OR  ( pa.PLAN_ID in (3,4,6,7,8) &#xD;&#xA;  AND (LOCAL_52_FLAG = 'Y' OR LOCAL_161_FLAG = 'Y' OR LOCAL_600_FLAG = 'Y' OR LOCAL_666_FLAG = 'Y' OR LOCAL_700_FLAG = 'Y' )&#xD;&#xA;  AND (  isnull(SDEBI.LOCAL_52_PREMERGER_BENEFIT,0) &gt; 0 OR isnull(SDEBI.LOCAL_161_PREMERGER_BENEFIT,0) &gt; 0 OR isnull(SDEBI.LOCAL_600_PREMERGER_BENEFIT,0) &gt; 0 &#xD;&#xA;   OR isnull(SDEBI.LOCAL_666_PREMERGER_BENEFIT,0) &gt; 0 OR isnull(SDEBI.LOCAL_700_PREMERGER_BENEFIT,0) &gt; 0&#xD;&#xA;      OR EXISTS (select 1 from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION rc where rc.PERSON_ACCOUNT_ID = pa.PERSON_ACCOUNT_ID and ISNULL(rc.LOCAL_FROZEN_BENEFIT_AMOUNT,0) &gt; 0)&#xD;&#xA;   ) )  --Has Local Benefit&#xD;&#xA; OR ( YEAR(ISNULL(PARTICIPANT_DATE_OF_DEATH,'01/01/1753')) &gt;= @YEAR OR YEAR(ISNULL(BENEFICIARY_DATE_OF_DEATH,'01/01/1753')) &gt;= @YEAR )  --Participant/Beneficiary Deceased  --71411  item 2&#xD;&#xA;   ) OR STATUS_CODE_VALUE = 'H'   --Cashout/Lump Sum&#xD;&#xA;)&#xD;&#xA;ORDER BY PERSON_SSN&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT * FROM #TEMP&#xD;&#xA;&#xD;&#xA;DROP TABLE #TEMP">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@FROMDATE" sfwDataType="DateTime" />
        <parameter ID="@TODATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LookUp" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from (&#xD;&#xA;SELECT&#xD;&#xA;    SDEBI.PERSON_ID,&#xD;&#xA;    SDEBI.PERSON_NAME,&#xD;&#xA; SDEBI.PERSON_SSN,&#xD;&#xA; SDEBI.PERSON_GENDER_VALUE,&#xD;&#xA; SDEBI.PERSON_DOB,&#xD;&#xA; SDEBI.BENEFICIARY_FLAG,&#xD;&#xA; SDEBI.BENEFICIARY_NAME,&#xD;&#xA; SDEBI.BENEFICIARY_SSN,&#xD;&#xA; SDEBI.BENEFICIARY_GENDER_VALUE,&#xD;&#xA; SDEBI.BENEFICIARY_DOB, &#xD;&#xA; CASE WHEN SDEBI.STATUS_CODE_VALUE = 'I' THEN 'A' ELSE SDEBI.STATUS_CODE_VALUE END AS STATUS_CODE_VALUE, &#xD;&#xA; SDEBI.PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA; SDEBI.TOTAL_QUALIFIED_YEARS,&#xD;&#xA; SDEBI.PARTICIPANT_STATE_VALUE,&#xD;&#xA; SDEBI.Last_QF_YR_BEFORE_BIS,&#xD;&#xA; SDEBI.NON_ELIGIBLE_BENEFIT,&#xD;&#xA; SDEBI.ACCRUED_BENEFIT_FOR_PRIOR_YEAR,&#xD;&#xA; sdebi.ACCRUED_BENEFIT_TILL_LAST_COMP_YEAR,&#xD;&#xA; SDEBI.TOTAL_EE_CONTRIBUTION_AMT,&#xD;&#xA; SDEBI.TOTAL_UVHP_AMT,&#xD;&#xA; SDEBI.YTD_HOURS_FOR_LAST_COMP_YEAR,&#xD;&#xA; SDEBI.TOTAL_HOURS,&#xD;&#xA; SDEBI.YTD_HOURS_BEFORE_LAST_COMP_YEAR,&#xD;&#xA; SDEBI.TOTAL_EE_INTEREST_AMT,&#xD;&#xA; SDEBI.TOTAL_UVHP_INTEREST_AMT,&#xD;&#xA; SDEBI.LOCAL_600_FLAG,&#xD;&#xA; SDEBI.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA; SDEBI.LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA; SDEBI.LOCAL_666_FLAG,&#xD;&#xA; SDEBI.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA; SDEBI.LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA; SDEBI.LOCAL_700_FLAG,&#xD;&#xA; SDEBI.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA; SDEBI.LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA; SDEBI.LOCAL_52_FLAG,&#xD;&#xA; SDEBI.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA; SDEBI.LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA; SDEBI.LOCAL_161_FLAG,&#xD;&#xA; SDEBI.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA; SDEBI.LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA; SDEBI.MONTHLY_BENEFIT_AMT,&#xD;&#xA; SDEBI.NON_TAXABLE_AMT_LEFT,&#xD;&#xA; SDEBI.BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA; SDEBI.RETURN_TO_WORK_FLAG,&#xD;&#xA; SDEBI.DETERMINATION_DATE,&#xD;&#xA; SDEBI.BENEFICIARY_FIRST_PAYMENT_RECEIVE_DATE,&#xD;&#xA; SDEBI.PENSION_STOP_DATE,&#xD;&#xA; SDEBI.TOTAL_QUALIFIED_YEARS_AT_RET,&#xD;&#xA; SDEBI.TOTAL_QUALIFIED_HOURS_AT_RET,&#xD;&#xA; SDEBI.BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA; SDEBI.LUMP_AMT_TAKEN_IN_LAST_COMP_YR,&#xD;&#xA; SDEBI.RETIREMENT_TYPE_VALUE,&#xD;&#xA; SYEDEH.YEAR,&#xD;&#xA; SDEBI.TOTAL_QF_YR_END_OF_LAST_COMP_YEAR,&#xD;&#xA; (SELECT TOP(1) SDEBHI1.UNION_CODE FROM SGT_DATA_EXTRACTION_BATCH_HOUR_INFO SDEBHI1 &#xD;&#xA;      WHERE SDEBHI1.DATA_EXTRACTION_BATCH_INFO_ID=SDEBI.DATA_EXTRACTION_BATCH_INFO_ID ORDER BY SDEBHI1.COMPUTATION_YEAR DESC,SDEBHI1.CREATED_DATE DESC) AS UNION_CODE&#xD;&#xA;      FROM&#xD;&#xA;  SGT_DATA_EXTRACTION_BATCH_INFO SDEBI WITH(NOLOCK)    &#xD;&#xA;  JOIN SGT_YEAR_END_DATA_EXTRACTION_HEADER SYEDEH WITH(NOLOCK) ON SYEDEH.YEAR_END_DATA_EXTRACTION_HEADER_ID = SDEBI.YEAR_END_DATA_EXTRACTION_HEADER_ID   &#xD;&#xA;  ) as Temp">
      <parameters />
    </query>
    <query ID="LoadLocalPlanInfoForPreviousYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  LOCAL_600_FLAG,&#xA; LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xA; LOCAL_600_PREMERGER_BENEFIT,&#xA; LOCAL_666_FLAG,&#xA; LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xA; LOCAL_666_PREMERGER_BENEFIT,&#xA;  LOCAL_700_FLAG,&#xA; LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xA; LOCAL_700_PREMERGER_BENEFIT,&#xA; LOCAL_52_FLAG,&#xA; LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xA; LOCAL_52_PREMERGER_BENEFIT,&#xA; LOCAL_161_FLAG,&#xA; LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xA; LOCAL_161_PREMERGER_BENEFIT &#xA;FROM&#xA;  SGT_YEAR_END_DATA_EXTRACTION_HEADER SYED WITH(NOLOCK)  &#xA;  JOIN SGT_DATA_EXTRACTION_BATCH_INFO SDEB WITH(NOLOCK) &#xA;  ON SYED.YEAR_END_DATA_EXTRACTION_HEADER_ID = SDEB.YEAR_END_DATA_EXTRACTION_HEADER_ID &#xA;WHERE&#xA;  YEAR = @YEAR AND&#xA;  PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAllPlanYears" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  distinct YEAR &#xA;FROM&#xA;  SGT_YEAR_END_DATA_EXTRACTION_HEADER WITH(NOLOCK)">
      <parameters />
    </query>
    <query ID="GetDataForGivenYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT(SDEBI.PERSON_ID), &#xA;  CONVERT(datetime, DBO.fn_GET_DECRYPTED_TEXT(SDEBI.PERSON_DOB), 101) AS PERSON_DOB,&#xA;  SDEBI.STATUS_CODE_VALUE, &#xA;  SDEBI.TOTAL_QUALIFIED_YEARS, &#xA;  SDEBI.YTD_HOURS_FOR_LAST_COMP_YEAR, &#xA;  SDEBI.BENEFIT_OPTION_CODE_VALUE,&#xA; SDEBI.BENEFICIARY_FLAG, &#xA;    SDEBI.ACCRUED_BENEFIT_TILL_LAST_COMP_YEAR,&#xA;    SCVStatusCode.DESCRIPTION AS StatusCodeDescription,&#xA;    SCVStatusCode1.DESCRIPTION AS BenefitOptionCodeDescription&#xA; FROM &#xA;   SGT_DATA_EXTRACTION_BATCH_INFO SDEBI WITH(NOLOCK) &#xA;     LEFT OUTER JOIN SGS_CODE_VALUE SCVStatusCode WITH(NOLOCK) ON SCVStatusCode.CODE_ID=SDEBI.STATUS_CODE_ID AND SCVStatusCode.CODE_VALUE=SDEBI.STATUS_CODE_VALUE&#xA;     LEFT OUTER JOIN SGS_CODE_VALUE SCVStatusCode1 WITH(NOLOCK) ON SCVStatusCode1.CODE_ID=SDEBI.BENEFIT_OPTION_CODE_ID AND SCVStatusCode1.CODE_VALUE=SDEBI.BENEFIT_OPTION_CODE_VALUE&#xA;     JOIN SGT_YEAR_END_DATA_EXTRACTION_HEADER SYEDEH WITH(NOLOCK)  &#xA;   ON SDEBI.YEAR_END_DATA_EXTRACTION_HEADER_ID = SYEDEH.YEAR_END_DATA_EXTRACTION_HEADER_ID &#xA; WHERE  &#xA;   (SDEBI.BENEFICIARY_FLAG is NULL OR SDEBI.BENEFICIARY_FLAG = '' OR SDEBI.BENEFICIARY_FLAG = 'N')  &#xA;   AND SDEBI.PERSON_ID IN &#xA;   (46,&#xA;47,&#xA;1,&#xA;15901,&#xA;17587,&#xA;20291,&#xA;22353,&#xA;25080,&#xA;26202,&#xA;569,&#xA;793,&#xA;771,&#xA;569,&#xA;587,&#xA;10117,&#xA;4964,&#xA;223,&#xA;169,&#xA;85,&#xA;8,&#xA;5,&#xA;4,&#xA;78,&#xA;2,&#xA;74,&#xA;73,&#xA;24669,&#xA;25129,&#xA;767,&#xA;287,&#xA;416,&#xA;280,&#xA;526,&#xA;336,&#xA;243,&#xA;331,&#xA;30807,&#xA;211243,&#xA;259301,&#xA;317828,&#xA;12019,&#xA;29909,&#xA;41507,&#xA;45687,&#xA;192023,&#xA;213724,&#xA;144,&#xA;324,&#xA;729,&#xA;1053,&#xA;79,&#xA;2864,&#xA;3603,&#xA;6556,&#xA;6294,&#xA;6129,&#xA;9728,&#xA;9470,&#xA;9591,&#xA;8600,&#xA;8981,&#xA;15901,&#xA;18801,&#xA;18670,&#xA;19410,&#xA;20640,&#xA;22022,&#xA;45314,&#xA;52640,&#xA;46894,&#xA;55933,&#xA;68773,&#xA;110579,&#xA;126082,&#xA;203704,&#xA;253080,&#xA;293632,&#xA;300817,&#xA;321442,&#xA;463929,22374,63601) &#xA;AND  SYEDEH.YEAR = @YEAR&#xA;   ">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptRetireeIAPBalance" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT &#xD;&#xA;      MPI_PERSON_ID,&#xD;&#xA;      (SP.FIRST_NAME + ' ' + SP.LAST_NAME) NAME ,&#xD;&#xA;      SBA.RETIREMENT_DATE ,&#xD;&#xA;      SCVA.DESCRIPTION AS BENEFIT_TYPE,&#xD;&#xA;      SCV.DESCRIPTION AS RETIREMENT_TYPE,&#xD;&#xA;      SUM(CASE WHEN  TRANSACTION_TYPE_VALUE = 'PMNT' AND YEAR(RC1.TRANSACTION_DATE) &lt;= YEAR(GETDATE())- 1 THEN RC1.IAP_BALANCE_AMOUNT &#xD;&#xA;           WHEN  (TRANSACTION_TYPE_VALUE &lt;&gt; 'PMNT' OR TRANSACTION_TYPE_VALUE IS NULL) AND YEAR(RC1.EFFECTIVE_DATE) &lt;= YEAR(GETDATE())- 1 THEN IAP_BALANCE_AMOUNT ELSE 0 END) IAP_BALANCE,&#xD;&#xA;      SUM(RC1.IAP_BALANCE_AMOUNT) TO_DATE_BALANCE,SBA.RETIREMENT_DATE PROCESSED_DATE,&#xD;&#xA;      CONVERT(varchar(10), DATEADD(YEAR, -1, DATEADD(yy, DATEDIFF(yy,0,GETDATE()) + 1, -1)),101) AS CUTOFFDATE &#xD;&#xA; FROM SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID = 1&#xD;&#xA;                 INNER  JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC1 WITH(NOLOCK) &#xD;&#xA;                 ON SPA.PERSON_ACCOUNT_ID = RC1.PERSON_ACCOUNT_ID &#xD;&#xA;      INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SP.PERSON_ID = SBA.PERSON_ID &#xD;&#xA;      INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK)ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND X.PLAN_ID = 1 &#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR PBXR ON PBXR.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID&#xD;&#xA;      LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SBAD.BENEFIT_SUBTYPE_ID AND SCV.CODE_VALUE = SBAD.BENEFIT_SUBTYPE_VALUE &#xD;&#xA;                 LEFT OUTER JOIN SGS_CODE_VALUE SCVA ON SCVA.CODE_ID = SBA.BENEFIT_TYPE_ID AND SCVA.CODE_VALUE = SBA.BENEFIT_TYPE_VALUE&#xD;&#xA;                 WHERE SBA.APPLICATION_STATUS_VALUE = 'APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL')&#xD;&#xA;                 AND (SBA.MIN_DISTRIBUTION_FLAG IS NULL OR SBA.MIN_DISTRIBUTION_FLAG &lt;&gt; 'Y')&#xD;&#xA;                 AND YEAR(SBA.RETIREMENT_DATE) &lt; YEAR(GETDATE())&#xD;&#xA;                 GROUP BY SP.MPI_PERSON_ID,SP.FIRST_NAME,SP.LAST_NAME,SCV.DESCRIPTION,SBA.RETIREMENT_DATE,SCVA.DESCRIPTION&#xD;&#xA;                 HAVING  SUM(CASE WHEN  TRANSACTION_TYPE_VALUE = 'PMNT' AND YEAR(RC1.TRANSACTION_DATE) &lt;= YEAR(GETDATE())- 1 THEN RC1.IAP_BALANCE_AMOUNT &#xD;&#xA;                                                WHEN  (TRANSACTION_TYPE_VALUE &lt;&gt; 'PMNT' OR TRANSACTION_TYPE_VALUE IS NULL) AND YEAR(RC1.EFFECTIVE_DATE) &lt;= YEAR(GETDATE())- 1 THEN IAP_BALANCE_AMOUNT ELSE 0 END) &gt; @idecBalance &#xD;&#xA;                 ORDER BY SBA.RETIREMENT_DATE DESC">
      <parameters>
        <parameter ID="@idecBalance" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptOverPaymentReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @TODAYS_DATE DATETIME &#xA;DECLARE @LAST_DAY_OF_PRIOR_MONTH &#xA;DATETIME DECLARE @FIRST_DAY_OF_LAST_MONTH &#xA;DATETIME SET @TODAYS_DATE = GETDATE()&#xA;SET @LAST_DAY_OF_PRIOR_MONTH = (SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@TODAYS_DATE)),@TODAYS_DATE),101)) &#xA;SET @FIRST_DAY_OF_LAST_MONTH = (SELECT CONVERT(VARCHAR(25),DATEADD(DAY,-(DAY(DATEADD(MONTH, 1,@TODAYS_DATE)) - 1),DATEADD(MONTH,-1, @TODAYS_DATE)),101)) &#xA;&#xA;SELECT &#xA;SP.MPI_PERSON_ID,(SELECT CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(@TODAYS_DATE)),@TODAYS_DATE),101)) ,&#xA; CONVERT(VARCHAR(25),(SELECT DATEADD(DAY,-(DAY(DATEADD(MONTH, 1,@TODAYS_DATE)) - 1),DATEADD(MONTH,-1, @TODAYS_DATE))),101) ,&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS NAME,&#xA;SCVOVERPAYMENT.DESCRIPTION AS STATUS_OF_OVERPAYMENT,&#xA;SCVREASON.DESCRIPTION AS REASON,&#xA;P.PLAN_CODE AS PLAN_NAME,&#xA;SPA.NONTAXABLE_BEGINNING_BALANCE AS BEGINING_BALANCE,&#xA;SUM(ISNULL(SRS.REIMBURSEMENT_AMOUNT,0) - ISNULL(SRS.REIMBURSEMENT_AMOUNT_PAID,0)) AS CURRENT_BALANCE,&#xA;SUM(ISNULL(SPA.NONTAXABLE_BEGINNING_BALANCE,0) - ISNULL(SRS.REIMBURSEMENT_AMOUNT,0) - ISNULL(SRS.REIMBURSEMENT_AMOUNT_PAID,0)) AS ADJUSTMENT,&#xA;CASE WHEN SRS.REIMBURSEMENT_STATUS_VALUE = 'WROF' THEN SUM((ISNULL(SRS.REIMBURSEMENT_AMOUNT,0) - ISNULL(SRS.REIMBURSEMENT_AMOUNT_PAID,0))) ELSE 0 END AS WRITE_OFF_AMOUNT,&#xA;SUM(ISNULL(SRS.REIMBURSEMENT_AMOUNT_PAID,0)) AS AMOUNT_PAID&#xA;FROM SGT_REPAYMENT_SCHEDULE SRS  WITH(NOLOCK)&#xA;&#xA;LEFT OUTER JOIN SGT_REIMBURSEMENT_DETAILS SRD WITH(NOLOCK) ON SRD.REPAYMENT_SCHEDULE_ID = SRS.REPAYMENT_SCHEDULE_ID&#xA;INNER JOIN SGT_PAYEE_ACCOUNT_RETRO_PAYMENT SPARP WITH(NOLOCK) ON SPARP.PAYEE_ACCOUNT_RETRO_PAYMENT_ID = SRS.PAYEE_ACCOUNT_RETRO_PAYMENT_ID&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA WITH(NOLOCK) ON SPA.PAYEE_ACCOUNT_ID = SPARP.PAYEE_ACCOUNT_ID&#xA;INNER JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPBX.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID &#xA;INNER JOIN SGT_PLAN P WITH(NOLOCK) ON P.PLAN_ID = SPBX.PLAN_ID &#xA;INNER JOIN SGS_CODE_VALUE SCVOVERPAYMENT WITH(NOLOCK)ON SCVOVERPAYMENT.CODE_ID = SRS.REIMBURSEMENT_STATUS_ID  AND SCVOVERPAYMENT.CODE_VALUE = SRS.REIMBURSEMENT_STATUS_VALUE  &#xA;INNER JOIN SGS_CODE_VALUE SCVREASON WITH(NOLOCK) ON SCVREASON.CODE_ID = SPARP.RETRO_PAYMENT_TYPE_ID AND SCVREASON.CODE_VALUE = SPARP.RETRO_PAYMENT_TYPE_VALUE  &#xA;&#xA;WHERE &#xA; SRS.REIMBURSEMENT_STATUS_VALUE IN ('PEND','INPR') &#xA; AND SPARP.IS_OVERPAYMENT_FLAG = 'Y'&#xA; AND SRS.EFFECTIVE_DATE &gt;=  @FIRST_DAY_OF_LAST_MONTH &#xA; AND SRS.EFFECTIVE_DATE &lt;=  @LAST_DAY_OF_PRIOR_MONTH&#xA; &#xA;&#xA;GROUP BY SP.MPI_PERSON_ID,SRS.REIMBURSEMENT_STATUS_VALUE, SPA.NONTAXABLE_BEGINNING_BALANCE, P.PLAN_CODE&#xA;   ,SCVOVERPAYMENT.DESCRIPTION ,SCVREASON.DESCRIPTION, SP.FIRST_NAME, SP.LAST_NAME&#xA;&#xA;">
      <parameters />
    </query>
    <query ID="rpt5500Report" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="-- 5500 IAP Count&#xD;&#xA;-- declare @Computation_Year int;&#xD;&#xA;-- set @Computation_Year = 2016&#xD;&#xA;&#xD;&#xA;-- GET ALL PARTICIPANTS BASED ON COMPUTATION YEAR&#xD;&#xA;SELECT P.MPI_PERSON_ID, ID.PERSON_ACCOUNT_ID, COMPUTATION_YEAR,FUND_TYPE, IAP_ALLOCATION_CATEGORY_ID, IAP_ALLOCATION_CATEGORY_VALUE, ID.ENDING_BALANCE&#xD;&#xA;INTO #TMP_IAP_COMP_YR &#xD;&#xA;FROM dbo.SGT_IAP_ALLOCATION_DETAIL ID&#xD;&#xA;LEFT JOIN SGT_PERSON_ACCOUNT SPA ON ID.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT JOIN SGT_PERSON P ON P.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;WHERE ID.COMPUTATION_YEAR = @Computation_Year&#xD;&#xA;&#xD;&#xA;-- LIST OF PARTICIPANTS WITH ENDING BALANCE &gt; 10&#xD;&#xA;SELECT  MPI_PERSON_ID, ENDING_BALANCE&#xD;&#xA;INTO #TMP_IAP_GT10&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA; select MPI_PERSON_ID, SUM(ENDING_BALANCE) as ENDING_BALANCE&#xD;&#xA; from  #TMP_IAP_COMP_YR&#xD;&#xA; GROUP BY MPI_PERSON_ID&#xD;&#xA;) x&#xD;&#xA;where ENDING_BALANCE &gt; 10&#xD;&#xA;&#xD;&#xA;-- LIST OF IAP DETAILS WITH ENDING BALANCE &gt; 10&#xD;&#xA;SELECT a.MPI_PERSON_ID, PERSON_ACCOUNT_ID, COMPUTATION_YEAR,FUND_TYPE, IAP_ALLOCATION_CATEGORY_ID, IAP_ALLOCATION_CATEGORY_VALUE, a.ENDING_BALANCE&#xD;&#xA;INTO #TMP_IAP_DETAILS_GT10&#xD;&#xA;FROM #TMP_IAP_GT10 a&#xD;&#xA;LEFT JOIN&#xD;&#xA;(&#xD;&#xA; SELECT *,&#xD;&#xA; ROW_NUMBER() OVER (PARTITION BY MPI_PERSON_ID ORDER BY MPI_PERSON_ID, FUND_TYPE) AS ROWID&#xD;&#xA; FROM #TMP_IAP_COMP_YR&#xD;&#xA;) x on x.MPI_PERSON_ID = a.MPI_PERSON_ID and ROWID = 1&#xD;&#xA;&#xD;&#xA;SELECT IAP_COUNT, PENSION_COUNT, Remarks, idx&#xD;&#xA;INTO #TMP_IAP_COUNT&#xD;&#xA;FROM&#xD;&#xA; (&#xD;&#xA; SELECT TOTAL_COUNT  as IAP_COUNT, 0 as PENSION_COUNT,'Previous Year IAP count' as Remarks, 0 as idx  &#xD;&#xA; FROM SGT_5500_REPORT&#xD;&#xA; WHERE COMPUTATION_YEAR = @Computation_Year - 1 and PLAN_ID = 1&#xD;&#xA; UNION ALL&#xD;&#xA; SELECT NULL  as IAP_COUNT, NULL as PENSION_COUNT,'Number of participants 6' as Remarks, NULL as idx &#xD;&#xA; UNION ALL&#xD;&#xA; SELECT ACTIVE_PARTICIPANTS_6A2_COUNT as IAP_COUNT, NULL as PENSION_COUNT, 'Active participants 6a(1)' as Remarks, 1 as idx  &#xD;&#xA; FROM SGT_5500_REPORT&#xD;&#xA; WHERE COMPUTATION_YEAR = @Computation_Year - 1 and PLAN_ID = 1 &#xD;&#xA; UNION ALL&#xD;&#xA; -- active participants 6a(2)&#xD;&#xA; SELECT COUNT(*) as IAP_COUNT, NULL as PENSION_COUNT, 'Active participants 6a(2)' as Remarks, 2 as idx &#xD;&#xA; FROM #TMP_IAP_DETAILS_GT10 &#xD;&#xA; WHERE IAP_ALLOCATION_CATEGORY_VALUE IN ('DROA','INAZ', 'MDAR', 'NEWP', 'ACTV') &#xD;&#xA; AND COMPUTATION_YEAR = @Computation_Year &#xD;&#xA; UNION ALL&#xD;&#xA; -- retired participants&#xD;&#xA; SELECT COUNT(*) as IAP_COUNT, NULL as PENSION_COUNT, 'Retired participants 6b' as Remarks, 3 as idx&#xD;&#xA; FROM #TMP_IAP_DETAILS_GT10 &#xD;&#xA; WHERE IAP_ALLOCATION_CATEGORY_VALUE IN ('RETR','RO65','RU65') &#xD;&#xA; AND COMPUTATION_YEAR = @Computation_Year &#xD;&#xA; UNION ALL&#xD;&#xA; -- other retired or separated participants&#xD;&#xA; SELECT COUNT(*) as IAP_COUNT, NULL as PENSION_COUNT, 'Other retired or separated participants 6c' as Remarks, 4 as idx&#xD;&#xA; FROM #TMP_IAP_DETAILS_GT10&#xD;&#xA; WHERE IAP_ALLOCATION_CATEGORY_VALUE IN ('VBIS') &#xD;&#xA; AND COMPUTATION_YEAR = @Computation_Year&#xD;&#xA; UNION ALL&#xD;&#xA; SELECT 0 AS IAP_count, NULL as PENSION_COUNT, 'Subtotal 6d' as Remarks, 5 as idx&#xD;&#xA; UNION ALL&#xD;&#xA; --deceased participants&#xD;&#xA; SELECT COUNT(*) as IAP_COUNT, NULL as PENSION_COUNT, 'Deceased participants 6e' as Remarks, 6 as idx&#xD;&#xA; FROM #TMP_IAP_DETAILS_GT10&#xD;&#xA; WHERE IAP_ALLOCATION_CATEGORY_VALUE IN ('ACTD','ADFP') &#xD;&#xA; AND COMPUTATION_YEAR = @Computation_Year&#xD;&#xA; UNION ALL &#xD;&#xA; SELECT 0 AS IAP_count, NULL as PENSION_COUNT, 'Total 6f' as Remarks, 7 as idx&#xD;&#xA; UNION ALL&#xD;&#xA; SELECT 0 AS IAP_count, NULL as PENSION_COUNT, 'Counts of Participants 6g' as Remarks, 8 as idx&#xD;&#xA;) X&#xD;&#xA;&#xD;&#xA;declare @subtotal int, @total int&#xD;&#xA;select @subtotal = sum(IAP_COUNT) FROM #TMP_IAP_COUNT WHERE idx &gt; 1 and idx &lt; 5&#xD;&#xA;&#xD;&#xA;update #TMP_IAP_COUNT&#xD;&#xA;set IAP_COUNT = @subtotal&#xD;&#xA;where idx = 5&#xD;&#xA;&#xD;&#xA;select @total = sum(IAP_COUNT) FROM #TMP_IAP_COUNT WHERE idx &gt; 4 and idx &lt; 7&#xD;&#xA;&#xD;&#xA;update #TMP_IAP_COUNT&#xD;&#xA;set IAP_COUNT = @total&#xD;&#xA;where idx = 7&#xD;&#xA;&#xD;&#xA;-- PENSION COUNT&#xD;&#xA;declare @pension_count int&#xD;&#xA;set @pension_count = 81250&#xD;&#xA;&#xD;&#xA;--per email from Lizette on 20190612&#xD;&#xA;--pension counts come from Actuary File and reported differently&#xD;&#xA;--select @pension_count = COUNT(*) from SGT_DATA_EXTRACTION_BATCH_INFO&#xD;&#xA;--where YEAR_END_DATA_EXTRACTION_HEADER_ID in &#xD;&#xA;--(&#xD;&#xA;-- select YEAR_END_DATA_EXTRACTION_HEADER_ID from [dbo].[SGT_YEAR_END_DATA_EXTRACTION_HEADER]&#xD;&#xA;-- where YEAR = @Computation_Year&#xD;&#xA;--)&#xD;&#xA;--AND PLAN_ID = 2 AND PARTICIPANT_DATE_OF_DEATH IS NULL&#xD;&#xA;&#xD;&#xA;update #TMP_IAP_COUNT&#xD;&#xA;set PENSION_COUNT = @pension_count&#xD;&#xA;where idx = 0&#xD;&#xA;&#xD;&#xA;SELECT IAP_COUNT, PENSION_COUNT, Remarks, idx from #TMP_IAP_COUNT&#xD;&#xA;&#xD;&#xA;drop table #TMP_IAP_COUNT, #TMP_IAP_COMP_YR, #TMP_IAP_DETAILS_GT10, #TMP_IAP_GT10">
      <parameters>
        <parameter ID="@Computation_Year" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GenerateDataForAnnualStatement" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--Change in first statement data query. Replaced in query with exists query. &#xD;&#xA;TRUNCATE TABLE dbo.[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;&#xD;&#xA;IF @IS_MD_FLAG = 'N' AND @IS_RETR_SPECIAL_ACCT_FLAG = 'N' AND @IS_REEMPLOYED_UNDER_65_FLAG = 'N' AND @IS_PENSION_ONLY_FLAG = 'N'&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;;WITH ANNUAL_WITH_ADD&#xD;&#xA;AS&#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      CASE WHEN ISNULL(VESTED_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 AND ISNULL(TOTAL_VESTED_YEARS,0) &lt;&gt; 0&#xD;&#xA;      THEN (ISNULL(TOTAL_VESTED_YEARS,0) - 1) ELSE ISNULL(TOTAL_VESTED_YEARS,0)&#xD;&#xA;      END AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#xD;&#xA;      CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 AND ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) &lt;&gt; 0&#xD;&#xA;      THEN (ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) - 1) ELSE ISNULL(SD.TOTAL_QUALIFIED_YEARS,0)&#xD;&#xA;      END AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.YTD_HOURS_BEFORE_LAST_COMP_YEAR,0) - ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      ISNULL((SELECT SUM(ISNULL(RC.EE_CONTRIBUTION_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC &#xD;&#xA;            WHERE RC.PERSON_ACCOUNT_ID = SPEE.PERSON_ACCOUNT_ID AND RC.CONTRIBUTION_TYPE_VALUE = 'EE' AND (RC.TRANSACTION_TYPE_VALUE IS NULL OR RC.TRANSACTION_TYPE_VALUE =  'PMNT')),0) AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.ACCRUED_BENEFIT_TILL_PREVIOUS_YEAR,0) - ISNULL(SD.ACCRUED_BENEFIT_FOR_PRIOR_YEAR,0) AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      CASE WHEN ISNULL(VESTED_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 THEN 1 ELSE 0 END AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 THEN 1 ELSE 0 END AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.ACCRUED_BENEFIT_FOR_PRIOR_YEAR,0) MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      MPI_LATE_HOURS_IN_LAST_COMP_YEAR_FOR_PRIOR_YEARS AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      CAST(CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 THEN 1 ELSE 0 END&#xD;&#xA;      + CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 AND ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) &lt;&gt; 0 THEN (ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) - 1) &#xD;&#xA;            ELSE &#xD;&#xA;            CASE WHEN  ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) &gt; 0 THEN SD.TOTAL_QUALIFIED_YEARS ELSE 0 END &#xD;&#xA;            END AS INT) AS MPI_TOTAL_VESTED_YEARS,&#xD;&#xA;      &#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L600_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L600_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L600_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_600_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L666_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L666_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L666_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_666_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L700_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L700_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L700_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_700_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;       CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L52_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST( (SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L52_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;     INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L52_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_52_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L161_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L161_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SP.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L161_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_161_PREMERGER_BENEFIT, 0) &#xD;&#xA;       (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L161_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.SYSTEM_BEGINNING_BALANCE,0) AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_SPECIAL_ACCOUNT_AMOUNT,0) AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_SPECIAL_ACCOUNT_AMOUNT,0) AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.IAP_PRIOR_ADJUSTMENT,0) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L52_PRIOR_ADJUSTMENT,0) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L161_PRIOR_ADJUSTMENT,0) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION1_AMOUNT,0) AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L52_ALLOCATION1_AMOUNT,0) AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L161_ALLOCATION1_AMOUNT,0) AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      ISNULL(IAP.ALLOCATION2_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_INVST_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_FRFT_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION4_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_INVST_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_FRFT_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_PAYOUTS,0) IAP_PAYOUTS,    &#xD;&#xA;      ISNULL(IAP.L052_PAYOUTS,0) L052_PAYOUTS,&#xD;&#xA;      ISNULL(IAP.L161_PAYOUTS,0)L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_BALANCE_FOR_CURRENT_YEAR,0) AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_BALANCE_FOR_CURRENT_YEAR,0) AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_BALANCE_FOR_CURRENT_YEAR,0) AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SD.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      'N' AS MD_FLAG,&#xD;&#xA;&#x9;  'N' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'N' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'N' AS MPI_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 3&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL600_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 4&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL666_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 6&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL700_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 7&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL52_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 8&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL161_RETIREE_FLAG,&#xD;&#xA;&#x9;   'N' AS PENSION_ONLY_FLAG&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT PERSON_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;      ISNULL(ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) &#xD;&#xA;      + ISNULL(RETIREMENT_YEAR_ALLOCATION2_AMOUNT,0) + ISNULL(RETIREMENT_YEAR_ALLOCATION4_AMOUNT,0) ELSE 0 END)ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_AMOUNT,0))ALLOCATION2_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_FRFT_AMOUNT,0)) ALLOCATION2_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_INVST_AMOUNT,0)) ALLOCATION2_INVST_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_AMOUNT,0)) ALLOCATION4_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_FRFT_AMOUNT,0)) ALLOCATION4_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_INVST_AMOUNT,0)) ALLOCATION4_INVST_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;      ISNULL(L52_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L52_ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;      ISNULL(L161_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L161_ALLOCATION1_AMOUNT,      &#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L161_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L052_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS IAP_PAYOUTS,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(ISNULL(L52_SPECIAL_ACCOUNT_AMOUNT,0))L52_SPECIAL_ACCOUNT_AMOUNT ,&#xD;&#xA;SUM(ISNULL(L161_SPECIAL_ACCOUNT_AMOUNT,0)) L161_SPECIAL_ACCOUNT_AMOUNT,&#xD;&#xA;SUM(ISNULL(SYSTEM_BEGINNING_BALANCE,0))  SYSTEM_BEGINNING_BALANCE&#xD;&#xA;FROM SGT_IAP_ALLOCATION_DETAIL ID WHERE IAP_ALLOCATION_CATEGORY_VALUE NOT IN ('ACTD','RU65') AND ID.COMPUTATION_YEAR = @YEAR&#xD;&#xA;GROUP BY PERSON_ACCOUNT_ID HAVING SUM(ISNULL(ALLOCATION1_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;OR SUM(ISNULL(L52_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(L161_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(ALLOCATION4_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;) IAP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = IAP.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION D ON SP.PERSON_ID = D.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG','CRTF')&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SP.PERSON_ID = SBA.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID                                                                         &#xD;&#xA;--LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL &#xD;&#xA;AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;AND DATA_EXTRACTION_BATCH_INFO_ID = (SELECT TOP(1)Q.DATA_EXTRACTION_BATCH_INFO_ID FROM SGT_DATA_EXTRACTION_BATCH_INFO Q WHERE Q.PERSON_ID = SP.PERSON_ID AND Q.BENEFICIARY_FLAG = 'M' &#xD;&#xA;                                                      AND Q.YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR)&#xD;&#xA;                                                      AND Q.STATUS_CODE_VALUE NOT IN ('H')&#xD;&#xA;                                                      ORDER BY Q.PLAN_ID)&#xD;&#xA;AND (MD_FLAG IS NULL OR MD_FLAG = 'N')&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PERSON_ACCOUNT A &#xD;&#xA;                  INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PE ON A.PERSON_ACCOUNT_ID = PE.PERSON_ACCOUNT_ID AND A.PLAN_ID =2&#xD;&#xA;                  WHERE A.PERSON_ID = SD.PERSON_ID AND PE.FORFEITURE_DATE IS NOT NULL AND YEAR(PE.FORFEITURE_DATE) = @YEAR)&#xD;&#xA;&#xD;&#xA;--LEFT OUTER JOIN OPUS_CUSTOM..MISSING_VESTED_YEARS MVY ON MVY.PERSON_SSN = SD.PERSON_SSN&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPEE ON  SD.PERSON_ID = SPEE.PERSON_ID AND SPEE.PLAN_ID = 2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAM ON SP.PERSON_ID= SPAM.PERSON_ID AND SPAM.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPAM.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE D.DEATH_NOTIFICATION_ID IS NULL &#xD;&#xA;/*&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND SP.PERSON_ID not in(&#x9;select e.person_id &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from SGT_BENEFIT_APPLICATION e &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inner join SGT_BENEFIT_APPLICATION_DETAIL f on e.benefit_application_id = f.benefit_application_id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inner join sgt_plan_benefit_xr g on f.plan_benefit_id = g.plan_benefit_id and g.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where e.person_id = SP.person_id and e.benefit_type_value in('RTMT','DSBL') and e.application_status_value = 'APPR'&#xD;&#xA;&#x9;&#x9;   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND NOT EXISTS (&#x9;select e.person_id &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from SGT_BENEFIT_APPLICATION e &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inner join SGT_BENEFIT_APPLICATION_DETAIL f on e.benefit_application_id = f.benefit_application_id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inner join sgt_plan_benefit_xr g on f.plan_benefit_id = g.plan_benefit_id and g.PLAN_ID = 2&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where e.person_id = SP.person_id and e.benefit_type_value in('RTMT','DSBL') and e.application_status_value = 'APPR'&#xD;&#xA;&#x9;&#x9;   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     )&#xD;&#xA;&#xD;&#xA;AND ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;)&#xD;&#xA;INSERT INTO [dbo].[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (&#xD;&#xA;            [PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]&#xD;&#xA;           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;           )&#xD;&#xA;SELECT  &#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,CASE WHEN ISNULL(MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0) &gt;= 0 &#xD;&#xA;                         THEN ISNULL(MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0)&#xD;&#xA;                        ELSE MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR END AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,CASE WHEN ISNULL([MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR],0)- ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0) &gt;= 0 &#xD;&#xA;                         THEN ISNULL([MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR],0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0)&#xD;&#xA;                        ELSE [MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR] END AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,CASE WHEN ISNULL([MPI_TOTAL_VESTED_YEARS],0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0) &gt;= 0 &#xD;&#xA;                         THEN ISNULL([MPI_TOTAL_VESTED_YEARS],0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0)&#xD;&#xA;                        ELSE [MPI_TOTAL_VESTED_YEARS] END AS MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L052_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   , [PENSION_ONLY_FLAG]&#xD;&#xA;FROM ANNUAL_WITH_ADD&#xD;&#xA;&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @IS_PENSION_ONLY_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT top 1 with ties PBC.PERSON_ACCOUNT_ID,P.MPI_PERSON_ID, P.PERSON_ID, P.SSN, P.DATE_OF_BIRTH,SDA.QUALIFIED_DATE AS RETIREMENT_DATE,SPA.BENEFIT_ACCOUNT_TYPE_VALUE,NULL AS Min_Distribution&#xD;&#xA;into #temp2&#xD;&#xA;FROM SGT_PAYEE_ACCOUNT SPA&#xD;&#xA;left outer JOIN SGT_DRO_BENEFIT_DETAILS SDBD&#xD;&#xA;ON SPA.DRO_APPLICATION_DETAIL_ID = SDBD.DRO_BENEFIT_ID&#xD;&#xA;left outer JOIN SGT_DRO_APPLICATION SDA&#xD;&#xA;ON SDA.DRO_APPLICATION_ID = SDBD.DRO_APPLICATION_ID&#xD;&#xA;inner join SGT_PAYEE_BENEFIT_ACCOUNT PBC ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = PBC.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;inner join SGT_PLAN_BENEFIT_XR XR ON SPA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID&#xD;&#xA;INNER JOIN SGT_PERSON P ON P.PERSON_ID =PBC.PERSON_ID&#xD;&#xA;WHERE 1=1 &#xD;&#xA;AND XR.PLAN_ID = 1 and p.DATE_OF_DEATH is null&#xD;&#xA;AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE in('QDRO','DSBL','RTMT')&#xD;&#xA;--AND P.MPI_PERSON_ID in ('M30016877', 'M01425852')&#xD;&#xA;AND (SELECT TOP(1)STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;              WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;              IN ('CMPL') &#xD;&#xA;and not exists( select BA.PERSON_ID from SGT_BENEFIT_APPLICATION BA&#xD;&#xA;                 Inner join SGT_BENEFIT_APPLICATION_DETAIL BAD on BA.BENEFIT_APPLICATION_ID = bad.BENEFIT_APPLICATION_ID&#xD;&#xA;                           inner join SGT_PLAN_BENEFIT_XR xr on  bad.PLAN_BENEFIT_ID = xr.PLAN_BENEFIT_ID and xr.PLAN_ID=2&#xD;&#xA;                           where BA.APPLICATION_STATUS_VALUE = 'APPR' AND ba.BENEFIT_TYPE_VALUE IN('DSBL','RTMT') and ba.PERSON_ID =PBC.PERSON_ID)&#xD;&#xA;AND exists( SELECT PAC.PERSON_ID from SGT_PERSON_ACCOUNT  PAC &#xD;&#xA;                     INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PAE ON PAC.PERSON_ACCOUNT_ID = PAE.PERSON_ACCOUNT_ID &#xD;&#xA;                     &#xD;&#xA;                     where PERSON_ID= PBC.PERSON_ID  and pac.PLAN_ID=2 AND PAE.VESTED_DATE IS NOT NULL and (pae.FORFEITURE_DATE is null or pae.VESTED_DATE &gt; pae.FORFEITURE_DATE ))&#xD;&#xA;AND not exists( select 1 from SGT_PAYEE_ACCOUNT PA&#xD;&#xA;                           INNER JOIN SGT_PLAN_BENEFIT_XR XR ON PA.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID WHERE PA.PERSON_ID =SPA.PERSON_ID AND XR.PLAN_ID=2&#xD;&#xA;                           AND (SELECT TOP(1)STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;                                  WHERE Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                                  &lt;&gt; 'CNCL' )&#xD;&#xA;&#xD;&#xA;--and not EXISTS (SELECT PERSON_ID  FROM  #TEMP1 WHERE PERSON_ID = PBC.PERSON_ID )&#xD;&#xA;and not exists(SELECT 1&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC &#xD;&#xA; WHERE  SPARC.PERSON_ACCOUNT_ID =PBC.PERSON_ACCOUNT_ID&#xD;&#xA;GROUP BY SPARC.PERSON_ACCOUNT_ID HAVING SUM(ISNULL(SPARC.IAP_BALANCE_AMOUNT,0))   &gt; 0 &#xD;&#xA; )&#xD;&#xA;order by row_number() over (partition by PBC.PERSON_ACCOUNT_ID, P.MPI_PERSON_ID order by PBC.PERSON_ACCOUNT_ID desc)&#xD;&#xA;;WITH ANNUAL_WITH_ADD&#xD;&#xA;AS&#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      CASE WHEN ISNULL(VESTED_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 AND ISNULL(TOTAL_VESTED_YEARS,0) &lt;&gt; 0&#xD;&#xA;      THEN (ISNULL(TOTAL_VESTED_YEARS,0) - 1) ELSE ISNULL(TOTAL_VESTED_YEARS,0)&#xD;&#xA;      END AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#xD;&#xA;      CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 AND ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) &lt;&gt; 0&#xD;&#xA;      THEN (ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) - 1) ELSE ISNULL(SD.TOTAL_QUALIFIED_YEARS,0)&#xD;&#xA;      END AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.YTD_HOURS_BEFORE_LAST_COMP_YEAR,0) - ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      ISNULL((SELECT SUM(ISNULL(RC.EE_CONTRIBUTION_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC &#xD;&#xA;            WHERE RC.PERSON_ACCOUNT_ID = TD.PERSON_ACCOUNT_ID AND RC.CONTRIBUTION_TYPE_VALUE = 'EE' AND (RC.TRANSACTION_TYPE_VALUE IS NULL OR RC.TRANSACTION_TYPE_VALUE =  'PMNT')),0) AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.ACCRUED_BENEFIT_TILL_PREVIOUS_YEAR,0) - ISNULL(SD.ACCRUED_BENEFIT_FOR_PRIOR_YEAR,0) AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      CASE WHEN ISNULL(VESTED_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 THEN 1 ELSE 0 END AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 THEN 1 ELSE 0 END AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      ISNULL(SD.ACCRUED_BENEFIT_FOR_PRIOR_YEAR,0) MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      MPI_LATE_HOURS_IN_LAST_COMP_YEAR_FOR_PRIOR_YEARS AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;&#xD;&#xA;      CAST(CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 THEN 1 ELSE 0 END&#xD;&#xA;      + CASE WHEN ISNULL(SD.YTD_HOURS_FOR_LAST_COMP_YEAR,0) &gt;= 400 AND ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) &lt;&gt; 0 THEN (ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) - 1) &#xD;&#xA;            ELSE &#xD;&#xA;            CASE WHEN  ISNULL(SD.TOTAL_QUALIFIED_YEARS,0) &gt; 0 THEN SD.TOTAL_QUALIFIED_YEARS ELSE 0 END &#xD;&#xA;            END AS INT) AS MPI_TOTAL_VESTED_YEARS,&#xD;&#xA;      &#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L600_VESTED_YEARS,&#xD;&#xA;     -- --CAST(ISNULL(SD.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L600_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L600_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_600_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 3 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;     -- --CAST(ISNULL(SD.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      &#xD;&#xA;      CAST((SELECT  ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L666_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L666_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L666_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_666_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 4 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L700_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L700_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L700_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_700_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 6 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;       CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L52_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST( (SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS INT)&#xD;&#xA;      AS L52_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;     INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L52_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_52_PREMERGER_BENEFIT, 0) &#xD;&#xA;      (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 7 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L161_VESTED_YEARS,&#xD;&#xA;      --CAST(ISNULL(SD.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, 0)AS INT) &#xD;&#xA;      CAST((SELECT ISNULL(SPAE.LOCAL_QUALIFIED_YEARS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))AS INT)&#xD;&#xA;      AS L161_QUALIFIED_YEARS,&#xD;&#xA;      (SELECT ISNULL(LOCAL_FROZEN_HOURS,0) FROM SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SP.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPAE.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900')) AS L161_CREDITED_HOURS,&#xD;&#xA;      --ISNULL(SD.LOCAL_161_PREMERGER_BENEFIT, 0) &#xD;&#xA;       (SELECT SUM(ISNULL(SPARC.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;      INNER JOIN SGT_PERSON PERSON ON PERSON.PERSON_ID = SD.PERSON_ID&#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPACC ON SPACC.PERSON_ID = PERSON.PERSON_ID AND SPARC.PERSON_ACCOUNT_ID = SPACC.PERSON_ACCOUNT_ID&#xD;&#xA;      INNER JOIN SGT_PLAN PL ON PL.PLAN_ID = SPACC.PLAN_ID&#xD;&#xA;      WHERE PL.PLAN_ID = 8 AND PL.MERGER_DATE &gt; ISNULL(E.FORFEITURE_DATE,'01/01/1900'))&#xD;&#xA;      AS L161_FROZEN_BENEFITS,&#xD;&#xA;&#xD;&#xA;      0 AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      0 AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      0 AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      0 AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      0 AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      0 AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      0 AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      0 AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      0 AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      0 AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      0 AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      0 AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      0 AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      0 AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      0 AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      0 IAP_PAYOUTS,    &#xD;&#xA;      0 L052_PAYOUTS,&#xD;&#xA;      0 L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      0 AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      0 AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      0 AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SD.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      'N' AS MD_FLAG,&#xD;&#xA;&#x9;  'N' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'N' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'N' AS MPI_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 3&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL600_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 4&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL666_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 6&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL700_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 7&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL52_RETIREE_FLAG,&#xD;&#xA;&#x9;   CASE WHEN CAST((&#x9;SELECT ISNULL(SBA.BENEFIT_APPLICATION_ID,0) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM SGT_BENEFIT_APPLICATION SBA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PLAN_BENEFIT_XR SPBXR ON SBAD.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID AND SPBXR.PLAN_ID = 8&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE SBA.PERSON_ID = SP.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;       ) AS int) &lt;&gt; 0 THEN 'Y' &#xD;&#xA;&#x9;&#x9;&#x9;ELSE 'N' &#xD;&#xA;&#x9;   END AS LOCAL161_RETIREE_FLAG,&#xD;&#xA;&#x9;   'Y' AS PENSION_ONLY_FLAG&#xD;&#xA;FROM #temp2 TD&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON TD.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPA.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL &#xD;&#xA;AND SD.PLAN_ID = 2 AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;)&#xD;&#xA;INSERT INTO [dbo].[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (&#xD;&#xA;            [PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]&#xD;&#xA;           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;           )&#xD;&#xA;SELECT  &#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,CASE WHEN ISNULL(MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0) &gt;= 0 &#xD;&#xA;                         THEN ISNULL(MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0)&#xD;&#xA;                        ELSE MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR END AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,CASE WHEN ISNULL([MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR],0)- ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0) &gt;= 0 &#xD;&#xA;                         THEN ISNULL([MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR],0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0)&#xD;&#xA;                        ELSE [MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR] END AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,CASE WHEN ISNULL([MPI_TOTAL_VESTED_YEARS],0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0) &gt;= 0 &#xD;&#xA;                         THEN ISNULL([MPI_TOTAL_VESTED_YEARS],0) - ISNULL(L600_QUALIFIED_YEARS,0) - ISNULL([L666_QUALIFIED_YEARS],0) &#xD;&#xA;                         - ISNULL([L700_QUALIFIED_YEARS],0) - ISNULL([L52_QUALIFIED_YEARS],0) -ISNULL([L161_QUALIFIED_YEARS],0)&#xD;&#xA;                        ELSE [MPI_TOTAL_VESTED_YEARS] END AS MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L052_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;FROM ANNUAL_WITH_ADD&#xD;&#xA;&#xD;&#xA;END&#xD;&#xA;-- MD Participants having IAP Balance Postponed.&#xD;&#xA;IF @IS_MD_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;;WITH ANNUAL_WITH_ADD_MD&#xD;&#xA;AS&#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#x9;  0 AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_TOTAL_VESTED_YEARS,      &#xD;&#xA;      0 AS L600_VESTED_YEARS,&#xD;&#xA;      0 AS L600_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L600_CREDITED_HOURS,&#xD;&#xA;      0 AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L666_VESTED_YEARS,&#xD;&#xA;      0 AS L666_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L666_CREDITED_HOURS,&#xD;&#xA;      0 AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L700_VESTED_YEARS,&#xD;&#xA;      0 AS L700_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L700_CREDITED_HOURS,&#xD;&#xA;      0 AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#x9;  0 AS L52_VESTED_YEARS,&#xD;&#xA;      0 AS L52_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L52_CREDITED_HOURS,&#xD;&#xA;      0 AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L161_VESTED_YEARS,&#xD;&#xA;      0 AS L161_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L161_CREDITED_HOURS,&#xD;&#xA;      0 AS L161_FROZEN_BENEFITS,&#xD;&#xA;      ISNULL(IAP.SYSTEM_BEGINNING_BALANCE,0) AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_SPECIAL_ACCOUNT_AMOUNT,0) AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_SPECIAL_ACCOUNT_AMOUNT,0) AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.IAP_PRIOR_ADJUSTMENT,0) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L52_PRIOR_ADJUSTMENT,0) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L161_PRIOR_ADJUSTMENT,0) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION1_AMOUNT,0) AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L52_ALLOCATION1_AMOUNT,0) AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L161_ALLOCATION1_AMOUNT,0) AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      ISNULL(IAP.ALLOCATION2_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_INVST_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_FRFT_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION4_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_INVST_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_FRFT_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_PAYOUTS,0) IAP_PAYOUTS,    &#xD;&#xA;      ISNULL(IAP.L052_PAYOUTS,0) L052_PAYOUTS,&#xD;&#xA;      ISNULL(IAP.L161_PAYOUTS,0)L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_BALANCE_FOR_CURRENT_YEAR,0) AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_BALANCE_FOR_CURRENT_YEAR,0) AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_BALANCE_FOR_CURRENT_YEAR,0) AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SD.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      SD.MD_FLAG AS MD_FLAG,&#xD;&#xA;&#x9;  'N' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'N' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'Y' AS [MPI_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL600_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL666_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL700_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL52_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL161_RETIREE_FLAG],&#xD;&#xA;&#x9;   'N' AS [PENSION_ONLY_FLAG]&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT PERSON_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;      ISNULL(ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) &#xD;&#xA;      + ISNULL(RETIREMENT_YEAR_ALLOCATION2_AMOUNT,0) + ISNULL(RETIREMENT_YEAR_ALLOCATION4_AMOUNT,0) ELSE 0 END)ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_AMOUNT,0))ALLOCATION2_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_FRFT_AMOUNT,0)) ALLOCATION2_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_INVST_AMOUNT,0)) ALLOCATION2_INVST_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_AMOUNT,0)) ALLOCATION4_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_FRFT_AMOUNT,0)) ALLOCATION4_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_INVST_AMOUNT,0)) ALLOCATION4_INVST_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;      ISNULL(L52_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L52_ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;      ISNULL(L161_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L161_ALLOCATION1_AMOUNT,      &#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L161_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L052_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS IAP_PAYOUTS,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(ISNULL(L52_SPECIAL_ACCOUNT_AMOUNT,0))L52_SPECIAL_ACCOUNT_AMOUNT ,&#xD;&#xA;SUM(ISNULL(L161_SPECIAL_ACCOUNT_AMOUNT,0)) L161_SPECIAL_ACCOUNT_AMOUNT,&#xD;&#xA;SUM(ISNULL(SYSTEM_BEGINNING_BALANCE,0))  SYSTEM_BEGINNING_BALANCE,&#xD;&#xA;TOTAL_PAYOUTS = (SELECT SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WHERE SPARC.PERSON_ACCOUNT_ID = ID.PERSON_ACCOUNT_ID AND SPARC.TRANSACTION_TYPE_VALUE = 'PMNT')&#xD;&#xA;FROM SGT_IAP_ALLOCATION_DETAIL ID WHERE IAP_ALLOCATION_CATEGORY_VALUE NOT IN ('ACTD','RU65') AND ID.COMPUTATION_YEAR = @YEAR&#xD;&#xA;GROUP BY PERSON_ACCOUNT_ID HAVING SUM(ISNULL(ALLOCATION1_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;OR SUM(ISNULL(L52_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(L161_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(ALLOCATION4_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;) IAP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = IAP.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION D ON SP.PERSON_ID = D.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG','CRTF')&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(SELECT DISTINCT SBA.BENEFIT_APPLICATION_ID, SBA.PERSON_ID FROM SGT_BENEFIT_APPLICATION SBA                                                                        &#xD;&#xA; INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID AND SBAD.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA; WHERE SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;)SBA ON SP.PERSON_ID = SBA.PERSON_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL&#xD;&#xA;AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;AND DATA_EXTRACTION_BATCH_INFO_ID = (SELECT TOP(1)Q.DATA_EXTRACTION_BATCH_INFO_ID FROM SGT_DATA_EXTRACTION_BATCH_INFO Q WHERE Q.PERSON_ID = SP.PERSON_ID AND Q.BENEFICIARY_FLAG = 'M' &#xD;&#xA;                                                      AND Q.YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR)&#xD;&#xA;                                                      AND Q.STATUS_CODE_VALUE NOT IN ('H')  --MD flag is not in withdrawal application so if withdrawal app is selected MD will will not picked up.&#xD;&#xA;                                                      ORDER BY Q.PLAN_ID)&#xD;&#xA;AND SD.MD_FLAG = 'Y'&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PERSON_ACCOUNT A &#xD;&#xA;                  INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PE ON A.PERSON_ACCOUNT_ID = PE.PERSON_ACCOUNT_ID AND A.PLAN_ID =2&#xD;&#xA;                  WHERE A.PERSON_ID = SD.PERSON_ID AND PE.FORFEITURE_DATE IS NOT NULL AND YEAR(PE.FORFEITURE_DATE) = @YEAR)&#xD;&#xA;&#xD;&#xA;--LEFT OUTER JOIN OPUS_CUSTOM..MISSING_VESTED_YEARS MVY ON MVY.PERSON_SSN = SD.PERSON_SSN&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPEE ON  SD.PERSON_ID = SPEE.PERSON_ID AND SPEE.PLAN_ID = 2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAM ON SP.PERSON_ID= SPAM.PERSON_ID AND SPAM.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPAM.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE D.DEATH_NOTIFICATION_ID IS NULL AND (IAP.TOTAL_PAYOUTS IS NULL OR IAP.TOTAL_PAYOUTS = 0)&#xD;&#xA;AND ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;AND SP.PERSON_ID NOT IN(SELECT PERSON_ID FROM TEMP_ANNUAL_STATEMENT_BATCH_DATA)&#xD;&#xA;&#xD;&#xA;union all&#xD;&#xA;SELECT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#x9;  0 AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_TOTAL_VESTED_YEARS,      &#xD;&#xA;      0 AS L600_VESTED_YEARS,&#xD;&#xA;      0 AS L600_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L600_CREDITED_HOURS,&#xD;&#xA;      0 AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L666_VESTED_YEARS,&#xD;&#xA;      0 AS L666_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L666_CREDITED_HOURS,&#xD;&#xA;      0 AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L700_VESTED_YEARS,&#xD;&#xA;      0 AS L700_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L700_CREDITED_HOURS,&#xD;&#xA;      0 AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#x9;  0 AS L52_VESTED_YEARS,&#xD;&#xA;      0 AS L52_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L52_CREDITED_HOURS,&#xD;&#xA;      0 AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L161_VESTED_YEARS,&#xD;&#xA;      0 AS L161_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L161_CREDITED_HOURS,&#xD;&#xA;      0 AS L161_FROZEN_BENEFITS,&#xD;&#xA;      ISNULL(IAP.SYSTEM_BEGINNING_BALANCE,0) AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_SPECIAL_ACCOUNT_AMOUNT,0) AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_SPECIAL_ACCOUNT_AMOUNT,0) AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.IAP_PRIOR_ADJUSTMENT,0) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L52_PRIOR_ADJUSTMENT,0) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L161_PRIOR_ADJUSTMENT,0) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION1_AMOUNT,0) AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L52_ALLOCATION1_AMOUNT,0) AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L161_ALLOCATION1_AMOUNT,0) AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      ISNULL(IAP.ALLOCATION2_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_INVST_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_FRFT_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION4_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_INVST_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_FRFT_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_PAYOUTS,0) IAP_PAYOUTS,    &#xD;&#xA;      ISNULL(IAP.L052_PAYOUTS,0) L052_PAYOUTS,&#xD;&#xA;      ISNULL(IAP.L161_PAYOUTS,0)L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_BALANCE_FOR_CURRENT_YEAR,0) AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_BALANCE_FOR_CURRENT_YEAR,0) AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_BALANCE_FOR_CURRENT_YEAR,0) AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SBA.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      SBA.MIN_DISTRIBUTION_FLAG AS MD_FLAG,&#xD;&#xA;&#x9;  'N' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'N' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'Y' AS [MPI_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL600_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL666_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL700_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL52_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL161_RETIREE_FLAG],&#xD;&#xA;&#x9;   'N' AS [PENSION_ONLY_FLAG]&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT PERSON_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;      ISNULL(ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) &#xD;&#xA;      + ISNULL(RETIREMENT_YEAR_ALLOCATION2_AMOUNT,0) + ISNULL(RETIREMENT_YEAR_ALLOCATION4_AMOUNT,0) ELSE 0 END)ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_AMOUNT,0))ALLOCATION2_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_FRFT_AMOUNT,0)) ALLOCATION2_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_INVST_AMOUNT,0)) ALLOCATION2_INVST_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_AMOUNT,0)) ALLOCATION4_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_FRFT_AMOUNT,0)) ALLOCATION4_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_INVST_AMOUNT,0)) ALLOCATION4_INVST_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;      ISNULL(L52_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L52_ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;      ISNULL(L161_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L161_ALLOCATION1_AMOUNT,      &#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L161_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L052_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS IAP_PAYOUTS,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(ISNULL(L52_SPECIAL_ACCOUNT_AMOUNT,0))L52_SPECIAL_ACCOUNT_AMOUNT ,&#xD;&#xA;SUM(ISNULL(L161_SPECIAL_ACCOUNT_AMOUNT,0)) L161_SPECIAL_ACCOUNT_AMOUNT,&#xD;&#xA;SUM(ISNULL(SYSTEM_BEGINNING_BALANCE,0))  SYSTEM_BEGINNING_BALANCE,&#xD;&#xA;TOTAL_PAYOUTS = (SELECT SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WHERE SPARC.PERSON_ACCOUNT_ID = ID.PERSON_ACCOUNT_ID AND SPARC.TRANSACTION_TYPE_VALUE = 'PMNT')&#xD;&#xA;FROM SGT_IAP_ALLOCATION_DETAIL ID WHERE IAP_ALLOCATION_CATEGORY_VALUE NOT IN ('ACTD','RU65') AND ID.COMPUTATION_YEAR = @YEAR&#xD;&#xA;GROUP BY PERSON_ACCOUNT_ID HAVING SUM(ISNULL(ALLOCATION1_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;OR SUM(ISNULL(L52_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(L161_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(ALLOCATION4_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;) IAP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = IAP.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION D ON SP.PERSON_ID = D.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG','CRTF')&#xD;&#xA;-- LEFT OUTER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL AND (SD.MD_FLAG IS NULL OR SD.MD_FLAG ='N') &#xD;&#xA;INNER JOIN (SELECT DISTINCT   SBA.PERSON_ID,SP.MPI_PERSON_ID,SP.FIRST_NAME,SP.LAST_NAME, SP.DATE_OF_BIRTH,SBA.BENEFIT_APPLICATION_ID,SBA.RETIREMENT_DATE,SBA.BENEFIT_TYPE_VALUE,SBA.APPLICATION_STATUS_VALUE,SBA.MIN_DISTRIBUTION_FLAG,SBA.MIN_DISTRIBUTION_DATE, SD.ELIGIBLE_ACTIVE_INCR_FLAG  &#xD;&#xA;FROM SGT_BENEFIT_APPLICATION SBA &#xD;&#xA;INNER JOIN SGT_PERSON SP ON SBA.PERSON_ID = SP.PERSON_ID                                                                       &#xD;&#xA; INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID &#xD;&#xA; INNER JOIN SGT_PLAN_BENEFIT_XR XR ON SBAD.PLAN_BENEFIT_ID = XR.PLAN_BENEFIT_ID&#xD;&#xA; INNER JOIN SGT_PLAN PL ON XR.PLAN_ID = PL.PLAN_ID AND PL.PLAN_ID = 2&#xD;&#xA; LEFT OUTER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL AND (SD.MD_FLAG IS NULL OR SD.MD_FLAG ='N') &#xD;&#xA;AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;&#xD;&#xA; &#xD;&#xA; WHERE SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR' AND SBAD.BENEFIT_SUBTYPE_VALUE = 'MIND' AND SBA.MIN_DISTRIBUTION_DATE &gt;SD.CREATED_DATE   AND SBA.MIN_DISTRIBUTION_FLAG ='Y'&#xD;&#xA; AND NOT EXISTS (&#x9;select e.person_id &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from SGT_BENEFIT_APPLICATION e &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inner join SGT_BENEFIT_APPLICATION_DETAIL f on e.benefit_application_id = f.benefit_application_id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inner join sgt_plan_benefit_xr g on f.plan_benefit_id = g.plan_benefit_id and g.PLAN_ID  IN (1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where e.person_id = SP.person_id and e.benefit_type_value in('RTMT','DSBL') and e.application_status_value = 'APPR'&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;   &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     )&#xD;&#xA;&#x9;AND NOT EXISTS ( SELECT PERSON_ID FROM [dbo].[SGT_ANNUAL_STATEMENT_BATCH_DATA] WHERE COMPUTATIONAL_YEAR = @YEAR AND PERSON_ID= SP.PERSON_ID)) SBA ON SP.PERSON_ID = SBA.PERSON_ID&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPEE ON  SBA.PERSON_ID = SPEE.PERSON_ID AND SPEE.PLAN_ID = 2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAM ON SP.PERSON_ID= SPAM.PERSON_ID AND SPAM.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPAM.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE D.DEATH_NOTIFICATION_ID IS NULL --AND (IAP.TOTAL_PAYOUTS IS NULL OR IAP.TOTAL_PAYOUTS = 0)&#xD;&#xA;AND ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;AND SP.PERSON_ID NOT IN(SELECT PERSON_ID FROM TEMP_ANNUAL_STATEMENT_BATCH_DATA)&#xD;&#xA;&#xD;&#xA;)&#xD;&#xA;INSERT INTO [dbo].[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (            &#xD;&#xA;&#x9;&#x9;    [PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#x9;  &#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG] &#xD;&#xA;           )&#xD;&#xA;SELECT  DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0 AS MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L052_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;FROM ANNUAL_WITH_ADD_MD&#xD;&#xA;&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;-- Retired Participants having Special Account Balance.&#xD;&#xA;IF @IS_RETR_SPECIAL_ACCT_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;&#xD;&#xA;;WITH ANNUAL_WITH_ADD_RD&#xD;&#xA;AS&#xD;&#xA;(&#xD;&#xA;SELECT DISTINCT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#x9;  0 AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_TOTAL_VESTED_YEARS,      &#xD;&#xA;      0 AS L600_VESTED_YEARS,&#xD;&#xA;      0 AS L600_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L600_CREDITED_HOURS,&#xD;&#xA;      0 AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L666_VESTED_YEARS,&#xD;&#xA;      0 AS L666_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L666_CREDITED_HOURS,&#xD;&#xA;      0 AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L700_VESTED_YEARS,&#xD;&#xA;      0 AS L700_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L700_CREDITED_HOURS,&#xD;&#xA;      0 AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#x9;  0 AS L52_VESTED_YEARS,&#xD;&#xA;      0 AS L52_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L52_CREDITED_HOURS,&#xD;&#xA;      0 AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L161_VESTED_YEARS,&#xD;&#xA;      0 AS L161_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L161_CREDITED_HOURS,&#xD;&#xA;      0 AS L161_FROZEN_BENEFITS,&#xD;&#xA;      ISNULL(IAP.SYSTEM_BEGINNING_BALANCE,0) AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_SPECIAL_ACCOUNT_AMOUNT,0) AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_SPECIAL_ACCOUNT_AMOUNT,0) AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.IAP_PRIOR_ADJUSTMENT,0) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L52_PRIOR_ADJUSTMENT,0) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L161_PRIOR_ADJUSTMENT,0) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION1_AMOUNT,0) AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L52_ALLOCATION1_AMOUNT,0) AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L161_ALLOCATION1_AMOUNT,0) AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      ISNULL(IAP.ALLOCATION2_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_INVST_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_FRFT_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION4_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_INVST_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_FRFT_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_PAYOUTS,0) IAP_PAYOUTS,    &#xD;&#xA;      ISNULL(IAP.L052_PAYOUTS,0) L052_PAYOUTS,&#xD;&#xA;      ISNULL(IAP.L161_PAYOUTS,0)L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_BALANCE_FOR_CURRENT_YEAR,0) AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_BALANCE_FOR_CURRENT_YEAR,0) AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_BALANCE_FOR_CURRENT_YEAR,0) AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SD.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      'N' AS MD_FLAG,&#xD;&#xA;&#x9;  'Y' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'N' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'Y' AS [MPI_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL600_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL666_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL700_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL52_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL161_RETIREE_FLAG],&#xD;&#xA;&#x9;   'N' AS PENSION_ONLY_FLAG&#xD;&#xA;from &#xD;&#xA;(&#xD;&#xA;SELECT PERSON_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;      ISNULL(ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) &#xD;&#xA;      + ISNULL(RETIREMENT_YEAR_ALLOCATION2_AMOUNT,0) + ISNULL(RETIREMENT_YEAR_ALLOCATION4_AMOUNT,0) ELSE 0 END)ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_AMOUNT,0))ALLOCATION2_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_FRFT_AMOUNT,0)) ALLOCATION2_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_INVST_AMOUNT,0)) ALLOCATION2_INVST_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_AMOUNT,0)) ALLOCATION4_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_FRFT_AMOUNT,0)) ALLOCATION4_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_INVST_AMOUNT,0)) ALLOCATION4_INVST_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;      ISNULL(L52_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L52_ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;      ISNULL(L161_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L161_ALLOCATION1_AMOUNT,      &#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L161_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L052_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS IAP_PAYOUTS,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(ISNULL(L52_SPECIAL_ACCOUNT_AMOUNT,0))L52_SPECIAL_ACCOUNT_AMOUNT ,&#xD;&#xA;SUM(ISNULL(L161_SPECIAL_ACCOUNT_AMOUNT,0)) L161_SPECIAL_ACCOUNT_AMOUNT,&#xD;&#xA;SUM(ISNULL(SYSTEM_BEGINNING_BALANCE,0))  SYSTEM_BEGINNING_BALANCE,&#xD;&#xA;TOTAL_L52_PAYOUTS = (SELECT SUM(ISNULL(LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WHERE SPARC.PERSON_ACCOUNT_ID = ID.PERSON_ACCOUNT_ID AND SPARC.TRANSACTION_TYPE_VALUE = 'PMNT'),&#xD;&#xA;TOTAL_L161_PAYOUTS = (SELECT SUM(ISNULL(LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WHERE SPARC.PERSON_ACCOUNT_ID = ID.PERSON_ACCOUNT_ID AND SPARC.TRANSACTION_TYPE_VALUE = 'PMNT')&#xD;&#xA;FROM SGT_IAP_ALLOCATION_DETAIL ID WHERE IAP_ALLOCATION_CATEGORY_VALUE NOT IN ('ACTD','RU65') AND ID.COMPUTATION_YEAR = @YEAR &#xD;&#xA;GROUP BY PERSON_ACCOUNT_ID HAVING --SUM(ISNULL(ALLOCATION1_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;--OR &#xD;&#xA;SUM(ISNULL(L52_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(L161_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 --OR SUM(ISNULL(ALLOCATION4_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;)iap&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = IAP.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION D ON SP.PERSON_ID = D.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG','CRTF')&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA ON SP.PERSON_ID = SBA.PERSON_ID AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL')&#xD;&#xA;                                    AND SBA.APPLICATION_STATUS_VALUE = 'APPR'                                                                       &#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL&#xD;&#xA;AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;AND DATA_EXTRACTION_BATCH_INFO_ID = (SELECT TOP(1)Q.DATA_EXTRACTION_BATCH_INFO_ID FROM SGT_DATA_EXTRACTION_BATCH_INFO Q WHERE Q.PERSON_ID = SP.PERSON_ID AND Q.BENEFICIARY_FLAG = 'M' &#xD;&#xA;                                                      AND Q.YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR)&#xD;&#xA;                                                      ORDER BY Q.PLAN_ID)&#xD;&#xA;AND (MD_FLAG IS NULL OR MD_FLAG = 'N')&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PERSON_ACCOUNT A &#xD;&#xA;                  INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PE ON A.PERSON_ACCOUNT_ID = PE.PERSON_ACCOUNT_ID AND A.PLAN_ID =2&#xD;&#xA;                  WHERE A.PERSON_ID = SD.PERSON_ID AND PE.FORFEITURE_DATE IS NOT NULL AND YEAR(PE.FORFEITURE_DATE) = @YEAR)&#xD;&#xA;&#xD;&#xA;--LEFT OUTER JOIN OPUS_CUSTOM..MISSING_VESTED_YEARS MVY ON MVY.PERSON_SSN = SD.PERSON_SSN&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPEE ON  SD.PERSON_ID = SPEE.PERSON_ID AND SPEE.PLAN_ID = 2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAM ON SP.PERSON_ID= SPAM.PERSON_ID AND SPAM.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPAM.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE D.DEATH_NOTIFICATION_ID IS NULL AND SBA.BENEFIT_APPLICATION_ID IS NOT NULL AND ((IAP.TOTAL_L52_PAYOUTS = 0 AND IAP.L52_ALLOCATION1_AMOUNT &lt;&gt; 0) OR (IAP.TOTAL_L161_PAYOUTS = 0 AND IAP.L161_ALLOCATION1_AMOUNT &lt;&gt; 0))&#xD;&#xA;AND ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;AND SP.PERSON_ID NOT IN(SELECT PERSON_ID FROM TEMP_ANNUAL_STATEMENT_BATCH_DATA)&#xD;&#xA;)&#xD;&#xA;INSERT INTO [dbo].[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (&#xD;&#xA;            [PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG] &#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;           )&#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,0[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,0[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,0[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,0[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0 AS MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,0[L600_VESTED_YEARS]&#xD;&#xA;           ,0[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,0[L600_CREDITED_HOURS]&#xD;&#xA;           ,0[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,0[L666_VESTED_YEARS]&#xD;&#xA;           ,0[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,0[L666_CREDITED_HOURS]&#xD;&#xA;           ,0[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,0[L700_VESTED_YEARS]&#xD;&#xA;           ,0[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,0[L700_CREDITED_HOURS]&#xD;&#xA;           ,0[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,0[L52_VESTED_YEARS]&#xD;&#xA;           ,0[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,0[L52_CREDITED_HOURS]&#xD;&#xA;           ,0[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,0[L161_VESTED_YEARS]&#xD;&#xA;           ,0[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,0[L161_CREDITED_HOURS]&#xD;&#xA;           ,0[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L052_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;FROM ANNUAL_WITH_ADD_RD&#xD;&#xA;&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @IS_REEMPLOYED_UNDER_65_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT &#xD;&#xA;BB.MPI_PERSON_ID,BB.PERSON_ACCOUNT_ID,BB.IAP_BALANCE_AMOUNT&#xD;&#xA;INTO #RU65_LIST&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;SELECT A.SSN, SP.MPI_PERSON_ID,WH.ComputationYear AS PensionYear,SPAA.PERSON_ACCOUNT_ID, SPAA.IAP_BALANCE_AMOUNT&#xD;&#xA;FROM &#xD;&#xA;(&#xD;&#xA;select b.SSN, B.DATE_OF_BIRTH, MIN(A.RETIREMENT_DATE) AS RETIREMENT_DATE&#xD;&#xA;from SGT_BENEFIT_APPLICATION a&#xD;&#xA;INNER JOIN SGT_PERSON b on a.PERSON_ID = b.PERSON_ID&#xD;&#xA;INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL C ON a.BENEFIT_APPLICATION_ID = C.BENEFIT_APPLICATION_ID and C.APPLICATION_DETAIL_STATUS_VALUE = 'APPR'  &#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR D ON C.PLAN_BENEFIT_ID = D.PLAN_BENEFIT_ID AND D.PLAN_ID IN(1,2)&#xD;&#xA;where a.RETIREMENT_DATE is not null and ISNULL(a.MIN_DISTRIBUTION_FLAG,'N') = 'N' and a.APPLICATION_STATUS_VALUE = 'APPR' AND BENEFIT_TYPE_VALUE IN('DSBL','RTMT')&#xD;&#xA;GROUP BY b.SSN, b.DATE_OF_BIRTH&#xD;&#xA;)A&#xD;&#xA;--INNER JOIN EADB..HOURS H ON A.SSN = H.SSN&#xD;&#xA;INNER JOIN SGT_PERSON SP ON A.SSN = SP.SSN &#xD;&#xA;INNER JOIN [Pillars].[dbo].MPI_WORKHISTORY WH ON SP.mpi_PERSON_ID= WH.mpiPERSONID AND WH.TODATE &gt; A.RETIREMENT_DATE&#xD;&#xA;&#xD;&#xA;INNER JOIN &#xD;&#xA;(SELECT SPA.PERSON_ID,SPA.PERSON_ACCOUNT_ID, &#xD;&#xA;&#x9;&#x9;SUM(ISNULL(SPARC.IAP_BALANCE_AMOUNT,0)) AS IAP_BALANCE_AMOUNT&#xD;&#xA; FROM SGT_PERSON_ACCOUNT SPA&#xD;&#xA; INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC ON SPA.PERSON_ACCOUNT_ID = SPARC.PERSON_ACCOUNT_ID&#xD;&#xA; WHERE SPA.PLAN_ID = 1 &#xD;&#xA; GROUP BY SPA.PERSON_ID,SPA.PERSON_ACCOUNT_ID HAVING SUM(ISNULL(SPARC.IAP_BALANCE_AMOUNT,0))&#x9;&gt; 0 &#xD;&#xA;)SPAA ON SP.PERSON_ID = SPAA.PERSON_ID&#xD;&#xA;WHERE DATEDIFF(YY,A.DATE_OF_BIRTH,'12/31/'+ CONVERT(VARCHAR(4),@YEAR)) &lt; 65&#xD;&#xA;GROUP BY A.SSN, SP.MPI_PERSON_ID,WH.ComputationYear,SPAA.PERSON_ACCOUNT_ID, SPAA.IAP_BALANCE_AMOUNT HAVING SUM(WH.HOURSWORKED) &gt;= 870&#xD;&#xA;)BB&#xD;&#xA;GROUP BY BB.MPI_PERSON_ID,BB.PERSON_ACCOUNT_ID,BB.IAP_BALANCE_AMOUNT&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;;WITH ANNUAL_WITH_ADD_RU65&#xD;&#xA;AS&#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#x9;  0 AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_TOTAL_VESTED_YEARS,      &#xD;&#xA;      0 AS L600_VESTED_YEARS,&#xD;&#xA;      0 AS L600_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L600_CREDITED_HOURS,&#xD;&#xA;      0 AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L666_VESTED_YEARS,&#xD;&#xA;      0 AS L666_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L666_CREDITED_HOURS,&#xD;&#xA;      0 AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L700_VESTED_YEARS,&#xD;&#xA;      0 AS L700_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L700_CREDITED_HOURS,&#xD;&#xA;      0 AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#x9;  0 AS L52_VESTED_YEARS,&#xD;&#xA;      0 AS L52_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L52_CREDITED_HOURS,&#xD;&#xA;      0 AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L161_VESTED_YEARS,&#xD;&#xA;      0 AS L161_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L161_CREDITED_HOURS,&#xD;&#xA;      0 AS L161_FROZEN_BENEFITS,&#xD;&#xA;      ISNULL(IAP.SYSTEM_BEGINNING_BALANCE,0) AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_SPECIAL_ACCOUNT_AMOUNT,0) AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_SPECIAL_ACCOUNT_AMOUNT,0) AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.IAP_PRIOR_ADJUSTMENT,0) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L52_PRIOR_ADJUSTMENT,0) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L161_PRIOR_ADJUSTMENT,0) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION1_AMOUNT,0) AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L52_ALLOCATION1_AMOUNT,0) AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L161_ALLOCATION1_AMOUNT,0) AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      ISNULL(IAP.ALLOCATION2_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_INVST_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_FRFT_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION4_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_INVST_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_FRFT_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_PAYOUTS,0) IAP_PAYOUTS,    &#xD;&#xA;      ISNULL(IAP.L052_PAYOUTS,0) L052_PAYOUTS,&#xD;&#xA;      ISNULL(IAP.L161_PAYOUTS,0)L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_BALANCE_FOR_CURRENT_YEAR,0) AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_BALANCE_FOR_CURRENT_YEAR,0) AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_BALANCE_FOR_CURRENT_YEAR,0) AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SD.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      'N' AS MD_FLAG,&#xD;&#xA;&#x9;  'N' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'Y' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'Y' AS [MPI_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL600_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL666_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL700_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL52_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL161_RETIREE_FLAG],&#xD;&#xA;&#x9;   'N' AS PENSION_ONLY_FLAG&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT ID.PERSON_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;      ISNULL(ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) &#xD;&#xA;      + ISNULL(RETIREMENT_YEAR_ALLOCATION2_AMOUNT,0) + ISNULL(RETIREMENT_YEAR_ALLOCATION4_AMOUNT,0) ELSE 0 END)ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_AMOUNT,0))ALLOCATION2_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_FRFT_AMOUNT,0)) ALLOCATION2_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION2_INVST_AMOUNT,0)) ALLOCATION2_INVST_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_AMOUNT,0)) ALLOCATION4_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_FRFT_AMOUNT,0)) ALLOCATION4_FRFT_AMOUNT,&#xD;&#xA;SUM(ISNULL(ALLOCATION4_INVST_AMOUNT,0)) ALLOCATION4_INVST_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;      ISNULL(L52_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L52_ALLOCATION1_AMOUNT,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;      ISNULL(L161_ALLOCATION1_AMOUNT,0) + ISNULL(QUATERLY_ALLOCATIONS_AMOUNT,0) ELSE 0 END) L161_ALLOCATION1_AMOUNT,      &#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L161_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS L052_PAYOUTS,&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN ISNULL(PAYOUTS,0) ELSE 0 END) AS IAP_PAYOUTS,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN&#xD;&#xA;(ISNULL(BEGINNING_BAL_ADJUSTMENT,0)) +  &#xD;&#xA;(ISNULL(FORFEITED_BALANCE,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC1_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC2_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC3_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC4_AMOUNT,0)) + &#xD;&#xA;(ISNULL(LATE_ALLOC5_AMOUNT,0)) ELSE 0 END) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L052' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'L161' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(CASE WHEN FUND_TYPE = 'IAP' THEN &#xD;&#xA;ISNULL(ENDING_BALANCE,0) ELSE 0 END) IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;&#xD;&#xA;SUM(ISNULL(L52_SPECIAL_ACCOUNT_AMOUNT,0))L52_SPECIAL_ACCOUNT_AMOUNT ,&#xD;&#xA;SUM(ISNULL(L161_SPECIAL_ACCOUNT_AMOUNT,0)) L161_SPECIAL_ACCOUNT_AMOUNT,&#xD;&#xA;SUM(ISNULL(SYSTEM_BEGINNING_BALANCE,0))  SYSTEM_BEGINNING_BALANCE,&#xD;&#xA;TOTAL_PAYOUTS = (SELECT SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WHERE SPARC.PERSON_ACCOUNT_ID = ID.PERSON_ACCOUNT_ID AND SPARC.TRANSACTION_TYPE_VALUE = 'PMNT')&#xD;&#xA;FROM SGT_IAP_ALLOCATION_DETAIL ID &#xD;&#xA;INNER JOIN #RU65_LIST ON ID.PERSON_ACCOUNT_ID = #RU65_LIST.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE ID.COMPUTATION_YEAR = @YEAR&#xD;&#xA;GROUP BY ID.PERSON_ACCOUNT_ID HAVING SUM(ISNULL(ALLOCATION1_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;OR SUM(ISNULL(L52_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(L161_ALLOCATION1_AMOUNT,0)) &lt;&gt; 0 OR SUM(ISNULL(ALLOCATION4_AMOUNT,0)) &lt;&gt; 0&#xD;&#xA;) IAP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = IAP.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION D ON SP.PERSON_ID = D.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG','CRTF')&#xD;&#xA;--LEFT OUTER JOIN &#xD;&#xA;--(SELECT DISTINCT SBA.BENEFIT_APPLICATION_ID, SBA.PERSON_ID FROM SGT_BENEFIT_APPLICATION SBA                                                                        &#xD;&#xA;-- INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID AND SBAD.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA;-- WHERE SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;--)SBA ON SP.PERSON_ID = SBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL&#xD;&#xA;AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;AND DATA_EXTRACTION_BATCH_INFO_ID = (SELECT TOP(1)Q.DATA_EXTRACTION_BATCH_INFO_ID FROM SGT_DATA_EXTRACTION_BATCH_INFO Q WHERE Q.PERSON_ID = SP.PERSON_ID AND Q.BENEFICIARY_FLAG = 'M' &#xD;&#xA;                                                      AND Q.YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR)&#xD;&#xA;                                                      ORDER BY Q.PLAN_ID)&#xD;&#xA;--AND MD_FLAG = 'Y'&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PERSON_ACCOUNT A &#xD;&#xA;                  INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PE ON A.PERSON_ACCOUNT_ID = PE.PERSON_ACCOUNT_ID AND A.PLAN_ID =2&#xD;&#xA;                  WHERE A.PERSON_ID = SD.PERSON_ID AND PE.FORFEITURE_DATE IS NOT NULL AND YEAR(PE.FORFEITURE_DATE) = @YEAR)&#xD;&#xA;&#xD;&#xA;--LEFT OUTER JOIN OPUS_CUSTOM..MISSING_VESTED_YEARS MVY ON MVY.PERSON_SSN = SD.PERSON_SSN&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPEE ON  SD.PERSON_ID = SPEE.PERSON_ID AND SPEE.PLAN_ID = 2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAM ON SP.PERSON_ID= SPAM.PERSON_ID AND SPAM.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPAM.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE D.DEATH_NOTIFICATION_ID IS NULL AND IAP.IAP_BALANCE_FOR_CURRENT_YEAR &lt;&gt; 0&#xD;&#xA;AND ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;AND SP.PERSON_ID NOT IN(SELECT PERSON_ID FROM TEMP_ANNUAL_STATEMENT_BATCH_DATA)&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO [dbo].[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (            &#xD;&#xA;&#x9;&#x9;    [PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]   &#xD;&#xA;           )&#xD;&#xA;SELECT  DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0 AS MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L052_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#x9;   &#xD;&#xA;FROM ANNUAL_WITH_ADD_RU65&#xD;&#xA;&#xD;&#xA;--Insert members from RU65 list who do not have any current year IAP Allocation details.&#xD;&#xA;;WITH ANNUAL_WITH_ADD_RU65_NOT_IN_IAP_ALLOC_DETAIL&#xD;&#xA;AS&#xD;&#xA;(&#xD;&#xA;SELECT &#xD;&#xA;      SP.PERSON_ID AS PERSON_ID,&#xD;&#xA;      @YEAR AS COMPUTATIONAL_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR,&#xD;&#xA;&#x9;  0 AS MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR,&#xD;&#xA;      0 AS MPI_VESTED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR,&#xD;&#xA;      0 AS MPI_TOTAL_VESTED_YEARS,      &#xD;&#xA;      0 AS L600_VESTED_YEARS,&#xD;&#xA;      0 AS L600_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L600_CREDITED_HOURS,&#xD;&#xA;      0 AS L600_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L666_VESTED_YEARS,&#xD;&#xA;      0 AS L666_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L666_CREDITED_HOURS,&#xD;&#xA;      0 AS L666_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L700_VESTED_YEARS,&#xD;&#xA;      0 AS L700_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L700_CREDITED_HOURS,&#xD;&#xA;      0 AS L700_FROZEN_BENEFITS,      &#xD;&#xA;&#x9;  0 AS L52_VESTED_YEARS,&#xD;&#xA;      0 AS L52_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L52_CREDITED_HOURS,&#xD;&#xA;      0 AS L52_FROZEN_BENEFITS,&#xD;&#xA;&#x9;  0 AS L161_VESTED_YEARS,&#xD;&#xA;      0 AS L161_QUALIFIED_YEARS,&#xD;&#xA;      0 AS L161_CREDITED_HOURS,&#xD;&#xA;      0 AS L161_FROZEN_BENEFITS,&#xD;&#xA;      ISNULL(IAP.SYSTEM_BEGINNING_BALANCE,0) AS IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_SPECIAL_ACCOUNT_AMOUNT,0) AS L52_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_SPECIAL_ACCOUNT_AMOUNT,0) AS L161_ENDING_BALANCE_FOR_PRIOR_YEAR,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.IAP_PRIOR_ADJUSTMENT,0) AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L52_PRIOR_ADJUSTMENT,0) AS L52_PRIOR_ADJUSTMENT,&#xD;&#xA;      ISNULL(IAP.L161_PRIOR_ADJUSTMENT,0) AS L161_PRIOR_ADJUSTMENT,&#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION1_AMOUNT,0) AS IAP_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L52_ALLOCATION1_AMOUNT,0) AS L52_NET_INVESTMENT_INCOME,&#xD;&#xA;      ISNULL(IAP.L161_ALLOCATION1_AMOUNT,0) AS L161_NET_INVESTMENT_INCOME,&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;      ISNULL(IAP.ALLOCATION2_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_INVST_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION2_FRFT_AMOUNT,0) AS IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC, &#xD;&#xA;      &#xD;&#xA;      ISNULL(IAP.ALLOCATION4_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_INVST_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_IALC,&#xD;&#xA;      ISNULL(IAP.ALLOCATION4_FRFT_AMOUNT,0) AS IAP_PERCENTAGE_OF_COMPENSATION_FALC,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_PAYOUTS,0) IAP_PAYOUTS,    &#xD;&#xA;      ISNULL(IAP.L052_PAYOUTS,0) L052_PAYOUTS,&#xD;&#xA;      ISNULL(IAP.L161_PAYOUTS,0)L161_PAYOUTS,&#xD;&#xA;&#xD;&#xA;      ISNULL(IAP.IAP_BALANCE_FOR_CURRENT_YEAR,0) AS IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L52_BALANCE_FOR_CURRENT_YEAR,0) AS L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      ISNULL(IAP.L161_BALANCE_FOR_CURRENT_YEAR,0) AS L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;      7090 as ADDR_CATEGORY_ID,&#xD;&#xA;      CASE   WHEN  SPAD.ADDR_LINE_1 IS NULL AND SPAD.ADDR_LINE_2 IS NULL THEN 'BAD' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN 'DMST' &#xD;&#xA;              WHEN  SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN 'INTR' &#xD;&#xA;              ELSE '' END addr_category_value,&#xD;&#xA;      'OPUS Batch' as  CREATED_BY ,&#xD;&#xA;      getdate() as CREATED_DATE,&#xD;&#xA;      'OPUS Batch' as  MODIFIED_BY ,&#xD;&#xA;      getdate() as MODIFIED_DATE,&#xD;&#xA;      0 UPDATE_SEQ,&#xD;&#xA;      SP.FIRST_NAME + ' ' + ISNULL(Sp.MIDDLE_NAME + ' ','') + SP.LAST_NAME AS PERSON_NAME,&#xD;&#xA;      SPAD.ADDR_LINE_1,&#xD;&#xA;      SPAD.ADDR_LINE_2,&#xD;&#xA;      SPAD.ADDR_CITY,&#xD;&#xA;      SPAD.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_STATE_VALUE&#xD;&#xA;                  WHEN SPAD.ADDR_COUNTRY_VALUE IN (0011,0036,0133,0147) THEN STD.DESCRIPTION&#xD;&#xA;                  ELSE SPAD.FOREIGN_PROVINCE END ADDR_STATE_VALUE,&#xD;&#xA;&#xD;&#xA;      SPAD.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      SPAD.ADDR_COUNTRY_VALUE,&#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE IN (0001) THEN SPAD.ADDR_ZIP_CODE&#xD;&#xA;                  ELSE SPAD.FOREIGN_POSTAL_CODE END ADDR_ZIP_CODE,   &#xD;&#xA;      &#xD;&#xA;      SPAD.END_DATE,&#xD;&#xA;      E.VESTED_DATE MPI_VESTED_DATE,&#xD;&#xA;      &#xD;&#xA;      CASE WHEN SPAD.ADDR_COUNTRY_VALUE &lt;&gt; 0001 THEN  CD.DESCRIPTION END COUNTRY_DESCRIPTION,&#xD;&#xA;      cast(ISNULL((SELECT SUM(ISNULL(IAPHOURSA2,0)) FROM SGT_ALL_IAP_WORKHISTORY_4_SNAPSHOT IAPW &#xD;&#xA;      WHERE IAPW.SSN = SP.SSN AND LATE_FLAG = 'N'),0)  as decimal(11,2)) AS IAP_HOURS_A2,&#xD;&#xA;      @CORRECTED_FLAG AS CORRECTED_FLAG,&#xD;&#xA;&#x9;  SD.ELIGIBLE_ACTIVE_INCR_FLAG AS ELIGIBLE_ACTIVE_INCR_FLAG,&#xD;&#xA;      'N' AS MD_FLAG,&#xD;&#xA;&#x9;  'N' AS RETR_SPECIAL_ACCOUNT_FLAG,&#xD;&#xA;&#x9;  'Y' AS REEMPLOYED_UNDER_65_FLAG,&#xD;&#xA;&#x9;  'Y' AS [MPI_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL600_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL666_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL700_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL52_RETIREE_FLAG],&#xD;&#xA;&#x9;  'Y' AS [LOCAL161_RETIREE_FLAG],&#xD;&#xA;&#x9;   'N' AS PENSION_ONLY_FLAG&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;SELECT ID.PERSON_ACCOUNT_ID,&#xD;&#xA;0 ALLOCATION1_AMOUNT,&#xD;&#xA;0 ALLOCATION2_AMOUNT,&#xD;&#xA;0 ALLOCATION2_FRFT_AMOUNT,&#xD;&#xA;0 ALLOCATION2_INVST_AMOUNT,&#xD;&#xA;0 ALLOCATION4_AMOUNT,&#xD;&#xA;0 ALLOCATION4_FRFT_AMOUNT,&#xD;&#xA;0 ALLOCATION4_INVST_AMOUNT,&#xD;&#xA;0 L52_ALLOCATION1_AMOUNT,&#xD;&#xA;0 L161_ALLOCATION1_AMOUNT,      &#xD;&#xA;0 L161_PAYOUTS,&#xD;&#xA;0 L052_PAYOUTS,&#xD;&#xA;0 IAP_PAYOUTS,&#xD;&#xA;0 L52_PRIOR_ADJUSTMENT,&#xD;&#xA;0 L161_PRIOR_ADJUSTMENT,&#xD;&#xA;ID.IAP_BALANCE_AMOUNT AS IAP_PRIOR_ADJUSTMENT,&#xD;&#xA;0 L52_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;0 L161_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;0 IAP_BALANCE_FOR_CURRENT_YEAR,&#xD;&#xA;0 L52_SPECIAL_ACCOUNT_AMOUNT ,&#xD;&#xA;0 L161_SPECIAL_ACCOUNT_AMOUNT,&#xD;&#xA;0 SYSTEM_BEGINNING_BALANCE,&#xD;&#xA;TOTAL_PAYOUTS = 0--(SELECT SUM(ISNULL(IAP_BALANCE_AMOUNT,0)) FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC WHERE SPARC.PERSON_ACCOUNT_ID = ID.PERSON_ACCOUNT_ID AND SPARC.TRANSACTION_TYPE_VALUE = 'PMNT')&#xD;&#xA;FROM #RU65_LIST ID&#xD;&#xA;INNER JOIN SGT_PERSON SP ON ID.MPI_PERSON_ID = SP.MPI_PERSON_ID &#xD;&#xA;WHERE SP.PERSON_ID NOT IN(SELECT PERSON_ID FROM TEMP_ANNUAL_STATEMENT_BATCH_DATA)&#xD;&#xA;) IAP &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = IAP.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID AND SP.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_DEATH_NOTIFICATION D ON SP.PERSON_ID = D.PERSON_ID AND DEATH_NOTIFICATION_STATUS_VALUE IN ('PROG','CRTF')&#xD;&#xA;--LEFT OUTER JOIN &#xD;&#xA;--(SELECT DISTINCT SBA.BENEFIT_APPLICATION_ID, SBA.PERSON_ID FROM SGT_BENEFIT_APPLICATION SBA                                                                        &#xD;&#xA;-- INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID AND SBAD.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND'&#xD;&#xA;-- WHERE SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL') AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;--)SBA ON SP.PERSON_ID = SBA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_DATA_EXTRACTION_BATCH_INFO SD ON SP.PERSON_ID = SD.PERSON_ID AND SD.BENEFICIARY_ID IS NULL&#xD;&#xA;AND BENEFICIARY_FLAG = 'M' AND YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR) &#xD;&#xA;AND DATA_EXTRACTION_BATCH_INFO_ID = (SELECT TOP(1)Q.DATA_EXTRACTION_BATCH_INFO_ID FROM SGT_DATA_EXTRACTION_BATCH_INFO Q WHERE Q.PERSON_ID = SP.PERSON_ID AND Q.BENEFICIARY_FLAG = 'M' &#xD;&#xA;                                                      AND Q.YEAR_END_DATA_EXTRACTION_HEADER_ID = (SELECT TOP(1) YEAR_END_DATA_EXTRACTION_HEADER_ID FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WHERE [YEAR] = @YEAR)&#xD;&#xA;                                                      ORDER BY Q.PLAN_ID)&#xD;&#xA;--AND MD_FLAG = 'Y'&#xD;&#xA;AND NOT EXISTS(SELECT * FROM SGT_PERSON_ACCOUNT A &#xD;&#xA;                  INNER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY PE ON A.PERSON_ACCOUNT_ID = PE.PERSON_ACCOUNT_ID AND A.PLAN_ID =2&#xD;&#xA;                  WHERE A.PERSON_ID = SD.PERSON_ID AND PE.FORFEITURE_DATE IS NOT NULL AND YEAR(PE.FORFEITURE_DATE) = @YEAR)&#xD;&#xA;&#xD;&#xA;--LEFT OUTER JOIN OPUS_CUSTOM..MISSING_VESTED_YEARS MVY ON MVY.PERSON_SSN = SD.PERSON_SSN&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPEE ON  SD.PERSON_ID = SPEE.PERSON_ID AND SPEE.PLAN_ID = 2&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPAM ON SP.PERSON_ID= SPAM.PERSON_ID AND SPAM.PLAN_ID = 2&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY E ON SPAM.PERSON_ACCOUNT_ID = E.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  SP.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;                                          AND A.PERSON_ID = SP.PERSON_ID &#xD;&#xA;                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;                                                              ELSE 2 END  ASC)&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE CD ON SPAD.ADDR_COUNTRY_ID = CD.CODE_ID  AND SPAD.ADDR_COUNTRY_VALUE = CD.CODE_VALUE&#xD;&#xA;LEFT OUTER JOIN SGS_CODE_VALUE STD ON SPAD.ADDR_STATE_ID = STD.CODE_ID AND SPAD.ADDR_STATE_VALUE = STD.CODE_VALUE                                                                                                                             &#xD;&#xA;WHERE D.DEATH_NOTIFICATION_ID IS NULL AND IAP.IAP_PRIOR_ADJUSTMENT &lt;&gt; 0&#xD;&#xA;AND ((@TempTable = 1 and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;AND SP.PERSON_ID NOT IN(SELECT PERSON_ID FROM TEMP_ANNUAL_STATEMENT_BATCH_DATA)&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO [dbo].[TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (            &#xD;&#xA;&#x9;&#x9;    [PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]   &#xD;&#xA;           )&#xD;&#xA;SELECT  DISTINCT &#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,0 AS MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,0 AS MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,0 AS MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L052_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#x9;&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#x9;   &#xD;&#xA;FROM ANNUAL_WITH_ADD_RU65_NOT_IN_IAP_ALLOC_DETAIL&#xD;&#xA;&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;--RID 72929 Statement issue Suggested code change&#xD;&#xA;IF @IS_RETR_SPECIAL_ACCT_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;&#x9;UPDATE [TEMP_ANNUAL_STATEMENT_BATCH_DATA] SET IAP_PRIOR_ADJUSTMENT  = 0, IAP_ENDING_BALANCE_FOR_PRIOR_YEAR = 0, IAP_PAYOUTS = 0, IAP_NET_INVESTMENT_INCOME = 0&#xD;&#xA;&#x9;&#x9;&#x9;, IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2 = 0, IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC = 0, IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC = 0&#xD;&#xA;&#x9;&#x9;&#x9;, IAP_PERCENTAGE_OF_COMPENSATION = 0, IAP_PERCENTAGE_OF_COMPENSATION_IALC = 0, IAP_PERCENTAGE_OF_COMPENSATION_FALC = 0&#xD;&#xA;&#x9;WHERE COMPUTATIONAL_YEAR = @YEAR AND RETR_SPECIAL_ACCOUNT_FLAG = 'Y' &#xD;&#xA;&#x9;AND ((IAP_ENDING_BALANCE_FOR_PRIOR_YEAR + IAP_PRIOR_ADJUSTMENT + IAP_NET_INVESTMENT_INCOME &#xD;&#xA;&#x9;&#x9;+ IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2+ IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC+ IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC&#xD;&#xA;&#x9;&#x9;+ IAP_PERCENTAGE_OF_COMPENSATION+ IAP_PERCENTAGE_OF_COMPENSATION_IALC+ IAP_PERCENTAGE_OF_COMPENSATION_FALC&#xD;&#xA;&#x9;&#x9;+ IAP_PAYOUTS ) = 0&#xD;&#xA;&#x9;&#x9;OR IAP_BALANCE_FOR_CURRENT_YEAR = 0) &#xD;&#xA;&#x9;AND (IAP_PAYOUTS &lt;&gt;0 OR IAP_PRIOR_ADJUSTMENT &lt;&gt; 0)&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;-- Final insert into ANNUAL_STATEMENT_BATCH_DATA table&#xD;&#xA;INSERT INTO [dbo].[SGT_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;           (&#xD;&#xA;&#x9;&#x9;&#x9;[BATCH_ID]&#xD;&#xA;&#x9;&#x9;   ,[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;           )&#xD;&#xA;SELECT  &#xD;&#xA;(ROW_NUMBER() OVER(PARTITION BY ADDR_CATEGORY_VALUE ORDER BY person_id ) / @number )+1 batch_id,&#xD;&#xA;&#x9;&#x9;&#x9;[PERSON_ID]&#xD;&#xA;           ,[COMPUTATIONAL_YEAR]&#xD;&#xA;           , MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR&#xD;&#xA;           ,[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;           ,[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;           ,[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;           ,MPI_TOTAL_VESTED_YEARS&#xD;&#xA;           ,[L600_VESTED_YEARS]&#xD;&#xA;           ,[L600_QUALIFIED_YEARS]&#xD;&#xA;           ,[L600_CREDITED_HOURS]&#xD;&#xA;           ,[L600_FROZEN_BENEFITS]&#xD;&#xA;           ,[L666_VESTED_YEARS]&#xD;&#xA;           ,[L666_QUALIFIED_YEARS]&#xD;&#xA;           ,[L666_CREDITED_HOURS]&#xD;&#xA;           ,[L666_FROZEN_BENEFITS]&#xD;&#xA;           ,[L700_VESTED_YEARS]&#xD;&#xA;           ,[L700_QUALIFIED_YEARS]&#xD;&#xA;           ,[L700_CREDITED_HOURS]&#xD;&#xA;           ,[L700_FROZEN_BENEFITS]&#xD;&#xA;           ,[L52_VESTED_YEARS]&#xD;&#xA;           ,[L52_QUALIFIED_YEARS]&#xD;&#xA;           ,[L52_CREDITED_HOURS]&#xD;&#xA;           ,[L52_FROZEN_BENEFITS]&#xD;&#xA;           ,[L161_VESTED_YEARS]&#xD;&#xA;           ,[L161_QUALIFIED_YEARS]&#xD;&#xA;           ,[L161_CREDITED_HOURS]&#xD;&#xA;           ,[L161_FROZEN_BENEFITS]&#xD;&#xA;           ,[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;           ,[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;           ,[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;           ,[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;           ,[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;           ,[IAP_PAYOUTS]&#xD;&#xA;           ,[L52_PAYOUTS]&#xD;&#xA;           ,[L161_PAYOUTS]&#xD;&#xA;           ,[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;           ,[ADDR_CATEGORY_ID]&#xD;&#xA;           ,[ADDR_CATEGORY_VALUE]           &#xD;&#xA;           ,[CREATED_BY]&#xD;&#xA;           ,[CREATED_DATE]&#xD;&#xA;           ,[MODIFIED_BY]&#xD;&#xA;           ,[MODIFIED_DATE]&#xD;&#xA;           ,[UPDATE_SEQ]&#xD;&#xA;           ,[PERSON_NAME]&#xD;&#xA;           ,[ADDR_LINE_1]&#xD;&#xA;           ,[ADDR_LINE_2]&#xD;&#xA;           ,[ADDR_CITY]&#xD;&#xA;           ,[ADDR_STATE_ID]&#xD;&#xA;           ,[ADDR_STATE_VALUE]&#xD;&#xA;           ,[ADDR_COUNTRY_ID]&#xD;&#xA;           ,[ADDR_COUNTRY_VALUE]&#xD;&#xA;           ,[ADDR_ZIP_CODE]&#xD;&#xA;           ,[END_DATE]&#xD;&#xA;           ,[MPI_VESTED_DATE]&#xD;&#xA;           ,[COUNTRY_DESCRIPTION]&#xD;&#xA;           ,[IAP_HOURS_A2]&#xD;&#xA;           ,[CORRECTED_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MD_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[REEMPLOYED_UNDER_65_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[MPI_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL600_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL666_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL700_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL52_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[LOCAL161_RETIREE_FLAG]&#xD;&#xA;&#x9;&#x9;   ,[PENSION_ONLY_FLAG]&#xD;&#xA;FROM [TEMP_ANNUAL_STATEMENT_BATCH_DATA]&#xD;&#xA;--RID 72929 Suggested code change to avoid generating multiple statement records&#xD;&#xA;WHERE NOT EXISTS (SELECT 1 FROM OPUS.DBO.SGT_ANNUAL_STATEMENT_BATCH_DATA WHERE COMPUTATIONAL_YEAR = @YEAR AND PERSON_ID = [TEMP_ANNUAL_STATEMENT_BATCH_DATA].PERSON_ID )&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UPDATE SGT_ANNUAL_STATEMENT_BATCH_DATA SET IAP_PRIOR_ADJUSTMENT  = 0,IAP_ENDING_BALANCE_FOR_PRIOR_YEAR = 0 WHERE COMPUTATIONAL_YEAR = @YEAR&#xD;&#xA;AND ISNULL(IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,0) &lt; 0 &#xD;&#xA;AND ABS(ISNULL(IAP_ENDING_BALANCE_FOR_PRIOR_YEAR,0)) = ABS(ISNULL(IAP_PRIOR_ADJUSTMENT,0))&#xD;&#xA;&#xD;&#xA;DECLARE @MULTIPLIER NUMERIC(15,13);&#xD;&#xA;--SELECT @MULTIPLIER = ISNULL(MULTIPLIER, 0.8100000000000) FROM SGT_IAP_ANNUNITY_ADJUSTMENT_MULTIPLIER WHERE END_DATE IS NULL&#xD;&#xA;SET @MULTIPLIER = 1.0&#xD;&#xA;SELECT * &#xD;&#xA;, LIFE_ANNUITY = ROUND(X.IAP_ANNUITY_BALANCE / (SELECT ROUND(BENEFIT_OPTION_FACTOR*12,5) FROM SGT_IAP_ANNUITY_BENEFIT_OPTION_FACTOR WHERE PARTICIPANT_AGE = X.PTP_AGE AND PLAN_BENEFIT_ID = 10 AND BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND (YEAR(START_DATE)=@YEAR AND MONTH(START_DATE)=12)),0)&#xD;&#xA;, JS100_ANNUITY = ROUND(X.IAP_ANNUITY_BALANCE / (SELECT ROUND(BENEFIT_OPTION_FACTOR*12,5) FROM SGT_IAP_ANNUITY_BENEFIT_OPTION_FACTOR WHERE PARTICIPANT_AGE = X.PTP_AGE AND SPOUSE_AGE = PARTICIPANT_AGE AND PLAN_BENEFIT_ID = 13 AND BENEFIT_ACCOUNT_TYPE_VALUE = 'RTMT' AND (YEAR(START_DATE)=@YEAR AND MONTH(START_DATE)=12)),0)&#xD;&#xA;INTO #TEMP&#xD;&#xA;FROM (&#xD;&#xA;SELECT SD.PERSON_ID, PTP_AGE = CASE WHEN FLOOR(DATEDIFF(DAY, P.DATE_OF_BIRTH, GETDATE()) / 365.25) &lt; 67 THEN 67 ELSE FLOOR(DATEDIFF(DAY, P.DATE_OF_BIRTH, GETDATE()) / 365.25) END&#xD;&#xA;, (((IAP_ENDING_BALANCE_FOR_PRIOR_YEAR + IAP_PRIOR_ADJUSTMENT + IAP_NET_INVESTMENT_INCOME + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2 + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC&#xD;&#xA;+ IAP_PERCENTAGE_OF_COMPENSATION + IAP_PERCENTAGE_OF_COMPENSATION_IALC + IAP_PERCENTAGE_OF_COMPENSATION_FALC + IAP_PAYOUTS) &#xD;&#xA;+ (L52_ENDING_BALANCE_FOR_PRIOR_YEAR + L52_PRIOR_ADJUSTMENT + L52_NET_INVESTMENT_INCOME + L52_PAYOUTS) &#xD;&#xA;+ (L161_ENDING_BALANCE_FOR_PRIOR_YEAR + L161_PRIOR_ADJUSTMENT + L161_NET_INVESTMENT_INCOME + L161_PAYOUTS)) ) AS IAP_BALANCE&#xD;&#xA;, (((IAP_ENDING_BALANCE_FOR_PRIOR_YEAR + IAP_PRIOR_ADJUSTMENT + IAP_NET_INVESTMENT_INCOME + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2 + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC&#xD;&#xA;+ IAP_PERCENTAGE_OF_COMPENSATION + IAP_PERCENTAGE_OF_COMPENSATION_IALC + IAP_PERCENTAGE_OF_COMPENSATION_FALC + IAP_PAYOUTS) &#xD;&#xA;+ (L52_ENDING_BALANCE_FOR_PRIOR_YEAR + L52_PRIOR_ADJUSTMENT + L52_NET_INVESTMENT_INCOME + L52_PAYOUTS) &#xD;&#xA;+ (L161_ENDING_BALANCE_FOR_PRIOR_YEAR + L161_PRIOR_ADJUSTMENT + L161_NET_INVESTMENT_INCOME + L161_PAYOUTS)) * @MULTIPLIER ) AS IAP_ANNUITY_BALANCE&#xD;&#xA;FROM SGT_ANNUAL_STATEMENT_BATCH_DATA SD INNER JOIN SGT_PERSON_BASE P ON SD.PERSON_ID = P.PERSON_ID&#xD;&#xA;AND EXISTS (SELECT 1 FROM [TEMP_ANNUAL_STATEMENT_BATCH_DATA] WHERE PERSON_ID = SD.PERSON_ID )&#xD;&#xA;WHERE COMPUTATIONAL_YEAR = @YEAR&#xD;&#xA;) X&#xD;&#xA;&#xD;&#xA;UPDATE SD SET SD.IAP_LUMSUM_BALANCE  = T.IAP_BALANCE, SD.EST_IAP_LIFE_ANNUITY = T.LIFE_ANNUITY, SD.EST_IAP_JS100_ANNUITY = T.JS100_ANNUITY&#xD;&#xA;FROM SGT_ANNUAL_STATEMENT_BATCH_DATA SD INNER JOIN #TEMP T ON SD.PERSON_ID = T.PERSON_ID&#xD;&#xA;WHERE COMPUTATIONAL_YEAR = @YEAR&#xD;&#xA;&#xD;&#xA;DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;SELECT COUNT(*) FROM SGT_ANNUAL_STATEMENT_BATCH_DATA WITH(NOLOCK) WHERE COMPUTATIONAL_YEAR = @YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@number" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="int" />
        <parameter ID="@CORRECTED_FLAG" sfwDataType="string" />
        <parameter ID="@IS_RETR_SPECIAL_ACCT_FLAG" sfwDataType="string" />
        <parameter ID="@IS_MD_FLAG" sfwDataType="string" />
        <parameter ID="@IS_REEMPLOYED_UNDER_65_FLAG" sfwDataType="string" />
        <parameter ID="@IS_PENSION_ONLY_FLAG" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetDataForAnnualStatement" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF @IS_MD_FLAG = 'N' AND @IS_RETR_SPECIAL_ACCT_FLAG = 'N' AND @IS_REEMPLOYED_UNDER_65_FLAG = 'N' AND @IS_PENSION_ONLY_FLAG = 'N'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT P.PERSON_ID,P.SSN AS PERSON_SSN, P.MPI_PERSON_ID AS MPI_PERSON_ID, P.FIRST_NAME AS FIRST_NAME, P.LAST_NAME AS LAST_NAME from SGT_ANNUAL_STATEMENT_BATCH_DATA DATA&#xD;&#xA;INNER JOIN SGT_PERSON P&#xD;&#xA;on P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;where COMPUTATIONAL_YEAR=@YEAR&#xD;&#xA;and ((@TempTable = 1 and P.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;and CORRECTED_FLAG = @CORRECTED_FLAG&#xD;&#xA;ORDER BY P.MPI_PERSON_ID&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @IS_MD_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT P.PERSON_ID,P.SSN AS PERSON_SSN, P.MPI_PERSON_ID AS MPI_PERSON_ID, P.FIRST_NAME AS FIRST_NAME, P.LAST_NAME AS LAST_NAME from SGT_ANNUAL_STATEMENT_BATCH_DATA DATA&#xD;&#xA;INNER JOIN SGT_PERSON P&#xD;&#xA;on P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;where COMPUTATIONAL_YEAR=@YEAR and ISNULL(MD_FLAG,'N') = 'Y'&#xD;&#xA;and ((@TempTable = 1 and P.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;and CORRECTED_FLAG = @CORRECTED_FLAG&#xD;&#xA;ORDER BY P.MPI_PERSON_ID&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @IS_RETR_SPECIAL_ACCT_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT P.PERSON_ID,P.SSN AS PERSON_SSN, P.MPI_PERSON_ID AS MPI_PERSON_ID, P.FIRST_NAME AS FIRST_NAME, P.LAST_NAME AS LAST_NAME from SGT_ANNUAL_STATEMENT_BATCH_DATA DATA&#xD;&#xA;INNER JOIN SGT_PERSON P&#xD;&#xA;on P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;where COMPUTATIONAL_YEAR=@YEAR and ISNULL(RETR_SPECIAL_ACCOUNT_FLAG,'N') = 'Y'&#xD;&#xA;and ((@TempTable = 1 and P.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;and CORRECTED_FLAG = @CORRECTED_FLAG&#xD;&#xA;ORDER BY P.MPI_PERSON_ID&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @IS_REEMPLOYED_UNDER_65_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT P.PERSON_ID,P.SSN AS PERSON_SSN, P.MPI_PERSON_ID AS MPI_PERSON_ID, P.FIRST_NAME AS FIRST_NAME, P.LAST_NAME AS LAST_NAME from SGT_ANNUAL_STATEMENT_BATCH_DATA DATA&#xD;&#xA;INNER JOIN SGT_PERSON P&#xD;&#xA;on P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;where COMPUTATIONAL_YEAR=@YEAR and ISNULL(REEMPLOYED_UNDER_65_FLAG,'N') = 'Y'&#xD;&#xA;and ((@TempTable = 1 and P.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;and CORRECTED_FLAG = @CORRECTED_FLAG&#xD;&#xA;ORDER BY P.MPI_PERSON_ID&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @IS_PENSION_ONLY_FLAG = 'Y'&#xD;&#xA;BEGIN&#xD;&#xA;SELECT P.PERSON_ID,P.SSN AS PERSON_SSN, P.MPI_PERSON_ID AS MPI_PERSON_ID, P.FIRST_NAME AS FIRST_NAME, P.LAST_NAME AS LAST_NAME from SGT_ANNUAL_STATEMENT_BATCH_DATA DATA&#xD;&#xA;INNER JOIN SGT_PERSON P&#xD;&#xA;on P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;where COMPUTATIONAL_YEAR=@YEAR and ISNULL(PENSION_ONLY_FLAG,'N') = 'Y'&#xD;&#xA;and ((@TempTable = 1 and P.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 0)&#xD;&#xA;and CORRECTED_FLAG = @CORRECTED_FLAG&#xD;&#xA;ORDER BY P.MPI_PERSON_ID&#xD;&#xA;END">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="int" />
        <parameter ID="@CORRECTED_FLAG" sfwDataType="string" />
        <parameter ID="@IS_MD_FLAG" sfwDataType="string" />
        <parameter ID="@IS_RETR_SPECIAL_ACCT_FLAG" sfwDataType="string" />
        <parameter ID="@IS_REEMPLOYED_UNDER_65_FLAG" sfwDataType="string" />
        <parameter ID="@IS_PENSION_ONLY_FLAG" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadPrimaryKey" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;   DATA_EXTRACTION_BATCH_INFO_ID,SYEDEH.YEAR_END_DATA_EXTRACTION_HEADER_ID,&#xA; PERSON_ID &#xA;FROM&#xA;  SGT_DATA_EXTRACTION_BATCH_INFO SDEBI WITH(NOLOCK)  &#xA;  JOIN SGT_YEAR_END_DATA_EXTRACTION_HEADER SYEDEH WITH(NOLOCK) &#xA;  ON SDEBI.YEAR_END_DATA_EXTRACTION_HEADER_ID = SYEDEH.YEAR_END_DATA_EXTRACTION_HEADER_ID &#xA;WHERE&#xA;  SYEDEH.YEAR = @YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetEmployeeData" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;  EMPLOYER_NO,&#xA; EMPLOYER_NAME,&#xA; COMPUTATION_YEAR,&#xA; HOURS_REPORTED,&#xA; YEAR(GETDATE())- 1  AS LAST_YEAR &#xA;FROM&#xA;  SGT_DATA_EXTRACTION_BATCH_HOUR_INFO WITH(NOLOCK) &#xA;WHERE&#xA;  PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GenerateAnnualStatementForSinglePerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DATA.*, P.PERSON_ID,P.SSN AS PERSON_SSN, P.DATE_OF_BIRTH AS PERSON_DOB, P.MPI_PERSON_ID, P.VIP_FLAG from SGT_ANNUAL_STATEMENT_BATCH_DATA DATA&#xD;&#xA;INNER JOIN SGT_PERSON P&#xD;&#xA;on P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;where COMPUTATIONAL_YEAR=@YEAR AND P.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CheckForAnnualFlag" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;  COUNT(*) AS COUNT &#xD;&#xA;FROM&#xD;&#xA; SGT_ANNUAL_STATEMENT_BATCH_DATA&#xD;&#xA;WHERE PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="DeleteRecords" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="delete &#xA;FROM&#xA;  SGT_DATA_EXTRACTION_BATCH_INFO &#xA;WHERE&#xA;  YEAR_END_DATA_EXTRACTION_HEADER_ID = @YEAR_END_DATA_EXTRACTION_HEADER_ID ">
      <parameters>
        <parameter ID="@YEAR_END_DATA_EXTRACTION_HEADER_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="HourInfoSubQuery" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_DATA_EXTRACTION_BATCH_HOUR_INFO">
      <parameters />
    </query>
    <query ID="GetDataForGivenYearToChangeFlag" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGT_YEAR_END_DATA_EXTRACTION_HEADER WITH(NOLOCK) where YEAR=@YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetRetirementContributionForDataExtBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PARC.PERSON_ACCOUNT_ID,spa.PLAN_ID,&#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR - 1 THEN EE_CONTRIBUTION_AMOUNT  ELSE 0 END)AS ee_amt_till_prior_year,&#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR - 1 THEN EE_INT_AMOUNT  ELSE 0 END)AS ee_int_till_prior_year,&#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR - 1 THEN UVHP_AMOUNT  ELSE 0 END)AS uvhp_amt_till_prior_year,&#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR THEN EE_CONTRIBUTION_AMOUNT  ELSE 0 END) AS EE_CONTRIBUTION_AMOUNT, &#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR THEN EE_INT_AMOUNT  ELSE 0 END) AS EE_INT_AMOUNT, &#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR THEN UVHP_AMOUNT  ELSE 0 END) AS UVHP_AMOUNT, &#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) &lt;= @YEAR THEN UVHP_INT_AMOUNT  ELSE 0 END) AS UVHP_INT_AMOUNT, &#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) =@YEAR THEN EE_CONTRIBUTION_AMOUNT  ELSE 0 END)AS EE_CURRENT_YEAR,&#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) =@YEAR THEN EE_INT_AMOUNT  ELSE 0 END)AS EE_INT_CURRENT_YEAR,&#xD;&#xA;SUM(CASE WHEN YEAR(EFFECTIVE_DATE) =@YEAR THEN UVHP_AMOUNT  ELSE 0 END)AS UVHP_CURRENT_YEAR,&#xD;&#xA;SUM(CASE WHEN COMPUTATIONAL_YEAR = @YEAR - 1 AND YEAR(EFFECTIVE_DATE) = @YEAR THEN EE_CONTRIBUTION_AMOUNT ELSE 0 END) AS LATE_EE_CONTRIBUTION_AMOUNT,&#xD;&#xA;SUM(CASE WHEN COMPUTATIONAL_YEAR = @YEAR - 1 AND YEAR(EFFECTIVE_DATE) = @YEAR THEN EE_INT_AMOUNT ELSE 0 END) AS LATE_EE_INT_AMOUNT&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION  PARC WITH(NOLOCK) &#xD;&#xA;INNER  JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SPA.PERSON_ACCOUNT_ID = PARC.PERSON_ACCOUNT_ID&#xD;&#xA;INNER  JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID  &#xD;&#xA;WHERE SPA.PLAN_ID IN (1,2)&#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY PARC.PERSON_ACCOUNT_ID,spa.PLAN_ID">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="SubQueryGetUnionCode" sfwQueryType="SubSelectQuery" sfwSql="select * from SGT_DATA_EXTRACTION_BATCH_HOUR_INFO SDEBHI&#xD;&#xA;WHERE SDEBHI.DATA_EXTRACTION_BATCH_INFO_ID =SDEBI.DATA_EXTRACTION_BATCH_INFO_ID&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="UpdateParticipantDateOfDeath" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="update SGT_DATA_EXTRACTION_BATCH_INFO&#xD;&#xA;set PARTICIPANT_DATE_OF_DEATH = null&#xD;&#xA;where PARTICIPANT_DATE_OF_DEATH = '01/01/1753'">
      <parameters />
    </query>
    <query ID="UpdateDeterminationDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="update SGT_DATA_EXTRACTION_BATCH_INFO&#xD;&#xA;set DETERMINATION_DATE = null&#xD;&#xA;where DETERMINATION_DATE = '01/01/1753'">
      <parameters />
    </query>
    <query ID="UpdateBeneficiaryFirstPaymentReceiveDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="update SGT_DATA_EXTRACTION_BATCH_INFO&#xD;&#xA;set BENEFICIARY_FIRST_PAYMENT_RECEIVE_DATE = null&#xD;&#xA;where BENEFICIARY_FIRST_PAYMENT_RECEIVE_DATE = '01/01/1753'">
      <parameters />
    </query>
    <query ID="UpdatePensionStopDate" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="update SGT_DATA_EXTRACTION_BATCH_INFO&#xD;&#xA;set PENSION_STOP_DATE = null&#xD;&#xA;where PENSION_STOP_DATE = '01/01/1753'">
      <parameters />
    </query>
    <query ID="UpdateBeneficiaryDateOfDeath" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="update SGT_DATA_EXTRACTION_BATCH_INFO&#xD;&#xA;set BENEFICIARY_DATE_OF_DEATH = null&#xD;&#xA;where BENEFICIARY_DATE_OF_DEATH = '01/01/1753'">
      <parameters />
    </query>
    <query ID="GetListOfBeneficiaries" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SR.PERSON_ID, SR.BENEFICIARY_PERSON_ID, sr.RELATIONSHIP_VALUE, SP.FIRST_NAME, SP.LAST_NAME,&#xD;&#xA;SP.DATE_OF_BIRTH, SP.DATE_OF_DEATH, SP.SSN&#xD;&#xA;FROM SGT_RELATIONSHIP SR INNER JOIN &#xD;&#xA;SGT_PERSON_ACCOUNT_BENEFICIARY SPAB &#xD;&#xA;ON SR.PERSON_RELATIONSHIP_ID = SPAB.PERSON_RELATIONSHIP_ID&#xD;&#xA;join SGT_PERSON_ACCOUNT spa on spa.PERSON_ACCOUNT_ID = SPAB.PERSON_ACCOUNT_ID &#xD;&#xA;JOIN SGT_BENEFIT_APPLICATION SBA ON SBA.PERSON_ID = SR.PERSON_ID&#xD;&#xA;JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPBX.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND SPBX.PLAN_ID = 2 &#xD;&#xA;and SPBX.BENEFIT_OPTION_VALUE = '10LA'&#xD;&#xA;join SGT_PERSON SP ON SP.PERSON_ID = SR.BENEFICIARY_PERSON_ID&#xD;&#xA;WHERE&#xD;&#xA;spa.PLAN_ID = 2  AND SPAB.STATUS_VALUE = 'VALD'  AND &#xD;&#xA;(SBA.BENEFIT_TYPE_VALUE = 'RTMT' OR SBA.BENEFIT_TYPE_VALUE = 'DSBL')&#xD;&#xA;AND SBA.APPLICATION_STATUS_VALUE = 'APPR'&#xD;&#xA;ORDER BY spab.START_DATE  &#xD;&#xA;">
      <parameters />
    </query>
    <query ID="GetDataForLastYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT(SDEBI.PERSON_ID), &#xA;  CONVERT(datetime, DBO.fn_GET_DECRYPTED_TEXT(SDEBI.PERSON_DOB), 101) AS PERSON_DOB,&#xA;  SDEBI.STATUS_CODE_VALUE, &#xD;&#xA;  SDEBI.MPI_PERSON_ID,&#xA;  SDEBI.TOTAL_QUALIFIED_YEARS, &#xA;  SDEBI.YTD_HOURS_FOR_LAST_COMP_YEAR, &#xA;  SDEBI.BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA; SDEBI.BENEFICIARY_FLAG, &#xD;&#xA;    SDEBI.ACCRUED_BENEFIT_TILL_LAST_COMP_YEAR,&#xA;    SCVStatusCode.DESCRIPTION AS StatusCodeDescription,&#xA;    SCVStatusCode1.DESCRIPTION AS BenefitOptionCodeDescription&#xA; FROM &#xA;   SGT_DATA_EXTRACTION_BATCH_INFO SDEBI WITH(NOLOCK) &#xD;&#xA;     LEFT OUTER JOIN SGS_CODE_VALUE SCVStatusCode WITH(NOLOCK) ON SCVStatusCode.CODE_ID=SDEBI.STATUS_CODE_ID AND SCVStatusCode.CODE_VALUE=SDEBI.STATUS_CODE_VALUE&#xA;     LEFT OUTER JOIN SGS_CODE_VALUE SCVStatusCode1 WITH(NOLOCK) ON SCVStatusCode1.CODE_ID=SDEBI.BENEFIT_OPTION_CODE_ID AND SCVStatusCode1.CODE_VALUE=SDEBI.BENEFIT_OPTION_CODE_VALUE&#xA;     JOIN SGT_YEAR_END_DATA_EXTRACTION_HEADER SYEDEH WITH(NOLOCK)  &#xA;   ON SDEBI.YEAR_END_DATA_EXTRACTION_HEADER_ID = SYEDEH.YEAR_END_DATA_EXTRACTION_HEADER_ID &#xA; WHERE  &#xA;   (SDEBI.BENEFICIARY_FLAG is NULL OR SDEBI.BENEFICIARY_FLAG = '' OR SDEBI.BENEFICIARY_FLAG = 'N' ) and SYEDEH.YEAR = @YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="PensionActuaryStatusCodes" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select code_value,&#xD;&#xA;CASE WHEN DESCRIPTION = 'Non-Vested Active' THEN 'Active' ELSE DESCRIPTION END AS DESCRIPTION&#xD;&#xA;from SGS_CODE_VALUE where CODE_ID = 7052 and DATA1 is not null">
      <parameters />
    </query>
    <query ID="NonTaxableAmtPaid" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;Declare @GOLIVEDATE  DATETIME&#xD;&#xA;&#xD;&#xA;SELECT  TOP 1 @GOLIVEDATE = DATA1 FROM SGS_CODE_VALUE  WITH(NOLOCK)  WHERE CODE_ID = 52 and CODE_VALUE = 'GLDT'&#xD;&#xA;&#xD;&#xA;SELECT SPA.PERSON_ACCOUNT_ID,PA.PAYEE_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 &#xD;&#xA;                AND PAYMENT_1099R_FLAG = 'Y' &#xD;&#xA;                AND VENDOR_FLAG= 'N'  &#xD;&#xA;                AND TAXABLE_ITEM_FLAG &lt;&gt; 'Y' &#xD;&#xA;                AND ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET'&#xD;&#xA;                AND REISSUE_ITEMS_FLAG = 'N')&#xD;&#xA;                THEN AMOUNT ELSE 0 END) AS NONTAXABLE_AMOUNT_PAID&#xD;&#xA;   &#xD;&#xA;  FROM SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;  INNER  JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PA.PERSON_ID = SP.PERSON_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = PA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;  INNER JOIN SGT_PERSON PARTI ON PARTI.PERSON_ID = SPBA.PERSON_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID AND PHH.PLAN_ID = 2&#xD;&#xA;  INNER JOIN  SGT_PAYMENT_HISTORY_DETAIL PHDE WITH(NOLOCK) ON PHDE.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;           AND PHD.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD')&#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PHDE.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;  INNER JOIN SGT_PLAN_BENEFIT_XR PBXR WITH(NOLOCK) ON PBXR.PLAN_BENEFIT_ID = PA.PLAN_BENEFIT_ID   &#xD;&#xA;  WHERE SPA.PLAN_ID =2&#xD;&#xA;  AND PHH.PAYMENT_DATE &gt;= @GOLIVEDATE&#xD;&#xA;  GROUP BY SPA.PERSON_ACCOUNT_ID, PA.PAYEE_ACCOUNT_ID&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="UpdateID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="update SGT_DATA_EXTRACTION_BATCH_HOUR_INFO &#xD;&#xA;set DATA_EXTRACTION_BATCH_INFO_ID = H.DATA_EXTRACTION_BATCH_INFO_ID&#xD;&#xA;FROM SGT_DATA_EXTRACTION_BATCH_HOUR_INFO HI&#xD;&#xA;INNER JOIN SGT_DATA_EXTRACTION_BATCH_INFO H ON H.PERSON_ID=HI.PERSON_ID&#xD;&#xA;WHERE H.YEAR_END_DATA_EXTRACTION_HEADER_ID = @YEAR_END_DATA_EXTRACTION_HEADER_ID">
      <parameters>
        <parameter ID="@YEAR_END_DATA_EXTRACTION_HEADER_ID" />
      </parameters>
    </query>
    <query ID="GetBatchInfoByHeaderId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from sgt_data_extraction_batch_info&#xD;&#xA;where YEAR_END_DATA_EXTRACTION_HEADER_ID = @YEAR_END_DATA_EXTRACTION_HEADER_ID">
      <parameters>
        <parameter ID="@YEAR_END_DATA_EXTRACTION_HEADER_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadContributionForPopUpBenefitOption" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SPARC.* from SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION SPARC&#xD;&#xA;JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPARC.PERSON_ACCOUNT_ID = SPBA.PERSON_ACCOUNT_ID&#xD;&#xA;JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPA.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID&#xD;&#xA;WHERE SPA.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DSBL') AND SPBX.PLAN_ID = 2 AND BENEFIT_OPTION_VALUE = 'JPOP'&#xD;&#xA;AND (SELECT top(1) STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK) WHERE &#xD;&#xA;Q.PAYEE_ACCOUNT_ID = SPA.PAYEE_ACCOUNT_ID order by MODIFIED_DATE desc) NOT in ('CMPL', 'CNCL')">
      <parameters />
    </query>
    <query ID="GetYearEndDataExtractionInfoLocals" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;SP.PERSON_ID,SP.SSN,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN 'Y' ELSE NULL END AS LOCAL_600_FLAG,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN 'Y' ELSE NULL END AS LOCAL_666_FLAG,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN 'Y' ELSE NULL END AS LOCAL_700_FLAG,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN 'Y' ELSE NULL END AS LOCAL_52_FLAG,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN 'Y' ELSE NULL END AS LOCAL_161_FLAG,&#xD;&#xA;&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN SUM(ISNULL(AA.LOCAL_FROZEN_HOURS,0)) ELSE NULL END AS LOCAL_600_CREDITED_HOURS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN SUM(ISNULL(AA.LOCAL_FROZEN_HOURS,0)) ELSE NULL END AS LOCAL_666_CREDITED_HOURS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN SUM(ISNULL(AA.LOCAL_FROZEN_HOURS,0)) ELSE NULL END AS LOCAL_700_CREDITED_HOURS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN SUM(ISNULL(AA.LOCAL_FROZEN_HOURS,0)) ELSE NULL END AS LOCAL_52_CREDITED_HOURS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN SUM(ISNULL(AA.LOCAL_FROZEN_HOURS,0)) ELSE NULL END AS LOCAL_161_CREDITED_HOURS,&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN SUM(ISNULL(AA.PENSION_CREDITS,0)) ELSE NULL END as LOCAL_600_PENSION_CREDITS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN SUM(ISNULL(AA.PENSION_CREDITS,0)) ELSE NULL END as LOCAL_666_PENSION_CREDITS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN SUM(ISNULL(AA.PENSION_CREDITS,0)) ELSE NULL END as LOCAL_700_PENSION_CREDITS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN SUM(ISNULL(AA.PENSION_CREDITS,0)) ELSE NULL END as LOCAL_52_PENSION_CREDITS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN SUM(ISNULL(AA.PENSION_CREDITS,0)) ELSE NULL END as LOCAL_161_PENSION_CREDITS,&#xD;&#xA;&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN SUM(ISNULL(AA.LOCAL_QUALIFIED_YEARS,0)) ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN SUM(ISNULL(AA.LOCAL_QUALIFIED_YEARS,0)) ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN SUM(ISNULL(AA.LOCAL_QUALIFIED_YEARS,0)) ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN SUM(ISNULL(AA.LOCAL_QUALIFIED_YEARS,0)) ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN SUM(ISNULL(AA.LOCAL_QUALIFIED_YEARS,0)) ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN SUM(ISNULL(A.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN SUM(ISNULL(A.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN SUM(ISNULL(A.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN SUM(ISNULL(A.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN SUM(ISNULL(A.LOCAL_FROZEN_BENEFIT_AMOUNT,0)) ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN SUM(ISNULL(B.LOCAL_PRE_BIS_AMOUNT,0)) ELSE NULL END AS LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN SUM(ISNULL(B.LOCAL_PRE_BIS_AMOUNT,0)) ELSE NULL END AS LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN SUM(ISNULL(B.LOCAL_PRE_BIS_AMOUNT,0)) ELSE NULL END AS LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN SUM(ISNULL(B.LOCAL_PRE_BIS_AMOUNT,0)) ELSE NULL END AS LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN SUM(ISNULL(B.LOCAL_PRE_BIS_AMOUNT,0)) ELSE NULL END AS LOCAL_161_NON_ELIGIBLE_BENEFIT&#xD;&#xA;&#xD;&#xA;INTO #DATA&#xD;&#xA;FROM SGT_PERSON SP&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID NOT IN (1,2,9)&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(&#xD;&#xA;SELECT E.PERSON_ACCOUNT_ID,SUM(ISNULL(LOCAL_FROZEN_HOURS,0)) AS LOCAL_FROZEN_HOURS, SUM(ISNULL(PENSION_CREDITS,0)) AS PENSION_CREDITS,&#xD;&#xA;SUM(ISNULL(LOCAL_QUALIFIED_YEARS,0)) AS LOCAL_QUALIFIED_YEARS&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_ELIGIBILITY E &#xD;&#xA;GROUP BY E.PERSON_ACCOUNT_ID&#xD;&#xA;) AA ON AA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(&#xD;&#xA;SELECT RC.PERSON_ACCOUNT_ID,SUM(ISNULL(LOCAL_FROZEN_BENEFIT_AMOUNT,0)) AS LOCAL_FROZEN_BENEFIT_AMOUNT &#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC &#xD;&#xA;GROUP BY RC.PERSON_ACCOUNT_ID&#xD;&#xA;)A ON A.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;SELECT RC.PERSON_ACCOUNT_ID,&#xD;&#xA;SUM(ISNULL(RC.LOCAL_PRE_BIS_AMOUNT,0)) AS LOCAL_PRE_BIS_AMOUNT FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;WHERE RC.TRANSACTION_TYPE_VALUE = 'BBAL' &#xD;&#xA;GROUP BY RC.PERSON_ACCOUNT_ID&#xD;&#xA;)B ON B.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID &#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')   &#xD;&#xA;GROUP BY SP.PERSON_ID,SP.SSN,SPA.PERSON_ACCOUNT_ID,SPA.PLAN_ID&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT *  INTO #TEMP FROM &#xD;&#xA;(&#xD;&#xA;SELECT distinct SP.PERSON_ID,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS Person_Name,&#xD;&#xA;SP.SSN AS PERSON_SSN,&#xD;&#xA;'ACTIVE_DCSD' AS CAT_TYPE,&#xD;&#xA;SP.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;NULL AS BENEFICIARY_ID,&#xD;&#xA;NULL AS BENEFICIARY_FLAG,&#xD;&#xA;NULL AS BENEFICIARY_NAME ,&#xD;&#xA;NULL AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;null as PAYEE_ACCOUNT_ID,&#xD;&#xA;'DCSD' AS STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;spacc.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;null AS FUNDS_TYPE_VALUE,&#xD;&#xA;null AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;NULL AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;null AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;NULL AS GROSS_AMOUNT,&#xD;&#xA;NULL  AS AMOUNT_PAID,                 &#xD;&#xA;SPACC.REEMPLOYED_FLAG,&#xD;&#xA;-------------------------------&#xD;&#xA;SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_FLAG ELSE NULL END LOCAL_600_FLAG, &#xD;&#xA;CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;  WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;     ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_CREDITED_HOURS ELSE NULL END LOCAL_600_CREDITED_HOURS, &#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PENSION_CREDITS&#xD;&#xA;  ELSE NULL END AS LOCAL_600_PENSION_CREDITS,&#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;  ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_FLAG ELSE NULL END LOCAL_666_FLAG, &#xD;&#xA;CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA; WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA; ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_CREDITED_HOURS ELSE NULL END LOCAL_666_CREDITED_HOURS, &#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PENSION_CREDITS&#xD;&#xA; ELSE NULL END AS LOCAL_666_PENSION_CREDITS,&#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA; ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                  &#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_FLAG ELSE NULL END LOCAL_700_FLAG, &#xD;&#xA;CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;  WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;  ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_CREDITED_HOURS ELSE NULL END LOCAL_700_CREDITED_HOURS, &#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PENSION_CREDITS&#xD;&#xA; ELSE NULL END AS LOCAL_700_PENSION_CREDITS,&#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;     ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;             &#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_FLAG ELSE NULL END LOCAL_52_FLAG, &#xD;&#xA;CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA; WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;    ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_CREDITED_HOURS ELSE NULL END LOCAL_52_CREDITED_HOURS, &#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PENSION_CREDITS&#xD;&#xA; ELSE NULL END AS LOCAL_52_PENSION_CREDITS,&#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA; ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                     &#xD;&#xA; CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_FLAG ELSE NULL END LOCAL_161_FLAG, &#xD;&#xA;CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;        WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_BENEFIT&#xD;&#xA;        ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_CREDITED_HOURS ELSE NULL END LOCAL_161_CREDITED_HOURS, &#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PENSION_CREDITS&#xD;&#xA;        ELSE NULL END AS LOCAL_161_PENSION_CREDITS,&#xD;&#xA;CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;        ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_161_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;---------------------------------------&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;NULL AS JOINT_ANNUITANT_ID, NULL AS FIRST_NAME , NULL AS LAST_NAME ,&#xD;&#xA;NULL AS SSN, NULL AS GENDER_ID, NULL AS GENDER_VALUE, NULL AS DATE_OF_BIRTH, NULL AS DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;NULL AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;--71411 enhancement&#xD;&#xA;, NULL AS IS_DISABILITY_CONVERSION&#xD;&#xA;, NULL AS IS_CONVERTED_FROM_POPUP&#xD;&#xA;, NULL AS DRO_MODEL &#xD;&#xA;                FROM&#xD;&#xA;SGT_PERSON SP WITH(NOLOCK)&#xD;&#xA;JOIN SGT_PERSON_ACCOUNT SPA ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA on SPBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT SPACC ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N')                &#xD;&#xA;LEFT JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPACC.PAYEE_ACCOUNT_ID = SPAS.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBX ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA;       AND ((PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) &#xD;&#xA;       AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;       AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPADD ON SPADD.PERSON_ID = SP.PERSON_ID &#xD;&#xA; AND  SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC ) &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL' &#xD;&#xA;LEFT OUTER JOIN #DATA DA  ON DA.PERSON_ID = SP.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID                  &#xD;&#xA;WHERE SP.DATE_OF_DEATH is not null AND SP.SSN IS NOT NULL                 &#xD;&#xA;AND SPBA.PAYEE_BENEFIT_ACCOUNT_ID IS NULL &#xD;&#xA;AND SPA.PLAN_ID in (3,4,6,7,8) &#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')            &#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH,SPACC.PAYEE_ACCOUNT_ID, SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, spacc.RETIREMENT_TYPE_ID, SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,       &#xD;&#xA;DA.LOCAL_600_FLAG, DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_600_PREMERGER_BENEFIT,DA.LOCAL_600_CREDITED_HOURS, DA.LOCAL_600_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_666_FLAG, DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_666_PREMERGER_BENEFIT,DA.LOCAL_666_CREDITED_HOURS, DA.LOCAL_666_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_700_FLAG, DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_700_PREMERGER_BENEFIT,DA.LOCAL_700_CREDITED_HOURS, DA.LOCAL_700_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_52_FLAG, DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_52_PREMERGER_BENEFIT,DA.LOCAL_52_CREDITED_HOURS, DA.LOCAL_52_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_161_FLAG, DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_161_PREMERGER_BENEFIT,DA.LOCAL_161_CREDITED_HOURS, DA.LOCAL_161_PENSION_CREDITS,&#xD;&#xA;LOCAL_161_NON_ELIGIBLE_BENEFIT,DA.LOCAL_52_NON_ELIGIBLE_BENEFIT,LOCAL_700_NON_ELIGIBLE_BENEFIT,DA.LOCAL_666_NON_ELIGIBLE_BENEFIT,DA.LOCAL_600_NON_ELIGIBLE_BENEFIT,--DA.TOTAL_QUALIFIED_YEARS,&#xD;&#xA;SP.MPI_PERSON_ID, SPBX.PLAN_ID,spa.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE, SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPA.PERSON_ACCOUNT_ID, SPA.PLAN_ID,spae.PERSON_ACCOUNT_ELIGIBILITY_ID,spae.PENSION_CREDITS,spae.LOCAL_QUALIFIED_YEARS&#xD;&#xA;union&#xD;&#xA;SELECT&#xD;&#xA;distinct SP.PERSON_ID,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS Person_Name,&#xD;&#xA;SP.SSN AS PERSON_SSN,&#xD;&#xA;'RETIREE_AND_ACTIVE' AS CAT_TYPE,&#xD;&#xA;SP.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;NULL AS BENEFICIARY_ID,&#xD;&#xA;NULL AS BENEFICIARY_FLAG,&#xD;&#xA;NULL AS BENEFICIARY_NAME ,&#xD;&#xA;NULL AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;--Ticket 106895 item 4 Payee account Cancel status check is added.&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.PAYEE_ACCOUNT_ID ELSE NULL END PAYEE_ACCOUNT_ID,&#xD;&#xA;CASE WHEN SPA.STATUS_VALUE ='RETR' AND SP.DATE_OF_DEATH IS NULL AND (SPACC.PAYEE_ACCOUNT_ID IS NULL OR (SPAS.STATUS_VALUE IS NOT NULL AND SPAS.STATUS_VALUE = 'CNCL')) THEN 'ACTV' ELSE SPA.STATUS_VALUE END STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE ELSE NULL END BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.RETIREMENT_TYPE_ID ELSE NULL END RETIREMENT_TYPE_ID,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.RETIREMENT_TYPE_VALUE ELSE NULL END RETIREMENT_TYPE_VALUE,&#xD;&#xA;--CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPBX.BENEFIT_OPTION_VALUE  ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;--CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'DSBL' AND BAB.MIN_RETIREMENT_DATE IS NOT NULL AND BAB.MIN_RETIREMENT_DATE &lt; SPACC.BENEFIT_BEGIN_DATE THEN BAB.MIN_RETIREMENT_DATE ELSE SPACC.BENEFIT_BEGIN_DATE END ELSE NULL END  BENEFIT_BEGIN_DATE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.BENEFIT_END_DATE ELSE NULL END  BENEFIT_END_DATE, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.TERM_CERTAIN_END_DATE ELSE NULL END TERM_CERTAIN_END_DATE,&#xD;&#xA;NULL AS FUNDS_TYPE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.NONTAXABLE_BEGINNING_BALANCE  ELSE NULL END     AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION ELSE NULL END  AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;NULL AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA; CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN   SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0 END)  ELSE NULL END  AS GROSS_AMOUNT,                 &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN PAYMENT.AMOUNT_PAID ELSE NULL END AS AMOUNT_PAID,       &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.REEMPLOYED_FLAG ELSE NULL END REEMPLOYED_FLAG,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPACC.BENEFIT_BEGIN_DATE ELSE NULL END  BENEFIT_BEGIN_DATE,&#xD;&#xA;--SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;--CASE WHEN spa.STATUS_VALUE ='RETR' and SP.DATE_OF_DEATH is null AND SPACC.PAYEE_ACCOUNT_ID IS NULL THEN 'ACTV' ELSE SPA.STATUS_VALUE END STATUS_VALUE,&#xD;&#xA;--SPADD.ADDR_STATE_VALUE,&#xD;&#xA;--SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;--SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;--spacc.RETIREMENT_TYPE_ID,&#xD;&#xA;--SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;--CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;--                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;--&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;--                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;--SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;--null AS FUNDS_TYPE_VALUE,&#xD;&#xA;--SPACC.NONTAXABLE_BEGINNING_BALANCE AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;--SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;--null AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;--SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA;-- THEN ISNULL(AMOUNT,0.0) ELSE 0  END) AS GROSS_AMOUNT,                 &#xD;&#xA;--PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,                       &#xD;&#xA;--SPACC.REEMPLOYED_FLAG&#xD;&#xA;--,SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_FLAG ELSE NULL END LOCAL_600_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_CREDITED_HOURS ELSE NULL END LOCAL_600_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                  CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_FLAG ELSE NULL END LOCAL_666_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_CREDITED_HOURS ELSE NULL END LOCAL_666_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                  &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_FLAG ELSE NULL END LOCAL_700_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_CREDITED_HOURS ELSE NULL END LOCAL_700_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;             &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_FLAG ELSE NULL END LOCAL_52_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_CREDITED_HOURS ELSE NULL END LOCAL_52_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_FLAG ELSE NULL END LOCAL_161_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_CREDITED_HOURS ELSE NULL END LOCAL_161_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_161_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.PERSON_ID ELSE NULL END AS JOINT_ANNUITANT_ID, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.FIRST_NAME ELSE NULL END FIRST_NAME, &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.LAST_NAME ELSE NULL END LAST_NAME,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.SSN ELSE NULL END SSN, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.GENDER_ID ELSE NULL END GENDER_ID, &#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.GENDER_VALUE ELSE NULL END GENDER_VALUE, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.DATE_OF_BIRTH ELSE NULL END DATE_OF_BIRTH,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPJOANNU.DATE_OF_DEATH ELSE NULL END DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN SPAS.STATUS_VALUE ELSE NULL END AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;--SPJOANNU.PERSON_ID AS JOINT_ANNUITANT_ID, SPJOANNU.FIRST_NAME , SPJOANNU.LAST_NAME ,&#xD;&#xA;--SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,&#xD;&#xA;--SPJOANNU.DATE_OF_DEATH ,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;--SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA; FROM&#xD;&#xA;SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA on PBA.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;                LEFT OUTER JOIN  SGT_PAYEE_ACCOUNT SPACC WITH(NOLOCK) ON SPACC.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE NOT IN ('DDPT', 'QDRO', 'DDPR') &#xD;&#xA;                               AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N') AND YEAR(SPACC.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR&#xD;&#xA;                               AND (SPACC.PLAN_BENEFIT_ID IN ( SELECT PLAN_BENEFIT_ID from SGT_PLAN_BENEFIT_XR where PLAN_ID in (3,4,6,7,8)))&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;     AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID  FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  WHERE Q.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID ORDER  BY   Q.STATUS_EFFECTIVE_DATE DESC)                                                 &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID NOT IN (1,2) AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID                &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID AND SPBX.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI WITH(NOLOCK) ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID &#xD;&#xA; AND (&#xD;&#xA;--(PAPI.START_DATE &lt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) AND --71411 item 1 commented start date check&#xD;&#xA;-- (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;-- AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2)) &#xD;&#xA;--OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP')&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA; OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (21,22) AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('01' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME)))&#xD;&#xA;)&#xD;&#xA;LEFT OUTER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPADD ON SPADD.PERSON_ID = SP.PERSON_ID &#xD;&#xA; AND  SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC ) &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'  &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID    &#xD;&#xA;LEFT OUTER JOIN #DATA DA  ON DA.PERSON_ID = SP.PERSON_ID                     &#xD;&#xA;WHERE&#xD;&#xA;(&#xD;&#xA; (SPA.STATUS_VALUE IN ('ACTV','INAC','RETR') and SP.DATE_OF_DEATH is null AND &#xD;&#xA;  (SPACC.PAYEE_ACCOUNT_ID IS NULL OR SPAS.STATUS_VALUE IN ('CNCL')&#xD;&#xA;   AND NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q &#xD;&#xA;      ON P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;                        WHERE P.PERSON_ID = SPACC.PERSON_ID AND P.BENEFIT_ACCOUNT_TYPE_VALUE=SPACC.BENEFIT_ACCOUNT_TYPE_VALUE AND P.PLAN_BENEFIT_ID =SPACC.PLAN_BENEFIT_ID AND Q.STATUS_VALUE NOT IN ('CNCL'))&#xD;&#xA;   AND&#xD;&#xA;   --NEW&#xD;&#xA;   NOT EXISTS(SELECT * FROM SGT_PAYEE_ACCOUNT P &#xD;&#xA;       INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT BA ON P.PAYEE_BENEFIT_ACCOUNT_ID = BA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_STATUS Q ON P.BENEFIT_ACCOUNT_TYPE_VALUE IN ('RTMT','DSBL') AND P.PAYEE_ACCOUNT_ID = Q.PAYEE_ACCOUNT_ID AND Q.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP(1)PAYEE_ACCOUNT_STATUS_ID FROM SGT_PAYEE_ACCOUNT_STATUS R WHERE R.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID ORDER BY STATUS_EFFECTIVE_DATE DESC)&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR BX ON BX.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID AND BX.PLAN_ID = 2&#xD;&#xA;       INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = P.PLAN_BENEFIT_ID&#xD;&#xA;       INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PPI WITH(NOLOCK) ON P.PAYEE_ACCOUNT_ID = PPI.PAYEE_ACCOUNT_ID &#xD;&#xA;        AND ((PPI.START_DATE &lt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) &#xD;&#xA;        AND (PPI.END_DATE IS NULL OR PPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;        AND X.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;        OR (X.BENEFIT_OPTION_VALUE = 'LUMP' AND PPI.PAYMENT_ITEM_TYPE_ID IN (21,22) AND (PPI.END_DATE IS NULL OR PPI.END_DATE &gt;= CAST('01' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))))&#xD;&#xA;       WHERE P.PERSON_ID = SP.PERSON_ID AND BA.PERSON_ID = SP.PERSON_ID AND Q.STATUS_VALUE NOT IN ('CNCL'))                        &#xD;&#xA;  )&#xD;&#xA;     )&#xD;&#xA; OR &#xD;&#xA;    (&#xD;&#xA;  (SPA.STATUS_VALUE IN ('RETR') OR (SPA.STATUS_VALUE IN ('ACTV','INAC') AND SPACC.RETIREMENT_TYPE_VALUE='MIND')) and SP.DATE_OF_DEATH is null &#xD;&#xA;                    AND &#xD;&#xA;  (&#xD;&#xA;   SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')  OR&#xD;&#xA;   (SPAS.STATUS_VALUE IN ('CMPL') AND YEAR(SPAS.STATUS_EFFECTIVE_DATE) &gt;= @EXECUTIONYEAR AND (SPACC.RETIREMENT_TYPE_VALUE = 'MIND' OR SPACC.RETIREMENT_TYPE_VALUE IS NULL))  &#xD;&#xA;  )&#xD;&#xA;     )&#xD;&#xA; OR &#xD;&#xA;     (&#xD;&#xA;  SPA.STATUS_VALUE IN ('DCSD','RETR') and SP.DATE_OF_DEATH IS NOT NULL AND SPAS.STATUS_VALUE IN ('CMPL')&#xD;&#xA;        AND ((SPACC.PLAN_BENEFIT_ID NOT IN (SELECT XR.PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR XR WHERE XR.BENEFIT_OPTION_VALUE = 'LUMP')) OR (YEAR(SP.DATE_OF_DEATH) = @EXECUTIONYEAR))&#xD;&#xA;        AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL'&#xD;&#xA;        And (((SELECT COUNT(pa1.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA1 WHERE PA1.PERSON_ID &lt;&gt; SPACC.PERSON_ID AND PA1.PAYEE_BENEFIT_ACCOUNT_ID = SPACC.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                                           AND (PA1.RETIREE_INCR_FLAG IS NULL OR PA1.RETIREE_INCR_FLAG = 'N')) = 0) OR YEAR(SP.DATE_OF_DEATH) &gt; @EXECUTIONYEAR)&#xD;&#xA;      )&#xD;&#xA;     OR &#xD;&#xA;     (&#xD;&#xA;  SPA.STATUS_VALUE IN ('RETR') and SP.DATE_OF_DEATH IS NOT NULL&#xD;&#xA;        AND SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL')&#xD;&#xA;        AND ((SPACC.PLAN_BENEFIT_ID NOT IN (SELECT XR.PLAN_BENEFIT_ID FROM SGT_PLAN_BENEFIT_XR XR WHERE XR.BENEFIT_OPTION_VALUE = 'LUMP')) OR (YEAR(SP.DATE_OF_DEATH) = @EXECUTIONYEAR))&#xD;&#xA;        AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE &lt;&gt; 'WDRL'&#xD;&#xA;        And (((SELECT COUNT(pa1.PAYEE_ACCOUNT_ID) FROM SGT_PAYEE_ACCOUNT PA1 WHERE PA1.PERSON_ID &lt;&gt; SPACC.PERSON_ID AND PA1.PAYEE_BENEFIT_ACCOUNT_ID = SPACC.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;                                           AND (PA1.RETIREE_INCR_FLAG IS NULL OR PA1.RETIREE_INCR_FLAG = 'N')) = 0) OR YEAR(SP.DATE_OF_DEATH) &gt; @EXECUTIONYEAR)&#xD;&#xA;      )&#xD;&#xA;)&#xD;&#xA;AND SPA.PLAN_ID in (3,4,6,7,8) AND (SPBX.PLAN_ID in (3,4,6,7,8) OR SPBX.PLAN_ID IS NULL)&#xD;&#xA;AND (SPACC.PLAN_BENEFIT_ID IN ( SELECT PLAN_BENEFIT_ID from SGT_PLAN_BENEFIT_XR where PLAN_ID in (3,4,6,7,8)) OR (SPACC.PLAN_BENEFIT_ID IS null)) &#xD;&#xA;AND ((@TempTable = 'Y' and SP.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')               &#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH, spa.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, spacc.RETIREMENT_TYPE_ID, SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,       &#xD;&#xA;SPAE.VESTED_DATE, DA.LOCAL_600_FLAG, DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_600_PREMERGER_BENEFIT,DA.LOCAL_600_CREDITED_HOURS, DA.LOCAL_600_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_666_FLAG, DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_666_PREMERGER_BENEFIT,DA.LOCAL_666_CREDITED_HOURS, DA.LOCAL_666_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_700_FLAG, DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_700_PREMERGER_BENEFIT,DA.LOCAL_700_CREDITED_HOURS, DA.LOCAL_700_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_52_FLAG, DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_52_PREMERGER_BENEFIT,DA.LOCAL_52_CREDITED_HOURS, DA.LOCAL_52_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_161_FLAG, DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_161_PREMERGER_BENEFIT,DA.LOCAL_161_CREDITED_HOURS, DA.LOCAL_161_PENSION_CREDITS,&#xD;&#xA;LOCAL_161_NON_ELIGIBLE_BENEFIT,DA.LOCAL_52_NON_ELIGIBLE_BENEFIT,LOCAL_700_NON_ELIGIBLE_BENEFIT,DA.LOCAL_666_NON_ELIGIBLE_BENEFIT,DA.LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE, SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, SPJOANNU.LAST_NAME, SPJOANNU.SSN,&#xD;&#xA;SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,SPACC.PAYEE_ACCOUNT_ID,SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,spae.PERSON_ACCOUNT_ELIGIBILITY_ID,spae.PENSION_CREDITS,spae.LOCAL_QUALIFIED_YEARS,spa.PERSON_ACCOUNT_ID&#xD;&#xA;,PAYMENT.AMOUNT_PAID,SPAS.STATUS_VALUE    &#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;          &#xD;&#xA;UNION           &#xD;&#xA;SELECT&#xD;&#xA;distinct SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS Person_Name,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'QDRO' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;SP.PERSON_ID AS BENEFICIARY_ID,&#xD;&#xA;'Q' AS BENEFICIARY_FLAG,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS BENEFICIARY_NAME ,&#xD;&#xA;SP.SSN AS BENEFICIARY_SSN,&#xD;&#xA;SP.GENDER_ID         AS BENEFICIARY_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE                AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH                AS BENEFICIARY_DOB,&#xD;&#xA;SP.DATE_OF_DEATH              AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;spa.STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;spacc.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE                AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0 END)  AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID, &#xD;&#xA;SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_FLAG ELSE NULL END LOCAL_600_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_CREDITED_HOURS ELSE NULL END LOCAL_600_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                  CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_FLAG ELSE NULL END LOCAL_666_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_CREDITED_HOURS ELSE NULL END LOCAL_666_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                  &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_FLAG ELSE NULL END LOCAL_700_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_CREDITED_HOURS ELSE NULL END LOCAL_700_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;             &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_FLAG ELSE NULL END LOCAL_52_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_CREDITED_HOURS ELSE NULL END LOCAL_52_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_FLAG ELSE NULL END LOCAL_161_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_CREDITED_HOURS ELSE NULL END LOCAL_161_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_161_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_PERSON_ID, NULL AS JOINT_ANNUITANT_ID, NULL FIRST_NAME , NULL AS LAST_NAME ,&#xD;&#xA;NULL AS SSN, NULL AS GENDER_ID, NULL AS GENDER_VALUE, NULL AS DATE_OF_BIRTH, NULL AS DATE_OF_DEATH ,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, SDBD.DRO_MODEL_VALUE AS DRO_MODEL  --71411 item 5&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON SPPAR&#xD;&#xA;inner join SGT_PERSON_ACCOUNT spa on spa.PERSON_ID = sppar.PERSON_ID AND SPA.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;inner join SGT_PAYEE_BENEFIT_ACCOUNT spba on spba.PERSON_ACCOUNT_ID = spa.PERSON_ACCOUNT_ID&#xD;&#xA;inner join SGT_PAYEE_ACCOUNT spacc on spacc.PAYEE_BENEFIT_ACCOUNT_ID = spba.PAYEE_BENEFIT_ACCOUNT_ID AND  YEAR(SPACC.BENEFIT_BEGIN_DATE) &lt;= @EXECUTIONYEAR&#xD;&#xA;--71411 item 3&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;left outer join SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA;        AND (&#xD;&#xA;        --(PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) --71411 item 1 commented start date check&#xD;&#xA;        --AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;        --AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;left outer join SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;inner join SGT_PERSON sp on sp.PERSON_ID = spacc.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;     AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID  FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  WHERE Q.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID ORDER  BY   Q.STATUS_EFFECTIVE_DATE DESC)                                                 &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID NOT IN (1,2) AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPADD ON SPADD.PERSON_ID = SP.PERSON_ID &#xD;&#xA; AND  SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC ) &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'                  &#xD;&#xA;LEFT OUTER JOIN SGT_DRO_BENEFIT_DETAILS SDBD ON SDBD.DRO_BENEFIT_ID = SPACC.DRO_APPLICATION_DETAIL_ID  &#xD;&#xA;LEFT OUTER JOIN #DATA DA ON DA.PERSON_ID = SPPAR.PERSON_ID  &#xD;&#xA;WHERE SPPAR.SSN IS NOT NULL and spa.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;AND&#xD;&#xA;( SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') OR (SPAS.STATUS_VALUE IN ('CMPL') AND YEAR(SPAS.STATUS_EFFECTIVE_DATE) = @EXECUTIONYEAR AND SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;AND (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('QDRO') OR (SPACC.BENEFIT_ACCOUNT_TYPE_VALUE = 'WDRL' &#xD;&#xA;AND SPACC.PERSON_ID ! =  SPBA.PERSON_ID)) AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG='N')&#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME,SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH, SPPAR.PERSON_ID ,SPPAR.FIRST_NAME, SPPAR.LAST_NAME,SPPAR.SSN,SPPAR.GENDER_ID,SPPAR.GENDER_VALUE ,SPPAR.DATE_OF_BIRTH,&#xD;&#xA;SPPAR.DATE_OF_DEATH,SPACC.PAYEE_ACCOUNT_ID, spa.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,spacc.RETIREMENT_TYPE_ID,SPACC.RETIREMENT_TYPE_VALUE,SPBX.BENEFIT_OPTION_VALUE,SPACC.BENEFIT_END_DATE,&#xD;&#xA;SPACC.TERM_CERTAIN_END_DATE,SPBA.FUNDS_TYPE_VALUE,SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,SPAE.VESTED_DATE, DA.LOCAL_600_FLAG, DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_600_PREMERGER_BENEFIT,DA.LOCAL_600_CREDITED_HOURS, DA.LOCAL_600_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_666_FLAG, DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_666_PREMERGER_BENEFIT,DA.LOCAL_666_CREDITED_HOURS, DA.LOCAL_666_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_700_FLAG, DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_700_PREMERGER_BENEFIT,DA.LOCAL_700_CREDITED_HOURS, DA.LOCAL_700_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_52_FLAG, DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_52_PREMERGER_BENEFIT,DA.LOCAL_52_CREDITED_HOURS, DA.LOCAL_52_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_161_FLAG, DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_161_PREMERGER_BENEFIT,DA.LOCAL_161_CREDITED_HOURS, DA.LOCAL_161_PENSION_CREDITS,&#xD;&#xA;LOCAL_161_NON_ELIGIBLE_BENEFIT, DA.LOCAL_52_NON_ELIGIBLE_BENEFIT, LOCAL_700_NON_ELIGIBLE_BENEFIT,DA.LOCAL_666_NON_ELIGIBLE_BENEFIT,DA.LOCAL_600_NON_ELIGIBLE_BENEFIT,--DA.TOTAL_QUALIFIED_YEARS,&#xD;&#xA;SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,spae.PERSON_ACCOUNT_ELIGIBILITY_ID,spae.PENSION_CREDITS,spae.LOCAL_QUALIFIED_YEARS,spa.PERSON_ACCOUNT_ID&#xD;&#xA;,PAYMENT.AMOUNT_PAID,SPAS.STATUS_VALUE , SDBD.DRO_MODEL_VALUE&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;&#xD;&#xA;UNION &#xD;&#xA;            &#xD;&#xA;SELECT&#xD;&#xA;distinct SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS Person_Name,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'BENE_OF_DEATH' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;SP.PERSON_ID AS BENEFICIARY_ID,&#xD;&#xA;'B' AS BENEFICIARY_FLAG,&#xD;&#xA;(SP.FIRST_NAME + ' ' + SP.LAST_NAME) AS BENEFICIARY_NAME ,&#xD;&#xA;SP.SSN AS BENEFICIARY_SSN,&#xD;&#xA;SP.GENDER_ID AS BENEFICIARY_GENDER_ID,&#xD;&#xA;SP.GENDER_VALUE AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;SP.DATE_OF_BIRTH AS BENEFICIARY_DOB,&#xD;&#xA;SP.DATE_OF_DEATH AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;spa.STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;spacc.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0 END)  AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,                       &#xD;&#xA;SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;   &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_FLAG ELSE NULL END LOCAL_600_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_CREDITED_HOURS ELSE NULL END LOCAL_600_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                  CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_FLAG ELSE NULL END LOCAL_666_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_CREDITED_HOURS ELSE NULL END LOCAL_666_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                  &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_FLAG ELSE NULL END LOCAL_700_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_CREDITED_HOURS ELSE NULL END LOCAL_700_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;             &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_FLAG ELSE NULL END LOCAL_52_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_CREDITED_HOURS ELSE NULL END LOCAL_52_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;            &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_FLAG ELSE NULL END LOCAL_161_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_CREDITED_HOURS ELSE NULL END LOCAL_161_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_161_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;SPJOANNU.PERSON_ID AS JOINT_ANNUITANT_ID, &#xD;&#xA;SPJOANNU.FIRST_NAME , SPJOANNU.LAST_NAME ,&#xD;&#xA;SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,&#xD;&#xA;SPJOANNU.DATE_OF_DEATH ,&#xD;&#xA;SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM&#xD;&#xA;SGT_PERSON SPPAR               &#xD;&#xA;inner join SGT_PERSON_ACCOUNT spa on spa.PERSON_ID = sppar.PERSON_ID AND SPA.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;inner join SGT_PAYEE_BENEFIT_ACCOUNT spba on spba.PERSON_ACCOUNT_ID = spa.PERSON_ACCOUNT_ID&#xD;&#xA;inner join SGT_PAYEE_ACCOUNT spacc on spacc.PAYEE_BENEFIT_ACCOUNT_ID = spba.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;left outer join SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA; AND (&#xD;&#xA;--(PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME)  --71411 item 1 commented start date check&#xD;&#xA;-- AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;-- AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;left outer join SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;inner join SGT_PERSON sp on sp.PERSON_ID = spacc.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;     AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID  FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  WHERE Q.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID ORDER  BY   Q.STATUS_EFFECTIVE_DATE DESC)                                                 &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID NOT IN (1,2) AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID     &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPADD ON SPADD.PERSON_ID = SP.PERSON_ID &#xD;&#xA; AND  SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC ) &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'                &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID --bene&#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN #DATA DA ON DA.PERSON_ID = SPPAR.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL                                &#xD;&#xA;WHERE&#xD;&#xA;SPA.STATUS_VALUE IN ('ACTV','INAC','RETR', 'DCSD')                 &#xD;&#xA;AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT')  &#xD;&#xA;AND SPPAR.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND&#xD;&#xA;(&#xD;&#xA; (&#xD;&#xA;  SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') &#xD;&#xA; )&#xD;&#xA; OR &#xD;&#xA; (&#xD;&#xA;  SPAS.STATUS_VALUE IN ('CMPL') AND YEAR(SPPAR.DATE_OF_DEATH)&gt;=@EXECUTIONYEAR&#xD;&#xA; )&#xD;&#xA;)&#xD;&#xA;AND SP.DATE_OF_DEATH IS NULL                  &#xD;&#xA;AND SPA.PLAN_ID in (3,4,6,7,8) AND (SPACC.RETIREE_INCR_FLAG IS NULL or SPACC.RETIREE_INCR_FLAG = 'N')&#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH, SPPAR.PERSON_ID ,SPPAR.FIRST_NAME, SPPAR.LAST_NAME ,SPPAR.SSN,SPPAR.GENDER_ID,SPPAR.GENDER_VALUE ,&#xD;&#xA;SPPAR.DATE_OF_BIRTH,SPPAR.DATE_OF_DEATH , SPACC.PAYEE_ACCOUNT_ID, spa.STATUS_VALUE, SPADD.ADDR_STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,spacc.RETIREMENT_TYPE_ID,SPACC.RETIREMENT_TYPE_VALUE,SPBX.BENEFIT_OPTION_VALUE,SPACC.BENEFIT_END_DATE,&#xD;&#xA;SPACC.TERM_CERTAIN_END_DATE,SPBA.FUNDS_TYPE_VALUE, SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,SPAE.VESTED_DATE, DA.LOCAL_600_FLAG, DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;DA.LOCAL_600_CREDITED_HOURS,DA.LOCAL_600_PENSION_CREDITS,DA.LOCAL_666_FLAG, DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;DA.LOCAL_666_CREDITED_HOURS, DA.LOCAL_666_PENSION_CREDITS,DA.LOCAL_700_FLAG, DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;DA.LOCAL_700_CREDITED_HOURS, DA.LOCAL_700_PENSION_CREDITS,DA.LOCAL_52_FLAG, DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_52_PREMERGER_BENEFIT,DA.LOCAL_52_CREDITED_HOURS,&#xD;&#xA;DA.LOCAL_52_PENSION_CREDITS,DA.LOCAL_52_NON_ELIGIBLE_BENEFIT,DA.LOCAL_161_FLAG, DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;DA.LOCAL_161_CREDITED_HOURS, DA.LOCAL_161_PENSION_CREDITS,LOCAL_161_NON_ELIGIBLE_BENEFIT,LOCAL_700_NON_ELIGIBLE_BENEFIT,DA.LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;DA.LOCAL_600_NON_ELIGIBLE_BENEFIT,SP.MPI_PERSON_ID, SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,SPAE.FORFEITURE_DATE,spa.PERSON_ACCOUNT_ID,SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, &#xD;&#xA;SPJOANNU.LAST_NAME, SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH, SPAE.VESTED_DATE,&#xD;&#xA;spae.PERSON_ACCOUNT_ELIGIBILITY_ID,spae.PENSION_CREDITS,spae.LOCAL_QUALIFIED_YEARS,PAYMENT.AMOUNT_PAID,SPAS.STATUS_VALUE&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;&#xD;&#xA;  UNION&#xD;&#xA;SELECT&#xD;&#xA;distinct SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS Person_Name,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'RETIREE_BENE_DEATH' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH      AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.PERSON_ID ELSE NULL END AS BENEFICIARY_ID,&#xD;&#xA;'D' AS BENEFICIARY_FLAG,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN (SP.FIRST_NAME + ' ' + SPPAR.LAST_NAME) ELSE NULL END AS BENEFICIARY_NAME ,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.SSN ELSE NULL END AS BENEFICIARY_SSN,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.GENDER_ID ELSE NULL END AS BENEFICIARY_GENDER_ID,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.GENDER_VALUE ELSE NULL END AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.DATE_OF_BIRTH ELSE NULL END AS BENEFICIARY_DOB,&#xD;&#xA;CASE WHEN SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPT','DDPR','QDRO') THEN SP.DATE_OF_DEATH ELSE NULL END AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;'DCSD' AS STATUS_VALUE,&#xD;&#xA;SPADD.ADDR_STATE_VALUE,&#xD;&#xA;SPBX.PLAN_ID,SPBA.PERSON_ACCOUNT_ID AS PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;spacc.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE  AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;null AS FUNDS_TYPE_VALUE,&#xD;&#xA;null         AS NONTAXABLE_BEGINNING_BALANCE ,&#xD;&#xA;null AS REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;null         AS MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0  END)  AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID, &#xD;&#xA;SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_FLAG ELSE NULL END LOCAL_600_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_CREDITED_HOURS ELSE NULL END LOCAL_600_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                  CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_FLAG ELSE NULL END LOCAL_666_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_CREDITED_HOURS ELSE NULL END LOCAL_666_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                  &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_FLAG ELSE NULL END LOCAL_700_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_CREDITED_HOURS ELSE NULL END LOCAL_700_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;             &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_FLAG ELSE NULL END LOCAL_52_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_CREDITED_HOURS ELSE NULL END LOCAL_52_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_FLAG ELSE NULL END LOCAL_161_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_CREDITED_HOURS ELSE NULL END LOCAL_161_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_161_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_PERSON_ID,&#xD;&#xA;NULL AS JOINT_ANNUITANT_ID, NULL AS FIRST_NAME , NULL AS LAST_NAME ,&#xD;&#xA;NULL AS SSN, NULL AS GENDER_ID, NULL AS GENDER_VALUE, NULL AS DATE_OF_BIRTH, NULL AS DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM SGT_PERSON SPPAR&#xD;&#xA;inner join SGT_PERSON_ACCOUNT spa on spa.PERSON_ID = sppar.PERSON_ID AND SPA.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;inner join SGT_PAYEE_BENEFIT_ACCOUNT spba on spba.PERSON_ACCOUNT_ID = spa.PERSON_ACCOUNT_ID&#xD;&#xA;inner join SGT_PAYEE_ACCOUNT spacc on spacc.PAYEE_BENEFIT_ACCOUNT_ID = spba.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;--71411 item 3&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;&#xD;&#xA;left outer join SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA; AND (&#xD;&#xA;--(PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) --71411 item 1 commented start date check&#xD;&#xA;-- AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;-- AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))&#xD;&#xA;left outer join SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;inner join SGT_PERSON sp on sp.PERSON_ID = spacc.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID  FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  WHERE Q.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID ORDER  BY   Q.STATUS_EFFECTIVE_DATE DESC)                                                 &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;  SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID NOT IN (1,2) AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;)PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS SPADD ON SPADD.PERSON_ID = SP.PERSON_ID &#xD;&#xA; AND  SPADD.ADDRESS_ID = (SELECT TOP(1) Q.ADDRESS_ID FROM SGT_PERSON_ADDRESS Q WHERE Q.PERSON_ID = SP.PERSON_ID AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL) ORDER BY Q.ADDRESS_ID DESC ) &#xD;&#xA;LEFT OUTER JOIN   SGT_PERSON_ADDRESS_CHKLIST SPACH ON SPADD.ADDRESS_ID = SPACH.ADDRESS_ID AND SPACH.ADDRESS_TYPE_VALUE = 'MAIL'                 &#xD;&#xA;LEFT OUTER JOIN SGT_DRO_BENEFIT_DETAILS SDBD ON SDBD.DRO_BENEFIT_ID = SPACC.DRO_APPLICATION_DETAIL_ID  &#xD;&#xA;LEFT OUTER JOIN #DATA DA ON DA.PERSON_ID = SPPAR.PERSON_ID   &#xD;&#xA;WHERE&#xD;&#xA;SP.DATE_OF_DEATH is not null AND SPPAR.DATE_OF_DEATH is not null &#xD;&#xA;AND SPA.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;AND &#xD;&#xA;(&#xD;&#xA; SPBX.BENEFIT_OPTION_VALUE NOT IN ('LUMP') OR YEAR(SPAS.STATUS_EFFECTIVE_DATE) = @EXECUTIONYEAR&#xD;&#xA;) &#xD;&#xA;AND SPPAR.SSN IS NOT NULL AND (SPACC.RETIREE_INCR_FLAG IS NULL OR SPACC.RETIREE_INCR_FLAG = 'N') AND  &#xD;&#xA;SPAS.STATUS_VALUE IN ('CMPL') AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR', 'DDPT', 'RTMT', 'DSBL') &#xD;&#xA;AND &#xD;&#xA;(SELECT TOP 1 PAS1.STATUS_VALUE FROM SGT_PAYEE_ACCOUNT_STATUS PAS1 &#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT PA1 ON PA1.PAYEE_ACCOUNT_ID=PAS1.PAYEE_ACCOUNT_ID &#xD;&#xA;        AND PA1.PAYEE_BENEFIT_ACCOUNT_ID = SPBA.PAYEE_BENEFIT_ACCOUNT_ID &#xD;&#xA;        AND (PA1.PERSON_ID ! = SPPAR.PERSON_ID AND PA1.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT','RTMT','DSBL','QDRO'))&#xD;&#xA;        AND (PA1.RETIREE_INCR_FLAG = 'N' OR PA1.RETIREE_INCR_FLAG IS NULL) &#xD;&#xA; ORDER BY PAS1.STATUS_EFFECTIVE_DATE DESC) NOT IN ('RECV','REVW')                      &#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N') &#xD;&#xA;GROUP BY SP.PERSON_ID, SP.FIRST_NAME,SP.LAST_NAME, SP.SSN, SP.GENDER_ID, SP.GENDER_VALUE,SP.DATE_OF_BIRTH,&#xD;&#xA;SP.DATE_OF_DEATH,SPACC.PAYEE_ACCOUNT_ID, SPADD.ADDR_STATE_VALUE,SPACC.BENEFIT_ACCOUNT_TYPE_VALUE, spacc.RETIREMENT_TYPE_ID, SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;SPBX.BENEFIT_OPTION_VALUE, SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,DA.LOCAL_600_FLAG, DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,DA.LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;DA.LOCAL_600_CREDITED_HOURS, DA.LOCAL_600_PENSION_CREDITS,DA.LOCAL_666_FLAG, DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_666_PREMERGER_BENEFIT,DA.LOCAL_666_CREDITED_HOURS,&#xD;&#xA;DA.LOCAL_666_PENSION_CREDITS,DA.LOCAL_700_FLAG, DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_700_PREMERGER_BENEFIT,DA.LOCAL_700_CREDITED_HOURS,DA.LOCAL_700_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_52_FLAG, DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_52_PREMERGER_BENEFIT,DA.LOCAL_52_CREDITED_HOURS, DA.LOCAL_52_PENSION_CREDITS,&#xD;&#xA;DA.LOCAL_161_FLAG, DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS, DA.LOCAL_161_PREMERGER_BENEFIT,DA.LOCAL_161_CREDITED_HOURS, DA.LOCAL_161_PENSION_CREDITS,&#xD;&#xA;LOCAL_161_NON_ELIGIBLE_BENEFIT,DA.LOCAL_52_NON_ELIGIBLE_BENEFIT, LOCAL_700_NON_ELIGIBLE_BENEFIT,DA.LOCAL_666_NON_ELIGIBLE_BENEFIT,DA.LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_PERSON_ID, SPBX.PLAN_ID,SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE, SPPAR.PERSON_ID, SPPAR.FIRST_NAME, SPPAR.LAST_NAME, SPPAR.SSN,&#xD;&#xA;SPPAR.GENDER_ID, SPPAR.GENDER_VALUE, SPPAR.DATE_OF_BIRTH,SPPAR.DATE_OF_DEATH,SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPBA.PERSON_ACCOUNT_ID,spae.PERSON_ACCOUNT_ELIGIBILITY_ID,spae.PENSION_CREDITS,spae.LOCAL_QUALIFIED_YEARS,spa.PERSON_ACCOUNT_ID,SPA.PLAN_ID,PAYMENT.AMOUNT_PAID,SPAS.STATUS_VALUE&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;  &#xD;&#xA; --ORGANIZATION SECTION&#xD;&#xA;UNION &#xD;&#xA;SELECT&#xD;&#xA;distinct SPPAR.PERSON_ID,&#xD;&#xA;(SPPAR.FIRST_NAME + ' ' + SPPAR.LAST_NAME) AS Person_Name,&#xD;&#xA;SPPAR.SSN AS PERSON_SSN,&#xD;&#xA;'BENE_OF_DEATH' AS CAT_TYPE,&#xD;&#xA;SPPAR.GENDER_ID AS PERSON_GENDER_ID,&#xD;&#xA;SPPAR.GENDER_VALUE  AS PERSON_GENDER_VALUE,&#xD;&#xA;SPPAR.DATE_OF_BIRTH AS PERSON_DOB,&#xD;&#xA;SPPAR.DATE_OF_DEATH AS PARTICIPANT_DATE_OF_DEATH,&#xD;&#xA;SP.ORG_ID AS BENEFICIARY_ID,&#xD;&#xA;'B' AS BENEFICIARY_FLAG,&#xD;&#xA;SP.ORG_NAME AS BENEFICIARY_NAME ,&#xD;&#xA;SP.FEDERAL_ID AS BENEFICIARY_SSN,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_ID,&#xD;&#xA;NULL AS BENEFICIARY_GENDER_VALUE,&#xD;&#xA;NULL AS BENEFICIARY_DOB,&#xD;&#xA;NULL AS BENEFICIARY_DATE_OF_DEATH,&#xD;&#xA;SPACC.PAYEE_ACCOUNT_ID,&#xD;&#xA;spa.STATUS_VALUE,&#xD;&#xA;SPADD.STATE_VALUE,&#xD;&#xA;SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,&#xD;&#xA;SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;spacc.RETIREMENT_TYPE_ID,&#xD;&#xA;SPACC.RETIREMENT_TYPE_VALUE,&#xD;&#xA;--SPBX.BENEFIT_OPTION_VALUE AS BENEFIT_OPTION_CODE_VALUE,&#xD;&#xA;CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END AS BENEFIT_OPTION_CODE_VALUE,  --Ticket 106895 item 6&#xD;&#xA;SPACC.BENEFIT_END_DATE , SPACC.TERM_CERTAIN_END_DATE,&#xD;&#xA;SPBA.FUNDS_TYPE_VALUE,&#xD;&#xA;SPACC.NONTAXABLE_BEGINNING_BALANCE,&#xD;&#xA;SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,&#xD;&#xA;SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N'  &#xD;&#xA; THEN ISNULL(AMOUNT,0.0) ELSE 0 END) AS GROSS_AMOUNT,&#xD;&#xA;PAYMENT.AMOUNT_PAID AS AMOUNT_PAID,                       &#xD;&#xA;SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_FLAG ELSE NULL END LOCAL_600_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_CREDITED_HOURS ELSE NULL END LOCAL_600_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 3) THEN DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                  CASE WHEN SPA.PLAN_ID = 3 THEN DA.LOCAL_600_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_600_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_FLAG ELSE NULL END LOCAL_666_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_CREDITED_HOURS ELSE NULL END LOCAL_666_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 4) THEN DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 4 THEN DA.LOCAL_666_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_666_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                  &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_FLAG ELSE NULL END LOCAL_700_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_CREDITED_HOURS ELSE NULL END LOCAL_700_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 6) THEN DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 6 THEN DA.LOCAL_700_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_700_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;             &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_FLAG ELSE NULL END LOCAL_52_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_CREDITED_HOURS ELSE NULL END LOCAL_52_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 7) THEN DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 7 THEN DA.LOCAL_52_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;                &#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_FLAG ELSE NULL END LOCAL_161_FLAG, &#xD;&#xA;                CASE WHEN (SPACC.PAYEE_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN SUM(CASE WHEN ITEM_TYPE_DIRECTION = 1 THEN AMOUNT ELSE 0 END)&#xD;&#xA;                     WHEN (SPA.PERSON_ACCOUNT_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_BENEFIT&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_BENEFIT,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_CREDITED_HOURS ELSE NULL END LOCAL_161_CREDITED_HOURS, &#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PENSION_CREDITS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PENSION_CREDITS,&#xD;&#xA;                CASE WHEN (SPAE.PERSON_ACCOUNT_ELIGIBILITY_ID IS NOT NULL AND SPA.PLAN_ID = 8) THEN DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS&#xD;&#xA;                     ELSE NULL END AS LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;                CASE WHEN SPA.PLAN_ID = 8 THEN DA.LOCAL_161_NON_ELIGIBLE_BENEFIT ELSE NULL END LOCAL_161_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;SP.MPI_ORG_ID,&#xD;&#xA;SPJOANNU.PERSON_ID AS JOINT_ANNUITANT_ID, &#xD;&#xA;SPJOANNU.FIRST_NAME , SPJOANNU.LAST_NAME ,&#xD;&#xA;SPJOANNU.SSN, SPJOANNU.GENDER_ID, SPJOANNU.GENDER_VALUE, SPJOANNU.DATE_OF_BIRTH,&#xD;&#xA;SPJOANNU.DATE_OF_DEATH ,&#xD;&#xA;SPAE.FORFEITURE_DATE,SPAE.VESTED_DATE,&#xD;&#xA;SPAS.STATUS_VALUE AS PAYEE_ACCOUNT_STATUS&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_DISABILITY_CONVERSION  --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END AS IS_CONVERTED_FROM_POPUP  --71411 item 4&#xD;&#xA;, NULL AS DRO_MODEL  --71411 item 5&#xD;&#xA;FROM&#xD;&#xA;SGT_PERSON SPPAR&#xD;&#xA;inner join SGT_PERSON_ACCOUNT spa on spa.PERSON_ID = sppar.PERSON_ID AND SPA.PLAN_ID in (3,4,6,7,8)&#xD;&#xA;inner join SGT_PAYEE_BENEFIT_ACCOUNT spba on spba.PERSON_ACCOUNT_ID = spa.PERSON_ACCOUNT_ID&#xD;&#xA;inner join SGT_PAYEE_ACCOUNT spacc on spacc.PAYEE_BENEFIT_ACCOUNT_ID = spba.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR SPBX WITH(NOLOCK)  ON SPACC.PLAN_BENEFIT_ID = SPBX.PLAN_BENEFIT_ID &#xD;&#xA;left outer join SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI ON SPACC.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID&#xD;&#xA; AND (&#xD;&#xA;--(PAPI.START_DATE &lt;=  CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME) --71411 item 1 commented start date check&#xD;&#xA;-- AND (PAPI.END_DATE IS NULL OR PAPI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;-- AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;( (SELECT MIN(PAI.START_DATE) FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAI WHERE PAI.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID&#xD;&#xA;AND (PAI.END_DATE IS NULL OR PAI.END_DATE &gt;= CAST('12' + '/01/' + CAST(@EXECUTIONYEAR AS VARCHAR(4)) AS DATETIME))&#xD;&#xA;AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAI.PAYMENT_ITEM_TYPE_ID IN (1,2)) = PAPI.START_DATE AND SPBX.BENEFIT_OPTION_VALUE &lt;&gt; 'LUMP' AND PAPI.PAYMENT_ITEM_TYPE_ID IN (1,2))&#xD;&#xA;&#xD;&#xA;         OR (SPBX.BENEFIT_OPTION_VALUE = 'LUMP'))--change Rohan -To Fetch Lump Benefits&#xD;&#xA;left outer join SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID                &#xD;&#xA;inner join SGT_ORGANIZATION sp on sp.ORG_ID = spacc.ORG_ID&#xD;&#xA;LEFT OUTER JOIN SGT_PAYEE_ACCOUNT_STATUS SPAS ON SPAS.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID &#xD;&#xA;AND SPAS.PAYEE_ACCOUNT_STATUS_ID = (SELECT TOP 1 Q.PAYEE_ACCOUNT_STATUS_ID  FROM SGT_PAYEE_ACCOUNT_STATUS Q WITH(NOLOCK)  WHERE Q.PAYEE_ACCOUNT_ID = SPACC.PAYEE_ACCOUNT_ID ORDER  BY   Q.STATUS_EFFECTIVE_DATE DESC)                                                 &#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA;  SELECT PA.PAYEE_ACCOUNT_ID,SUM(CASE WHEN PIT.ITEM_TYPE_DIRECTION = 1 AND PAYMENT_1099R_FLAG = 'Y' AND VENDOR_FLAG= 'N' THEN ISNULL(PHD.AMOUNT,0.0) &#xD;&#xA;         WHEN ALLOW_ROLLOVER_CODE_VALUE = 'RRED' THEN ISNULL(PHD.AMOUNT,0.0) *  PIT.ITEM_TYPE_DIRECTION  ELSE 0 END)&#xD;&#xA; AS AMOUNT_PAID&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT PA &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHDN ON PHDN.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN  SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA; WHERE PHH.PLAN_ID NOT IN (1,2) AND PHDN.DISTRIBUTION_STATUS_VALUE NOT IN ('CDRE','CNLD','RCMD') AND ISNULL(PA.RETIREE_INCR_FLAG,'N') = 'N'&#xD;&#xA; GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;)PAYMENT ON SPACC.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID  &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ACCOUNT_ELIGIBILITY SPAE WITH(NOLOCK) ON SPAE.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT OUTER JOIN   SGT_ORG_ADDRESS SPADD WITH(NOLOCK)  ON SPADD.ORG_ID = SP.ORG_ID &#xD;&#xA; AND (YEAR(SPADD.END_DATE) &gt; @EXECUTIONYEAR OR SPADD.END_DATE IS NULL)              &#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD ON SBAD.BENEFIT_APPLICATION_DETAIL_ID = SPACC.BENEFIT_APPLICATION_DETAIL_ID --bene       &#xD;&#xA;LEFT OUTER JOIN #DATA DA ON DA.PERSON_ID = SPPAR.PERSON_ID &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON SPJOANNU ON SBAD.JOINT_ANNUITANT_ID = SPJOANNU.PERSON_ID AND SPJOANNU.DATE_OF_DEATH IS NULL                               &#xD;&#xA;--71411 item 3&#xD;&#xA;--LEFT OUTER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK) ON SPACC.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID&#xD;&#xA;LEFT OUTER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SBAD.BENEFIT_APPLICATION_ID = SBA.BENEFIT_APPLICATION_ID &#xD;&#xA;--71411 item 4&#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR SPBXR WITH(NOLOCK) ON SPACC.PLAN_BENEFIT_ID = SPBXR.PLAN_BENEFIT_ID   &#xD;&#xA;LEFT OUTER JOIN SGT_PLAN_BENEFIT_XR XSBAD WITH(NOLOCK) ON SBAD.PLAN_BENEFIT_ID = XSBAD.PLAN_BENEFIT_ID   &#xD;&#xA;&#xD;&#xA;WHERE&#xD;&#xA;SPA.STATUS_VALUE IN ('ACTV','INAC','RETR', 'DCSD') AND SPACC.BENEFIT_ACCOUNT_TYPE_VALUE IN ('DDPR','DDPT')  &#xD;&#xA;AND SPPAR.DATE_OF_DEATH IS NOT NULL &#xD;&#xA;AND&#xD;&#xA;(&#xD;&#xA; (&#xD;&#xA;  SPAS.STATUS_VALUE NOT IN ('CMPL','CNCL') &#xD;&#xA; )&#xD;&#xA; OR &#xD;&#xA; (&#xD;&#xA;  SPAS.STATUS_VALUE IN ('CMPL') AND YEAR(SPPAR.DATE_OF_DEATH)&gt;=@EXECUTIONYEAR&#xD;&#xA; )&#xD;&#xA;)                &#xD;&#xA;AND SPA.PLAN_ID in (3,4,6,7,8) AND (SPACC.RETIREE_INCR_FLAG IS NULL or SPACC.RETIREE_INCR_FLAG = 'N')&#xD;&#xA;AND ((@TempTable = 'Y' and SPPAR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;GROUP BY SP.ORG_ID, SP.ORG_NAME, SP.FEDERAL_ID,SPPAR.PERSON_ID ,SPPAR.FIRST_NAME, SPPAR.LAST_NAME,&#xD;&#xA;SPPAR.SSN,SPPAR.GENDER_ID,SPPAR.GENDER_VALUE,SPPAR.DATE_OF_BIRTH,SPPAR.DATE_OF_DEATH , SPACC.PAYEE_ACCOUNT_ID, &#xD;&#xA;spa.STATUS_VALUE, SPADD.STATE_VALUE,SPA.PLAN_ID,SPA.PERSON_ACCOUNT_ID,SPACC.BENEFIT_ACCOUNT_TYPE_VALUE,&#xD;&#xA;spacc.RETIREMENT_TYPE_ID,SPACC.RETIREMENT_TYPE_VALUE,SPBX.BENEFIT_OPTION_VALUE,SPACC.BENEFIT_END_DATE,&#xD;&#xA;SPACC.TERM_CERTAIN_END_DATE,SPBA.FUNDS_TYPE_VALUE,SPACC.NONTAXABLE_BEGINNING_BALANCE,SPACC.REMAINING_NON_TAXABLE_FROM_CONVERSION,&#xD;&#xA;SPACC.MINIMUM_GUARANTEE_AMOUNT,SPAE.VESTED_DATE, DA.LOCAL_600_FLAG, DA.LOCAL_600_PREMERGER_TOTAL_QUALIFIED_YEARS, &#xD;&#xA;DA.LOCAL_600_PREMERGER_BENEFIT,DA.LOCAL_600_CREDITED_HOURS, DA.LOCAL_600_PENSION_CREDITS,DA.LOCAL_666_FLAG,DA.LOCAL_666_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;DA.LOCAL_666_PREMERGER_BENEFIT,DA.LOCAL_666_CREDITED_HOURS, DA.LOCAL_666_PENSION_CREDITS,DA.LOCAL_700_FLAG, DA.LOCAL_700_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;DA.LOCAL_700_PREMERGER_BENEFIT,DA.LOCAL_700_CREDITED_HOURS, DA.LOCAL_700_PENSION_CREDITS,DA.LOCAL_52_FLAG, DA.LOCAL_52_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;DA.LOCAL_52_PREMERGER_BENEFIT,DA.LOCAL_52_CREDITED_HOURS, DA.LOCAL_52_PENSION_CREDITS,DA.LOCAL_161_FLAG, DA.LOCAL_161_PREMERGER_TOTAL_QUALIFIED_YEARS,&#xD;&#xA;DA.LOCAL_161_PREMERGER_BENEFIT,DA.LOCAL_161_CREDITED_HOURS, DA.LOCAL_161_PENSION_CREDITS,LOCAL_161_NON_ELIGIBLE_BENEFIT,DA.LOCAL_52_NON_ELIGIBLE_BENEFIT,&#xD;&#xA;LOCAL_700_NON_ELIGIBLE_BENEFIT,DA.LOCAL_666_NON_ELIGIBLE_BENEFIT,DA.LOCAL_600_NON_ELIGIBLE_BENEFIT,SP.MPI_ORG_ID, SPACC.REEMPLOYED_FLAG,SPACC.BENEFIT_BEGIN_DATE,&#xD;&#xA;SPAE.FORFEITURE_DATE,spa.PERSON_ACCOUNT_ID,SPJOANNU.PERSON_ID, SPJOANNU.FIRST_NAME, SPJOANNU.LAST_NAME, SPJOANNU.SSN, SPJOANNU.GENDER_ID,SPJOANNU.GENDER_VALUE,&#xD;&#xA;SPJOANNU.DATE_OF_BIRTH,SPJOANNU.DATE_OF_DEATH, SPAE.VESTED_DATE,spae.PERSON_ACCOUNT_ELIGIBILITY_ID,spae.PENSION_CREDITS,spae.LOCAL_QUALIFIED_YEARS,PAYMENT.AMOUNT_PAID,&#xD;&#xA;SPAS.STATUS_VALUE&#xD;&#xA;, CASE WHEN SBA.DISABILITY_CONVERSION_DATE IS NOT NULL AND YEAR(SBA.DISABILITY_CONVERSION_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 3&#xD;&#xA;, CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;       AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) = @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;THEN 'Y' ELSE NULL END --71411 item 4&#xD;&#xA;, CASE WHEN SPAS.STATUS_VALUE &lt;&gt; 'CNCL' THEN (CASE WHEN SPACC.ACCOUNT_RELATION_VALUE = 'PART' AND SPBXR.BENEFIT_OPTION_VALUE = 'LIFE' &#xD;&#xA;                                            AND XSBAD.BENEFIT_OPTION_VALUE IN ('JP50','JP75','JPOP') AND YEAR(SPACC.CONVERTED_TO_LIFE_DATE) &gt; @EXECUTIONYEAR &#xD;&#xA;&#x9;&#x9;                                    THEN XSBAD.BENEFIT_OPTION_VALUE ELSE SPBXR.BENEFIT_OPTION_VALUE END)&#xD;&#xA;                                        ELSE NULL END  --Ticket 106895 item 6&#xD;&#xA;&#xD;&#xA;)A&#xD;&#xA;&#xD;&#xA;SELECT * FROM #TEMP WHERE LOCAL_161_FLAG = 'Y' OR LOCAL_52_FLAG = 'Y' OR LOCAL_600_FLAG = 'Y' OR LOCAL_666_FLAG = 'Y' OR LOCAL_700_FLAG = 'Y'&#xD;&#xA;&#xD;&#xA;">
      <parameters>
        <parameter ID="@EXECUTIONYEAR" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="FindPersonfromParallelRun" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_DATA_EXTRACTION_BATCH_INFO WHERE YEAR_END_DATA_EXTRACTION_HEADER_ID = @YEAR_END_DATA_EXTRACTION_HEADER_ID AND PERSON_SSN= @SSN">
      <parameters>
        <parameter ID="@YEAR_END_DATA_EXTRACTION_HEADER_ID" sfwDataType="int" />
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetAllPersonAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;SPA.*,SP.PLAN_CODE istrPlanCode , SP.MERGER_DATE as idtMergerDate&#xD;&#xA;FROM SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;JOIN SGT_PERSON SPPR ON SPA.PERSON_ID = SPPR.PERSON_ID&#xD;&#xA;JOIN SGT_PLAN SP WITH(NOLOCK) ON SP.PLAN_ID = SPA.PLAN_ID&#xD;&#xA;WHERE &#xD;&#xA;((@TempTable = 'Y' and SPPR.SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA; ">
      <parameters>
        <parameter ID="@TempTable" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetQDROOffsetAmount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SUM(PAPI.AMOUNT) AS  AMOUNT FROM SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPI&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT ON PIT.PAYMENT_ITEM_TYPE_ID = PAPI.PAYMENT_ITEM_TYPE_ID AND PIT.ITEM_TYPE_CODE IN ('ITEM1','ITEM2','ITEM21','ITEM22')&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT SPA ON SPA.PAYEE_ACCOUNT_ID = PAPI.PAYEE_ACCOUNT_ID AND SPA.BENEFIT_ACCOUNT_TYPE_VALUE = 'QDRO'&#xD;&#xA;INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = SPA.PLAN_BENEFIT_ID AND X.PLAN_ID = 2&#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT SPBA ON SPBA.PAYEE_BENEFIT_ACCOUNT_ID = SPA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;WHERE SPBA.PERSON_ID = @PERSON_ID">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetPaidAmountTillLastComputaionalYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT &#xD;&#xA;&#xD;&#xA;      PHH.PAYEE_ACCOUNT_ID,&#xD;&#xA;      &#xD;&#xA;      SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND REISSUE_ITEMS_FLAG = 'N' &#xD;&#xA;             THEN (PHD.AMOUNT * PIT.ITEM_TYPE_DIRECTION) ELSE 0 END)   AS PAID_GROSS_AMOUNT&#xD;&#xA;&#xD;&#xA;                  &#xD;&#xA;      FROM SGT_PAYMENT_HISTORY_HEADER PHH(NOLOCK)&#xD;&#xA;&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;         INNER  JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = PA.PERSON_ID &#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD(NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD WITH(NOLOCK) ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;           &#xD;&#xA;      WHERE PHH.PAYMENT_DATE &lt;= DATEADD(YY,DATEDIFF(YY,0,GETDATE()),-31)&#xD;&#xA;  AND (PA.RETIREE_INCR_FLAG &lt;&gt; 'Y' OR PA.RETIREE_INCR_FLAG IS NULL) -- we are not retrieving retiree increase payee accounts from main query&#xD;&#xA;  AND SPHD.DISTRIBUTION_STATUS_VALUE not in( 'CNLD' ,'CDRE','RCMD') AND PHH.PLAN_ID = 2&#xD;&#xA;  GROUP BY PHH.PAYEE_ACCOUNT_ID">
      <parameters />
    </query>
    <query ID="GetPersonAccountForAnnualBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA; SP.PLAN_CODE&#xD;&#xA;FROM &#xD;&#xA; SGT_PERSON_ACCOUNT SPA&#xD;&#xA; INNER JOIN SGT_PLAN SP ON SP.PLAN_ID=SPA.PLAN_ID &#xD;&#xA;WHERE &#xD;&#xA; SPA.PERSON_ID = @PERSON_ID &#xD;&#xA; AND SP.PLAN_ID not IN(1,2,9)">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetIAPAllocationDetail" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA; SPA.PERSON_ID,SPA.PERSON_ACCOUNT_ID,SIAD.* &#xD;&#xA;FROM &#xD;&#xA; SGT_IAP_ALLOCATION_DETAIL SIAD&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON_ACCOUNT SPA ON SPA.PERSON_ACCOUNT_ID = SIAD.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE &#xD;&#xA; SIAD.COMPUTATION_YEAR = 2013">
      <parameters />
    </query>
    <query ID="GetAnnualStatementYearsForPerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Select distinct  COMPUTATIONAL_YEAR, PERSON_ID, ANNUAL_STATEMENT__BATCH_DATA_ID&#xD;&#xA;FROM&#xD;&#xA;      SGT_ANNUAL_STATEMENT_BATCH_DATA WITH(NOLOCK)      &#xD;&#xA;WHERE&#xD;&#xA;  PERSON_ID = @PERSON_ID&#xD;&#xA;ORDER BY COMPUTATIONAL_YEAR">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAnnualStatementForPersonWithLatestAddress" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DATA.[ANNUAL_STATEMENT__BATCH_DATA_ID]&#xD;&#xA;      ,DATA.[COMPUTATIONAL_YEAR]&#xD;&#xA;      ,DATA.[MPI_VESTED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[MPI_QUALIFIED_YEARS_AS_OF_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[MPI_CREDITED_HOURS_AS_OF_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[MPI_EE_CONTRIBUTIONS_AS_OF_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[MPI_ACCRUED_BENEFIT_AS_OF_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[MPI_VESTED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;      ,DATA.[MPI_QUALIFIED_YEARS_IN_CUREENT_YEAR]&#xD;&#xA;      ,DATA.[MPI_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;      ,DATA.[MPI_ACCRUED_BENEFITS_IN_CUREENT_YEAR]&#xD;&#xA;      ,DATA.[MPI_LATE_CREDITED_HOURS_IN_CUREENT_YEAR]&#xD;&#xA;      ,DATA.[MPI_TOTAL_VESTED_YEARS]&#xD;&#xA;      ,DATA.[L600_VESTED_YEARS]&#xD;&#xA;      ,DATA.[L600_QUALIFIED_YEARS]&#xD;&#xA;      ,DATA.[L600_CREDITED_HOURS]&#xD;&#xA;      ,DATA.[L600_FROZEN_BENEFITS]&#xD;&#xA;      ,DATA.[L666_VESTED_YEARS]&#xD;&#xA;      ,DATA.[L666_QUALIFIED_YEARS]&#xD;&#xA;      ,DATA.[L666_CREDITED_HOURS]&#xD;&#xA;      ,DATA.[L666_FROZEN_BENEFITS]&#xD;&#xA;      ,DATA.[L700_VESTED_YEARS]&#xD;&#xA;      ,DATA.[L700_QUALIFIED_YEARS]&#xD;&#xA;      ,DATA.[L700_CREDITED_HOURS]&#xD;&#xA;      ,DATA.[L700_FROZEN_BENEFITS]&#xD;&#xA;      ,DATA.[L52_VESTED_YEARS]&#xD;&#xA;      ,DATA.[L52_QUALIFIED_YEARS]&#xD;&#xA;      ,DATA.[L52_CREDITED_HOURS]&#xD;&#xA;      ,DATA.[L52_FROZEN_BENEFITS]&#xD;&#xA;      ,DATA.[L161_VESTED_YEARS]&#xD;&#xA;      ,DATA.[L161_QUALIFIED_YEARS]&#xD;&#xA;      ,DATA.[L161_CREDITED_HOURS]&#xD;&#xA;      ,DATA.[L161_FROZEN_BENEFITS]&#xD;&#xA;      ,DATA.[IAP_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[L52_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[L161_ENDING_BALANCE_FOR_PRIOR_YEAR]&#xD;&#xA;      ,DATA.[IAP_PRIOR_ADJUSTMENT]&#xD;&#xA;      ,DATA.[L52_PRIOR_ADJUSTMENT]&#xD;&#xA;      ,DATA.[L161_PRIOR_ADJUSTMENT]&#xD;&#xA;      ,DATA.[IAP_NET_INVESTMENT_INCOME]&#xD;&#xA;      ,DATA.[L52_NET_INVESTMENT_INCOME]&#xD;&#xA;      ,DATA.[L161_NET_INVESTMENT_INCOME]&#xD;&#xA;      ,DATA.[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2]&#xD;&#xA;      ,DATA.[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC]&#xD;&#xA;      ,DATA.[IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC]&#xD;&#xA;      ,DATA.[IAP_PERCENTAGE_OF_COMPENSATION]&#xD;&#xA;      ,DATA.[IAP_PERCENTAGE_OF_COMPENSATION_IALC]&#xD;&#xA;      ,DATA.[IAP_PERCENTAGE_OF_COMPENSATION_FALC]&#xD;&#xA;      ,DATA.[IAP_PAYOUTS]&#xD;&#xA;      ,DATA.[L52_PAYOUTS]&#xD;&#xA;      ,DATA.[L161_PAYOUTS]&#xD;&#xA;      ,DATA.[IAP_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;      ,DATA.[L52_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;      ,DATA.[L161_BALANCE_FOR_CURRENT_YEAR]&#xD;&#xA;      ,DATA.[ADDR_CATEGORY_ID]&#xD;&#xA;      ,DATA.[ADDR_CATEGORY_VALUE]&#xD;&#xA;      ,DATA.[BATCH_ID]&#xD;&#xA;      ,DATA.[CREATED_BY]&#xD;&#xA;      ,DATA.[CREATED_DATE]&#xD;&#xA;      ,DATA.[MODIFIED_BY]&#xD;&#xA;      ,DATA.[MODIFIED_DATE]&#xD;&#xA;      ,DATA.[UPDATE_SEQ]&#xD;&#xA;      ,DATA.[PERSON_NAME]&#xD;&#xA;      ,DATA.[END_DATE]&#xD;&#xA;      ,DATA.[MPI_VESTED_DATE]&#xD;&#xA;      ,DATA.[COUNTRY_DESCRIPTION]&#xD;&#xA;      ,DATA.[IAP_HOURS_A2]&#xD;&#xA;      ,DATA.[CORRECTED_FLAG]&#xD;&#xA;      ,DATA.[ELIGIBLE_ACTIVE_INCR_FLAG]&#xD;&#xA;      ,DATA.[MD_FLAG]&#xD;&#xA;      ,DATA.[RETR_SPECIAL_ACCOUNT_FLAG]&#xD;&#xA;      ,DATA.REEMPLOYED_UNDER_65_FLAG  --RID 72929 Fixed statement issue&#xD;&#xA;      ,DATA.[MPI_RETIREE_FLAG]&#xD;&#xA;      ,DATA.[LOCAL600_RETIREE_FLAG]&#xD;&#xA;      ,DATA.[LOCAL666_RETIREE_FLAG]&#xD;&#xA;      ,DATA.[LOCAL700_RETIREE_FLAG]&#xD;&#xA;      ,DATA.[LOCAL52_RETIREE_FLAG]&#xD;&#xA;      ,DATA.[LOCAL161_RETIREE_FLAG]&#xD;&#xA;      ,DATA.PENSION_ONLY_FLAG&#xD;&#xA;      ,DATA.[IAP_LUMSUM_BALANCE]&#xD;&#xA;      ,DATA.[EST_IAP_LIFE_ANNUITY]&#xD;&#xA;      ,DATA.[EST_IAP_JS100_ANNUITY]&#xD;&#xA;      ,DATA.ADDR_LINE_1,&#xD;&#xA;      DATA.ADDR_LINE_2,&#xD;&#xA;      DATA.ADDR_CITY,&#xD;&#xA;      DATA.ADDR_STATE_ID AS ADDR_STATE_ID,&#xD;&#xA;      DATA.ADDR_STATE_VALUE,&#xD;&#xA;   DATA.ADDR_COUNTRY_ID AS ADDR_COUNTRY_ID,&#xD;&#xA;      DATA.ADDR_COUNTRY_VALUE,&#xD;&#xA;   DATA.ADDR_ZIP_CODE,&#xD;&#xA;      CASE WHEN DATA.ADDR_COUNTRY_VALUE = '0001' THEN 'USA' &#xD;&#xA;   ELSE DATA.COUNTRY_DESCRIPTION END AS COUNTRY_DESCRIPTION,       &#xD;&#xA;P.PERSON_ID,P.SSN AS PERSON_SSN, P.DATE_OF_BIRTH AS PERSON_DOB, P.MPI_PERSON_ID, P.VIP_FLAG &#xD;&#xA;FROM SGT_ANNUAL_STATEMENT_BATCH_DATA DATA WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON P WITH(NOLOCK) ON P.PERSON_ID = DATA.PERSON_ID&#xD;&#xA;--LEFT OUTER JOIN SGT_PERSON_ADDRESS SPAD WITH(NOLOCK) ON  P.PERSON_ID = SPAD.PERSON_ID&#xD;&#xA;--      AND SPAD.ADDRESS_ID = (SELECT TOP(1) A.ADDRESS_ID FROM SGT_PERSON_ADDRESS A &#xD;&#xA;--                                          INNER JOIN SGT_PERSON_ADDRESS_CHKLIST C ON A.ADDRESS_ID = C.ADDRESS_ID&#xD;&#xA;--                                          WHERE A.START_DATE &lt;= GETDATE() AND (A.END_DATE IS NULL OR A.END_DATE &gt;= GETDATE())&#xD;&#xA;--                                          AND A.PERSON_ID = P.PERSON_ID &#xD;&#xA;--                                          ORDER BY CASE WHEN C.ADDRESS_TYPE_VALUE = 'MAIL'  THEN 0 &#xD;&#xA;--                                                              WHEN C.ADDRESS_TYPE_VALUE = 'PYSL' THEN 1&#xD;&#xA;--                                                              ELSE 2 END  ASC)&#xD;&#xA;--LEFT OUTER JOIN SGS_CODE_VALUE CD ON CD.CODE_ID = SPAD.ADDR_COUNTRY_ID AND CD.CODE_VALUE = SPAD.ADDR_COUNTRY_VALUE&#xD;&#xA;--LEFT OUTER JOIN SGS_CODE_VALUE STD ON STD.CODE_ID = SPAD.ADDR_STATE_ID AND STD.CODE_VALUE = SPAD.ADDR_STATE_VALUE&#xD;&#xA;WHERE DATA.COMPUTATIONAL_YEAR=@YEAR &#xD;&#xA;AND P.PERSON_ID=@PERSON_ID">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptIAPOverpaymentReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT SP.MPI_PERSON_ID , CONVERT(DATE,@cutoffdate) AS CUTOFFDATE,&#xD;&#xA;SP.LAST_NAME,SP.FIRST_NAME,&#xD;&#xA;CASE WHEN ISNULL(AXA.PERSON_ID,0) &gt; 0 THEN 'RETIREE'&#xD;&#xA;WHEN SP.DATE_OF_DEATH IS NOT NULL THEN 'DECEASED' &#xD;&#xA;WHEN SPA.STATUS_VALUE = 'ACTV' THEN 'ACTIVE'&#xD;&#xA;WHEN SPA.STATUS_VALUE = 'INAC' THEN 'INACTIVE'&#xD;&#xA;WHEN SPA.STATUS_VALUE = 'RETR' THEN 'RETIREE'&#xD;&#xA;ELSE SPA.STATUS_VALUE END CATEGORY,&#xD;&#xA;ISNULL(CONVERT(VARCHAR(10),CONVERT(DATE,AXA.RETIREMENT_DATE)),'') AS RETIREMENT_DATE,&#xD;&#xA;ISNULL(CONVERT(VARCHAR(10),CONVERT(DATE,SP.DATE_OF_DEATH)),'') AS DATE_OF_DEATH,&#xD;&#xA;SUM(ISNULL(RC.IAP_BALANCE_AMOUNT,0) + ISNULL(RC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0) + ISNULL(RC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) OVERPAYMENT_AMOUNT &#xD;&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT SPA ON RC.PERSON_ACCOUNT_ID = SPA.PERSON_ACCOUNT_ID AND PLAN_ID = 1&#xD;&#xA;INNER JOIN SGT_PERSON SP ON SP.PERSON_ID = SPA.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN &#xD;&#xA;(&#xD;&#xA;SELECT P.PERSON_ID,MAX(P.RETIREMENT_DATE) RETIREMENT_DATE FROM SGT_BENEFIT_APPLICATION P &#xD;&#xA;           INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL Q ON P.BENEFIT_APPLICATION_ID = Q.BENEFIT_APPLICATION_ID&#xD;&#xA;           INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = Q.PLAN_BENEFIT_ID AND X.PLAN_ID = 1&#xD;&#xA;           WHERE P.APPLICATION_STATUS_VALUE = 'APPR' &#xD;&#xA;           AND (Q.BENEFIT_SUBTYPE_VALUE IS NULL OR Q.BENEFIT_SUBTYPE_VALUE &lt;&gt; 'MIND') AND P.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL')&#xD;&#xA;           GROUP BY P.PERSON_ID&#xD;&#xA;           --ORDER BY RETIREMENT_DATE DESC&#xD;&#xA;)AXA ON SP.PERSON_ID = AXA.PERSON_ID           &#xD;&#xA;WHERE CONVERT(DATE,rc.TRANSACTION_DATE) &lt;=@cutoffdate&#xD;&#xA;GROUP BY SP.MPI_PERSON_ID ,SP.DATE_OF_DEATH,SPA.STATUS_VALUE,SP.PERSON_ID,AXA.PERSON_ID,AXA.RETIREMENT_DATE,DATE_OF_DEATH,SP.LAST_NAME,SP.FIRST_NAME&#xD;&#xA;HAVING &#xD;&#xA;SUM(ISNULL(RC.IAP_BALANCE_AMOUNT,0) + ISNULL(RC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0) + ISNULL(RC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &lt; 0 and&#xD;&#xA;SUM(ISNULL(RC.IAP_BALANCE_AMOUNT,0) + ISNULL(RC.LOCAL52_SPECIAL_ACCT_BAL_AMOUNT,0) + ISNULL(RC.LOCAL161_SPECIAL_ACCT_BAL_AMOUNT,0)) &lt; @idecBalance&#xD;&#xA;ORDER BY SP.LAST_NAME">
      <parameters>
        <parameter ID="@cutoffdate" sfwDataType="DateTime" />
        <parameter ID="@idecBalance" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetAmountPaidInLastCompYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;PHH.PAYEE_ACCOUNT_ID,&#xD;&#xA;SUM(CASE WHEN (ITEM_TYPE_DIRECTION = 1 OR ALLOW_ROLLOVER_CODE_VALUE = 'RRED') AND REISSUE_ITEMS_FLAG = 'N' &#xD;&#xA; THEN (PHD.AMOUNT * PIT.ITEM_TYPE_DIRECTION) ELSE 0 END) AS PAID_GROSS_AMOUNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER PHH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;INNER  JOIN SGT_PERSON SP WITH(NOLOCK) ON SP.PERSON_ID = PA.PERSON_ID &#xD;&#xA;INNER JOIN SGT_PAYEE_BENEFIT_ACCOUNT PBA ON PA.PAYEE_BENEFIT_ACCOUNT_ID = PBA.PAYEE_BENEFIT_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PART WITH(NOLOCK) ON PBA.PERSON_ID = PART.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DETAIL PHD(NOLOCK) ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION SPHD WITH(NOLOCK) ON SPHD.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT(NOLOCK) ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;WHERE PHH.PAYEE_ACCOUNT_ID = @PAYEE_ACCOUNT_ID --AND YEAR(PHH.PAYMENT_DATE) = YEAR(GETDATE()) - 1&#xD;&#xA;AND ((YEAR(PHH.PAYMENT_DATE) = YEAR(GETDATE()) - 1) OR (YEAR(PART.DATE_OF_DEATH) = YEAR(GETDATE()) - 1 AND YEAR(PHH.PAYMENT_DATE) &gt;= YEAR(GETDATE()) - 1))&#xD;&#xA;AND (PA.RETIREE_INCR_FLAG &lt;&gt; 'Y' OR PA.RETIREE_INCR_FLAG IS NULL) -- we are not retrieving retiree increase payee accounts from main query&#xD;&#xA;AND SPHD.DISTRIBUTION_STATUS_VALUE not in ('CNLD' ,'CDRE','RCMD') AND PHH.PLAN_ID = @PLAN_ID&#xD;&#xA;GROUP BY PHH.PAYEE_ACCOUNT_ID">
      <parameters>
        <parameter ID="@PAYEE_ACCOUNT_ID" sfwDataType="int" />
        <parameter ID="@PLAN_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateCorrectSSNAndMPIDBasedOnPersonId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE D SET D.PERSON_SSN = SP.SSN , D.MPI_PERSON_ID = SP.MPI_PERSON_ID&#xD;&#xA;FROM SGT_DATA_EXTRACTION_BATCH_INFO D &#xD;&#xA;INNER JOIN SGT_PERSON SP ON D.PERSON_ID = SP.PERSON_ID&#xD;&#xA;INNER JOIN SGT_YEAR_END_DATA_EXTRACTION_HEADER H ON H.YEAR_END_DATA_EXTRACTION_HEADER_ID = D.YEAR_END_DATA_EXTRACTION_HEADER_ID&#xD;&#xA;WHERE D.PERSON_SSN &lt;&gt; SP.SSN AND H.YEAR = @EXECUTIONYEAR">
      <parameters>
        <parameter ID="@EXECUTIONYEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="WorkHistoryforHealthEligibilityParticipant" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" SELECT * FROM SGT_HEALTH_ELIGIBLITY_WORKHISTORY_DATA WITH(NOLOCK)&#xD;&#xA;WHERE SSN = @lstrSSNDecrypted">
      <parameters>
        <parameter ID="@lstrSSNDecrypted" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="WorkHistoryforDataExtractionParticipant" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGT_DATA_EXTRACTION_WORKHISTORY_DATA WITH(NOLOCK)&#xD;&#xA;WHERE SSN = @SSN">
      <parameters>
        <parameter ID="@SSN" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="GetEGWPPersonAccount" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;SPA.*,SP.PLAN_CODE istrPlanCode , SP.MERGER_DATE as idtMergerDate&#xD;&#xA;FROM SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGT_PERSON SPPR ON SPA.PERSON_ID = SPPR.PERSON_ID&#xD;&#xA;INNER JOIN ( SELECT SSN FROM SGT_HEALTH_ELIGIBLITY_WORKHISTORY_DATA GROUP BY SSN) SHEW ON SPPR.SSN = SHEW.SSN&#xD;&#xA;INNER JOIN SGT_PLAN SP WITH(NOLOCK) ON SP.PLAN_ID = SPA.PLAN_ID&#xD;&#xA;&#xD;&#xA; ">
      <parameters />
    </query>
    <query ID="GetEGWPHealthElibilityDetails" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT [EGWP_DETAILS_ID]&#xD;&#xA;      ,[MPI_PERSON_ID]&#xD;&#xA;      ,[RETIREMENT_DATE]&#xD;&#xA;      ,[RETIREMENT_STATUS]&#xD;&#xA;      ,[STATUS_DATE]&#xD;&#xA;      ,[DISABLED_FLAG]&#xD;&#xA;      ,[CREATED_BY]&#xD;&#xA;      ,[CREATED_DATE]&#xD;&#xA;      ,[MODIFIED_BY]&#xD;&#xA;      ,[MODIFIED_DATE]&#xD;&#xA;      ,[UPDATE_SEQ]&#xD;&#xA;  FROM [dbo].[SGT_EGWP_DETAILS]">
      <parameters />
    </query>
    <query ID="GetExistingDataForpensionActuaryFromOpus" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT *&#xD;&#xA;  FROM [dbo].SGT_PENSION_ACTUARY WHERE [COMPUTATIONAL_YEAR]=@YEARS">
      <parameters>
        <parameter ID="@YEARS" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="DeleteRecordsIfExistfortheYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DELETE FROM  [dbo].SGT_PENSION_ACTUARY where [COMPUTATIONAL_YEAR]=@YEARS">
      <parameters>
        <parameter ID="@YEARS" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="DeleteSelectedParticipants" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DELETE FROM SGT_DATA_EXTRACTION_BATCH_INFO &#xD;&#xA;WHERE YEAR_END_DATA_EXTRACTION_HEADER_ID = @YEAR_END_DATA_EXTRACTION_HEADER_ID &#xD;&#xA;AND ((@TempTable = 'Y' and PERSON_SSN IN (SELECT SSN FROM TEMP_TABLE_FOR_ANNUAL_BATCHES)) OR  @TempTable = 'N')&#xD;&#xA;">
      <parameters>
        <parameter ID="@YEAR_END_DATA_EXTRACTION_HEADER_ID" sfwDataType="int" />
        <parameter ID="@TempTable" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="CheckForYearEndDataExtractionInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; *  &#xA;FROM&#xA;&#x9; SGT_PARTICIPANT_INFORMATION_DATA_EXTRACTION WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; YEAR = @YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="GetUNPRYearEndDataExtractionInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; TOP (@Count) * &#xA;FROM&#xA;&#x9; SGT_PARTICIPANT_INFORMATION_DATA_EXTRACTION WITH(NOLOCK) &#xA;WHERE&#xA;&#x9;  PROCESS_STATUS_VALUE = 'UNPR' AND&#xA;&#x9; YEAR = @YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
        <parameter ID="@Count" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CountUNPRYearEndDataExtractionInfo" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; COUNT(1) &#xA;FROM&#xA;&#x9; SGT_PARTICIPANT_INFORMATION_DATA_EXTRACTION WITH(NOLOCK) &#xA;WHERE&#xA;&#x9;  PROCESS_STATUS_VALUE = 'UNPR' AND&#xA;&#x9; YEAR = @YEAR">
      <parameters>
        <parameter ID="@YEAR" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="AnnualStatementIAPHistoryForSinglePerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @STATEMENT_YEAR INT&#xD;&#xA;SELECT @STATEMENT_YEAR = MAX(COMPUTATIONAL_YEAR) FROM SGT_ANNUAL_STATEMENT_BATCH_DATA WHERE PERSON_ID = @PERSON_ID&#xD;&#xA;--SELECT @STATEMENT_YEAR = YEAR(GETDATE())-1&#xD;&#xA;;WITH STATEMENT_YEARS&#xD;&#xA;AS (&#xD;&#xA;SELECT 1 AS YEARBAR, @STATEMENT_YEAR-4 AS [YEARS]&#xD;&#xA;UNION&#xD;&#xA;SELECT 2 AS YEARBAR, @STATEMENT_YEAR-3 AS [YEARS]&#xD;&#xA;UNION&#xD;&#xA;SELECT 3 AS YEARBAR, @STATEMENT_YEAR-2 AS [YEARS]&#xD;&#xA;UNION&#xD;&#xA;SELECT 4 AS YEARBAR, @STATEMENT_YEAR-1 AS [YEARS]&#xD;&#xA;UNION&#xD;&#xA;SELECT 5 AS YEARBAR, @STATEMENT_YEAR AS [YEARS]&#xD;&#xA;)&#xD;&#xA;SELECT SPB.MPI_PERSON_ID, SPB.PERSON_ID, SPB.YEARS AS PLAN_YEAR, SD.PERSON_NAME --, COMPUTATIONAL_YEAR AS PLAN_YEAR --, ISNULL(ISNULL(SPB.EMAIL_ADDRESS_1, SPB.EMAIL_ADDRESS_2),'') AS EMAIL&#xD;&#xA;, CASE WHEN SD.PERSON_ID IS NULL THEN 0 ELSE (IAP_ENDING_BALANCE_FOR_PRIOR_YEAR + IAP_PRIOR_ADJUSTMENT + IAP_NET_INVESTMENT_INCOME + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2 + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC&#xD;&#xA;+ IAP_PERCENTAGE_OF_COMPENSATION + IAP_PERCENTAGE_OF_COMPENSATION_IALC + IAP_PERCENTAGE_OF_COMPENSATION_FALC + IAP_PAYOUTS) END AS IAP_BALANCE&#xD;&#xA;, CASE WHEN SD.PERSON_ID IS NULL THEN 0 ELSE (L52_ENDING_BALANCE_FOR_PRIOR_YEAR + L52_PRIOR_ADJUSTMENT + L52_NET_INVESTMENT_INCOME + L52_PAYOUTS) END AS L52_BALANCE&#xD;&#xA;, CASE WHEN SD.PERSON_ID IS NULL THEN 0 ELSE (L161_ENDING_BALANCE_FOR_PRIOR_YEAR + L161_PRIOR_ADJUSTMENT + L161_NET_INVESTMENT_INCOME + L161_PAYOUTS) END AS L161_BALANCE&#xD;&#xA;, CASE WHEN SD.PERSON_ID IS NULL THEN 0 ELSE (IAP_ENDING_BALANCE_FOR_PRIOR_YEAR + IAP_PRIOR_ADJUSTMENT + IAP_NET_INVESTMENT_INCOME + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2 + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_IALC + IAP_HOURLY_CONTRIBUTIONS_IAPHOURA2_FALC&#xD;&#xA;+ IAP_PERCENTAGE_OF_COMPENSATION + IAP_PERCENTAGE_OF_COMPENSATION_IALC + IAP_PERCENTAGE_OF_COMPENSATION_FALC + IAP_PAYOUTS) &#xD;&#xA;+ (L52_ENDING_BALANCE_FOR_PRIOR_YEAR + L52_PRIOR_ADJUSTMENT + L52_NET_INVESTMENT_INCOME + L52_PAYOUTS) &#xD;&#xA;+ (L161_ENDING_BALANCE_FOR_PRIOR_YEAR + L161_PRIOR_ADJUSTMENT + L161_NET_INVESTMENT_INCOME + L161_PAYOUTS) END AS TOTAL_IAP_BALANCE&#xD;&#xA;, YEARBAR&#xD;&#xA;FROM (SELECT MPI_PERSON_ID, PERSON_ID, YEARS, YEARBAR FROM SGT_PERSON_BASE, STATEMENT_YEARS WHERE PERSON_ID = @PERSON_ID) SPB &#xD;&#xA;LEFT OUTER JOIN SGT_ANNUAL_STATEMENT_BATCH_DATA SD ON SPB.PERSON_ID = SD.PERSON_ID&#xD;&#xA;AND SPB.YEARS = SD.COMPUTATIONAL_YEAR &#xD;&#xA;ORDER BY SPB.YEARS ASC">
      <parameters>
        <parameter ID="@PERSON_ID" />
      </parameters>
    </query>
    <query ID="GetLastPensionDataExtractionYear" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT TOP 1 YEAR &#xA;FROM SGT_YEAR_END_DATA_EXTRACTION_HEADER WITH(NOLOCK)&#xA;ORDER BY YEAR DESC">
      <parameters />
    </query>
    <query ID="GetRetireeIAPBalance" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;      SP.MPI_PERSON_ID,&#xD;&#xA;      SP.FIRST_NAME,SP.LAST_NAME,SBA.BENEFIT_APPLICATION_ID, &#xD;&#xA;&#x9;  SP.DATE_OF_DEATH,&#xD;&#xA;      SBA.RETIREMENT_DATE ,&#xD;&#xA;      SCVA.DESCRIPTION AS BENEFIT_TYPE,&#xD;&#xA;      SCV.DESCRIPTION AS RETIREMENT_TYPE,&#xD;&#xA;&#x9;  cv.DESCRIPTION AS BENEFIT_OPTION,&#xD;&#xA;      SUM(CASE WHEN  TRANSACTION_TYPE_VALUE = 'PMNT' AND YEAR(RC1.TRANSACTION_DATE) &lt;= YEAR(GETDATE())- 1 THEN RC1.IAP_BALANCE_AMOUNT &#xD;&#xA;           WHEN  (TRANSACTION_TYPE_VALUE &lt;&gt; 'PMNT' OR TRANSACTION_TYPE_VALUE IS NULL) AND YEAR(RC1.EFFECTIVE_DATE) &lt;= YEAR(GETDATE())- 1 THEN IAP_BALANCE_AMOUNT ELSE 0 END) IAP_BALANCE,&#xD;&#xA;      SUM(RC1.IAP_BALANCE_AMOUNT) TO_DATE_BALANCE,SBA.RETIREMENT_DATE PROCESSED_DATE&#xD;&#xA;    --  CONVERT(varchar(10), DATEADD(YEAR, -1, DATEADD(yy, DATEDIFF(yy,0,GETDATE()) + 1, -1)),101) AS CUTOFFDATE &#xD;&#xA; FROM SGT_PERSON SP WITH(NOLOCK) &#xD;&#xA;      INNER JOIN SGT_PERSON_ACCOUNT SPA WITH(NOLOCK) ON SP.PERSON_ID = SPA.PERSON_ID AND SPA.PLAN_ID = 1&#xD;&#xA;                 INNER  JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION RC1 WITH(NOLOCK) &#xD;&#xA;                 ON SPA.PERSON_ACCOUNT_ID = RC1.PERSON_ACCOUNT_ID &#xD;&#xA;      INNER JOIN SGT_BENEFIT_APPLICATION SBA WITH(NOLOCK) ON SP.PERSON_ID = SBA.PERSON_ID &#xD;&#xA;      INNER JOIN SGT_BENEFIT_APPLICATION_DETAIL SBAD WITH(NOLOCK)ON SBA.BENEFIT_APPLICATION_ID = SBAD.BENEFIT_APPLICATION_ID&#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR X ON X.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID AND X.PLAN_ID = 1 &#xD;&#xA;      INNER JOIN SGT_PLAN_BENEFIT_XR PBXR ON PBXR.PLAN_BENEFIT_ID = SBAD.PLAN_BENEFIT_ID&#xD;&#xA;&#x9;  LEFT OUTER JOIN SGS_CODE_VALUE CV ON X.BENEFIT_OPTION_VALUE = CV.CODE_VALUE&#xD;&#xA;      LEFT OUTER JOIN SGS_CODE_VALUE SCV WITH(NOLOCK) ON SCV.CODE_ID = SBAD.BENEFIT_SUBTYPE_ID AND SCV.CODE_VALUE = SBAD.BENEFIT_SUBTYPE_VALUE &#xD;&#xA;                 LEFT OUTER JOIN SGS_CODE_VALUE SCVA ON SCVA.CODE_ID = SBA.BENEFIT_TYPE_ID AND SCVA.CODE_VALUE = SBA.BENEFIT_TYPE_VALUE&#xD;&#xA;                 WHERE SBA.APPLICATION_STATUS_VALUE = 'APPR' AND SBA.BENEFIT_TYPE_VALUE IN ('RTMT','DSBL')&#xD;&#xA;                 AND (SBA.MIN_DISTRIBUTION_FLAG IS NULL OR SBA.MIN_DISTRIBUTION_FLAG &lt;&gt; 'Y')&#xD;&#xA;                  AND SBA.RETIREMENT_DATE &gt;= @RetirementFromDate AND SBA.RETIREMENT_DATE &lt;= @RetirementToDate&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; AND SBAD.BENEFIT_APPLICATION_DETAIL_ID NOT IN (SELECT BENEFIT_APPLICATION_DETAIL_ID FROM SGT_PAYEE_ACCOUNT PYA&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PYA.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE PYA.BENEFIT_APPLICATION_DETAIL_ID = SBAD.BENEFIT_APPLICATION_DETAIL_ID) &#xD;&#xA;                 GROUP BY SP.MPI_PERSON_ID,SP.FIRST_NAME,SP.LAST_NAME,SBA.BENEFIT_APPLICATION_ID,SP.DATE_OF_DEATH,SCV.DESCRIPTION,SBA.RETIREMENT_DATE,SCVA.DESCRIPTION,cv.DESCRIPTION&#xD;&#xA;                 HAVING  SUM(CASE WHEN  TRANSACTION_TYPE_VALUE = 'PMNT' AND YEAR(RC1.TRANSACTION_DATE) &lt;= YEAR(GETDATE())- 1 THEN RC1.IAP_BALANCE_AMOUNT &#xD;&#xA;                                                WHEN  (TRANSACTION_TYPE_VALUE &lt;&gt; 'PMNT' OR TRANSACTION_TYPE_VALUE IS NULL) AND YEAR(RC1.EFFECTIVE_DATE) &lt;= YEAR(GETDATE())- 1 THEN IAP_BALANCE_AMOUNT ELSE 0 END) &gt;0 &#xD;&#xA;                 ORDER BY SBA.RETIREMENT_DATE DESC">
      <parameters>
        <parameter ID="@RetirementFromDate" />
        <parameter ID="@RetirementToDate" />
      </parameters>
    </query>
  </queries>
  <attributes>
    <attribute sfwValue="data_extraction_batch_info_id" sfwType="Column" sfwKeyNo="1" sfwIsIdentity="True" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="DataExtractionBatchInfoId" sfwIsSequence="False" sfwCaption="ID" />
    <attribute sfwValue="year_end_data_extraction_header_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="YearEndDataExtractionHeaderId" sfwIsSequence="False" sfwCaption="Year End Data Extraction Header Id" />
    <attribute sfwValue="person_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="PersonId" sfwIsSequence="False" sfwCaption="Person Id" />
    <attribute sfwValue="person_name" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="PersonName" sfwIsSequence="False" sfwCaption="Person Name" />
    <attribute sfwValue="person_ssn" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="256" sfwIsNull="True" ID="PersonSsn" sfwIsSequence="False" sfwCaption="Person Ssn" />
    <attribute sfwType="Description" ID="PersonGenderDescription" sfwCaption="Person Gender" sfwValue="person_gender_description" />
    <attribute sfwValue="person_gender_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="PersonGenderId" sfwCodeID="6014" sfwIsSequence="False" sfwCaption="Person Gender" />
    <attribute sfwValue="person_gender_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="PersonGenderValue" sfwIsSequence="False" sfwCaption="Person Gender" />
    <attribute sfwValue="person_dob" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="PersonDob" sfwIsSequence="False" sfwCaption="Person Dob" />
    <attribute sfwValue="participant_date_of_death" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="ParticipantDateOfDeath" sfwIsSequence="False" sfwCaption="Participant Date Of Death" />
    <attribute sfwValue="beneficiary_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="BeneficiaryId" sfwIsSequence="False" sfwCaption="Beneficiary Id" />
    <attribute sfwValue="beneficiary_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="BeneficiaryFlag" sfwIsSequence="False" sfwCaption="Beneficiary Flag" />
    <attribute sfwValue="beneficiary_name" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="True" ID="BeneficiaryName" sfwIsSequence="False" sfwCaption="Beneficiary Name" />
    <attribute sfwValue="beneficiary_ssn" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="256" sfwIsNull="True" ID="BeneficiarySsn" sfwIsSequence="False" sfwCaption="Beneficiary Ssn" />
    <attribute sfwType="Description" ID="BeneficiaryGenderDescription" sfwCaption="Beneficiary Gender" sfwValue="beneficiary_gender_description" />
    <attribute sfwValue="beneficiary_gender_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="BeneficiaryGenderId" sfwCodeID="6014" sfwIsSequence="False" sfwCaption="Beneficiary Gender" />
    <attribute sfwValue="beneficiary_gender_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="BeneficiaryGenderValue" sfwIsSequence="False" sfwCaption="Beneficiary Gender" />
    <attribute sfwValue="beneficiary_dob" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="BeneficiaryDob" sfwIsSequence="False" sfwCaption="Beneficiary Dob" />
    <attribute sfwType="Description" ID="StatusCodeDescription" sfwCaption="Status Code" sfwValue="status_code_description" />
    <attribute sfwValue="status_code_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="StatusCodeId" sfwCodeID="7052" sfwIsSequence="False" sfwCaption="Status Code" />
    <attribute sfwValue="status_code_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="StatusCodeValue" sfwIsSequence="False" sfwCaption="Status Code" />
    <attribute sfwValue="total_qualified_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="TotalQualifiedYears" sfwIsSequence="False" sfwCaption="Total Qualified Years" />
    <attribute sfwType="Description" ID="ParticipantStateDescription" sfwCaption="Participant State" sfwValue="participant_state_description" />
    <attribute sfwValue="participant_state_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="ParticipantStateId" sfwCodeID="150" sfwIsSequence="False" sfwCaption="Participant State" />
    <attribute sfwValue="participant_state_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="ParticipantStateValue" sfwIsSequence="False" sfwCaption="Participant State" />
    <attribute sfwValue="last_qf_yr_before_bis" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="LastQfYrBeforeBis" sfwIsSequence="False" sfwCaption="Last Qf Yr Before Bis" />
    <attribute sfwValue="non_eligible_benefit" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="NonEligibleBenefit" sfwIsSequence="False" sfwCaption="Non Eligible Benefit" />
    <attribute sfwValue="accrued_benefit_for_prior_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="AccruedBenefitForPriorYear" sfwIsSequence="False" sfwCaption="Accrued Benefit For Prior Year" />
    <attribute sfwValue="accrued_benefit_till_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="AccruedBenefitTillLastCompYear" sfwIsSequence="False" sfwCaption="Accrued Benefit Till Last Comp Year" />
    <attribute sfwValue="total_ee_contribution_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="TotalEeContributionAmt" sfwIsSequence="False" sfwCaption="Total Ee Contribution Amt" />
    <attribute sfwValue="total_uvhp_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="TotalUvhpAmt" sfwIsSequence="False" sfwCaption="Total Uvhp Amt" />
    <attribute sfwValue="total_ee_interest_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="TotalEeInterestAmt" sfwIsSequence="False" sfwCaption="Total Ee Interest Amt" />
    <attribute sfwValue="total_uvhp_interest_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="TotalUvhpInterestAmt" sfwIsSequence="False" sfwCaption="Total Uvhp Interest Amt" />
    <attribute sfwValue="ytd_hours_for_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="YtdHoursForLastCompYear" sfwIsSequence="False" sfwCaption="Ytd Hours For Last Comp Year" />
    <attribute sfwValue="total_hours" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="TotalHours" sfwIsSequence="False" sfwCaption="Total Hours" />
    <attribute sfwValue="ytd_hours_before_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="YtdHoursBeforeLastCompYear" sfwIsSequence="False" sfwCaption="Ytd Hours Before Last Comp Year" />
    <attribute sfwValue="local_600_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="Local600Flag" sfwIsSequence="False" sfwCaption="Local 600 Flag" />
    <attribute sfwValue="local_600_premerger_total_qualified_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local600PremergerTotalQualifiedYears" sfwIsSequence="False" sfwCaption="Local 600 Premerger Total Qualified Years" />
    <attribute sfwValue="local_600_premerger_benefit" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="Local600PremergerBenefit" sfwIsSequence="False" sfwCaption="Local 600 Premerger Benefit" />
    <attribute sfwValue="local_666_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="Local666Flag" sfwIsSequence="False" sfwCaption="Local 666 Flag" />
    <attribute sfwValue="local_666_premerger_total_qualified_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local666PremergerTotalQualifiedYears" sfwIsSequence="False" sfwCaption="Local 666 Premerger Total Qualified Years" />
    <attribute sfwValue="local_666_premerger_benefit" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="Local666PremergerBenefit" sfwIsSequence="False" sfwCaption="Local 666 Premerger Benefit" />
    <attribute sfwValue="local_700_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="Local700Flag" sfwIsSequence="False" sfwCaption="Local 700 Flag" />
    <attribute sfwValue="local_700_premerger_total_qualified_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local700PremergerTotalQualifiedYears" sfwIsSequence="False" sfwCaption="Local 700 Premerger Total Qualified Years" />
    <attribute sfwValue="local_700_premerger_benefit" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="Local700PremergerBenefit" sfwIsSequence="False" sfwCaption="Local 700 Premerger Benefit" />
    <attribute sfwValue="local_52_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="Local52Flag" sfwIsSequence="False" sfwCaption="Local 52 Flag" />
    <attribute sfwValue="local_52_premerger_total_qualified_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local52PremergerTotalQualifiedYears" sfwIsSequence="False" sfwCaption="Local 52 Premerger Total Qualified Years" />
    <attribute sfwValue="local_52_premerger_benefit" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="Local52PremergerBenefit" sfwIsSequence="False" sfwCaption="Local 52 Premerger Benefit" />
    <attribute sfwValue="local_161_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="Local161Flag" sfwIsSequence="False" sfwCaption="Local 161 Flag" />
    <attribute sfwValue="local_161_premerger_total_qualified_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local161PremergerTotalQualifiedYears" sfwIsSequence="False" sfwCaption="Local 161 Premerger Total Qualified Years" />
    <attribute sfwValue="local_161_premerger_benefit" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="Local161PremergerBenefit" sfwIsSequence="False" sfwCaption="Local 161 Premerger Benefit" />
    <attribute sfwValue="monthly_benefit_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="MonthlyBenefitAmt" sfwIsSequence="False" sfwCaption="Monthly Benefit Amt" />
    <attribute sfwValue="non_taxable_amt_left" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="NonTaxableAmtLeft" sfwIsSequence="False" sfwCaption="Non Taxable Amt Left" />
    <attribute sfwValue="return_to_work_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="ReturnToWorkFlag" sfwIsSequence="False" sfwCaption="Return To Work Flag" />
    <attribute sfwValue="determination_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="DeterminationDate" sfwIsSequence="False" sfwCaption="Determination Date" />
    <attribute sfwValue="beneficiary_first_payment_receive_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="BeneficiaryFirstPaymentReceiveDate" sfwIsSequence="False" sfwCaption="Beneficiary First Payment Receive Date" />
    <attribute sfwValue="pension_stop_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="PensionStopDate" sfwIsSequence="False" sfwCaption="Pension Stop Date" />
    <attribute sfwValue="total_qualified_years_at_ret" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="TotalQualifiedYearsAtRet" sfwIsSequence="False" sfwCaption="Total Qualified Years At Ret" />
    <attribute sfwValue="total_qualified_hours_at_ret" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="TotalQualifiedHoursAtRet" sfwIsSequence="False" sfwCaption="Total Qualified Hours At Ret" />
    <attribute sfwValue="beneficiary_date_of_death" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="True" ID="BeneficiaryDateOfDeath" sfwIsSequence="False" sfwCaption="Beneficiary Date Of Death" />
    <attribute sfwValue="lump_amt_taken_in_last_comp_yr" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="LumpAmtTakenInLastCompYr" sfwIsSequence="False" sfwCaption="Lump Amt Taken In Last Comp Yr" />
    <attribute sfwType="Description" ID="RetirementTypeDescription" sfwCaption="Retirement Type" sfwValue="retirement_type_description" />
    <attribute sfwValue="retirement_type_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="RetirementTypeId" sfwCodeID="7053" sfwIsSequence="False" sfwCaption="Retirement Type" />
    <attribute sfwValue="retirement_type_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="RetirementTypeValue" sfwIsSequence="False" sfwCaption="Retirement Type" />
    <attribute sfwValue="ee_amt_prior_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="EeAmtPriorYear" sfwIsSequence="False" sfwCaption="Ee Amt Prior Year" />
    <attribute sfwValue="uvhp_amt_prior_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="UvhpAmtPriorYear" sfwIsSequence="False" sfwCaption="Uvhp Amt Prior Year" />
    <attribute sfwValue="created_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="False" ID="CreatedBy" sfwIsSequence="False" sfwCaption="Created By" />
    <attribute sfwValue="created_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="False" ID="CreatedDate" sfwIsSequence="False" sfwCaption="Created Date" />
    <attribute sfwValue="modified_by" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="50" sfwIsNull="False" ID="ModifiedBy" sfwIsSequence="False" sfwCaption="Modified By" />
    <attribute sfwValue="modified_date" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="datetime" sfwDBDataType="datetime" sfwIsNull="False" ID="ModifiedDate" sfwIsSequence="False" sfwCaption="Modified Date" />
    <attribute sfwValue="update_seq" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="False" ID="UpdateSeq" sfwIsSequence="False" sfwCaption="Update Seq" />
    <attribute sfwType="Description" ID="BenefitOptionCodeDescription" sfwCaption="Benefit Option Code" sfwValue="benefit_option_code_description" />
    <attribute sfwValue="benefit_option_code_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="BenefitOptionCodeId" sfwCodeID="7056" sfwIsSequence="False" sfwCaption="Benefit Option Code" />
    <attribute sfwValue="benefit_option_code_value" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="4" sfwIsNull="True" ID="BenefitOptionCodeValue" sfwIsSequence="False" sfwCaption="Benefit Option Code" />
    <attribute sfwValue="total_qf_yr_begining_of_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="TotalQfYrBeginingOfLastCompYear" sfwIsSequence="False" sfwCaption="Total Qf Yr Begining Of Last Comp Year" />
    <attribute sfwValue="ee_contribution_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="EeContributionAmt" sfwIsSequence="False" sfwCaption="Ee Contribution Amt" />
    <attribute sfwValue="uvhp_contribution_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="UvhpContributionAmt" sfwIsSequence="False" sfwCaption="Uvhp Contribution Amt" />
    <attribute sfwValue="mpi_person_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="20" sfwIsNull="True" ID="MpiPersonId" sfwIsSequence="False" sfwCaption="Mpi Person Id" />
    <attribute sfwValue="local_52_pension_credits" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,6" sfwIsNull="True" ID="Local52PensionCredits" sfwIsSequence="False" sfwCaption="Local 52 Pension Credits" />
    <attribute sfwValue="local_52_credited_hours" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local52CreditedHours" sfwIsSequence="False" sfwCaption="Local 52 Credited Hours" />
    <attribute sfwValue="local_600_pension_credits" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,6" sfwIsNull="True" ID="Local600PensionCredits" sfwIsSequence="False" sfwCaption="Local 600 Pension Credits" />
    <attribute sfwValue="local_600_credited_hours" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local600CreditedHours" sfwIsSequence="False" sfwCaption="Local 600 Credited Hours" />
    <attribute sfwValue="local_666_pension_credits" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,6" sfwIsNull="True" ID="Local666PensionCredits" sfwIsSequence="False" sfwCaption="Local 666 Pension Credits" />
    <attribute sfwValue="local_666_credited_hours" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local666CreditedHours" sfwIsSequence="False" sfwCaption="Local 666 Credited Hours" />
    <attribute sfwValue="local_700_pension_credits" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,6" sfwIsNull="True" ID="Local700PensionCredits" sfwIsSequence="False" sfwCaption="Local 700 Pension Credits" />
    <attribute sfwValue="local_700_credited_hours" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local700CreditedHours" sfwIsSequence="False" sfwCaption="Local 700 Credited Hours" />
    <attribute sfwValue="local_161_pension_credits" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,6" sfwIsNull="True" ID="Local161PensionCredits" sfwIsSequence="False" sfwCaption="Local 161 Pension Credits" />
    <attribute sfwValue="local_161_credited_hours" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="Local161CreditedHours" sfwIsSequence="False" sfwCaption="Local 161 Credited Hours" />
    <attribute sfwValue="ytd_hours_for_year_before_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="YtdHoursForYearBeforeLastCompYear" sfwIsSequence="False" sfwCaption="Ytd Hours For Year Before Last Comp Year" />
    <attribute sfwValue="accrued_benefit_till_previous_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="AccruedBenefitTillPreviousYear" sfwIsSequence="False" sfwCaption="Accrued Benefit Till Previous Year" />
    <attribute sfwValue="total_qf_yr_end_of_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="TotalQfYrEndOfLastCompYear" sfwIsSequence="False" sfwCaption="Total Qf Yr End Of Last Comp Year" />
    <attribute sfwValue="diff_accrued_benfit_for_late_hour" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="DiffAccruedBenfitForLateHour" sfwIsSequence="False" sfwCaption="Diff Accrued Benfit For Late Hour" />
    <attribute sfwValue="late_ee_contribution" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="LateEeContribution" sfwIsSequence="False" sfwCaption="Late Ee Contribution" />
    <attribute sfwValue="life_annuity_amt" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="11,2" sfwIsNull="True" ID="LifeAnnuityAmt" sfwIsSequence="False" sfwCaption="Life Annuity Amt" />
    <attribute sfwValue="md_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="MdFlag" sfwCaption="Md Flag" />
    <attribute sfwValue="plan_id" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="PlanId" sfwCaption="Plan Id" />
    <attribute sfwValue="total_vested_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="int" sfwDBDataType="int" sfwIsNull="True" ID="TotalVestedYears" sfwCaption="Total Vested Years" />
    <attribute sfwValue="vested_hours_for_last_comp_year" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="VestedHoursForLastCompYear" sfwCaption="Vested Hours For Last Comp Year" />
    <attribute sfwValue="mpi_late_hours_in_last_comp_year_for_prior_years" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="decimal" sfwDBDataType="numeric" sfwLength="14,4" sfwIsNull="True" ID="MpiLateHoursInLastCompYearForPriorYears" sfwCaption="Mpi Late Hours In Last Comp Year For Prior Years" />
    <attribute sfwValue="mpi_5500_status_code" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="Mpi5500StatusCode" sfwCaption="Mpi 5500 Status Code" />
    <attribute sfwValue="eligible_active_incr_flag" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="1" sfwIsNull="True" ID="EligibleActiveIncrFlag" sfwCaption="Eligible Active Incr Flag" />
    <attribute sfwValue="is_disability_conversion" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="char" sfwLength="1" sfwIsNull="True" ID="IsDisabilityConversion" sfwCaption="Is Disability Conversion" />
    <attribute sfwValue="is_converted_from_popup" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="char" sfwLength="1" sfwIsNull="True" ID="IsConvertedFromPopup" sfwCaption="Is Converted From Popup" />
    <attribute sfwValue="dro_model" sfwType="Column" sfwKeyNo="0" sfwIsIdentity="False" sfwDataType="string" sfwDBDataType="varchar" sfwLength="5" sfwIsNull="True" ID="DroModel" sfwCaption="Dro Model" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPersonSSNNonEncrypted" sfwValue="icdoDataExtractionBatchInfo.istrPersonSSNNonEncrypted" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtPersonDateofBirth" sfwValue="icdoDataExtractionBatchInfo.idtPersonDateofBirth" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBeneficiarySSNNonEncrypted" sfwValue="icdoDataExtractionBatchInfo.istrBeneficiarySSNNonEncrypted" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtBeneficiaryDateofBirth" sfwValue="icdoDataExtractionBatchInfo.idtBeneficiaryDateofBirth" />
    <attribute sfwDataType="int" sfwType="Property" ID="YEAR" sfwValue="icdoDataExtractionBatchInfo.YEAR" />
    <attribute sfwDataType="string" sfwType="Property" ID="UNIONCODE" sfwValue="icdoDataExtractionBatchInfo.UNION_CODE" />
  </attributes>
  <constraint />
  <rules />
  <initialload />
  <softerror />
  <harderror />
  <validatedelete />
  <delete />
  <groupslist />
  <checklist />
  <methods />
  <lifecycle />
  <objectmethods />
  <ExtraFields />
</entity>